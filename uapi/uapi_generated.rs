/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const CONFIG_SERIAL_8250_RUNTIME_UARTS: u32 = 4;
pub const CONFIG_MTRR: u32 = 1;
pub const CONFIG_ARCH_USES_HIGH_VMA_FLAGS: u32 = 1;
pub const CONFIG_RFKILL: u32 = 1;
pub const CONFIG_SPARSEMEM_VMEMMAP_ENABLE: u32 = 1;
pub const CONFIG_NET_9P_VIRTIO: u32 = 1;
pub const CONFIG_USB_COMMON: u32 = 1;
pub const CONFIG_NFS_V3: u32 = 1;
pub const CONFIG_FONT_AUTOSELECT: u32 = 1;
pub const CONFIG_DMARD06: u32 = 1;
pub const CONFIG_NET_VENDOR_MICROSEMI: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_MASQUERADE_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_NI: u32 = 1;
pub const CONFIG_RFKILL_INPUT: u32 = 1;
pub const CONFIG_NET_HANDSHAKE: u32 = 1;
pub const CONFIG_R8169: u32 = 1;
pub const CONFIG_PAGE_SHIFT: u32 = 12;
pub const CONFIG_NLS_ASCII: u32 = 1;
pub const CONFIG_NFS_COMMON: u32 = 1;
pub const CONFIG_CGROUP_NET_CLASSID: u32 = 1;
pub const CONFIG_TREE_RCU: u32 = 1;
pub const CONFIG_SYSVIPC_COMPAT: u32 = 1;
pub const CONFIG_CRC_CCITT: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_437: u32 = 1;
pub const CONFIG_CRYPTO_GCM: u32 = 1;
pub const CONFIG_ARCH_USE_BUILTIN_BSWAP: u32 = 1;
pub const CONFIG_SBITMAP: u32 = 1;
pub const CONFIG_SERIAL_8250_DEPRECATED_OPTIONS: u32 = 1;
pub const CONFIG_STACKPROTECTOR_STRONG: u32 = 1;
pub const CONFIG_IIO_TRIGGER: u32 = 1;
pub const CONFIG_INIT_STACK_ALL_ZERO: u32 = 1;
pub const CONFIG_ACPI_FAN: u32 = 1;
pub const CONFIG_RANDSTRUCT_NONE: u32 = 1;
pub const CONFIG_RTC_I2C_AND_SPI: u32 = 1;
pub const CONFIG_INTEL_IOMMU_PERF_EVENTS: u32 = 1;
pub const CONFIG_TMPFS: u32 = 1;
pub const CONFIG_FUNCTION_ALIGNMENT_4B: u32 = 1;
pub const CONFIG_NETFILTER_NETLINK: u32 = 1;
pub const CONFIG_DM_MIRROR: u32 = 1;
pub const CONFIG_DRM_I915_PREEMPT_TIMEOUT_COMPUTE: u32 = 7500;
pub const CONFIG_IPV6: u32 = 1;
pub const CONFIG_SCSI_DMA: u32 = 1;
pub const CONFIG_SIGNALFD: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_PERFORMANCE: u32 = 1;
pub const CONFIG_NET_VENDOR_MICREL: u32 = 1;
pub const CONFIG_NET_VENDOR_ASIX: u32 = 1;
pub const CONFIG_SND_HDA_INTEL: u32 = 1;
pub const CONFIG_WERROR: u32 = 1;
pub const CONFIG_PERF_EVENTS_INTEL_UNCORE: u32 = 1;
pub const CONFIG_SYSFS_SYSCALL: u32 = 1;
pub const CONFIG_KVM_GUEST: u32 = 1;
pub const CONFIG_UNWINDER_ORC: u32 = 1;
pub const CONFIG_HAVE_UID16: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_DEBUG_PAGEALLOC: u32 = 1;
pub const CONFIG_SECURITY_NETWORK: u32 = 1;
pub const CONFIG_CRYPTO_DRBG: u32 = 1;
pub const CONFIG_HOTPLUG_SMT: u32 = 1;
pub const CONFIG_AIO: u32 = 1;
pub const CONFIG_GENERIC_IRQ_SHOW: u32 = 1;
pub const CONFIG_BLOCK_LEGACY_AUTOLOAD: u32 = 1;
pub const CONFIG_NETFS_SUPPORT: u32 = 1;
pub const CONFIG_RPCSEC_GSS_KRB5: u32 = 1;
pub const CONFIG_PCI_PASID: u32 = 1;
pub const CONFIG_SND_DMA_SGBUF: u32 = 1;
pub const CONFIG_GENERIC_STRNLEN_USER: u32 = 1;
pub const CONFIG_PGTABLE_LEVELS: u32 = 5;
pub const CONFIG_QFMT_V2: u32 = 1;
pub const CONFIG_CRYPTO_ECB: u32 = 1;
pub const CONFIG_NET_VENDOR_MICROSOFT: u32 = 1;
pub const CONFIG_REGMAP: u32 = 1;
pub const CONFIG_PCI_ATS: u32 = 1;
pub const CONFIG_NET_VENDOR_8390: u32 = 1;
pub const CONFIG_MITIGATION_SPECTRE_BHI: u32 = 1;
pub const CONFIG_X86_BOOTPARAM_MEMORY_CORRUPTION_CHECK: u32 = 1;
pub const CONFIG_ARCH_HAS_ADD_PAGES: u32 = 1;
pub const CONFIG_ACPI_AC: u32 = 1;
pub const CONFIG_ARCH_HAS_MEMBARRIER_SYNC_CORE: u32 = 1;
pub const CONFIG_PREFIX_SYMBOLS: u32 = 1;
pub const CONFIG_HAVE_C_RECORDMCOUNT: u32 = 1;
pub const CONFIG_NET_VENDOR_VIA: u32 = 1;
pub const CONFIG_MAC80211_STA_HASH_MAX_SIZE: u32 = 0;
pub const CONFIG_DEBUG_WX: u32 = 1;
pub const CONFIG_TICK_ONESHOT: u32 = 1;
pub const CONFIG_ARCH_WANT_HUGE_PMD_SHARE: u32 = 1;
pub const CONFIG_PROVIDE_OHCI1394_DMA_INIT: u32 = 1;
pub const CONFIG_DRM: u32 = 1;
pub const CONFIG_HAVE_KERNEL_LZMA: u32 = 1;
pub const CONFIG_BCMA_POSSIBLE: u32 = 1;
pub const CONFIG_NF_REJECT_IPV6: u32 = 1;
pub const CONFIG_CRC64_ROCKSOFT: u32 = 1;
pub const CONFIG_HUGETLB_PAGE_OPTIMIZE_VMEMMAP: u32 = 1;
pub const CONFIG_NET_VENDOR_VERTEXCOM: u32 = 1;
pub const CONFIG_BLK_DEV_MD: u32 = 1;
pub const CONFIG_DMIID: u32 = 1;
pub const CONFIG_RELAY: u32 = 1;
pub const CONFIG_HAVE_KPROBES_ON_FTRACE: u32 = 1;
pub const CONFIG_CPUSETS: u32 = 1;
pub const CONFIG_NET_VENDOR_DAVICOM: u32 = 1;
pub const CONFIG_NFS_V3_ACL: u32 = 1;
pub const CONFIG_CRC_T10DIF: u32 = 1;
pub const CONFIG_ATA_BMDMA: u32 = 1;
pub const CONFIG_X509_CERTIFICATE_PARSER: u32 = 1;
pub const CONFIG_MAC80211_RC_DEFAULT: &[u8; 12] = b"minstrel_ht\0";
pub const CONFIG_HID_CYPRESS: u32 = 1;
pub const CONFIG_EVENTFD: u32 = 1;
pub const CONFIG_GENERIC_CPU_VULNERABILITIES: u32 = 1;
pub const CONFIG_NUMA: u32 = 1;
pub const CONFIG_HID_VIVALDI_COMMON: u32 = 1;
pub const CONFIG_ZLIB_DEFLATE: u32 = 1;
pub const CONFIG_IP_NF_NAT_MODULE: u32 = 1;
pub const CONFIG_PNP: u32 = 1;
pub const CONFIG_SATA_AHCI: u32 = 1;
pub const CONFIG_HID_SONY: u32 = 1;
pub const CONFIG_NET_VENDOR_CHELSIO: u32 = 1;
pub const CONFIG_NF_DEFRAG_IPV6: u32 = 1;
pub const CONFIG_CRYPTO_RNG: u32 = 1;
pub const CONFIG_FILE_LOCKING: u32 = 1;
pub const CONFIG_CRYPTO_HMAC: u32 = 1;
pub const CONFIG_DMA_VIRTUAL_CHANNELS: u32 = 1;
pub const CONFIG_PGTABLE_HAS_HUGE_LEAVES: u32 = 1;
pub const CONFIG_CRYPTO_AES: u32 = 1;
pub const CONFIG_SND_HDA_PREALLOC_SIZE: u32 = 0;
pub const CONFIG_PAGE_SIZE_4KB: u32 = 1;
pub const CONFIG_AF_UNIX_OOB: u32 = 1;
pub const CONFIG_DMI: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_CRASH_DUMP: u32 = 1;
pub const CONFIG_VIRTIO_CONSOLE: u32 = 1;
pub const CONFIG_DRM_I915_PREEMPT_TIMEOUT: u32 = 640;
pub const CONFIG_CC_HAS_SLS: u32 = 1;
pub const CONFIG_CC_IS_CLANG: u32 = 1;
pub const CONFIG_NET_VENDOR_SUN: u32 = 1;
pub const CONFIG_CRYPTO_CRCT10DIF: u32 = 1;
pub const CONFIG_GENERIC_MSI_IRQ: u32 = 1;
pub const CONFIG_POWER_SUPPLY: u32 = 1;
pub const CONFIG_HAVE_MOD_ARCH_SPECIFIC: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ATMEL: u32 = 1;
pub const CONFIG_DEVTMPFS: u32 = 1;
pub const CONFIG_SURFACE_PLATFORMS: u32 = 1;
pub const CONFIG_HAVE_DEBUG_KMEMLEAK: u32 = 1;
pub const CONFIG_NET_VENDOR_CORTINA: u32 = 1;
pub const CONFIG_BLK_DEV_BSG: u32 = 1;
pub const CONFIG_DRM_DISPLAY_HDMI_HELPER: u32 = 1;
pub const CONFIG_USB_ANNOUNCE_NEW_DEVICES: u32 = 1;
pub const CONFIG_INPUT_EVDEV: u32 = 1;
pub const CONFIG_HZ_1000: u32 = 1;
pub const CONFIG_HUGETLBFS: u32 = 1;
pub const CONFIG_NETWORK_FILESYSTEMS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KMAP_LOCAL_FORCE_MAP: u32 = 1;
pub const CONFIG_COMPACT_UNEVICTABLE_DEFAULT: u32 = 1;
pub const CONFIG_ARCH_HAS_DEBUG_WX: u32 = 1;
pub const CONFIG_NET_EGRESS: u32 = 1;
pub const CONFIG_NOINSTR_VALIDATION: u32 = 1;
pub const CONFIG_CROSS_MEMORY_ATTACH: u32 = 1;
pub const CONFIG_LD_ORPHAN_WARN: u32 = 1;
pub const CONFIG_YENTA_TI: u32 = 1;
pub const CONFIG_KEYBOARD_ATKBD: u32 = 1;
pub const CONFIG_HID_NTRIG: u32 = 1;
pub const CONFIG_ARCH_WANT_LD_ORPHAN_WARN: u32 = 1;
pub const CONFIG_BLK_DEV_INTEGRITY: u32 = 1;
pub const CONFIG_IOMMU_SVA: u32 = 1;
pub const CONFIG_VIDEO: u32 = 1;
pub const CONFIG_VGA_CONSOLE: u32 = 1;
pub const CONFIG_GENERIC_EARLY_IOREMAP: u32 = 1;
pub const CONFIG_BINDGEN_VERSION_TEXT: &[u8; 15] = b"bindgen 0.69.4\0";
pub const CONFIG_XFRM_ESP: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_PAGE_TABLE_CHECK: u32 = 1;
pub const CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT: u32 = 1;
pub const CONFIG_COMPAT_BINFMT_ELF: u32 = 1;
pub const CONFIG_BSD_PROCESS_ACCT: u32 = 1;
pub const CONFIG_INPUT_FF_MEMLESS: u32 = 1;
pub const CONFIG_XZ_DEC_SPARC: u32 = 1;
pub const CONFIG_NF_REJECT_IPV4: u32 = 1;
pub const CONFIG_SERIAL_8250_EXTENDED: u32 = 1;
pub const CONFIG_CC_HAS_NO_PROFILE_FN_ATTR: u32 = 1;
pub const CONFIG_X86_64_ACPI_NUMA: u32 = 1;
pub const CONFIG_ACPI_SPCR_TABLE: u32 = 1;
pub const CONFIG_CGROUP_MISC: u32 = 1;
pub const CONFIG_GENERIC_IOMAP: u32 = 1;
pub const CONFIG_SND_X86: u32 = 1;
pub const CONFIG_RCU_CPU_STALL_TIMEOUT: u32 = 21;
pub const CONFIG_RCU_TRACE: u32 = 1;
pub const CONFIG_IP_MROUTE_COMMON: u32 = 1;
pub const CONFIG_USB_EHCI_HCD: u32 = 1;
pub const CONFIG_IRQ_REMAP: u32 = 1;
pub const CONFIG_STRICT_KERNEL_RWX: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS_MIN_ADJUST: u32 = 1;
pub const CONFIG_LZO_COMPRESS: u32 = 1;
pub const CONFIG_SPARSEMEM_VMEMMAP: u32 = 1;
pub const CONFIG_HID_SUPPORT: u32 = 1;
pub const CONFIG_CLOCKSOURCE_WATCHDOG_MAX_SKEW_US: u32 = 125;
pub const CONFIG_VFAT_FS: u32 = 1;
pub const CONFIG_NET_VENDOR_ROCKER: u32 = 1;
pub const CONFIG_EFIVAR_FS_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_CORE_SYNC_FULL: u32 = 1;
pub const CONFIG_E100: u32 = 1;
pub const CONFIG_IP_ROUTE_MULTIPATH: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ADMTEK: u32 = 1;
pub const CONFIG_TIME_NS: u32 = 1;
pub const CONFIG_UCS2_STRING: u32 = 1;
pub const CONFIG_GENERIC_PTDUMP: u32 = 1;
pub const CONFIG_FUNCTION_PADDING_BYTES: u32 = 16;
pub const CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE: u32 = 1;
pub const CONFIG_PACKET: u32 = 1;
pub const CONFIG_VGA_ARB_MAX_GPUS: u32 = 16;
pub const CONFIG_NO_HZ_COMMON: u32 = 1;
pub const CONFIG_DRM_VIRTIO_GPU: u32 = 1;
pub const CONFIG_CC_HAS_SANE_FUNCTION_ALIGNMENT: u32 = 1;
pub const CONFIG_I8253_LOCK: u32 = 1;
pub const CONFIG_STACKDEPOT_MAX_FRAMES: u32 = 64;
pub const CONFIG_PTP_1588_CLOCK_KVM: u32 = 1;
pub const CONFIG_NF_DEFRAG_IPV4: u32 = 1;
pub const CONFIG_FAIR_GROUP_SCHED: u32 = 1;
pub const CONFIG_ZSTD_DECOMPRESS: u32 = 1;
pub const CONFIG_FAT_FS: u32 = 1;
pub const CONFIG_IP6_NF_TARGET_REJECT: u32 = 1;
pub const CONFIG_GENERIC_TIME_VSYSCALL: u32 = 1;
pub const CONFIG_MMU_GATHER_RCU_TABLE_FREE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_PER_VMA_LOCK: u32 = 1;
pub const CONFIG_DEBUG_ENTRY: u32 = 1;
pub const CONFIG_NR_CPUS: u32 = 64;
pub const CONFIG_ARCH_HIBERNATION_POSSIBLE: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_TRACER: u32 = 1;
pub const CONFIG_LOG_BUF_SHIFT: u32 = 18;
pub const CONFIG_AUDIT: u32 = 1;
pub const CONFIG_NET_9P: u32 = 1;
pub const CONFIG_SND_SEQ_DEVICE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_CONNTRACK: u32 = 1;
pub const CONFIG_SND_SEQ_HRTIMER_DEFAULT: u32 = 1;
pub const CONFIG_MDIO_DEVICE: u32 = 1;
pub const CONFIG_EVENT_TRACING: u32 = 1;
pub const CONFIG_KRETPROBES: u32 = 1;
pub const CONFIG_SERIAL_8250_SHARE_IRQ: u32 = 1;
pub const CONFIG_LOCKD: u32 = 1;
pub const CONFIG_IP_ROUTE_VERBOSE: u32 = 1;
pub const CONFIG_COMPACTION: u32 = 1;
pub const CONFIG_PATA_SCH: u32 = 1;
pub const CONFIG_BRANCH_PROFILE_NONE: u32 = 1;
pub const CONFIG_INPUT: u32 = 1;
pub const CONFIG_WLAN_VENDOR_RSI: u32 = 1;
pub const CONFIG_BLK_MQ_VIRTIO: u32 = 1;
pub const CONFIG_SERIAL_8250_DETECT_IRQ: u32 = 1;
pub const CONFIG_HAVE_MMIOTRACE_SUPPORT: u32 = 1;
pub const CONFIG_HAVE_OBJTOOL_MCOUNT: u32 = 1;
pub const CONFIG_SLAB_MERGE_DEFAULT: u32 = 1;
pub const CONFIG_E1000: u32 = 1;
pub const CONFIG_ARCH_HAS_GENERIC_CRASHKERNEL_RESERVATION: u32 = 1;
pub const CONFIG_HAVE_GCC_PLUGINS: u32 = 1;
pub const CONFIG_X86_CMPXCHG64: u32 = 1;
pub const CONFIG_NO_HZ: u32 = 1;
pub const CONFIG_RING_BUFFER: u32 = 1;
pub const CONFIG_MAC80211_LEDS: u32 = 1;
pub const CONFIG_SCHED_MC_PRIO: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_BOOTPARAM: u32 = 1;
pub const CONFIG_PID_NS: u32 = 1;
pub const CONFIG_CGROUP_PERF: u32 = 1;
pub const CONFIG_HARDIRQS_SW_RESEND: u32 = 1;
pub const CONFIG_IIO_CONSUMERS_PER_TRIGGER: u32 = 2;
pub const CONFIG_ARCH_HAVE_NMI_SAFE_CMPXCHG: u32 = 1;
pub const CONFIG_FREEZER: u32 = 1;
pub const CONFIG_VM_EVENT_COUNTERS: u32 = 1;
pub const CONFIG_PAGE_SIZE_LESS_THAN_64KB: u32 = 1;
pub const CONFIG_ASSOCIATIVE_ARRAY: u32 = 1;
pub const CONFIG_EFI_EARLYCON: u32 = 1;
pub const CONFIG_EXT4_FS_SECURITY: u32 = 1;
pub const CONFIG_CRASH_RESERVE: u32 = 1;
pub const CONFIG_BLK_DEV: u32 = 1;
pub const CONFIG_CRYPTO_SIG: u32 = 1;
pub const CONFIG_DRM_BUDDY: u32 = 1;
pub const CONFIG_CGROUP_PIDS: u32 = 1;
pub const CONFIG_X86_UMIP: u32 = 1;
pub const CONFIG_INSTRUCTION_DECODER: u32 = 1;
pub const CONFIG_INET6_ESP: u32 = 1;
pub const CONFIG_NF_CONNTRACK_SIP: u32 = 1;
pub const CONFIG_NET_RX_BUSY_POLL: u32 = 1;
pub const CONFIG_PHYSICAL_START: u32 = 16777216;
pub const CONFIG_PAHOLE_VERSION: u32 = 127;
pub const CONFIG_PKCS7_MESSAGE_PARSER: u32 = 1;
pub const CONFIG_MOUSE_PS2_LOGIPS2PP: u32 = 1;
pub const CONFIG_CC_HAS_ENTRY_PADDING: u32 = 1;
pub const CONFIG_NET_VENDOR_SMSC: u32 = 1;
pub const CONFIG_TRACE_CLOCK: u32 = 1;
pub const CONFIG_ACPI_BUTTON: u32 = 1;
pub const CONFIG_RTC_INTF_SYSFS: u32 = 1;
pub const CONFIG_MOUSE_PS2_FOCALTECH: u32 = 1;
pub const CONFIG_QUOTA: u32 = 1;
pub const CONFIG_ACPI_PRMT: u32 = 1;
pub const CONFIG_ACPI_TABLE_UPGRADE: u32 = 1;
pub const CONFIG_TASKS_RCU_GENERIC: u32 = 1;
pub const CONFIG_CLOCKSOURCE_VALIDATE_LAST_CYCLE: u32 = 1;
pub const CONFIG_CONTEXT_TRACKING: u32 = 1;
pub const CONFIG_AGP_AMD64: u32 = 1;
pub const CONFIG_NET_VENDOR_SEEQ: u32 = 1;
pub const CONFIG_IP6_NF_MANGLE: u32 = 1;
pub const CONFIG_PARAVIRT_CLOCK: u32 = 1;
pub const CONFIG_TASK_IO_ACCOUNTING: u32 = 1;
pub const CONFIG_WLAN: u32 = 1;
pub const CONFIG_INET6_AH: u32 = 1;
pub const CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS: u32 = 1;
pub const CONFIG_DRM_PANEL_ORIENTATION_QUIRKS: u32 = 1;
pub const CONFIG_CPU_SUP_CENTAUR: u32 = 1;
pub const CONFIG_WLAN_VENDOR_INTERSIL: u32 = 1;
pub const CONFIG_8139TOO_PIO: u32 = 1;
pub const CONFIG_ARCH_WANT_COMPAT_IPC_PARSE_VERSION: u32 = 1;
pub const CONFIG_USB_MON: u32 = 1;
pub const CONFIG_DRM_I915_FENCE_TIMEOUT: u32 = 10000;
pub const CONFIG_NETWORK_SECMARK: u32 = 1;
pub const CONFIG_BLK_DEV_IO_TRACE: u32 = 1;
pub const CONFIG_X86_INTEL_TSX_MODE_OFF: u32 = 1;
pub const CONFIG_PCCARD_NONSTATIC: u32 = 1;
pub const CONFIG_DEFAULT_MMAP_MIN_ADDR: u32 = 4096;
pub const CONFIG_CRYPTO_CMAC: u32 = 1;
pub const CONFIG_WLAN_VENDOR_BROADCOM: u32 = 1;
pub const CONFIG_SERIAL_8250_EXAR: u32 = 1;
pub const CONFIG_NFS_V4: u32 = 1;
pub const CONFIG_HID_GOOGLE_STADIA_FF: u32 = 1;
pub const CONFIG_KCMP: u32 = 1;
pub const CONFIG_DEBUG_DEVRES: u32 = 1;
pub const CONFIG_XFRM_ALGO: u32 = 1;
pub const CONFIG_NET_VENDOR_STMICRO: u32 = 1;
pub const CONFIG_AMD_NB: u32 = 1;
pub const CONFIG_BUILD_SALT: &[u8; 1] = b"\0";
pub const CONFIG_X86_INTERNODE_CACHE_SHIFT: u32 = 6;
pub const CONFIG_DUMMY_CONSOLE_ROWS: u32 = 25;
pub const CONFIG_IP_PNP_BOOTP: u32 = 1;
pub const CONFIG_MODPROBE_PATH: &[u8; 15] = b"/sbin/modprobe\0";
pub const CONFIG_POSIX_MQUEUE: u32 = 1;
pub const CONFIG_MQ_IOSCHED_DEADLINE: u32 = 1;
pub const CONFIG_DEBUG_FS: u32 = 1;
pub const CONFIG_X86_64_SMP: u32 = 1;
pub const CONFIG_FUTEX: u32 = 1;
pub const CONFIG_ASYNC_CORE: u32 = 1;
pub const CONFIG_NEED_PER_CPU_EMBED_FIRST_CHUNK: u32 = 1;
pub const CONFIG_ARCH_HAS_CURRENT_STACK_POINTER: u32 = 1;
pub const CONFIG_SERIAL_8250_PNP: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_ERROR_INJECTION: u32 = 1;
pub const CONFIG_HAS_DMA: u32 = 1;
pub const CONFIG_SOFTIRQ_ON_OWN_STACK: u32 = 1;
pub const CONFIG_ARCH_WANT_BATCHED_UNMAP_TLB_FLUSH: u32 = 1;
pub const CONFIG_AUDITSYSCALL: u32 = 1;
pub const CONFIG_STACKDEPOT: u32 = 1;
pub const CONFIG_ARCH_HAS_ACPI_TABLE_UPGRADE: u32 = 1;
pub const CONFIG_GENERIC_BUG: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_COMMON: u32 = 1;
pub const CONFIG_HAVE_ALIGNED_STRUCT_PAGE: u32 = 1;
pub const CONFIG_SCHED_OMIT_FRAME_POINTER: u32 = 1;
pub const CONFIG_LEGACY_DIRECT_IO: u32 = 1;
pub const CONFIG_LOCK_SPIN_ON_OWNER: u32 = 1;
pub const CONFIG_HAVE_PERF_USER_STACK_DUMP: u32 = 1;
pub const CONFIG_USB_PCI_AMD: u32 = 1;
pub const CONFIG_OPTPROBES: u32 = 1;
pub const CONFIG_SKB_EXTENSIONS: u32 = 1;
pub const CONFIG_HUGETLB_PAGE: u32 = 1;
pub const CONFIG_HAVE_ARCH_RANDOMIZE_KSTACK_OFFSET: u32 = 1;
pub const CONFIG_SERIAL_CORE: u32 = 1;
pub const CONFIG_NFS_USE_KERNEL_DNS: u32 = 1;
pub const CONFIG_DRM_I915_CAPTURE_ERROR: u32 = 1;
pub const CONFIG_LEDS_TRIGGERS: u32 = 1;
pub const CONFIG_X86_MSR: u32 = 1;
pub const CONFIG_CRYPTO_CCM: u32 = 1;
pub const CONFIG_GENERIC_GETTIMEOFDAY: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_JUMP: u32 = 1;
pub const CONFIG_SND_USB: u32 = 1;
pub const CONFIG_ARCH_MIGHT_HAVE_ACPI_PDC: u32 = 1;
pub const CONFIG_SYN_COOKIES: u32 = 1;
pub const CONFIG_ARCH_HAS_FORTIFY_SOURCE: u32 = 1;
pub const CONFIG_CRYPTO_SHA3: u32 = 1;
pub const CONFIG_CRYPTO_CRC64_ROCKSOFT: u32 = 1;
pub const CONFIG_NET_VENDOR_QUALCOMM: u32 = 1;
pub const CONFIG_STACKTRACE_SUPPORT: u32 = 1;
pub const CONFIG_PCIEASPM_DEFAULT: u32 = 1;
pub const CONFIG_SND: u32 = 1;
pub const CONFIG_CRYPTO_AEAD: u32 = 1;
pub const CONFIG_SECTION_MISMATCH_WARN_ONLY: u32 = 1;
pub const CONFIG_ASYNC_XOR: u32 = 1;
pub const CONFIG_INTEL_IOMMU: u32 = 1;
pub const CONFIG_DRM_DISPLAY_HDCP_HELPER: u32 = 1;
pub const CONFIG_ARCH_HAS_SYNC_CORE_BEFORE_USERMODE: u32 = 1;
pub const CONFIG_CARDBUS: u32 = 1;
pub const CONFIG_HAVE_CMPXCHG_LOCAL: u32 = 1;
pub const CONFIG_INITRAMFS_PRESERVE_MTIME: u32 = 1;
pub const CONFIG_X86_HV_CALLBACK_VECTOR: u32 = 1;
pub const CONFIG_CGROUP_SCHED: u32 = 1;
pub const CONFIG_DMA_ENGINE: u32 = 1;
pub const CONFIG_EARLY_PRINTK: u32 = 1;
pub const CONFIG_CRYPTO_CRC32C: u32 = 1;
pub const CONFIG_PM_STD_PARTITION: &[u8; 1] = b"\0";
pub const CONFIG_RD_BZIP2: u32 = 1;
pub const CONFIG_PHYS_ADDR_T_64BIT: u32 = 1;
pub const CONFIG_SERIAL_8250_MID: u32 = 1;
pub const CONFIG_HIDRAW: u32 = 1;
pub const CONFIG_X86_MCE: u32 = 1;
pub const CONFIG_LOCK_DEBUGGING_SUPPORT: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_SID2STR_CACHE_SIZE: u32 = 256;
pub const CONFIG_BUG: u32 = 1;
pub const CONFIG_X86_5LEVEL: u32 = 1;
pub const CONFIG_NET_VENDOR_SYNOPSYS: u32 = 1;
pub const CONFIG_ARCH_HAS_GCOV_PROFILE_ALL: u32 = 1;
pub const CONFIG_DMARD09: u32 = 1;
pub const CONFIG_XZ_DEC_BCJ: u32 = 1;
pub const CONFIG_DRM_KMS_HELPER: u32 = 1;
pub const CONFIG_MOUSE_PS2_BYD: u32 = 1;
pub const CONFIG_X86_VERBOSE_BOOTUP: u32 = 1;
pub const CONFIG_X86_MCE_INTEL: u32 = 1;
pub const CONFIG_MOUSE_PS2_TRACKPOINT: u32 = 1;
pub const CONFIG_SCHED_HRTICK: u32 = 1;
pub const CONFIG_TRACING_SUPPORT: u32 = 1;
pub const CONFIG_IOMMU_MM_DATA: u32 = 1;
pub const CONFIG_ISA_DMA_API: u32 = 1;
pub const CONFIG_USB_EHCI_PCI: u32 = 1;
pub const CONFIG_RUST_OVERFLOW_CHECKS: u32 = 1;
pub const CONFIG_VIRTIO_MENU: u32 = 1;
pub const CONFIG_NET_VENDOR_CADENCE: u32 = 1;
pub const CONFIG_BLK_DEV_WRITE_MOUNTED: u32 = 1;
pub const CONFIG_NET_VENDOR_BROCADE: u32 = 1;
pub const CONFIG_HAVE_IOREMAP_PROT: u32 = 1;
pub const CONFIG_INTEGRITY_AUDIT: u32 = 1;
pub const CONFIG_NET_SELFTESTS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_MEMORY_FAILURE: u32 = 1;
pub const CONFIG_CRASH_HOTPLUG: u32 = 1;
pub const CONFIG_MITIGATION_RFDS: u32 = 1;
pub const CONFIG_AS_HAS_NON_CONST_ULEB128: u32 = 1;
pub const CONFIG_LLD_VERSION: u32 = 180108;
pub const CONFIG_CRYPTO_HASH: u32 = 1;
pub const CONFIG_CRYPTO_AUTHENC: u32 = 1;
pub const CONFIG_ARCH_ENABLE_MEMORY_HOTPLUG: u32 = 1;
pub const CONFIG_IP_NF_MANGLE: u32 = 1;
pub const CONFIG_NETFILTER_EGRESS: u32 = 1;
pub const CONFIG_SYSTEM_TRUSTED_KEYS: &[u8; 1] = b"\0";
pub const CONFIG_EFI: u32 = 1;
pub const CONFIG_SUNRPC: u32 = 1;
pub const CONFIG_THERMAL_EMERGENCY_POWEROFF_DELAY_MS: u32 = 0;
pub const CONFIG_YENTA: u32 = 1;
pub const CONFIG_X86_SUPPORTS_MEMORY_FAILURE: u32 = 1;
pub const CONFIG_GENERIC_CPU_DEVICES: u32 = 1;
pub const CONFIG_CONNECTOR: u32 = 1;
pub const CONFIG_VIRTIO_PCI_LIB: u32 = 1;
pub const CONFIG_TCP_MD5SIG: u32 = 1;
pub const CONFIG_CPU_IDLE: u32 = 1;
pub const CONFIG_OBJTOOL: u32 = 1;
pub const CONFIG_CGROUP_FREEZER: u32 = 1;
pub const CONFIG_PREEMPT_COUNT: u32 = 1;
pub const CONFIG_IP6_NF_IPTABLES_LEGACY: u32 = 1;
pub const CONFIG_IOMMU_DEFAULT_DMA_LAZY: u32 = 1;
pub const CONFIG_NET_XGRESS: u32 = 1;
pub const CONFIG_SATA_HOST: u32 = 1;
pub const CONFIG_SND_PCM_TIMER: u32 = 1;
pub const CONFIG_SCSI_PROC_FS: u32 = 1;
pub const CONFIG_CRYPTO_HW: u32 = 1;
pub const CONFIG_X86_PLATFORM_DEVICES: u32 = 1;
pub const CONFIG_MACINTOSH_DRIVERS: u32 = 1;
pub const CONFIG_CFG80211_REQUIRE_SIGNED_REGDB: u32 = 1;
pub const CONFIG_KALLSYMS_ALL: u32 = 1;
pub const CONFIG_COREDUMP: u32 = 1;
pub const CONFIG_RELOCATABLE: u32 = 1;
pub const CONFIG_CC_HAS_ZERO_CALL_USED_REGS: u32 = 1;
pub const CONFIG_CRYPTO_HASH2: u32 = 1;
pub const CONFIG_SECCOMP: u32 = 1;
pub const CONFIG_CRYPTO_LIB_GF128MUL: u32 = 1;
pub const CONFIG_HID_MICROSOFT: u32 = 1;
pub const CONFIG_SGETMASK_SYSCALL: u32 = 1;
pub const CONFIG_IP6_NF_IPTABLES: u32 = 1;
pub const CONFIG_SHMEM: u32 = 1;
pub const CONFIG_INTEL_IOMMU_DEFAULT_ON: u32 = 1;
pub const CONFIG_IIO_BUFFER_DMAENGINE: u32 = 1;
pub const CONFIG_ARCH_HAS_NMI_SAFE_THIS_CPU_OPS: u32 = 1;
pub const CONFIG_I2C_BOARDINFO: u32 = 1;
pub const CONFIG_NET_VENDOR_ALTEON: u32 = 1;
pub const CONFIG_ATA_VERBOSE_ERROR: u32 = 1;
pub const CONFIG_VIRTIO_ANCHOR: u32 = 1;
pub const CONFIG_SND_TIMER: u32 = 1;
pub const CONFIG_HAVE_POSIX_CPU_TIMERS_TASK_WORK: u32 = 1;
pub const CONFIG_VIRTIO_BLK: u32 = 1;
pub const CONFIG_CPU_SUP_INTEL: u32 = 1;
pub const CONFIG_IRQ_FORCED_THREADING: u32 = 1;
pub const CONFIG_CRYPTO_MANAGER2: u32 = 1;
pub const CONFIG_NET_VENDOR_MICROCHIP: u32 = 1;
pub const CONFIG_MESSAGE_LOGLEVEL_DEFAULT: u32 = 4;
pub const CONFIG_IP_NF_FILTER: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ATH: u32 = 1;
pub const CONFIG_WLAN_VENDOR_MARVELL: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_NO_PATCHABLE: u32 = 1;
pub const CONFIG_SOCK_RX_QUEUE_MAPPING: u32 = 1;
pub const CONFIG_X86_MCE_THRESHOLD: u32 = 1;
pub const CONFIG_AUXILIARY_BUS: u32 = 1;
pub const CONFIG_ARCH_HIBERNATION_HEADER: u32 = 1;
pub const CONFIG_DECOMPRESS_LZ4: u32 = 1;
pub const CONFIG_ARCH_WANT_DEFAULT_BPF_JIT: u32 = 1;
pub const CONFIG_NLS_ISO8859_1: u32 = 1;
pub const CONFIG_ARCH_HAS_KCOV: u32 = 1;
pub const CONFIG_HID_TOPSEED: u32 = 1;
pub const CONFIG_PM_SLEEP_DEBUG: u32 = 1;
pub const CONFIG_NET_VENDOR_CAVIUM: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ZYDAS: u32 = 1;
pub const CONFIG_PATA_TIMINGS: u32 = 1;
pub const CONFIG_NETFILTER_XT_MARK_MODULE: u32 = 1;
pub const CONFIG_COMPAT: u32 = 1;
pub const CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION: u32 = 1;
pub const CONFIG_EXCLUSIVE_SYSTEM_RAM: u32 = 1;
pub const CONFIG_CRYPTO_LIB_POLY1305_RSIZE: u32 = 11;
pub const CONFIG_INIT_ENV_ARG_LIMIT: u32 = 32;
pub const CONFIG_STANDALONE: u32 = 1;
pub const CONFIG_IP_PIMSM_V1: u32 = 1;
pub const CONFIG_CC_HAS_AUTO_VAR_INIT_ZERO: u32 = 1;
pub const CONFIG_SCSI_VIRTIO: u32 = 1;
pub const CONFIG_HOTPLUG_PARALLEL: u32 = 1;
pub const CONFIG_I2C_HID: u32 = 1;
pub const CONFIG_PREEMPT_BUILD: u32 = 1;
pub const CONFIG_SAMPLE_RUST_MINIMAL: u32 = 1;
pub const CONFIG_LOGIWHEELS_FF: u32 = 1;
pub const CONFIG_YENTA_O2: u32 = 1;
pub const CONFIG_DEFAULT_TCP_CONG: &[u8; 6] = b"cubic\0";
pub const CONFIG_PROC_PID_CPUSET: u32 = 1;
pub const CONFIG_WLAN_VENDOR_SILABS: u32 = 1;
pub const CONFIG_HAVE_KERNEL_ZSTD: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_LTO_CLANG: u32 = 1;
pub const CONFIG_NET_VENDOR_OKI: u32 = 1;
pub const CONFIG_GCC_NO_STRINGOP_OVERFLOW: u32 = 1;
pub const CONFIG_PCI_DIRECT: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_ATTR_SET: u32 = 1;
pub const CONFIG_P2SB: u32 = 1;
pub const CONFIG_RWSEM_SPIN_ON_OWNER: u32 = 1;
pub const CONFIG_ARCH_HAS_STRICT_MODULE_RWX: u32 = 1;
pub const CONFIG_PROC_PID_ARCH_STATUS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_BZIMAGE_VERIFY_SIG: u32 = 1;
pub const CONFIG_WLAN_VENDOR_INTEL: u32 = 1;
pub const CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK: u32 = 1;
pub const CONFIG_CRYPTO_ESSIV: u32 = 1;
pub const CONFIG_MITIGATION_IBRS_ENTRY: u32 = 1;
pub const CONFIG_ARCH_HAS_KERNEL_FPU_SUPPORT: u32 = 1;
pub const CONFIG_HAVE_RELIABLE_STACKTRACE: u32 = 1;
pub const CONFIG_HOTPLUG_CORE_SYNC: u32 = 1;
pub const CONFIG_NET_VENDOR_ATHEROS: u32 = 1;
pub const CONFIG_ELFCORE: u32 = 1;
pub const CONFIG_IOSF_MBI: u32 = 1;
pub const CONFIG_BLK_PM: u32 = 1;
pub const CONFIG_X86_PM_TIMER: u32 = 1;
pub const CONFIG_SND_VMASTER: u32 = 1;
pub const CONFIG_SERIAL_8250_RSA: u32 = 1;
pub const CONFIG_NET_VENDOR_SILAN: u32 = 1;
pub const CONFIG_DYNAMIC_SIGFRAME: u32 = 1;
pub const CONFIG_SND_VERBOSE_PROCFS: u32 = 1;
pub const CONFIG_GENERIC_CPU_AUTOPROBE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ST: u32 = 1;
pub const CONFIG_RETHOOK: u32 = 1;
pub const CONFIG_NETDEVICES: u32 = 1;
pub const CONFIG_IIO_BUFFER_DMA: u32 = 1;
pub const CONFIG_NR_CPUS_RANGE_END: u32 = 512;
pub const CONFIG_BLK_RQ_ALLOC_TIME: u32 = 1;
pub const CONFIG_ARCH_CLOCKSOURCE_INIT: u32 = 1;
pub const CONFIG_INPUT_MISC: u32 = 1;
pub const CONFIG_IP_PIMSM_V2: u32 = 1;
pub const CONFIG_ETHTOOL_NETLINK: u32 = 1;
pub const CONFIG_VIRTIO_PCI_LIB_LEGACY: u32 = 1;
pub const CONFIG_SATA_PMP: u32 = 1;
pub const CONFIG_DMA_SHARED_BUFFER: u32 = 1;
pub const CONFIG_MODULES: u32 = 1;
pub const CONFIG_NF_NAT: u32 = 1;
pub const CONFIG_CACHESTAT_SYSCALL: u32 = 1;
pub const CONFIG_NFS_DISABLE_UDP_SUPPORT: u32 = 1;
pub const CONFIG_MAX_SKB_FRAGS: u32 = 17;
pub const CONFIG_X86_ACPI_CPUFREQ: u32 = 1;
pub const CONFIG_CRYPTO_ACOMP2: u32 = 1;
pub const CONFIG_DRM_I915_TIMESLICE_DURATION: u32 = 1;
pub const CONFIG_INET_TABLE_PERTURB_ORDER: u32 = 16;
pub const CONFIG_VIRTIO_INPUT: u32 = 1;
pub const CONFIG_HID_LOGITECH: u32 = 1;
pub const CONFIG_HW_RANDOM_VIA: u32 = 1;
pub const CONFIG_IO_DELAY_0X80: u32 = 1;
pub const CONFIG_IIO_BUFFER: u32 = 1;
pub const CONFIG_HAVE_CONTEXT_TRACKING_USER_OFFSTACK: u32 = 1;
pub const CONFIG_NET_VENDOR_I825XX: u32 = 1;
pub const CONFIG_NF_CONNTRACK_FTP: u32 = 1;
pub const CONFIG_MMU_GATHER_TABLE_FREE: u32 = 1;
pub const CONFIG_BITREVERSE: u32 = 1;
pub const CONFIG_ACPI_LEGACY_TABLES_LOOKUP: u32 = 1;
pub const CONFIG_CRASH_DUMP: u32 = 1;
pub const CONFIG_HAVE_ARCH_KASAN_VMALLOC: u32 = 1;
pub const CONFIG_IPV6_NDISC_NODETYPE: u32 = 1;
pub const CONFIG_HID_MONTEREY: u32 = 1;
pub const CONFIG_NET_VENDOR_PACKET_ENGINES: u32 = 1;
pub const CONFIG_BLK_DEV_SD: u32 = 1;
pub const CONFIG_USB_XHCI_PCI: u32 = 1;
pub const CONFIG_SCHED_INFO: u32 = 1;
pub const CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE: u32 = 1;
pub const CONFIG_HAVE_KPROBES: u32 = 1;
pub const CONFIG_ACPI_HOTPLUG_CPU: u32 = 1;
pub const CONFIG_DEBUG_MEMORY_INIT: u32 = 1;
pub const CONFIG_HAVE_PCSPKR_PLATFORM: u32 = 1;
pub const CONFIG_ACPI_CPU_FREQ_PSS: u32 = 1;
pub const CONFIG_X86_CMOV: u32 = 1;
pub const CONFIG_RANDOMIZE_MEMORY: u32 = 1;
pub const CONFIG_FORCEDETH: u32 = 1;
pub const CONFIG_ACPI_BGRT: u32 = 1;
pub const CONFIG_8139TOO: u32 = 1;
pub const CONFIG_SYSVIPC_SYSCTL: u32 = 1;
pub const CONFIG_HAS_LTO_CLANG: u32 = 1;
pub const CONFIG_DRM_PANEL: u32 = 1;
pub const CONFIG_DMADEVICES: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_PASID: u32 = 1;
pub const CONFIG_FS_MBCACHE: u32 = 1;
pub const CONFIG_PHYSICAL_ALIGN: u32 = 2097152;
pub const CONFIG_SND_HWDEP: u32 = 1;
pub const CONFIG_CRYPTO_LIB_SHA256: u32 = 1;
pub const CONFIG_SERIAL_8250_DMA: u32 = 1;
pub const CONFIG_NET_IP_TUNNEL: u32 = 1;
pub const CONFIG_HAVE_NOINSTR_HACK: u32 = 1;
pub const CONFIG_HAVE_PCI: u32 = 1;
pub const CONFIG_GENERIC_CPU: u32 = 1;
pub const CONFIG_NEED_SG_DMA_FLAGS: u32 = 1;
pub const CONFIG_ACPI_CONTAINER: u32 = 1;
pub const CONFIG_CHR_DEV_SG: u32 = 1;
pub const CONFIG_ARCH_HAS_HW_PTE_YOUNG: u32 = 1;
pub const CONFIG_MMU: u32 = 1;
pub const CONFIG_SECURITY: u32 = 1;
pub const CONFIG_DRM_MIPI_DSI: u32 = 1;
pub const CONFIG_CRYPTO_RNG2: u32 = 1;
pub const CONFIG_SND_HDA_I915: u32 = 1;
pub const CONFIG_AS_SHA256_NI: u32 = 1;
pub const CONFIG_AS_SHA1_NI: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_WITH_REGS: u32 = 1;
pub const CONFIG_CFG80211_DEFAULT_PS: u32 = 1;
pub const CONFIG_SND_SEQUENCER: u32 = 1;
pub const CONFIG_WLAN_VENDOR_MEDIATEK: u32 = 1;
pub const CONFIG_IPC_NS: u32 = 1;
pub const CONFIG_ARCH_HAS_DEBUG_VIRTUAL: u32 = 1;
pub const CONFIG_HID_PID: u32 = 1;
pub const CONFIG_IOMMU_SUPPORT: u32 = 1;
pub const CONFIG_IP_PNP: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_PURGATORY: u32 = 1;
pub const CONFIG_MEMBARRIER: u32 = 1;
pub const CONFIG_EFI_MIXED: u32 = 1;
pub const CONFIG_CPU_IDLE_GOV_MENU: u32 = 1;
pub const CONFIG_NET_VENDOR_FUJITSU: u32 = 1;
pub const CONFIG_X86_16BIT: u32 = 1;
pub const CONFIG_CHECK_SIGNATURE: u32 = 1;
pub const CONFIG_X86_ACPI_CPUFREQ_CPB: u32 = 1;
pub const CONFIG_NET_VENDOR_NETRONOME: u32 = 1;
pub const CONFIG_NET_CLS_CGROUP: u32 = 1;
pub const CONFIG_CRYPTO_DRBG_MENU: u32 = 1;
pub const CONFIG_ARCH_HAS_PARANOID_L1D_FLUSH: u32 = 1;
pub const CONFIG_XZ_DEC: u32 = 1;
pub const CONFIG_CC_HAS_KASAN_SW_TAGS: u32 = 1;
pub const CONFIG_THERMAL_HWMON: u32 = 1;
pub const CONFIG_HAVE_OBJTOOL: u32 = 1;
pub const CONFIG_HAVE_KERNEL_LZ4: u32 = 1;
pub const CONFIG_PCI_QUIRKS: u32 = 1;
pub const CONFIG_NET_VENDOR_FUNGIBLE: u32 = 1;
pub const CONFIG_MOUSE_PS2: u32 = 1;
pub const CONFIG_BLK_CGROUP_IOPRIO: u32 = 1;
pub const CONFIG_MD: u32 = 1;
pub const CONFIG_PCPU_DEV_REFCNT: u32 = 1;
pub const CONFIG_EDAC_ATOMIC_SCRUB: u32 = 1;
pub const CONFIG_NET_VENDOR_AMAZON: u32 = 1;
pub const CONFIG_MODULE_UNLOAD: u32 = 1;
pub const CONFIG_NET_VENDOR_INTEL: u32 = 1;
pub const CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE: u32 = 1;
pub const CONFIG_CONSOLE_LOGLEVEL_DEFAULT: u32 = 7;
pub const CONFIG_PAGE_COUNTER: u32 = 1;
pub const CONFIG_CONSOLE_TRANSLATIONS: u32 = 1;
pub const CONFIG_WATCHDOG_OPEN_TIMEOUT: u32 = 0;
pub const CONFIG_BUILDTIME_TABLE_SORT: u32 = 1;
pub const CONFIG_E1000E: u32 = 1;
pub const CONFIG_HAVE_CONTEXT_TRACKING_USER: u32 = 1;
pub const CONFIG_BINFMT_SCRIPT: u32 = 1;
pub const CONFIG_ARCH_HAS_COPY_MC: u32 = 1;
pub const CONFIG_VIRTIO_NET: u32 = 1;
pub const CONFIG_CRYPTO_SIG2: u32 = 1;
pub const CONFIG_MAC80211: u32 = 1;
pub const CONFIG_MULTIUSER: u32 = 1;
pub const CONFIG_FONT_8x16: u32 = 1;
pub const CONFIG_PNP_DEBUG_MESSAGES: u32 = 1;
pub const CONFIG_NETFILTER_SKIP_EGRESS: u32 = 1;
pub const CONFIG_TOOLS_SUPPORT_RELR: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_AVC_STATS: u32 = 1;
pub const CONFIG_IP6_NF_FILTER: u32 = 1;
pub const CONFIG_HID_VIVALDI: u32 = 1;
pub const CONFIG_TMPFS_XATTR: u32 = 1;
pub const CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK: u32 = 1;
pub const CONFIG_BLOCK: u32 = 1;
pub const CONFIG_PCI_LABEL: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_OPTIONAL: u32 = 1;
pub const CONFIG_CRYPTO_JITTERENTROPY_MEMORY_BLOCKS: u32 = 64;
pub const CONFIG_DM_BUFIO: u32 = 1;
pub const CONFIG_DEBUG_MISC: u32 = 1;
pub const CONFIG_NET_VENDOR_3COM: u32 = 1;
pub const CONFIG_CPU_FREQ: u32 = 1;
pub const CONFIG_FAT_DEFAULT_IOCHARSET: &[u8; 10] = b"iso8859-1\0";
pub const CONFIG_TTY: u32 = 1;
pub const CONFIG_HPET_EMULATE_RTC: u32 = 1;
pub const CONFIG_HAVE_UNSTABLE_SCHED_CLOCK: u32 = 1;
pub const CONFIG_DECOMPRESS_LZMA: u32 = 1;
pub const CONFIG_MOUSE_PS2_CYPRESS: u32 = 1;
pub const CONFIG_SYMBOLIC_ERRNAME: u32 = 1;
pub const CONFIG_QUEUED_SPINLOCKS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_INT128: u32 = 1;
pub const CONFIG_SERIAL_8250_CONSOLE: u32 = 1;
pub const CONFIG_LOCK_MM_AND_FIND_VMA: u32 = 1;
pub const CONFIG_PROC_KCORE: u32 = 1;
pub const CONFIG_ARCH_USE_CMPXCHG_LOCKREF: u32 = 1;
pub const CONFIG_BLK_MQ_STACKING: u32 = 1;
pub const CONFIG_IOMMUFD: u32 = 1;
pub const CONFIG_HAVE_KERNEL_XZ: u32 = 1;
pub const CONFIG_RTC_DRV_CMOS: u32 = 1;
pub const CONFIG_CRYPTO_ALGAPI2: u32 = 1;
pub const CONFIG_CPU_MITIGATIONS: u32 = 1;
pub const CONFIG_CLZ_TAB: u32 = 1;
pub const CONFIG_IA32_EMULATION: u32 = 1;
pub const CONFIG_FUNCTION_ALIGNMENT: u32 = 16;
pub const CONFIG_X86_LOCAL_APIC: u32 = 1;
pub const CONFIG_CFG80211_USE_KERNEL_REGDB_KEYS: u32 = 1;
pub const CONFIG_PCMCIA: u32 = 1;
pub const CONFIG_AMD_IOMMU: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_CRASH_HOTPLUG: u32 = 1;
pub const CONFIG_PPS: u32 = 1;
pub const CONFIG_MAC80211_HAS_RC: u32 = 1;
pub const CONFIG_CRASH_MAX_MEMORY_RANGES: u32 = 8192;
pub const CONFIG_GLOB: u32 = 1;
pub const CONFIG_DEVMEM: u32 = 1;
pub const CONFIG_DRM_I915_USERFAULT_AUTOSUSPEND: u32 = 250;
pub const CONFIG_KEXEC_CORE: u32 = 1;
pub const CONFIG_NET_9P_FD: u32 = 1;
pub const CONFIG_LSM: &[u8; 75] =
    b"landlock,lockdown,yama,loadpin,safesetid,selinux,smack,tomoyo,apparmor,bpf\0";
pub const CONFIG_ARCH_HAS_PKEYS: u32 = 1;
pub const CONFIG_CRYPTO_ALGAPI: u32 = 1;
pub const CONFIG_DYNAMIC_EVENTS: u32 = 1;
pub const CONFIG_SERIAL_EARLYCON: u32 = 1;
pub const CONFIG_AS_AVX512: u32 = 1;
pub const CONFIG_NF_NAT_IRC: u32 = 1;
pub const CONFIG_DEVPORT: u32 = 1;
pub const CONFIG_USB: u32 = 1;
pub const CONFIG_ELF_CORE: u32 = 1;
pub const CONFIG_TASK_DELAY_ACCT: u32 = 1;
pub const CONFIG_THERMAL: u32 = 1;
pub const CONFIG_NET_VENDOR_DLINK: u32 = 1;
pub const CONFIG_TICK_CPU_ACCOUNTING: u32 = 1;
pub const CONFIG_CRYPTO_MD5: u32 = 1;
pub const CONFIG_SND_DRIVERS: u32 = 1;
pub const CONFIG_NET_VENDOR_EZCHIP: u32 = 1;
pub const CONFIG_DM_AUDIT: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_POLICY: u32 = 1;
pub const CONFIG_HALTPOLL_CPUIDLE: u32 = 1;
pub const CONFIG_XZ_DEC_X86: u32 = 1;
pub const CONFIG_SND_HDA_HWDEP: u32 = 1;
pub const CONFIG_VT_CONSOLE_SLEEP: u32 = 1;
pub const CONFIG_NET_VENDOR_SOCIONEXT: u32 = 1;
pub const CONFIG_SCSI_SPI_ATTRS: u32 = 1;
pub const CONFIG_KERNEL_GZIP: u32 = 1;
pub const CONFIG_DEBUG_KERNEL: u32 = 1;
pub const CONFIG_WLAN_VENDOR_TI: u32 = 1;
pub const CONFIG_IP_PNP_DHCP: u32 = 1;
pub const CONFIG_MISC_FILESYSTEMS: u32 = 1;
pub const CONFIG_QUOTA_TREE: u32 = 1;
pub const CONFIG_CRYPTO_GHASH: u32 = 1;
pub const CONFIG_CGROUP_RDMA: u32 = 1;
pub const CONFIG_INOTIFY_USER: u32 = 1;
pub const CONFIG_PHYLIB: u32 = 1;
pub const CONFIG_ARCH_HAS_GIGANTIC_PAGE: u32 = 1;
pub const CONFIG_NR_CPUS_DEFAULT: u32 = 64;
pub const CONFIG_HDMI: u32 = 1;
pub const CONFIG_X86_DEBUGCTLMSR: u32 = 1;
pub const CONFIG_INPUT_TABLET: u32 = 1;
pub const CONFIG_HAVE_ARCH_SOFT_DIRTY: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_WITH_ARGS: u32 = 1;
pub const CONFIG_PATA_AMD: u32 = 1;
pub const CONFIG_ARCH_HAS_SYSCALL_WRAPPER: u32 = 1;
pub const CONFIG_WLAN_VENDOR_QUANTENNA: u32 = 1;
pub const CONFIG_HAVE_ARCH_MMAP_RND_COMPAT_BITS: u32 = 1;
pub const CONFIG_FAT_DEFAULT_CODEPAGE: u32 = 437;
pub const CONFIG_NLATTR: u32 = 1;
pub const CONFIG_DMAR_PERF: u32 = 1;
pub const CONFIG_HAVE_GUP_FAST: u32 = 1;
pub const CONFIG_SCHED_MC: u32 = 1;
pub const CONFIG_TCP_CONG_ADVANCED: u32 = 1;
pub const CONFIG_MMU_NOTIFIER: u32 = 1;
pub const CONFIG_HAVE_EBPF_JIT: u32 = 1;
pub const CONFIG_NET_VENDOR_ADAPTEC: u32 = 1;
pub const CONFIG_NET_VENDOR_WANGXUN: u32 = 1;
pub const CONFIG_INTEGRITY: u32 = 1;
pub const CONFIG_RFS_ACCEL: u32 = 1;
pub const CONFIG_FUNCTION_ALIGNMENT_16B: u32 = 1;
pub const CONFIG_KALLSYMS: u32 = 1;
pub const CONFIG_X86_AMD_PSTATE_DEFAULT_MODE: u32 = 3;
pub const CONFIG_MDIO_BUS: u32 = 1;
pub const CONFIG_SCSI_MOD: u32 = 1;
pub const CONFIG_IIO: u32 = 1;
pub const CONFIG_I2C_HELPER_AUTO: u32 = 1;
pub const CONFIG_HZ: u32 = 1000;
pub const CONFIG_TRACING: u32 = 1;
pub const CONFIG_ACPI: u32 = 1;
pub const CONFIG_ARCH_USE_QUEUED_SPINLOCKS: u32 = 1;
pub const CONFIG_PCI_LOCKLESS_CONFIG: u32 = 1;
pub const CONFIG_BLK_DEV_DM: u32 = 1;
pub const CONFIG_RUNTIME_TESTING_MENU: u32 = 1;
pub const CONFIG_VIRTUALIZATION: u32 = 1;
pub const CONFIG_TASKSTATS: u32 = 1;
pub const CONFIG_CGROUP_DEBUG: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS_BROADCAST_IDLE: u32 = 1;
pub const CONFIG_IPV6_SIT: u32 = 1;
pub const CONFIG_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_INTERVAL_TREE_SPAN_ITER: u32 = 1;
pub const CONFIG_AS_VPCLMULQDQ: u32 = 1;
pub const CONFIG_PREEMPTION: u32 = 1;
pub const CONFIG_BINARY_PRINTF: u32 = 1;
pub const CONFIG_TIGON3_HWMON: u32 = 1;
pub const CONFIG_HAVE_ARCH_KCSAN: u32 = 1;
pub const CONFIG_HAVE_PERF_EVENTS_NMI: u32 = 1;
pub const CONFIG_TRACE_IRQFLAGS_SUPPORT: u32 = 1;
pub const CONFIG_TIMERFD: u32 = 1;
pub const CONFIG_PREEMPT_VOLUNTARY: u32 = 1;
pub const CONFIG_GENERIC_VDSO_TIME_NS: u32 = 1;
pub const CONFIG_SND_JACK_INPUT_DEV: u32 = 1;
pub const CONFIG_IRQ_MSI_IOMMU: u32 = 1;
pub const CONFIG_NET_VENDOR_MYRI: u32 = 1;
pub const CONFIG_NET_VENDOR_META: u32 = 1;
pub const CONFIG_HID_SUNPLUS: u32 = 1;
pub const CONFIG_DRM_I915_USERPTR: u32 = 1;
pub const CONFIG_SERIO_I8042: u32 = 1;
pub const CONFIG_VMCORE_INFO: u32 = 1;
pub const CONFIG_IRQ_DOMAIN: u32 = 1;
pub const CONFIG_HAVE_KERNEL_GZIP: u32 = 1;
pub const CONFIG_PROBE_EVENTS: u32 = 1;
pub const CONFIG_LDISC_AUTOLOAD: u32 = 1;
pub const CONFIG_PCI_PRI: u32 = 1;
pub const CONFIG_CRYPTO_AKCIPHER2: u32 = 1;
pub const CONFIG_WATCHDOG_HANDLE_BOOT_ENABLED: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_SIDTAB_HASH_BITS: u32 = 9;
pub const CONFIG_SWIOTLB: u32 = 1;
pub const CONFIG_HAVE_ARCH_HUGE_VMALLOC: u32 = 1;
pub const CONFIG_INTEL_MEI: u32 = 1;
pub const CONFIG_CRYPTO_LIB_BLAKE2S_GENERIC: u32 = 1;
pub const CONFIG_HAS_IOMEM: u32 = 1;
pub const CONFIG_HAVE_CMPXCHG_DOUBLE: u32 = 1;
pub const CONFIG_PCIEASPM: u32 = 1;
pub const CONFIG_NETFILTER_XTABLES: u32 = 1;
pub const CONFIG_AS_IS_LLVM: u32 = 1;
pub const CONFIG_ARCH_HAS_DEVMEM_IS_ALLOWED: u32 = 1;
pub const CONFIG_XZ_DEC_POWERPC: u32 = 1;
pub const CONFIG_BPF: u32 = 1;
pub const CONFIG_LOCALVERSION: &[u8; 1] = b"\0";
pub const CONFIG_MOUSE_PS2_SYNAPTICS: u32 = 1;
pub const CONFIG_IOMMU_IO_PGTABLE: u32 = 1;
pub const CONFIG_KEXEC: u32 = 1;
pub const CONFIG_SND_HRTIMER: u32 = 1;
pub const CONFIG_HPET: u32 = 1;
pub const CONFIG_NF_NAT_SIP: u32 = 1;
pub const CONFIG_IP_PNP_RARP: u32 = 1;
pub const CONFIG_DRM_VIRTIO_GPU_KMS: u32 = 1;
pub const CONFIG_SLUB: u32 = 1;
pub const CONFIG_STACKPROTECTOR: u32 = 1;
pub const CONFIG_EXT4_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_NET_VENDOR_AMD: u32 = 1;
pub const CONFIG_MOUSE_PS2_ALPS: u32 = 1;
pub const CONFIG_IP_NF_IPTABLES: u32 = 1;
pub const CONFIG_HID_KENSINGTON: u32 = 1;
pub const CONFIG_HAVE_REGS_AND_STACK_ACCESS_API: u32 = 1;
pub const CONFIG_EARLY_PRINTK_DBGP: u32 = 1;
pub const CONFIG_HAVE_STACK_VALIDATION: u32 = 1;
pub const CONFIG_HAVE_SAMPLE_FTRACE_DIRECT: u32 = 1;
pub const CONFIG_E1000E_HWTS: u32 = 1;
pub const CONFIG_FIRMWARE_MEMMAP: u32 = 1;
pub const CONFIG_ARCH_DMA_ADDR_T_64BIT: u32 = 1;
pub const CONFIG_HID_A4TECH: u32 = 1;
pub const CONFIG_EFI_ESRT: u32 = 1;
pub const CONFIG_NET_TULIP: u32 = 1;
pub const CONFIG_CRYPTO_LIB_ARC4: u32 = 1;
pub const CONFIG_AGP: u32 = 1;
pub const CONFIG_SND_PROC_FS: u32 = 1;
pub const CONFIG_UTS_NS: u32 = 1;
pub const CONFIG_HAVE_IRQ_TIME_ACCOUNTING: u32 = 1;
pub const CONFIG_CRYPTO_CTR: u32 = 1;
pub const CONFIG_SERIAL_8250_PCILIB: u32 = 1;
pub const CONFIG_POSIX_CPU_TIMERS_TASK_WORK: u32 = 1;
pub const CONFIG_SND_INTEL_NHLT: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_SECMARK: u32 = 1;
pub const CONFIG_VHOST_MENU: u32 = 1;
pub const CONFIG_LOG_CPU_MAX_BUF_SHIFT: u32 = 12;
pub const CONFIG_ARCH_CPUIDLE_HALTPOLL: u32 = 1;
pub const CONFIG_USB_EHCI_TT_NEWSCHED: u32 = 1;
pub const CONFIG_CRYPTO_CBC: u32 = 1;
pub const CONFIG_SND_PCM: u32 = 1;
pub const CONFIG_NFS_ACL_SUPPORT: u32 = 1;
pub const CONFIG_HAVE_KERNEL_LZO: u32 = 1;
pub const CONFIG_DRM_I915_REQUEST_TIMEOUT: u32 = 20000;
pub const CONFIG_HOTPLUG_CORE_SYNC_DEAD: u32 = 1;
pub const CONFIG_MAC80211_RC_DEFAULT_MINSTREL: u32 = 1;
pub const CONFIG_NETFILTER_INGRESS: u32 = 1;
pub const CONFIG_IIO_BUFFER_HW_CONSUMER: u32 = 1;
pub const CONFIG_KRETPROBE_ON_RETHOOK: u32 = 1;
pub const CONFIG_ACPI_SLEEP: u32 = 1;
pub const CONFIG_UID16: u32 = 1;
pub const CONFIG_SWAP: u32 = 1;
pub const CONFIG_MAGIC_SYSRQ_SERIAL: u32 = 1;
pub const CONFIG_HAVE_STACKPROTECTOR: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_LOG_MODULE: u32 = 1;
pub const CONFIG_ACPI_MDIO: u32 = 1;
pub const CONFIG_HAVE_ARCH_JUMP_LABEL: u32 = 1;
pub const CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE: u32 = 1;
pub const CONFIG_PREEMPT_RCU: u32 = 1;
pub const CONFIG_HAVE_SYSCALL_TRACEPOINTS: u32 = 1;
pub const CONFIG_IOMMU_IOVA: u32 = 1;
pub const CONFIG_EEEPC_LAPTOP: u32 = 1;
pub const CONFIG_XOR_BLOCKS: u32 = 1;
pub const CONFIG_DNOTIFY: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC: u32 = 1;
pub const CONFIG_HAVE_HW_BREAKPOINT: u32 = 1;
pub const CONFIG_PTDUMP_CORE: u32 = 1;
pub const CONFIG_HAVE_NMI: u32 = 1;
pub const CONFIG_CC_HAS_INT128: u32 = 1;
pub const CONFIG_NETCONSOLE: u32 = 1;
pub const CONFIG_HAVE_VIRT_CPU_ACCOUNTING_GEN: u32 = 1;
pub const CONFIG_X86_CHECK_BIOS_CORRUPTION: u32 = 1;
pub const CONFIG_ACPI_WMI: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS_BROADCAST: u32 = 1;
pub const CONFIG_RTC_NVMEM: u32 = 1;
pub const CONFIG_HAVE_ARCH_COMPAT_MMAP_BASES: u32 = 1;
pub const CONFIG_PM_TRACE_RTC: u32 = 1;
pub const CONFIG_XARRAY_MULTI: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_FILE: u32 = 1;
pub const CONFIG_HAVE_ARCH_PREL32_RELOCATIONS: u32 = 1;
pub const CONFIG_CRYPTO_RNG_DEFAULT: u32 = 1;
pub const CONFIG_AS_WRUSS: u32 = 1;
pub const CONFIG_X86_MPPARSE: u32 = 1;
pub const CONFIG_X86_HAVE_PAE: u32 = 1;
pub const CONFIG_MDIO_DEVRES: u32 = 1;
pub const CONFIG_XZ_DEC_ARM: u32 = 1;
pub const CONFIG_HOTPLUG_PCI: u32 = 1;
pub const CONFIG_HAVE_FENTRY: u32 = 1;
pub const CONFIG_NET_VENDOR_HUAWEI: u32 = 1;
pub const CONFIG_HAVE_MIXED_BREAKPOINTS_REGS: u32 = 1;
pub const CONFIG_DEFAULT_INIT: &[u8; 1] = b"\0";
pub const CONFIG_LD_IS_LLD: u32 = 1;
pub const CONFIG_ARCH_MIGHT_HAVE_PC_SERIO: u32 = 1;
pub const CONFIG_ATA_ACPI: u32 = 1;
pub const CONFIG_NET_CLS: u32 = 1;
pub const CONFIG_HAVE_EXIT_THREAD: u32 = 1;
pub const CONFIG_NET_VENDOR_AGERE: u32 = 1;
pub const CONFIG_SCHEDSTATS: u32 = 1;
pub const CONFIG_REALTEK_PHY: u32 = 1;
pub const CONFIG_CRYPTO_KPP2: u32 = 1;
pub const CONFIG_DRM_I915_STOP_TIMEOUT: u32 = 100;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_SIG: u32 = 1;
pub const CONFIG_BLK_DEV_LOOP_MIN_COUNT: u32 = 8;
pub const CONFIG_DCACHE_WORD_ACCESS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_CFI_CLANG: u32 = 1;
pub const CONFIG_CDROM: u32 = 1;
pub const CONFIG_CONTEXT_SWITCH_TRACER: u32 = 1;
pub const CONFIG_DMA_ACPI: u32 = 1;
pub const CONFIG_INPUT_KEYBOARD: u32 = 1;
pub const CONFIG_MQ_IOSCHED_KYBER: u32 = 1;
pub const CONFIG_SND_SEQ_DUMMY: u32 = 1;
pub const CONFIG_ACPI_REV_OVERRIDE_POSSIBLE: u32 = 1;
pub const CONFIG_THREAD_INFO_IN_TASK: u32 = 1;
pub const CONFIG_SYSFS: u32 = 1;
pub const CONFIG_RD_ZSTD: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_DEVELOP: u32 = 1;
pub const CONFIG_HAVE_ARCH_THREAD_STRUCT_WHITELIST: u32 = 1;
pub const CONFIG_X86_64: u32 = 1;
pub const CONFIG_HAVE_RSEQ: u32 = 1;
pub const CONFIG_IP_NF_TARGET_REJECT: u32 = 1;
pub const CONFIG_HAVE_KCSAN_COMPILER: u32 = 1;
pub const CONFIG_WMI_BMOF: u32 = 1;
pub const CONFIG_STRICT_DEVMEM: u32 = 1;
pub const CONFIG_GCC10_NO_ARRAY_BOUNDS: u32 = 1;
pub const CONFIG_CC_HAS_SANE_STACKPROTECTOR: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_STATE: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_ONDEMAND: u32 = 1;
pub const CONFIG_I2C_ALGOBIT: u32 = 1;
pub const CONFIG_HAVE_RETHOOK: u32 = 1;
pub const CONFIG_NF_NAT_MASQUERADE: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS: u32 = 1;
pub const CONFIG_AS_TPAUSE: u32 = 1;
pub const CONFIG_RTC_CLASS: u32 = 1;
pub const CONFIG_CRYPTO_LZO: u32 = 1;
pub const CONFIG_SND_SUPPORT_OLD_API: u32 = 1;
pub const CONFIG_FWNODE_MDIO: u32 = 1;
pub const CONFIG_PERF_EVENTS: u32 = 1;
pub const CONFIG_HAVE_HARDLOCKUP_DETECTOR_PERF: u32 = 1;
pub const CONFIG_SERIAL_8250_NR_UARTS: u32 = 32;
pub const CONFIG_NO_HZ_IDLE: u32 = 1;
pub const CONFIG_PCIEPORTBUS: u32 = 1;
pub const CONFIG_USB_STORAGE: u32 = 1;
pub const CONFIG_X86_ESPFIX64: u32 = 1;
pub const CONFIG_DMAR_DEBUG: u32 = 1;
pub const CONFIG_IOMMU_API: u32 = 1;
pub const CONFIG_ZISOFS: u32 = 1;
pub const CONFIG_CRYPTO_RSA: u32 = 1;
pub const CONFIG_SERIAL_8250_MANY_PORTS: u32 = 1;
pub const CONFIG_LOCKD_V4: u32 = 1;
pub const CONFIG_CALL_THUNKS: u32 = 1;
pub const CONFIG_BQL: u32 = 1;
pub const CONFIG_IO_URING: u32 = 1;
pub const CONFIG_ASYMMETRIC_KEY_TYPE: u32 = 1;
pub const CONFIG_INPUT_MOUSE: u32 = 1;
pub const CONFIG_PROC_VMCORE: u32 = 1;
pub const CONFIG_INTEL_IOMMU_FLOPPY_WA: u32 = 1;
pub const CONFIG_DECOMPRESS_XZ: u32 = 1;
pub const CONFIG_MAC_EMUMOUSEBTN: u32 = 1;
pub const CONFIG_MODULES_USE_ELF_RELA: u32 = 1;
pub const CONFIG_DRM_I915: u32 = 1;
pub const CONFIG_HAVE_CALL_THUNKS: u32 = 1;
pub const CONFIG_X86_CET: u32 = 1;
pub const CONFIG_USB_XHCI_HCD: u32 = 1;
pub const CONFIG_ETHERNET: u32 = 1;
pub const CONFIG_DRM_TTM: u32 = 1;
pub const CONFIG_TREE_SRCU: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR: u32 = 1;
pub const CONFIG_ARCH_HAS_STRICT_KERNEL_RWX: u32 = 1;
pub const CONFIG_HAVE_LIVEPATCH: u32 = 1;
pub const CONFIG_BLOCK_HOLDER_DEPRECATED: u32 = 1;
pub const CONFIG_PATA_OLDPIIX: u32 = 1;
pub const CONFIG_INTEL_TCC: u32 = 1;
pub const CONFIG_CRC32_SLICEBY8: u32 = 1;
pub const CONFIG_ARCH_WANT_OLD_COMPAT_IPC: u32 = 1;
pub const CONFIG_GENERIC_IRQ_MATRIX_ALLOCATOR: u32 = 1;
pub const CONFIG_RANDOMIZE_MEMORY_PHYSICAL_PADDING: u32 = 0;
pub const CONFIG_NET_NS: u32 = 1;
pub const CONFIG_CRC16: u32 = 1;
pub const CONFIG_SOCK_CGROUP_DATA: u32 = 1;
pub const CONFIG_SCHED_CLUSTER: u32 = 1;
pub const CONFIG_MITIGATION_RETHUNK: u32 = 1;
pub const CONFIG_USB_AUTOSUSPEND_DELAY: u32 = 2;
pub const CONFIG_CRYPTO_SEQIV: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MAX: u32 = 16;
pub const CONFIG_MUTEX_SPIN_ON_OWNER: u32 = 1;
pub const CONFIG_FSNOTIFY: u32 = 1;
pub const CONFIG_NET_FLOW_LIMIT: u32 = 1;
pub const CONFIG_INPUT_TOUCHSCREEN: u32 = 1;
pub const CONFIG_VIRTIO: u32 = 1;
pub const CONFIG_SND_INTEL_DSP_CONFIG: u32 = 1;
pub const CONFIG_HID_CHICONY: u32 = 1;
pub const CONFIG_SYSTEM_TRUSTED_KEYRING: u32 = 1;
pub const CONFIG_HAVE_KERNEL_BZIP2: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_BITS_MAX: u32 = 32;
pub const CONFIG_ACPI_NHLT: u32 = 1;
pub const CONFIG_CGROUP_DEVICE: u32 = 1;
pub const CONFIG_SYNC_FILE: u32 = 1;
pub const CONFIG_SND_PCI: u32 = 1;
pub const CONFIG_IIO_KFIFO_BUF: u32 = 1;
pub const CONFIG_VIRTIO_PCI: u32 = 1;
pub const CONFIG_RD_LZMA: u32 = 1;
pub const CONFIG_VIRTIO_PCI_LEGACY: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_UPROBES: u32 = 1;
pub const CONFIG_IP_MROUTE: u32 = 1;
pub const CONFIG_ARCH_HAS_DEBUG_VM_PGTABLE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_ACPI: u32 = 1;
pub const CONFIG_PREEMPT_DYNAMIC: u32 = 1;
pub const CONFIG_CRYPTO_JITTERENTROPY_OSR: u32 = 1;
pub const CONFIG_HAVE_KRETPROBES: u32 = 1;
pub const CONFIG_NET_VENDOR_EMULEX: u32 = 1;
pub const CONFIG_X86_IO_APIC: u32 = 1;
pub const CONFIG_KEYS: u32 = 1;
pub const CONFIG_HAVE_INTEL_TXT: u32 = 1;
pub const CONFIG_X86_THERMAL_VECTOR: u32 = 1;
pub const CONFIG_ACPI_DOCK: u32 = 1;
pub const CONFIG_HAVE_USER_RETURN_NOTIFIER: u32 = 1;
pub const CONFIG_ACPI_VIDEO: u32 = 1;
pub const CONFIG_IO_WQ: u32 = 1;
pub const CONFIG_INTEL_MEI_ME: u32 = 1;
pub const CONFIG_HAVE_ARCH_HUGE_VMAP: u32 = 1;
pub const CONFIG_VDSO_GETRANDOM: u32 = 1;
pub const CONFIG_AS_VERSION: u32 = 180108;
pub const CONFIG_YENTA_TOSHIBA: u32 = 1;
pub const CONFIG_USB_NET_DRIVERS: u32 = 1;
pub const CONFIG_ARCH_USE_QUEUED_RWLOCKS: u32 = 1;
pub const CONFIG_DM_CRYPT: u32 = 1;
pub const CONFIG_NFS_FS: u32 = 1;
pub const CONFIG_NET_VENDOR_NATSEMI: u32 = 1;
pub const CONFIG_MD_BITMAP_FILE: u32 = 1;
pub const CONFIG_FUTEX_PI: u32 = 1;
pub const CONFIG_HAS_IOPORT_MAP: u32 = 1;
pub const CONFIG_RTC_INTF_DEV: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_IPV6HEADER: u32 = 1;
pub const CONFIG_CRYPTO_DRBG_HMAC: u32 = 1;
pub const CONFIG_RUST_IS_AVAILABLE: u32 = 1;
pub const CONFIG_AS_VAES: u32 = 1;
pub const CONFIG_HIBERNATION_DEF_COMP: &[u8; 4] = b"lzo\0";
pub const CONFIG_DRM_DISPLAY_HELPER: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_BITS: u32 = 28;
pub const CONFIG_MITIGATION_RETPOLINE: u32 = 1;
pub const CONFIG_YENTA_RICOH: u32 = 1;
pub const CONFIG_PROFILING: u32 = 1;
pub const CONFIG_NET_VENDOR_ALACRITECH: u32 = 1;
pub const CONFIG_HID_SAMSUNG: u32 = 1;
pub const CONFIG_SCSI_CONSTANTS: u32 = 1;
pub const CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE: u32 = 1;
pub const CONFIG_NET_SCH_FIFO: u32 = 1;
pub const CONFIG_TRACE_IRQFLAGS_NMI_SUPPORT: u32 = 1;
pub const CONFIG_NLS_DEFAULT: &[u8; 5] = b"utf8\0";
pub const CONFIG_CC_CAN_LINK_STATIC: u32 = 1;
pub const CONFIG_DMA_NEED_SYNC: u32 = 1;
pub const CONFIG_DYNAMIC_MEMORY_LAYOUT: u32 = 1;
pub const CONFIG_EARLY_PRINTK_USB: u32 = 1;
pub const CONFIG_ACPI_I2C_OPREGION: u32 = 1;
pub const CONFIG_INPUT_SPARSEKMAP: u32 = 1;
pub const CONFIG_DMI_SCAN_MACHINE_NON_EFI_FALLBACK: u32 = 1;
pub const CONFIG_GRO_CELLS: u32 = 1;
pub const CONFIG_CRYPTO_JITTERENTROPY_MEMORY_BLOCKSIZE: u32 = 32;
pub const CONFIG_GENERIC_STRNCPY_FROM_USER: u32 = 1;
pub const CONFIG_HAVE_MOVE_PMD: u32 = 1;
pub const CONFIG_PROC_EVENTS: u32 = 1;
pub const CONFIG_FAILOVER: u32 = 1;
pub const CONFIG_NF_CONNTRACK_IRC: u32 = 1;
pub const CONFIG_VIRTIO_DMA_SHARED_BUFFER: u32 = 1;
pub const CONFIG_SND_HDA_CORE: u32 = 1;
pub const CONFIG_INTEL_IOMMU_DEBUGFS: u32 = 1;
pub const CONFIG_HID: u32 = 1;
pub const CONFIG_CRYPTO_LZ4: u32 = 1;
pub const CONFIG_CRYPTO_LIB_UTILS: u32 = 1;
pub const CONFIG_SG_POOL: u32 = 1;
pub const CONFIG_X86: u32 = 1;
pub const CONFIG_CC_HAS_WORKING_NOSANITIZE_ADDRESS: u32 = 1;
pub const CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS: u32 = 1;
pub const CONFIG_NET_EMATCH: u32 = 1;
pub const CONFIG_SND_HDA_POWER_SAVE_DEFAULT: u32 = 0;
pub const CONFIG_BINFMT_MISC: u32 = 1;
pub const CONFIG_USB_PCI: u32 = 1;
pub const CONFIG_SCHED_MM_CID: u32 = 1;
pub const CONFIG_ACPI_VIOT: u32 = 1;
pub const CONFIG_ADVISE_SYSCALLS: u32 = 1;
pub const CONFIG_THERMAL_GOV_STEP_WISE: u32 = 1;
pub const CONFIG_NET: u32 = 1;
pub const CONFIG_MODULE_FORCE_UNLOAD: u32 = 1;
pub const CONFIG_X86_VSYSCALL_EMULATION: u32 = 1;
pub const CONFIG_ARCH_ENABLE_SPLIT_PMD_PTLOCK: u32 = 1;
pub const CONFIG_HAVE_OPTPROBES: u32 = 1;
pub const CONFIG_WLAN_VENDOR_MICROCHIP: u32 = 1;
pub const CONFIG_DEFAULT_CUBIC: u32 = 1;
pub const CONFIG_XFRM_USER: u32 = 1;
pub const CONFIG_USB_DEFAULT_AUTHORIZATION_MODE: u32 = 1;
pub const CONFIG_ACPI_THERMAL: u32 = 1;
pub const CONFIG_NET_VENDOR_ENGLEDER: u32 = 1;
pub const CONFIG_TRACEPOINTS: u32 = 1;
pub const CONFIG_SCHED_SMT: u32 = 1;
pub const CONFIG_UNINLINE_SPIN_UNLOCK: u32 = 1;
pub const CONFIG_PCSPKR_PLATFORM: u32 = 1;
pub const CONFIG_INITRAMFS_SOURCE: &[u8; 1] = b"\0";
pub const CONFIG_UNIX98_PTYS: u32 = 1;
pub const CONFIG_RANDOMIZE_KSTACK_OFFSET: u32 = 1;
pub const CONFIG_CLKBLD_I8253: u32 = 1;
pub const CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR_CSTATE: u32 = 1;
pub const CONFIG_ARCH_WANT_OPTIMIZE_HUGETLB_VMEMMAP: u32 = 1;
pub const CONFIG_ARCH_SPARSEMEM_DEFAULT: u32 = 1;
pub const CONFIG_EXECMEM: u32 = 1;
pub const CONFIG_NET_VENDOR_REALTEK: u32 = 1;
pub const CONFIG_HOTPLUG_SPLIT_STARTUP: u32 = 1;
pub const CONFIG_VT: u32 = 1;
pub const CONFIG_NET_CLS_ACT: u32 = 1;
pub const CONFIG_COMPAT_OLD_SIGACTION: u32 = 1;
pub const CONFIG_SMP: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_COMPAT_BITS: u32 = 8;
pub const CONFIG_CFG80211: u32 = 1;
pub const CONFIG_HID_REDRAGON: u32 = 1;
pub const CONFIG_QUEUED_RWLOCKS: u32 = 1;
pub const CONFIG_LSM_MMAP_MIN_ADDR: u32 = 65536;
pub const CONFIG_MAC80211_RC_MINSTREL: u32 = 1;
pub const CONFIG_X86_KERNEL_IBT: u32 = 1;
pub const CONFIG_HAVE_ARCH_AUDITSYSCALL: u32 = 1;
pub const CONFIG_BLK_DEV_LOOP: u32 = 1;
pub const CONFIG_HID_APPLE: u32 = 1;
pub const CONFIG_RCU_STALL_COMMON: u32 = 1;
pub const CONFIG_HAVE_ASM_MODVERSIONS: u32 = 1;
pub const CONFIG_HAVE_PERF_EVENTS: u32 = 1;
pub const CONFIG_RFKILL_LEDS: u32 = 1;
pub const CONFIG_SECRETMEM: u32 = 1;
pub const CONFIG_CRYPTO_MANAGER_DISABLE_TESTS: u32 = 1;
pub const CONFIG_X86_L1_CACHE_SHIFT: u32 = 6;
pub const CONFIG_LTO_NONE: u32 = 1;
pub const CONFIG_HAVE_DMA_CONTIGUOUS: u32 = 1;
pub const CONFIG_ARCH_PROC_KCORE_TEXT: u32 = 1;
pub const CONFIG_BACKLIGHT_CLASS_DEVICE: u32 = 1;
pub const CONFIG_CRYPTO_MANAGER: u32 = 1;
pub const CONFIG_HIBERNATION_COMP_LZO: u32 = 1;
pub const CONFIG_SUSPEND_FREEZER: u32 = 1;
pub const CONFIG_NET_VENDOR_MARVELL: u32 = 1;
pub const CONFIG_CPU_SUP_HYGON: u32 = 1;
pub const CONFIG_DECOMPRESS_LZO: u32 = 1;
pub const CONFIG_HAVE_ARCH_STACKLEAK: u32 = 1;
pub const CONFIG_LZ4_DECOMPRESS: u32 = 1;
pub const CONFIG_QUOTA_NETLINK_INTERFACE: u32 = 1;
pub const CONFIG_PM_TRACE: u32 = 1;
pub const CONFIG_SAMPLES_RUST: u32 = 1;
pub const CONFIG_RTC_MC146818_LIB: u32 = 1;
pub const CONFIG_RD_LZO: u32 = 1;
pub const CONFIG_NET_VENDOR_AQUANTIA: u32 = 1;
pub const CONFIG_ATA_SFF: u32 = 1;
pub const CONFIG_DEBUG_BOOT_PARAMS: u32 = 1;
pub const CONFIG_ACPI_LPIT: u32 = 1;
pub const CONFIG_USB_SUPPORT: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR_IDLE: u32 = 1;
pub const CONFIG_CRYPTO_JITTERENTROPY: u32 = 1;
pub const CONFIG_PREVENT_FIRMWARE_BUILD: u32 = 1;
pub const CONFIG_CC_HAS_SANCOV_TRACE_PC: u32 = 1;
pub const CONFIG_DM_ZERO: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_RELAX: u32 = 1;
pub const CONFIG_ACPI_MADT_WAKEUP: u32 = 1;
pub const CONFIG_XZ_DEC_ARMTHUMB: u32 = 1;
pub const CONFIG_INTEL_GTT: u32 = 1;
pub const CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE: u32 = 1;
pub const CONFIG_ZONE_DMA32: u32 = 1;
pub const CONFIG_CC_HAS_KASAN_GENERIC: u32 = 1;
pub const CONFIG_NET_FAILOVER: u32 = 1;
pub const CONFIG_X86_IOPL_IOPERM: u32 = 1;
pub const CONFIG_PRINTK_TIME: u32 = 1;
pub const CONFIG_ACPI_CPPC_LIB: u32 = 1;
pub const CONFIG_ZLIB_INFLATE: u32 = 1;
pub const CONFIG_ARCH_WANTS_THP_SWAP: u32 = 1;
pub const CONFIG_VGA_ARB: u32 = 1;
pub const CONFIG_PERF_EVENTS_AMD_UNCORE: u32 = 1;
pub const CONFIG_ARCH_USE_MEMTEST: u32 = 1;
pub const CONFIG_HID_GENERIC: u32 = 1;
pub const CONFIG_INTEL_IOMMU_SVM: u32 = 1;
pub const CONFIG_X86_MCE_AMD: u32 = 1;
pub const CONFIG_APERTURE_HELPERS: u32 = 1;
pub const CONFIG_SAMPLE_RUST_PRINT: u32 = 1;
pub const CONFIG_SWPHY: u32 = 1;
pub const CONFIG_CGROUP_CPUACCT: u32 = 1;
pub const CONFIG_SND_HDA_COMPONENT: u32 = 1;
pub const CONFIG_DRM_PANEL_BRIDGE: u32 = 1;
pub const CONFIG_NET_POLL_CONTROLLER: u32 = 1;
pub const CONFIG_DW_DMAC_CORE: u32 = 1;
pub const CONFIG_DIMLIB: u32 = 1;
pub const CONFIG_MAILBOX: u32 = 1;
pub const CONFIG_SPARSE_IRQ: u32 = 1;
pub const CONFIG_NEED_SG_DMA_LENGTH: u32 = 1;
pub const CONFIG_SUSPEND: u32 = 1;
pub const CONFIG_GRACE_PERIOD: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_ARG_ACCESS_API: u32 = 1;
pub const CONFIG_CC_IMPLICIT_FALLTHROUGH: &[u8; 23] = b"-Wimplicit-fallthrough\0";
pub const CONFIG_IP_MULTIPLE_TABLES: u32 = 1;
pub const CONFIG_WLAN_VENDOR_RALINK: u32 = 1;
pub const CONFIG_RATIONAL: u32 = 1;
pub const CONFIG_NF_CONNTRACK: u32 = 1;
pub const CONFIG_CRC64: u32 = 1;
pub const CONFIG_HID_GYRATION: u32 = 1;
pub const CONFIG_ARCH_WANT_GENERAL_HUGETLB: u32 = 1;
pub const CONFIG_ZONE_DMA: u32 = 1;
pub const CONFIG_ARCH_HAS_PMEM_API: u32 = 1;
pub const CONFIG_CLOCKSOURCE_WATCHDOG: u32 = 1;
pub const CONFIG_ARCH_MIGHT_HAVE_PC_PARPORT: u32 = 1;
pub const CONFIG_RD_GZIP: u32 = 1;
pub const CONFIG_MSDOS_PARTITION: u32 = 1;
pub const CONFIG_PCC: u32 = 1;
pub const CONFIG_POWER_SUPPLY_HWMON: u32 = 1;
pub const CONFIG_NETFILTER_NETLINK_LOG: u32 = 1;
pub const CONFIG_ZSTD_COMMON: u32 = 1;
pub const CONFIG_AS_GFNI: u32 = 1;
pub const CONFIG_WATCHDOG: u32 = 1;
pub const CONFIG_NET_VENDOR_RDC: u32 = 1;
pub const CONFIG_LOGITECH_FF: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_CONNSECMARK: u32 = 1;
pub const CONFIG_XFRM: u32 = 1;
pub const CONFIG_HAVE_NOINSTR_VALIDATION: u32 = 1;
pub const CONFIG_FIX_EARLYCON_MEM: u32 = 1;
pub const CONFIG_ARCH_HAS_FAST_MULTIPLIER: u32 = 1;
pub const CONFIG_CGROUP_HUGETLB: u32 = 1;
pub const CONFIG_FW_LOADER: u32 = 1;
pub const CONFIG_RTC_SYSTOHC: u32 = 1;
pub const CONFIG_CC_HAS_RANDSTRUCT: u32 = 1;
pub const CONFIG_AMD_NUMA: u32 = 1;
pub const CONFIG_DRM_I915_HEARTBEAT_INTERVAL: u32 = 2500;
pub const CONFIG_ARCH_HAS_CACHE_LINE_SIZE: u32 = 1;
pub const CONFIG_X86_MINIMUM_CPU_FAMILY: u32 = 64;
pub const CONFIG_EXPORTFS: u32 = 1;
pub const CONFIG_PANIC_TIMEOUT: u32 = 0;
pub const CONFIG_PTP_1588_CLOCK: u32 = 1;
pub const CONFIG_NET_CORE: u32 = 1;
pub const CONFIG_MMU_LAZY_TLB_REFCOUNT: u32 = 1;
pub const CONFIG_NAMESPACES: u32 = 1;
pub const CONFIG_DECOMPRESS_GZIP: u32 = 1;
pub const CONFIG_HWMON: u32 = 1;
pub const CONFIG_ACPI_BATTERY: u32 = 1;
pub const CONFIG_CPU_RMAP: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_NUMA_BALANCING: u32 = 1;
pub const CONFIG_BUFFER_HEAD: u32 = 1;
pub const CONFIG_PERF_EVENTS_INTEL_CSTATE: u32 = 1;
pub const CONFIG_CC_HAS_AUTO_VAR_INIT_PATTERN: u32 = 1;
pub const CONFIG_HIBERNATE_CALLBACKS: u32 = 1;
pub const CONFIG_NET_VENDOR_MELLANOX: u32 = 1;
pub const CONFIG_NET_VENDOR_SAMSUNG: u32 = 1;
pub const CONFIG_SKY2: u32 = 1;
pub const CONFIG_PCCARD: u32 = 1;
pub const CONFIG_X86_TSC: u32 = 1;
pub const CONFIG_PCI_DOMAINS: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_SCHEDUTIL: u32 = 1;
pub const CONFIG_DRM_I915_COMPRESS_ERROR: u32 = 1;
pub const CONFIG_EFI_RUNTIME_WRAPPERS: u32 = 1;
pub const CONFIG_NF_CT_NETLINK: u32 = 1;
pub const CONFIG_IIO_TRIGGERED_BUFFER: u32 = 1;
pub const CONFIG_NETFILTER_XT_NAT_MODULE: u32 = 1;
pub const CONFIG_PROC_SYSCTL: u32 = 1;
pub const CONFIG_MIGRATION: u32 = 1;
pub const CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS: u32 = 1;
pub const CONFIG_CRYPTO_AKCIPHER: u32 = 1;
pub const CONFIG_NET_SCHED: u32 = 1;
pub const CONFIG_HAVE_HARDLOCKUP_DETECTOR_BUDDY: u32 = 1;
pub const CONFIG_NETPOLL: u32 = 1;
pub const CONFIG_CPU_SUP_AMD: u32 = 1;
pub const CONFIG_MII: u32 = 1;
pub const CONFIG_NVMEM_SYSFS: u32 = 1;
pub const CONFIG_SCSI_COMMON: u32 = 1;
pub const CONFIG_SPARSEMEM_EXTREME: u32 = 1;
pub const CONFIG_RSEQ: u32 = 1;
pub const CONFIG_IOMMU_DMA: u32 = 1;
pub const CONFIG_SAMPLE_RUST_HOSTPROGS: u32 = 1;
pub const CONFIG_SYSCTL_EXCEPTION_TRACE: u32 = 1;
pub const CONFIG_NEW_LEDS: u32 = 1;
pub const CONFIG_SERIAL_8250_PERICOM: u32 = 1;
pub const CONFIG_PADATA: u32 = 1;
pub const CONFIG_RUST_DEBUG_ASSERTIONS: u32 = 1;
pub const CONFIG_ARCH_HAS_PTE_SPECIAL: u32 = 1;
pub const CONFIG_CC_HAS_ASM_INLINE: u32 = 1;
pub const CONFIG_HAVE_ACPI_APEI_NMI: u32 = 1;
pub const CONFIG_CALL_PADDING: u32 = 1;
pub const CONFIG_X86_EXTENDED_PLATFORM: u32 = 1;
pub const CONFIG_HAVE_ACPI_APEI: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_SIG_FORCE: u32 = 1;
pub const CONFIG_KPROBE_EVENTS: u32 = 1;
pub const CONFIG_CC_HAS_ASM_GOTO_TIED_OUTPUT: u32 = 1;
pub const CONFIG_BLK_DEV_INITRD: u32 = 1;
pub const CONFIG_NEED_TASKS_RCU: u32 = 1;
pub const CONFIG_DEBUG_STACK_USAGE: u32 = 1;
pub const CONFIG_INET: u32 = 1;
pub const CONFIG_NR_CPUS_RANGE_BEGIN: u32 = 2;
pub const CONFIG_HID_PETALYNX: u32 = 1;
pub const CONFIG_BLK_DEV_SR: u32 = 1;
pub const CONFIG_MD_AUTODETECT: u32 = 1;
pub const CONFIG_HAVE_EISA: u32 = 1;
pub const CONFIG_ATA: u32 = 1;
pub const CONFIG_RPS: u32 = 1;
pub const CONFIG_NF_CONNTRACK_SECMARK: u32 = 1;
pub const CONFIG_CGROUP_NET_PRIO: u32 = 1;
pub const CONFIG_MPILIB: u32 = 1;
pub const CONFIG_FIRMWARE_TABLE: u32 = 1;
pub const CONFIG_EPOLL: u32 = 1;
pub const CONFIG_CGROUPS: u32 = 1;
pub const CONFIG_MITIGATION_IBPB_ENTRY: u32 = 1;
pub const CONFIG_HAVE_ARCH_KMSAN: u32 = 1;
pub const CONFIG_SERIAL_8250: u32 = 1;
pub const CONFIG_HAVE_ARCH_KASAN: u32 = 1;
pub const CONFIG_USE_PERCPU_NUMA_NODE_ID: u32 = 1;
pub const CONFIG_HAVE_KMSAN_COMPILER: u32 = 1;
pub const CONFIG_CRYPTO_HASH_INFO: u32 = 1;
pub const CONFIG_CRC32: u32 = 1;
pub const CONFIG_EXT4_FS: u32 = 1;
pub const CONFIG_HID_EZKEY: u32 = 1;
pub const CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE: u32 = 1;
pub const CONFIG_RUST: u32 = 1;
pub const CONFIG_HAVE_SETUP_PER_CPU_AREA: u32 = 1;
pub const CONFIG_ARCH_HAS_SET_DIRECT_MAP: u32 = 1;
pub const CONFIG_RUSTC_VERSION_TEXT: &[u8; 36] = b"rustc 1.80.0 (051478957 2024-07-21)\0";
pub const CONFIG_PCMCIA_LOAD_CIS: u32 = 1;
pub const CONFIG_SATA_MOBILE_LPM_POLICY: u32 = 3;
pub const CONFIG_DMARD10: u32 = 1;
pub const CONFIG_DECOMPRESS_BZIP2: u32 = 1;
pub const CONFIG_ACPI_HOTPLUG_IOAPIC: u32 = 1;
pub const CONFIG_HAVE_ARCH_VMAP_STACK: u32 = 1;
pub const CONFIG_HAVE_OBJTOOL_NOP_MCOUNT: u32 = 1;
pub const CONFIG_EFI_STUB: u32 = 1;
pub const CONFIG_RTC_LIB: u32 = 1;
pub const CONFIG_HAVE_MOVE_PUD: u32 = 1;
pub const CONFIG_PER_VMA_LOCK: u32 = 1;
pub const CONFIG_DQL: u32 = 1;
pub const CONFIG_SECCOMP_FILTER: u32 = 1;
pub const CONFIG_TASKS_RCU: u32 = 1;
pub const CONFIG_GCC_VERSION: u32 = 0;
pub const CONFIG_HAVE_ARCH_JUMP_LABEL_RELATIVE: u32 = 1;
pub const CONFIG_NET_VENDOR_RENESAS: u32 = 1;
pub const CONFIG_SYSCTL: u32 = 1;
pub const CONFIG_THERMAL_GOV_USER_SPACE: u32 = 1;
pub const CONFIG_PANIC_ON_OOPS_VALUE: u32 = 0;
pub const CONFIG_NVMEM: u32 = 1;
pub const CONFIG_CRYPTO_LIB_SHA1: u32 = 1;
pub const CONFIG_IP_NF_IPTABLES_LEGACY: u32 = 1;
pub const CONFIG_SSB_POSSIBLE: u32 = 1;
pub const CONFIG_NET_VENDOR_XILINX: u32 = 1;
pub const CONFIG_TIGON3: u32 = 1;
pub const CONFIG_NLS_UTF8: u32 = 1;
pub const CONFIG_WLAN_VENDOR_REALTEK: u32 = 1;
pub const CONFIG_PM_SLEEP_SMP: u32 = 1;
pub const CONFIG_ARCH_MAY_HAVE_PC_FDC: u32 = 1;
pub const CONFIG_FIXED_PHY: u32 = 1;
pub const CONFIG_CRYPTO_NULL: u32 = 1;
pub const CONFIG_POSIX_MQUEUE_SYSCTL: u32 = 1;
pub const CONFIG_HIBERNATION: u32 = 1;
pub const CONFIG_OUTPUT_FORMAT: &[u8; 13] = b"elf64-x86-64\0";
pub const CONFIG_SERIAL_CORE_CONSOLE: u32 = 1;
pub const CONFIG_NET_VENDOR_CISCO: u32 = 1;
pub const CONFIG_XXHASH: u32 = 1;
pub const CONFIG_TASK_XACCT: u32 = 1;
pub const CONFIG_MODIFY_LDT_SYSCALL: u32 = 1;
pub const CONFIG_MMCONF_FAM10H: u32 = 1;
pub const CONFIG_ATA_PIIX: u32 = 1;
pub const CONFIG_ARCH_CONFIGURES_CPU_MITIGATIONS: u32 = 1;
pub const CONFIG_IA32_FEAT_CTL: u32 = 1;
pub const CONFIG_IRQ_DOMAIN_HIERARCHY: u32 = 1;
pub const CONFIG_SND_JACK: u32 = 1;
pub const CONFIG_SLUB_CPU_PARTIAL: u32 = 1;
pub const CONFIG_CC_HAS_IBT: u32 = 1;
pub const CONFIG_GENERIC_IRQ_PROBE: u32 = 1;
pub const CONFIG_9P_FS: u32 = 1;
pub const CONFIG_MOUSE_PS2_SMBUS: u32 = 1;
pub const CONFIG_FRAME_WARN: u32 = 2048;
pub const CONFIG_LD_VERSION: u32 = 0;
pub const CONFIG_VT_CONSOLE: u32 = 1;
pub const CONFIG_I2C: u32 = 1;
pub const CONFIG_X86_CPUID: u32 = 1;
pub const CONFIG_PCIE_PME: u32 = 1;
pub const CONFIG_LEDS_CLASS: u32 = 1;
pub const CONFIG_PM_SLEEP: u32 = 1;
pub const CONFIG_DRM_BRIDGE: u32 = 1;
pub const CONFIG_ACPI_NUMA: u32 = 1;
pub const CONFIG_EFI_DXE_MEM_ATTRIBUTES: u32 = 1;
pub const CONFIG_SYSTEM_DATA_VERIFICATION: u32 = 1;
pub const CONFIG_VIRTIO_IOMMU: u32 = 1;
pub const CONFIG_DRM_I915_MAX_REQUEST_BUSYWAIT: u32 = 8000;
pub const CONFIG_HIBERNATION_SNAPSHOT_DEV: u32 = 1;
pub const CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS: u32 = 1;
pub const CONFIG_NET_PTP_CLASSIFY: u32 = 1;
pub const CONFIG_CC_HAS_RETURN_THUNK: u32 = 1;
pub const CONFIG_VMAP_STACK: u32 = 1;
pub const CONFIG_PM: u32 = 1;
pub const CONFIG_DST_CACHE: u32 = 1;
pub const CONFIG_CRYPTO_SHA512: u32 = 1;
pub const CONFIG_NET_VENDOR_GOOGLE: u32 = 1;
pub const CONFIG_ARCH_SPARSEMEM_ENABLE: u32 = 1;
pub const CONFIG_ACPI_THERMAL_LIB: u32 = 1;
pub const CONFIG_NLS: u32 = 1;
pub const CONFIG_GENERIC_IRQ_RESERVATION_MODE: u32 = 1;
pub const CONFIG_OID_REGISTRY: u32 = 1;
pub const CONFIG_USER_STACKTRACE_SUPPORT: u32 = 1;
pub const CONFIG_GENERIC_IRQ_MIGRATION: u32 = 1;
pub const CONFIG_NET_VENDOR_WIZNET: u32 = 1;
pub const CONFIG_MITIGATION_PAGE_TABLE_ISOLATION: u32 = 1;
pub const CONFIG_FIB_RULES: u32 = 1;
pub const CONFIG_CONTEXT_TRACKING_IDLE: u32 = 1;
pub const CONFIG_BLK_DEBUG_FS: u32 = 1;
pub const CONFIG_JBD2: u32 = 1;
pub const CONFIG_FONT_SUPPORT: u32 = 1;
pub const CONFIG_GENERIC_IRQ_EFFECTIVE_AFF_MASK: u32 = 1;
pub const CONFIG_WIRELESS: u32 = 1;
pub const CONFIG_NETFILTER: u32 = 1;
pub const CONFIG_VIRTIO_PCI_ADMIN_LEGACY: u32 = 1;
pub const CONFIG_INTEL_IOMMU_SCALABLE_MODE_DEFAULT_ON: u32 = 1;
pub const CONFIG_DRM_DISPLAY_DP_HELPER: u32 = 1;
pub const CONFIG_CRYPTO_SKCIPHER: u32 = 1;
pub const CONFIG_HID_ITE: u32 = 1;
pub const CONFIG_X86_AMD_PSTATE: u32 = 1;
pub const CONFIG_PCP_BATCH_SCALE_MAX: u32 = 5;
pub const CONFIG_SERIO_LIBPS2: u32 = 1;
pub const CONFIG_HAVE_PREEMPT_DYNAMIC: u32 = 1;
pub const CONFIG_USB_DEFAULT_PERSIST: u32 = 1;
pub const CONFIG_TCP_CONG_CUBIC: u32 = 1;
pub const CONFIG_SPLIT_PTLOCK_CPUS: u32 = 4;
pub const CONFIG_CRYPTO_ECHAINIV: u32 = 1;
pub const CONFIG_ARCH_HAS_UBSAN: u32 = 1;
pub const CONFIG_VMAP_PFN: u32 = 1;
pub const CONFIG_HAVE_SOFTIRQ_ON_OWN_STACK: u32 = 1;
pub const CONFIG_HPET_TIMER: u32 = 1;
pub const CONFIG_ARCH_HAS_MEM_ENCRYPT: u32 = 1;
pub const CONFIG_HID_PANTHERLORD: u32 = 1;
pub const CONFIG_SERIAL_NONSTANDARD: u32 = 1;
pub const CONFIG_HAVE_RUST: u32 = 1;
pub const CONFIG_BLK_DEV_BSG_COMMON: u32 = 1;
pub const CONFIG_CFG80211_CRDA_SUPPORT: u32 = 1;
pub const CONFIG_NVRAM: u32 = 1;
pub const CONFIG_IP_ADVANCED_ROUTER: u32 = 1;
pub const CONFIG_CRYPTO_GENIV: u32 = 1;
pub const CONFIG_MMU_GATHER_MERGE_VMAS: u32 = 1;
pub const CONFIG_AUDIT_ARCH: u32 = 1;
pub const CONFIG_FTRACE: u32 = 1;
pub const CONFIG_DNS_RESOLVER: u32 = 1;
pub const CONFIG_SUNRPC_GSS: u32 = 1;
pub const CONFIG_EDAC_SUPPORT: u32 = 1;
pub const CONFIG_USB_PRINTER: u32 = 1;
pub const CONFIG_SERIAL_8250_LPSS: u32 = 1;
pub const CONFIG_SND_INTEL_SOUNDWIRE_ACPI: u32 = 1;
pub const CONFIG_EFI_PARTITION: u32 = 1;
pub const CONFIG_HAVE_PREEMPT_DYNAMIC_CALL: u32 = 1;
pub const CONFIG_FHANDLE: u32 = 1;
pub const CONFIG_ARCH_MHP_MEMMAP_ON_MEMORY_ENABLE: u32 = 1;
pub const CONFIG_SGL_ALLOC: u32 = 1;
pub const CONFIG_GENERIC_PCI_IOMAP: u32 = 1;
pub const CONFIG_SOUND: u32 = 1;
pub const CONFIG_LOCALVERSION_AUTO: u32 = 1;
pub const CONFIG_GENERIC_ALLOCATOR: u32 = 1;
pub const CONFIG_AMD_IOMMU_DEBUGFS: u32 = 1;
pub const CONFIG_HAVE_ARCH_KGDB: u32 = 1;
pub const CONFIG_NET_INGRESS: u32 = 1;
pub const CONFIG_CRYPTO_AEAD2: u32 = 1;
pub const CONFIG_GENERIC_BUG_RELATIVE_POINTERS: u32 = 1;
pub const CONFIG_ARCH_STACKWALK: u32 = 1;
pub const CONFIG_NODES_SHIFT: u32 = 6;
pub const CONFIG_USB_HIDDEV: u32 = 1;
pub const CONFIG_MITIGATION_CALL_DEPTH_TRACKING: u32 = 1;
pub const CONFIG_DEBUG_INFO_NONE: u32 = 1;
pub const CONFIG_HAVE_ARCH_MMAP_RND_BITS: u32 = 1;
pub const CONFIG_HAVE_PERF_REGS: u32 = 1;
pub const CONFIG_GENERIC_PENDING_IRQ: u32 = 1;
pub const CONFIG_PAGE_SIZE_LESS_THAN_256KB: u32 = 1;
pub const CONFIG_HAS_IOPORT: u32 = 1;
pub const CONFIG_STRICT_MODULE_RWX: u32 = 1;
pub const CONFIG_HAVE_JUMP_LABEL_HACK: u32 = 1;
pub const CONFIG_X86_DEBUG_FPU: u32 = 1;
pub const CONFIG_PCI: u32 = 1;
pub const CONFIG_USB_OHCI_HCD_PCI: u32 = 1;
pub const CONFIG_CLANG_VERSION: u32 = 180108;
pub const CONFIG_HAVE_ARCH_WITHIN_STACK_FRAMES: u32 = 1;
pub const CONFIG_ARCH_HAS_ELF_RANDOMIZE: u32 = 1;
pub const CONFIG_SCSI: u32 = 1;
pub const CONFIG_INPUT_LEDS: u32 = 1;
pub const CONFIG_HAVE_ZSMALLOC: u32 = 1;
pub const CONFIG_MAGIC_SYSRQ: u32 = 1;
pub const CONFIG_GENERIC_CALIBRATE_DELAY: u32 = 1;
pub const CONFIG_NET_VENDOR_SOLARFLARE: u32 = 1;
pub const CONFIG_MAGIC_SYSRQ_SERIAL_SEQUENCE: &[u8; 1] = b"\0";
pub const CONFIG_LD_ORPHAN_WARN_LEVEL: &[u8; 6] = b"error\0";
pub const CONFIG_CC_HAS_ASM_GOTO_OUTPUT: u32 = 1;
pub const CONFIG_64BIT: u32 = 1;
pub const CONFIG_USB_OHCI_LITTLE_ENDIAN: u32 = 1;
pub const CONFIG_ISO9660_FS: u32 = 1;
pub const CONFIG_PM_DEBUG: u32 = 1;
pub const CONFIG_HAVE_STATIC_CALL_INLINE: u32 = 1;
pub const CONFIG_CRYPTO_NULL2: u32 = 1;
pub const CONFIG_NET_VENDOR_TI: u32 = 1;
pub const CONFIG_BLK_CGROUP: u32 = 1;
pub const CONFIG_HARDLOCKUP_CHECK_TIMESTAMP: u32 = 1;
pub const CONFIG_HAVE_ARCH_KFENCE: u32 = 1;
pub const CONFIG_DECOMPRESS_ZSTD: u32 = 1;
pub const CONFIG_NF_LOG_ARP_MODULE: u32 = 1;
pub const CONFIG_OLD_SIGSUSPEND3: u32 = 1;
pub const CONFIG_XPS: u32 = 1;
pub const CONFIG_COMPAT_32BIT_TIME: u32 = 1;
pub const CONFIG_HOTPLUG_CPU: u32 = 1;
pub const CONFIG_RANDOMIZE_BASE: u32 = 1;
pub const CONFIG_NET_VENDOR_PENSANDO: u32 = 1;
pub const CONFIG_EFI_HANDOVER_PROTOCOL: u32 = 1;
pub const CONFIG_ARCH_HAS_SET_MEMORY: u32 = 1;
pub const CONFIG_HID_CHERRY: u32 = 1;
pub const CONFIG_YENTA_ENE_TUNE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_ADDRTYPE_MODULE: u32 = 1;
pub const CONFIG_CC_CAN_LINK: u32 = 1;
pub const CONFIG_FUNCTION_PADDING_CFI: u32 = 11;
pub const CONFIG_X86_REROUTE_FOR_BROKEN_BOOT_IRQS: u32 = 1;
pub const CONFIG_DEFAULT_SECURITY_SELINUX: u32 = 1;
pub const CONFIG_NF_LOG_IPV6_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_AUTO_VAR_INIT_ZERO_BARE: u32 = 1;
pub const CONFIG_KERNFS: u32 = 1;
pub const CONFIG_SERIO_SERPORT: u32 = 1;
pub const CONFIG_RD_XZ: u32 = 1;
pub const CONFIG_HAVE_PAGE_SIZE_4KB: u32 = 1;
pub const CONFIG_ARCH_WANTS_DYNAMIC_TASK_STRUCT: u32 = 1;
pub const CONFIG_MSDOS_FS: u32 = 1;
pub const CONFIG_PERF_EVENTS_INTEL_RAPL: u32 = 1;
pub const CONFIG_EFI_RUNTIME_MAP: u32 = 1;
pub const CONFIG_PCI_MMCONFIG: u32 = 1;
pub const CONFIG_PROC_PAGE_MONITOR: u32 = 1;
pub const CONFIG_HAVE_ARCH_SECCOMP_FILTER: u32 = 1;
pub const CONFIG_DEBUG_BUGVERBOSE: u32 = 1;
pub const CONFIG_EXT4_USE_FOR_EXT2: u32 = 1;
pub const CONFIG_ARCH_SUSPEND_POSSIBLE: u32 = 1;
pub const CONFIG_KPROBES: u32 = 1;
pub const CONFIG_RT_MUTEXES: u32 = 1;
pub const CONFIG_UPROBE_EVENTS: u32 = 1;
pub const CONFIG_BLK_CGROUP_IOLATENCY: u32 = 1;
pub const CONFIG_GENERIC_VDSO_OVERFLOW_PROTECT: u32 = 1;
pub const CONFIG_ROOT_NFS: u32 = 1;
pub const CONFIG_NET_VENDOR_XIRCOM: u32 = 1;
pub const CONFIG_RD_LZ4: u32 = 1;
pub const CONFIG_DEFAULT_HOSTNAME: &[u8; 7] = b"(none)\0";
pub const CONFIG_GENERIC_NET_UTILS: u32 = 1;
pub const CONFIG_GENERIC_ISA_DMA: u32 = 1;
pub const CONFIG_SECURITY_SELINUX: u32 = 1;
pub const CONFIG_INPUT_JOYSTICK: u32 = 1;
pub const CONFIG_BLK_DEV_DM_BUILTIN: u32 = 1;
pub const CONFIG_HSU_DMA: u32 = 1;
pub const CONFIG_SCSI_LOWLEVEL: u32 = 1;
pub const CONFIG_INTERVAL_TREE: u32 = 1;
pub const CONFIG_SPARSEMEM: u32 = 1;
pub const CONFIG_HVC_DRIVER: u32 = 1;
pub const CONFIG_BLK_CGROUP_IOCOST: u32 = 1;
pub const CONFIG_NET_VENDOR_BROADCOM: u32 = 1;
pub const CONFIG_RTC_SYSTOHC_DEVICE: &[u8; 5] = b"rtc0\0";
pub const CONFIG_RTC_INTF_PROC: u32 = 1;
pub const CONFIG_AUTOFS_FS: u32 = 1;
pub const CONFIG_ARCH_HAS_PTE_DEVMAP: u32 = 1;
pub const CONFIG_ARCH_WANTS_NO_INSTR: u32 = 1;
pub const CONFIG_USB_HID: u32 = 1;
pub const CONFIG_MITIGATION_SRSO: u32 = 1;
pub const CONFIG_CRYPTO_SKCIPHER2: u32 = 1;
pub const CONFIG_PCI_MSI: u32 = 1;
pub const CONFIG_HAVE_GENERIC_VDSO: u32 = 1;
pub const CONFIG_SND_HDA: u32 = 1;
pub const CONFIG_WLAN_VENDOR_PURELIFI: u32 = 1;
pub const CONFIG_TMPFS_POSIX_ACL: u32 = 1;
pub const CONFIG_MODULES_TREE_LOOKUP: u32 = 1;
pub const CONFIG_X86_VMX_FEATURE_NAMES: u32 = 1;
pub const CONFIG_KALLSYMS_ABSOLUTE_PERCPU: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_USERSPACE: u32 = 1;
pub const CONFIG_JOLIET: u32 = 1;
pub const CONFIG_X86_DIRECT_GBPAGES: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_WITH_DIRECT_CALLS: u32 = 1;
pub const CONFIG_COMPAT_FOR_U64_ALIGNMENT: u32 = 1;
pub const CONFIG_ILLEGAL_POINTER_VALUE: i64 = -2401263026318606336;
pub const CONFIG_UPROBES: u32 = 1;
pub const CONFIG_ARCH_CORRECT_STACKTRACE_ON_KRETPROBE: u32 = 1;
pub const CONFIG_LEGACY_VSYSCALL_XONLY: u32 = 1;
pub const CONFIG_USB_UHCI_HCD: u32 = 1;
pub const CONFIG_DUMMY_CONSOLE: u32 = 1;
pub const CONFIG_RTL_CARDS: u32 = 1;
pub const CONFIG_PANTHERLORD_FF: u32 = 1;
pub const CONFIG_DMA_OPS: u32 = 1;
pub const CONFIG_HAVE_ARCH_TRACEHOOK: u32 = 1;
pub const CONFIG_X86_INTEL_PSTATE: u32 = 1;
pub const CONFIG_SAMPLES: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_TCPMSS: u32 = 1;
pub const CONFIG_SLUB_DEBUG: u32 = 1;
pub const CONFIG_CRYPTO_SHA256: u32 = 1;
pub const CONFIG_HAVE_BUILDTIME_MCOUNT_SORT: u32 = 1;
pub const CONFIG_QUOTACTL: u32 = 1;
pub const CONFIG_NET_VENDOR_ARC: u32 = 1;
pub const CONFIG_NET_VENDOR_NVIDIA: u32 = 1;
pub const CONFIG_UNIX: u32 = 1;
pub const CONFIG_IRQ_WORK: u32 = 1;
pub const CONFIG_HYPERVISOR_GUEST: u32 = 1;
pub const CONFIG_DUMMY_CONSOLE_COLUMNS: u32 = 80;
pub const CONFIG_NF_LOG_IPV4_MODULE: u32 = 1;
pub const CONFIG_I2C_COMPAT: u32 = 1;
pub const CONFIG_STACKTRACE: u32 = 1;
pub const CONFIG_RUST_BUILD_ASSERT_ALLOW: u32 = 1;
pub const CONFIG_X86_NEED_RELOCS: u32 = 1;
pub const CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE_PUD: u32 = 1;
pub const CONFIG_COMPAT_32: u32 = 1;
pub const CONFIG_CLKEVT_I8253: u32 = 1;
pub const CONFIG_ARCH_USE_SYM_ANNOTATIONS: u32 = 1;
pub const CONFIG_HW_RANDOM: u32 = 1;
pub const CONFIG_CPU_IDLE_GOV_HALTPOLL: u32 = 1;
pub const CONFIG_IP_NF_TARGET_MASQUERADE_MODULE: u32 = 1;
pub const CONFIG_RCU_NEED_SEGCBLIST: u32 = 1;
pub const CONFIG_NEED_DMA_MAP_STATE: u32 = 1;
pub const CONFIG_RCU_EXP_CPU_STALL_TIMEOUT: u32 = 0;
pub const CONFIG_MOUSE_PS2_LIFEBOOK: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_BITS_MIN: u32 = 28;
pub const CONFIG_ARCH_WANT_OPTIMIZE_DAX_VMEMMAP: u32 = 1;
pub const CONFIG_ATA_FORCE: u32 = 1;
pub const CONFIG_IOMMU_DEBUGFS: u32 = 1;
pub const CONFIG_NET_VENDOR_DEC: u32 = 1;
pub const CONFIG_BLK_MQ_PCI: u32 = 1;
pub const CONFIG_SYSVIPC: u32 = 1;
pub const CONFIG_LOCKDEP_SUPPORT: u32 = 1;
pub const CONFIG_NET_VENDOR_NETERION: u32 = 1;
pub const CONFIG_MODULE_COMPRESS_NONE: u32 = 1;
pub const CONFIG_TCP_SIGPOOL: u32 = 1;
pub const CONFIG_DM_INTEGRITY: u32 = 1;
pub const CONFIG_X86_PKG_TEMP_THERMAL_MODULE: u32 = 1;
pub const CONFIG_CRYPTO: u32 = 1;
pub const CONFIG_ARCH_HAS_ELFCORE_COMPAT: u32 = 1;
pub const CONFIG_PARAVIRT: u32 = 1;
pub const CONFIG_HAVE_ARCH_SECCOMP: u32 = 1;
pub const CONFIG_IOMMU_IOPF: u32 = 1;
pub const CONFIG_HID_MCP2221: u32 = 1;
pub const CONFIG_PROC_FS: u32 = 1;
pub const CONFIG_HAVE_UACCESS_VALIDATION: u32 = 1;
pub const CONFIG_SND_CTL_FAST_LOOKUP: u32 = 1;
pub const CONFIG_ARCH_USE_MEMREMAP_PROT: u32 = 1;
pub const CONFIG_NET_VENDOR_TEHUTI: u32 = 1;
pub const CONFIG_MITIGATION_UNRET_ENTRY: u32 = 1;
pub const CONFIG_GENERIC_ENTRY: u32 = 1;
pub const CONFIG_POSIX_TIMERS: u32 = 1;
pub const CONFIG_HID_BELKIN: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_FINALIZE_INIT: u32 = 1;
pub const CONFIG_GENERIC_TRACER: u32 = 1;
pub const CONFIG_I2C_I801: u32 = 1;
pub const CONFIG_CPU_SUP_ZHAOXIN: u32 = 1;
pub const CONFIG_NET_VENDOR_SIS: u32 = 1;
pub const CONFIG_XFRM_AH: u32 = 1;
pub const CONFIG_FS_IOMAP: u32 = 1;
pub const CONFIG_INPUT_VIVALDIFMAP: u32 = 1;
pub const CONFIG_ALLOW_DEV_COREDUMP: u32 = 1;
pub const CONFIG_ASN1: u32 = 1;
pub const CONFIG_DEVTMPFS_MOUNT: u32 = 1;
pub const CONFIG_HAVE_FTRACE_MCOUNT_RECORD: u32 = 1;
pub const CONFIG_SND_PCMCIA: u32 = 1;
pub const CONFIG_CONSOLE_LOGLEVEL_QUIET: u32 = 4;
pub const CONFIG_ACPI_PCC: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_NFLOG: u32 = 1;
pub const CONFIG_INET_TUNNEL: u32 = 1;
pub const CONFIG_LZO_DECOMPRESS: u32 = 1;
pub const CONFIG_JUMP_LABEL: u32 = 1;
pub const CONFIG_GENERIC_SMP_IDLE_THREAD: u32 = 1;
pub const CONFIG_USB_ARCH_HAS_HCD: u32 = 1;
pub const CONFIG_NET_EMATCH_STACK: u32 = 32;
pub const CONFIG_NF_NAT_FTP: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MIN: u32 = 8;
pub const CONFIG_EXTRA_FIRMWARE: &[u8; 1] = b"\0";
pub const CONFIG_IP_MULTICAST: u32 = 1;
pub const CONFIG_PNPACPI: u32 = 1;
pub const CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE: u32 = 1;
pub const CONFIG_DMAR_TABLE: u32 = 1;
pub const CONFIG_SERIAL_8250_DWLIB: u32 = 1;
pub const CONFIG_EFI_CUSTOM_SSDT_OVERLAYS: u32 = 1;
pub const CONFIG_X86_PAT: u32 = 1;
pub const CONFIG_NOP_TRACER: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_CACHE_INVALIDATE_MEMREGION: u32 = 1;
pub const CONFIG_LZ4_COMPRESS: u32 = 1;
pub const CONFIG_NET_VENDOR_LITEX: u32 = 1;
pub const CONFIG_MICROCODE: u32 = 1;
pub const CONFIG_ARCH_USES_PG_UNCACHED: u32 = 1;
pub const CONFIG_CPU_ISOLATION: u32 = 1;
pub const CONFIG_GENERIC_CMOS_UPDATE: u32 = 1;
pub const CONFIG_SERIAL_8250_PCI: u32 = 1;
pub const CONFIG_NET_VENDOR_QLOGIC: u32 = 1;
pub const CONFIG_SERIO: u32 = 1;
pub const CONFIG_DRM_GEM_SHMEM_HELPER: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_ATOMIC_RMW: u32 = 1;
pub const CONFIG_CRYPTO_LIB_AES: u32 = 1;
pub const CONFIG_LEGACY_TIOCSTI: u32 = 1;
pub const CONFIG_NF_LOG_SYSLOG_MODULE: u32 = 1;
pub const CONFIG_USB_OHCI_HCD: u32 = 1;
pub const CONFIG_FW_CACHE: u32 = 1;
pub const CONFIG_IOMMUFD_DRIVER: u32 = 1;
pub const CONFIG_PRINTK: u32 = 1;
pub const CONFIG_DRM_I915_FORCE_PROBE: &[u8; 1] = b"\0";
pub const CONFIG_NETLABEL: u32 = 1;
pub const CONFIG_PCI_STUB: u32 = 1;
pub const CONFIG_HAVE_STATIC_CALL: u32 = 1;
pub const CONFIG_AGP_INTEL: u32 = 1;
pub const CONFIG_CC_VERSION_TEXT: &[u8; 21] = b"clang version 18.1.8\0";
pub const CONFIG_BINFMT_ELF: u32 = 1;
pub const CONFIG_HIGH_RES_TIMERS: u32 = 1;
pub const CONFIG_I2C_SMBUS: u32 = 1;
pub const CONFIG_DEBUG_FS_ALLOW_ALL: u32 = 1;
pub const CONFIG_HAVE_SAMPLE_FTRACE_DIRECT_MULTI: u32 = 1;
pub const CONFIG_MEMFD_CREATE: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const KASAN_ABI_VERSION: u32 = 5;
pub const ASM_INPUT_G: &[u8; 3] = b"ir\0";
pub const ASM_INPUT_RM: &[u8; 2] = b"r\0";
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const __BITS_PER_LONG: u32 = 64;
pub const __BITS_PER_LONG_LONG: u32 = 64;
pub const BITS_PER_LONG: u32 = 64;
pub const BITS_PER_LONG_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const BITS_PER_BYTE: u32 = 8;
pub const KCSAN_ACCESS_WRITE: u32 = 1;
pub const KCSAN_ACCESS_COMPOUND: u32 = 2;
pub const KCSAN_ACCESS_ATOMIC: u32 = 4;
pub const KCSAN_ACCESS_ASSERT: u32 = 8;
pub const KCSAN_ACCESS_SCOPED: u32 = 16;
pub const SI_LOAD_SHIFT: u32 = 16;
pub const EX_DATA_REG_SHIFT: u32 = 8;
pub const EX_DATA_FLAG_SHIFT: u32 = 12;
pub const EX_DATA_IMM_SHIFT: u32 = 16;
pub const EX_TYPE_NONE: u32 = 0;
pub const EX_TYPE_DEFAULT: u32 = 1;
pub const EX_TYPE_FAULT: u32 = 2;
pub const EX_TYPE_UACCESS: u32 = 3;
pub const EX_TYPE_CLEAR_FS: u32 = 5;
pub const EX_TYPE_FPU_RESTORE: u32 = 6;
pub const EX_TYPE_BPF: u32 = 7;
pub const EX_TYPE_WRMSR: u32 = 8;
pub const EX_TYPE_RDMSR: u32 = 9;
pub const EX_TYPE_WRMSR_SAFE: u32 = 10;
pub const EX_TYPE_RDMSR_SAFE: u32 = 11;
pub const EX_TYPE_WRMSR_IN_MCE: u32 = 12;
pub const EX_TYPE_RDMSR_IN_MCE: u32 = 13;
pub const EX_TYPE_DEFAULT_MCE_SAFE: u32 = 14;
pub const EX_TYPE_FAULT_MCE_SAFE: u32 = 15;
pub const EX_TYPE_POP_REG: u32 = 16;
pub const EX_TYPE_IMM_REG: u32 = 17;
pub const EX_TYPE_FAULT_SGX: u32 = 18;
pub const EX_TYPE_UCOPY_LEN: u32 = 19;
pub const EX_TYPE_ZEROPAD: u32 = 20;
pub const EX_TYPE_ERETU: u32 = 21;
pub const DEFINE_EXTABLE_TYPE_REG : & [u8 ; 533] = b".macro extable_type_reg type:req reg:req\n.set .Lfound, 0\n.set .Lregnr, 0\n.irp rs,rax,rcx,rdx,rbx,rsp,rbp,rsi,rdi,r8,r9,r10,r11,r12,r13,r14,r15\n.ifc \\reg, %%\\rs\n.set .Lfound, .Lfound+1\n.long \\type + (.Lregnr << 8)\n.endif\n.set .Lregnr, .Lregnr+1\n.endr\n.set .Lregnr, 0\n.irp rs,eax,ecx,edx,ebx,esp,ebp,esi,edi,r8d,r9d,r10d,r11d,r12d,r13d,r14d,r15d\n.ifc \\reg, %%\\rs\n.set .Lfound, .Lfound+1\n.long \\type + (.Lregnr << 8)\n.endif\n.set .Lregnr, .Lregnr+1\n.endr\n.if (.Lfound != 1)\n.error \"extable_type_reg: bad register argument\"\n.endif\n.endm\n\0" ;
pub const UNDEFINE_EXTABLE_TYPE_REG: &[u8; 26] = b".purgem extable_type_reg\n\0";
pub const ALT_FLAGS_SHIFT: u32 = 16;
pub const ALT_FLAG_NOT: u32 = 1;
pub const ALT_FLAG_DIRECT_CALL: u32 = 2;
pub const LOCK_PREFIX_HERE: &[u8; 70] =
    b".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\0";
pub const LOCK_PREFIX: &[u8; 78] =
    b".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; \0";
pub const ANNOTATE_IGNORE_ALTERNATIVE: &[u8; 67] =
    b"999:\n\t.pushsection .discard.ignore_alts\n\t.long 999b\n\t.popsection\n\t\0";
pub const ALT_CALL_INSTR: &[u8; 14] = b"call BUG_func\0";
pub const alt_slen: &[u8; 10] = b"772b-771b\0";
pub const alt_total_slen: &[u8; 10] = b"773b-771b\0";
pub const alt_rlen: &[u8; 10] = b"775f-774f\0";
pub const BYTES_NOP1: u32 = 144;
pub const ASM_NOP_MAX: u32 = 11;
pub const _BITOPS_LONG_SHIFT: u32 = 6;
pub const NEED_3DNOW: u32 = 0;
pub const NEED_MOVBE: u32 = 0;
pub const REQUIRED_MASK2: u32 = 0;
pub const REQUIRED_MASK4: u32 = 0;
pub const REQUIRED_MASK5: u32 = 0;
pub const REQUIRED_MASK6: u32 = 0;
pub const REQUIRED_MASK7: u32 = 0;
pub const REQUIRED_MASK8: u32 = 0;
pub const REQUIRED_MASK9: u32 = 0;
pub const REQUIRED_MASK10: u32 = 0;
pub const REQUIRED_MASK11: u32 = 0;
pub const REQUIRED_MASK12: u32 = 0;
pub const REQUIRED_MASK13: u32 = 0;
pub const REQUIRED_MASK14: u32 = 0;
pub const REQUIRED_MASK15: u32 = 0;
pub const REQUIRED_MASK16: u32 = 0;
pub const REQUIRED_MASK17: u32 = 0;
pub const REQUIRED_MASK18: u32 = 0;
pub const REQUIRED_MASK19: u32 = 0;
pub const REQUIRED_MASK20: u32 = 0;
pub const REQUIRED_MASK21: u32 = 0;
pub const DISABLE_UMIP: u32 = 0;
pub const DISABLE_PCID: u32 = 0;
pub const DISABLE_PKU: u32 = 0;
pub const DISABLE_OSPKE: u32 = 0;
pub const DISABLE_LA57: u32 = 0;
pub const DISABLE_PTI: u32 = 0;
pub const DISABLE_RETPOLINE: u32 = 0;
pub const DISABLE_RETHUNK: u32 = 0;
pub const DISABLE_UNRET: u32 = 0;
pub const DISABLE_CALL_DEPTH_TRACKING: u32 = 0;
pub const DISABLE_ENQCMD: u32 = 0;
pub const DISABLE_IBT: u32 = 0;
pub const DISABLED_MASK1: u32 = 0;
pub const DISABLED_MASK2: u32 = 0;
pub const DISABLED_MASK4: u32 = 0;
pub const DISABLED_MASK5: u32 = 0;
pub const DISABLED_MASK6: u32 = 0;
pub const DISABLED_MASK7: u32 = 0;
pub const DISABLED_MASK10: u32 = 0;
pub const DISABLED_MASK13: u32 = 0;
pub const DISABLED_MASK14: u32 = 0;
pub const DISABLED_MASK15: u32 = 0;
pub const DISABLED_MASK16: u32 = 0;
pub const DISABLED_MASK17: u32 = 0;
pub const DISABLED_MASK18: u32 = 0;
pub const DISABLED_MASK20: u32 = 0;
pub const DISABLED_MASK21: u32 = 0;
pub const NCAPINTS: u32 = 22;
pub const NBUGINTS: u32 = 2;
pub const X86_FEATURE_FPU: u32 = 0;
pub const X86_FEATURE_VME: u32 = 1;
pub const X86_FEATURE_DE: u32 = 2;
pub const X86_FEATURE_PSE: u32 = 3;
pub const X86_FEATURE_TSC: u32 = 4;
pub const X86_FEATURE_MSR: u32 = 5;
pub const X86_FEATURE_PAE: u32 = 6;
pub const X86_FEATURE_MCE: u32 = 7;
pub const X86_FEATURE_CX8: u32 = 8;
pub const X86_FEATURE_APIC: u32 = 9;
pub const X86_FEATURE_SEP: u32 = 11;
pub const X86_FEATURE_MTRR: u32 = 12;
pub const X86_FEATURE_PGE: u32 = 13;
pub const X86_FEATURE_MCA: u32 = 14;
pub const X86_FEATURE_CMOV: u32 = 15;
pub const X86_FEATURE_PAT: u32 = 16;
pub const X86_FEATURE_PSE36: u32 = 17;
pub const X86_FEATURE_PN: u32 = 18;
pub const X86_FEATURE_CLFLUSH: u32 = 19;
pub const X86_FEATURE_DS: u32 = 21;
pub const X86_FEATURE_ACPI: u32 = 22;
pub const X86_FEATURE_MMX: u32 = 23;
pub const X86_FEATURE_FXSR: u32 = 24;
pub const X86_FEATURE_XMM: u32 = 25;
pub const X86_FEATURE_XMM2: u32 = 26;
pub const X86_FEATURE_SELFSNOOP: u32 = 27;
pub const X86_FEATURE_HT: u32 = 28;
pub const X86_FEATURE_ACC: u32 = 29;
pub const X86_FEATURE_IA64: u32 = 30;
pub const X86_FEATURE_PBE: u32 = 31;
pub const X86_FEATURE_SYSCALL: u32 = 43;
pub const X86_FEATURE_MP: u32 = 51;
pub const X86_FEATURE_NX: u32 = 52;
pub const X86_FEATURE_MMXEXT: u32 = 54;
pub const X86_FEATURE_FXSR_OPT: u32 = 57;
pub const X86_FEATURE_GBPAGES: u32 = 58;
pub const X86_FEATURE_RDTSCP: u32 = 59;
pub const X86_FEATURE_LM: u32 = 61;
pub const X86_FEATURE_3DNOWEXT: u32 = 62;
pub const X86_FEATURE_3DNOW: u32 = 63;
pub const X86_FEATURE_RECOVERY: u32 = 64;
pub const X86_FEATURE_LONGRUN: u32 = 65;
pub const X86_FEATURE_LRTI: u32 = 67;
pub const X86_FEATURE_CXMMX: u32 = 96;
pub const X86_FEATURE_K6_MTRR: u32 = 97;
pub const X86_FEATURE_CYRIX_ARR: u32 = 98;
pub const X86_FEATURE_CENTAUR_MCR: u32 = 99;
pub const X86_FEATURE_K8: u32 = 100;
pub const X86_FEATURE_ZEN5: u32 = 101;
pub const X86_FEATURE_P3: u32 = 102;
pub const X86_FEATURE_P4: u32 = 103;
pub const X86_FEATURE_CONSTANT_TSC: u32 = 104;
pub const X86_FEATURE_UP: u32 = 105;
pub const X86_FEATURE_ART: u32 = 106;
pub const X86_FEATURE_ARCH_PERFMON: u32 = 107;
pub const X86_FEATURE_PEBS: u32 = 108;
pub const X86_FEATURE_BTS: u32 = 109;
pub const X86_FEATURE_SYSCALL32: u32 = 110;
pub const X86_FEATURE_SYSENTER32: u32 = 111;
pub const X86_FEATURE_REP_GOOD: u32 = 112;
pub const X86_FEATURE_AMD_LBR_V2: u32 = 113;
pub const X86_FEATURE_CLEAR_CPU_BUF: u32 = 114;
pub const X86_FEATURE_ACC_POWER: u32 = 115;
pub const X86_FEATURE_NOPL: u32 = 116;
pub const X86_FEATURE_ALWAYS: u32 = 117;
pub const X86_FEATURE_XTOPOLOGY: u32 = 118;
pub const X86_FEATURE_TSC_RELIABLE: u32 = 119;
pub const X86_FEATURE_NONSTOP_TSC: u32 = 120;
pub const X86_FEATURE_CPUID: u32 = 121;
pub const X86_FEATURE_EXTD_APICID: u32 = 122;
pub const X86_FEATURE_AMD_DCM: u32 = 123;
pub const X86_FEATURE_APERFMPERF: u32 = 124;
pub const X86_FEATURE_RAPL: u32 = 125;
pub const X86_FEATURE_NONSTOP_TSC_S3: u32 = 126;
pub const X86_FEATURE_TSC_KNOWN_FREQ: u32 = 127;
pub const X86_FEATURE_XMM3: u32 = 128;
pub const X86_FEATURE_PCLMULQDQ: u32 = 129;
pub const X86_FEATURE_DTES64: u32 = 130;
pub const X86_FEATURE_MWAIT: u32 = 131;
pub const X86_FEATURE_DSCPL: u32 = 132;
pub const X86_FEATURE_VMX: u32 = 133;
pub const X86_FEATURE_SMX: u32 = 134;
pub const X86_FEATURE_EST: u32 = 135;
pub const X86_FEATURE_TM2: u32 = 136;
pub const X86_FEATURE_SSSE3: u32 = 137;
pub const X86_FEATURE_CID: u32 = 138;
pub const X86_FEATURE_SDBG: u32 = 139;
pub const X86_FEATURE_FMA: u32 = 140;
pub const X86_FEATURE_CX16: u32 = 141;
pub const X86_FEATURE_XTPR: u32 = 142;
pub const X86_FEATURE_PDCM: u32 = 143;
pub const X86_FEATURE_PCID: u32 = 145;
pub const X86_FEATURE_DCA: u32 = 146;
pub const X86_FEATURE_XMM4_1: u32 = 147;
pub const X86_FEATURE_XMM4_2: u32 = 148;
pub const X86_FEATURE_X2APIC: u32 = 149;
pub const X86_FEATURE_MOVBE: u32 = 150;
pub const X86_FEATURE_POPCNT: u32 = 151;
pub const X86_FEATURE_TSC_DEADLINE_TIMER: u32 = 152;
pub const X86_FEATURE_AES: u32 = 153;
pub const X86_FEATURE_XSAVE: u32 = 154;
pub const X86_FEATURE_OSXSAVE: u32 = 155;
pub const X86_FEATURE_AVX: u32 = 156;
pub const X86_FEATURE_F16C: u32 = 157;
pub const X86_FEATURE_RDRAND: u32 = 158;
pub const X86_FEATURE_HYPERVISOR: u32 = 159;
pub const X86_FEATURE_XSTORE: u32 = 162;
pub const X86_FEATURE_XSTORE_EN: u32 = 163;
pub const X86_FEATURE_XCRYPT: u32 = 166;
pub const X86_FEATURE_XCRYPT_EN: u32 = 167;
pub const X86_FEATURE_ACE2: u32 = 168;
pub const X86_FEATURE_ACE2_EN: u32 = 169;
pub const X86_FEATURE_PHE: u32 = 170;
pub const X86_FEATURE_PHE_EN: u32 = 171;
pub const X86_FEATURE_PMM: u32 = 172;
pub const X86_FEATURE_PMM_EN: u32 = 173;
pub const X86_FEATURE_LAHF_LM: u32 = 192;
pub const X86_FEATURE_CMP_LEGACY: u32 = 193;
pub const X86_FEATURE_SVM: u32 = 194;
pub const X86_FEATURE_EXTAPIC: u32 = 195;
pub const X86_FEATURE_CR8_LEGACY: u32 = 196;
pub const X86_FEATURE_ABM: u32 = 197;
pub const X86_FEATURE_SSE4A: u32 = 198;
pub const X86_FEATURE_MISALIGNSSE: u32 = 199;
pub const X86_FEATURE_3DNOWPREFETCH: u32 = 200;
pub const X86_FEATURE_OSVW: u32 = 201;
pub const X86_FEATURE_IBS: u32 = 202;
pub const X86_FEATURE_XOP: u32 = 203;
pub const X86_FEATURE_SKINIT: u32 = 204;
pub const X86_FEATURE_WDT: u32 = 205;
pub const X86_FEATURE_LWP: u32 = 207;
pub const X86_FEATURE_FMA4: u32 = 208;
pub const X86_FEATURE_TCE: u32 = 209;
pub const X86_FEATURE_NODEID_MSR: u32 = 211;
pub const X86_FEATURE_TBM: u32 = 213;
pub const X86_FEATURE_TOPOEXT: u32 = 214;
pub const X86_FEATURE_PERFCTR_CORE: u32 = 215;
pub const X86_FEATURE_PERFCTR_NB: u32 = 216;
pub const X86_FEATURE_BPEXT: u32 = 218;
pub const X86_FEATURE_PTSC: u32 = 219;
pub const X86_FEATURE_PERFCTR_LLC: u32 = 220;
pub const X86_FEATURE_MWAITX: u32 = 221;
pub const X86_FEATURE_RING3MWAIT: u32 = 224;
pub const X86_FEATURE_CPUID_FAULT: u32 = 225;
pub const X86_FEATURE_CPB: u32 = 226;
pub const X86_FEATURE_EPB: u32 = 227;
pub const X86_FEATURE_CAT_L3: u32 = 228;
pub const X86_FEATURE_CAT_L2: u32 = 229;
pub const X86_FEATURE_CDP_L3: u32 = 230;
pub const X86_FEATURE_TDX_HOST_PLATFORM: u32 = 231;
pub const X86_FEATURE_HW_PSTATE: u32 = 232;
pub const X86_FEATURE_PROC_FEEDBACK: u32 = 233;
pub const X86_FEATURE_XCOMPACTED: u32 = 234;
pub const X86_FEATURE_PTI: u32 = 235;
pub const X86_FEATURE_KERNEL_IBRS: u32 = 236;
pub const X86_FEATURE_RSB_VMEXIT: u32 = 237;
pub const X86_FEATURE_INTEL_PPIN: u32 = 238;
pub const X86_FEATURE_CDP_L2: u32 = 239;
pub const X86_FEATURE_MSR_SPEC_CTRL: u32 = 240;
pub const X86_FEATURE_SSBD: u32 = 241;
pub const X86_FEATURE_MBA: u32 = 242;
pub const X86_FEATURE_RSB_CTXSW: u32 = 243;
pub const X86_FEATURE_PERFMON_V2: u32 = 244;
pub const X86_FEATURE_USE_IBPB: u32 = 245;
pub const X86_FEATURE_USE_IBRS_FW: u32 = 246;
pub const X86_FEATURE_SPEC_STORE_BYPASS_DISABLE: u32 = 247;
pub const X86_FEATURE_LS_CFG_SSBD: u32 = 248;
pub const X86_FEATURE_IBRS: u32 = 249;
pub const X86_FEATURE_IBPB: u32 = 250;
pub const X86_FEATURE_STIBP: u32 = 251;
pub const X86_FEATURE_ZEN: u32 = 252;
pub const X86_FEATURE_L1TF_PTEINV: u32 = 253;
pub const X86_FEATURE_IBRS_ENHANCED: u32 = 254;
pub const X86_FEATURE_MSR_IA32_FEAT_CTL: u32 = 255;
pub const X86_FEATURE_TPR_SHADOW: u32 = 256;
pub const X86_FEATURE_FLEXPRIORITY: u32 = 257;
pub const X86_FEATURE_EPT: u32 = 258;
pub const X86_FEATURE_VPID: u32 = 259;
pub const X86_FEATURE_VMMCALL: u32 = 271;
pub const X86_FEATURE_XENPV: u32 = 272;
pub const X86_FEATURE_EPT_AD: u32 = 273;
pub const X86_FEATURE_VMCALL: u32 = 274;
pub const X86_FEATURE_VMW_VMMCALL: u32 = 275;
pub const X86_FEATURE_PVUNLOCK: u32 = 276;
pub const X86_FEATURE_VCPUPREEMPT: u32 = 277;
pub const X86_FEATURE_TDX_GUEST: u32 = 278;
pub const X86_FEATURE_FSGSBASE: u32 = 288;
pub const X86_FEATURE_TSC_ADJUST: u32 = 289;
pub const X86_FEATURE_SGX: u32 = 290;
pub const X86_FEATURE_BMI1: u32 = 291;
pub const X86_FEATURE_HLE: u32 = 292;
pub const X86_FEATURE_AVX2: u32 = 293;
pub const X86_FEATURE_FDP_EXCPTN_ONLY: u32 = 294;
pub const X86_FEATURE_SMEP: u32 = 295;
pub const X86_FEATURE_BMI2: u32 = 296;
pub const X86_FEATURE_ERMS: u32 = 297;
pub const X86_FEATURE_INVPCID: u32 = 298;
pub const X86_FEATURE_RTM: u32 = 299;
pub const X86_FEATURE_CQM: u32 = 300;
pub const X86_FEATURE_ZERO_FCS_FDS: u32 = 301;
pub const X86_FEATURE_MPX: u32 = 302;
pub const X86_FEATURE_RDT_A: u32 = 303;
pub const X86_FEATURE_AVX512F: u32 = 304;
pub const X86_FEATURE_AVX512DQ: u32 = 305;
pub const X86_FEATURE_RDSEED: u32 = 306;
pub const X86_FEATURE_ADX: u32 = 307;
pub const X86_FEATURE_SMAP: u32 = 308;
pub const X86_FEATURE_AVX512IFMA: u32 = 309;
pub const X86_FEATURE_CLFLUSHOPT: u32 = 311;
pub const X86_FEATURE_CLWB: u32 = 312;
pub const X86_FEATURE_INTEL_PT: u32 = 313;
pub const X86_FEATURE_AVX512PF: u32 = 314;
pub const X86_FEATURE_AVX512ER: u32 = 315;
pub const X86_FEATURE_AVX512CD: u32 = 316;
pub const X86_FEATURE_SHA_NI: u32 = 317;
pub const X86_FEATURE_AVX512BW: u32 = 318;
pub const X86_FEATURE_AVX512VL: u32 = 319;
pub const X86_FEATURE_XSAVEOPT: u32 = 320;
pub const X86_FEATURE_XSAVEC: u32 = 321;
pub const X86_FEATURE_XGETBV1: u32 = 322;
pub const X86_FEATURE_XSAVES: u32 = 323;
pub const X86_FEATURE_XFD: u32 = 324;
pub const X86_FEATURE_CQM_LLC: u32 = 352;
pub const X86_FEATURE_CQM_OCCUP_LLC: u32 = 353;
pub const X86_FEATURE_CQM_MBM_TOTAL: u32 = 354;
pub const X86_FEATURE_CQM_MBM_LOCAL: u32 = 355;
pub const X86_FEATURE_FENCE_SWAPGS_USER: u32 = 356;
pub const X86_FEATURE_FENCE_SWAPGS_KERNEL: u32 = 357;
pub const X86_FEATURE_SPLIT_LOCK_DETECT: u32 = 358;
pub const X86_FEATURE_PER_THREAD_MBA: u32 = 359;
pub const X86_FEATURE_SGX1: u32 = 360;
pub const X86_FEATURE_SGX2: u32 = 361;
pub const X86_FEATURE_ENTRY_IBPB: u32 = 362;
pub const X86_FEATURE_RRSBA_CTRL: u32 = 363;
pub const X86_FEATURE_RETPOLINE: u32 = 364;
pub const X86_FEATURE_RETPOLINE_LFENCE: u32 = 365;
pub const X86_FEATURE_RETHUNK: u32 = 366;
pub const X86_FEATURE_UNRET: u32 = 367;
pub const X86_FEATURE_USE_IBPB_FW: u32 = 368;
pub const X86_FEATURE_RSB_VMEXIT_LITE: u32 = 369;
pub const X86_FEATURE_SGX_EDECCSSA: u32 = 370;
pub const X86_FEATURE_CALL_DEPTH: u32 = 371;
pub const X86_FEATURE_MSR_TSX_CTRL: u32 = 372;
pub const X86_FEATURE_SMBA: u32 = 373;
pub const X86_FEATURE_BMEC: u32 = 374;
pub const X86_FEATURE_USER_SHSTK: u32 = 375;
pub const X86_FEATURE_SRSO: u32 = 376;
pub const X86_FEATURE_SRSO_ALIAS: u32 = 377;
pub const X86_FEATURE_IBPB_ON_VMEXIT: u32 = 378;
pub const X86_FEATURE_APIC_MSRS_FENCE: u32 = 379;
pub const X86_FEATURE_ZEN2: u32 = 380;
pub const X86_FEATURE_ZEN3: u32 = 381;
pub const X86_FEATURE_ZEN4: u32 = 382;
pub const X86_FEATURE_ZEN1: u32 = 383;
pub const X86_FEATURE_AVX_VNNI: u32 = 388;
pub const X86_FEATURE_AVX512_BF16: u32 = 389;
pub const X86_FEATURE_CMPCCXADD: u32 = 391;
pub const X86_FEATURE_ARCH_PERFMON_EXT: u32 = 392;
pub const X86_FEATURE_FZRM: u32 = 394;
pub const X86_FEATURE_FSRS: u32 = 395;
pub const X86_FEATURE_FSRC: u32 = 396;
pub const X86_FEATURE_FRED: u32 = 401;
pub const X86_FEATURE_LKGS: u32 = 402;
pub const X86_FEATURE_WRMSRNS: u32 = 403;
pub const X86_FEATURE_AMX_FP16: u32 = 405;
pub const X86_FEATURE_AVX_IFMA: u32 = 407;
pub const X86_FEATURE_LAM: u32 = 410;
pub const X86_FEATURE_CLZERO: u32 = 416;
pub const X86_FEATURE_IRPERF: u32 = 417;
pub const X86_FEATURE_XSAVEERPTR: u32 = 418;
pub const X86_FEATURE_RDPRU: u32 = 420;
pub const X86_FEATURE_WBNOINVD: u32 = 425;
pub const X86_FEATURE_AMD_IBPB: u32 = 428;
pub const X86_FEATURE_AMD_IBRS: u32 = 430;
pub const X86_FEATURE_AMD_STIBP: u32 = 431;
pub const X86_FEATURE_AMD_STIBP_ALWAYS_ON: u32 = 433;
pub const X86_FEATURE_AMD_PPIN: u32 = 439;
pub const X86_FEATURE_AMD_SSBD: u32 = 440;
pub const X86_FEATURE_VIRT_SSBD: u32 = 441;
pub const X86_FEATURE_AMD_SSB_NO: u32 = 442;
pub const X86_FEATURE_CPPC: u32 = 443;
pub const X86_FEATURE_AMD_PSFD: u32 = 444;
pub const X86_FEATURE_BTC_NO: u32 = 445;
pub const X86_FEATURE_BRS: u32 = 447;
pub const X86_FEATURE_DTHERM: u32 = 448;
pub const X86_FEATURE_IDA: u32 = 449;
pub const X86_FEATURE_ARAT: u32 = 450;
pub const X86_FEATURE_PLN: u32 = 452;
pub const X86_FEATURE_PTS: u32 = 454;
pub const X86_FEATURE_HWP: u32 = 455;
pub const X86_FEATURE_HWP_NOTIFY: u32 = 456;
pub const X86_FEATURE_HWP_ACT_WINDOW: u32 = 457;
pub const X86_FEATURE_HWP_EPP: u32 = 458;
pub const X86_FEATURE_HWP_PKG_REQ: u32 = 459;
pub const X86_FEATURE_HWP_HIGHEST_PERF_CHANGE: u32 = 463;
pub const X86_FEATURE_HFI: u32 = 467;
pub const X86_FEATURE_NPT: u32 = 480;
pub const X86_FEATURE_LBRV: u32 = 481;
pub const X86_FEATURE_SVML: u32 = 482;
pub const X86_FEATURE_NRIPS: u32 = 483;
pub const X86_FEATURE_TSCRATEMSR: u32 = 484;
pub const X86_FEATURE_VMCBCLEAN: u32 = 485;
pub const X86_FEATURE_FLUSHBYASID: u32 = 486;
pub const X86_FEATURE_DECODEASSISTS: u32 = 487;
pub const X86_FEATURE_PAUSEFILTER: u32 = 490;
pub const X86_FEATURE_PFTHRESHOLD: u32 = 492;
pub const X86_FEATURE_AVIC: u32 = 493;
pub const X86_FEATURE_V_VMSAVE_VMLOAD: u32 = 495;
pub const X86_FEATURE_VGIF: u32 = 496;
pub const X86_FEATURE_X2AVIC: u32 = 498;
pub const X86_FEATURE_V_SPEC_CTRL: u32 = 500;
pub const X86_FEATURE_VNMI: u32 = 505;
pub const X86_FEATURE_SVME_ADDR_CHK: u32 = 508;
pub const X86_FEATURE_AVX512VBMI: u32 = 513;
pub const X86_FEATURE_UMIP: u32 = 514;
pub const X86_FEATURE_PKU: u32 = 515;
pub const X86_FEATURE_OSPKE: u32 = 516;
pub const X86_FEATURE_WAITPKG: u32 = 517;
pub const X86_FEATURE_AVX512_VBMI2: u32 = 518;
pub const X86_FEATURE_SHSTK: u32 = 519;
pub const X86_FEATURE_GFNI: u32 = 520;
pub const X86_FEATURE_VAES: u32 = 521;
pub const X86_FEATURE_VPCLMULQDQ: u32 = 522;
pub const X86_FEATURE_AVX512_VNNI: u32 = 523;
pub const X86_FEATURE_AVX512_BITALG: u32 = 524;
pub const X86_FEATURE_TME: u32 = 525;
pub const X86_FEATURE_AVX512_VPOPCNTDQ: u32 = 526;
pub const X86_FEATURE_LA57: u32 = 528;
pub const X86_FEATURE_RDPID: u32 = 534;
pub const X86_FEATURE_BUS_LOCK_DETECT: u32 = 536;
pub const X86_FEATURE_CLDEMOTE: u32 = 537;
pub const X86_FEATURE_MOVDIRI: u32 = 539;
pub const X86_FEATURE_MOVDIR64B: u32 = 540;
pub const X86_FEATURE_ENQCMD: u32 = 541;
pub const X86_FEATURE_SGX_LC: u32 = 542;
pub const X86_FEATURE_OVERFLOW_RECOV: u32 = 544;
pub const X86_FEATURE_SUCCOR: u32 = 545;
pub const X86_FEATURE_SMCA: u32 = 547;
pub const X86_FEATURE_AVX512_4VNNIW: u32 = 578;
pub const X86_FEATURE_AVX512_4FMAPS: u32 = 579;
pub const X86_FEATURE_FSRM: u32 = 580;
pub const X86_FEATURE_AVX512_VP2INTERSECT: u32 = 584;
pub const X86_FEATURE_SRBDS_CTRL: u32 = 585;
pub const X86_FEATURE_MD_CLEAR: u32 = 586;
pub const X86_FEATURE_RTM_ALWAYS_ABORT: u32 = 587;
pub const X86_FEATURE_TSX_FORCE_ABORT: u32 = 589;
pub const X86_FEATURE_SERIALIZE: u32 = 590;
pub const X86_FEATURE_HYBRID_CPU: u32 = 591;
pub const X86_FEATURE_TSXLDTRK: u32 = 592;
pub const X86_FEATURE_PCONFIG: u32 = 594;
pub const X86_FEATURE_ARCH_LBR: u32 = 595;
pub const X86_FEATURE_IBT: u32 = 596;
pub const X86_FEATURE_AMX_BF16: u32 = 598;
pub const X86_FEATURE_AVX512_FP16: u32 = 599;
pub const X86_FEATURE_AMX_TILE: u32 = 600;
pub const X86_FEATURE_AMX_INT8: u32 = 601;
pub const X86_FEATURE_SPEC_CTRL: u32 = 602;
pub const X86_FEATURE_INTEL_STIBP: u32 = 603;
pub const X86_FEATURE_FLUSH_L1D: u32 = 604;
pub const X86_FEATURE_ARCH_CAPABILITIES: u32 = 605;
pub const X86_FEATURE_CORE_CAPABILITIES: u32 = 606;
pub const X86_FEATURE_SPEC_CTRL_SSBD: u32 = 607;
pub const X86_FEATURE_SME: u32 = 608;
pub const X86_FEATURE_SEV: u32 = 609;
pub const X86_FEATURE_VM_PAGE_FLUSH: u32 = 610;
pub const X86_FEATURE_SEV_ES: u32 = 611;
pub const X86_FEATURE_SEV_SNP: u32 = 612;
pub const X86_FEATURE_V_TSC_AUX: u32 = 617;
pub const X86_FEATURE_SME_COHERENT: u32 = 618;
pub const X86_FEATURE_DEBUG_SWAP: u32 = 622;
pub const X86_FEATURE_SVSM: u32 = 636;
pub const X86_FEATURE_NO_NESTED_DATA_BP: u32 = 640;
pub const X86_FEATURE_WRMSR_XX_BASE_NS: u32 = 641;
pub const X86_FEATURE_LFENCE_RDTSC: u32 = 642;
pub const X86_FEATURE_NULL_SEL_CLR_BASE: u32 = 646;
pub const X86_FEATURE_AUTOIBRS: u32 = 648;
pub const X86_FEATURE_NO_SMM_CTL_MSR: u32 = 649;
pub const X86_FEATURE_SBPB: u32 = 667;
pub const X86_FEATURE_IBPB_BRTYPE: u32 = 668;
pub const X86_FEATURE_SRSO_NO: u32 = 669;
pub const X86_FEATURE_AMD_LBR_PMC_FREEZE: u32 = 672;
pub const X86_FEATURE_CLEAR_BHB_LOOP: u32 = 673;
pub const X86_FEATURE_BHI_CTRL: u32 = 674;
pub const X86_FEATURE_CLEAR_BHB_HW: u32 = 675;
pub const X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT: u32 = 676;
pub const X86_FEATURE_FAST_CPPC: u32 = 677;
pub const REG_IN: &[u8; 2] = b"D\0";
pub const REG_OUT: &[u8; 2] = b"a\0";
pub const BITOP_LE_SWIZZLE: u32 = 0;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ERESTARTSYS: u32 = 512;
pub const ERESTARTNOINTR: u32 = 513;
pub const ERESTARTNOHAND: u32 = 514;
pub const ENOIOCTLCMD: u32 = 515;
pub const ERESTART_RESTARTBLOCK: u32 = 516;
pub const EPROBE_DEFER: u32 = 517;
pub const EOPENSTALE: u32 = 518;
pub const ENOPARAM: u32 = 519;
pub const EBADHANDLE: u32 = 521;
pub const ENOTSYNC: u32 = 522;
pub const EBADCOOKIE: u32 = 523;
pub const ENOTSUPP: u32 = 524;
pub const ETOOSMALL: u32 = 525;
pub const ESERVERFAULT: u32 = 526;
pub const EBADTYPE: u32 = 527;
pub const EJUKEBOX: u32 = 528;
pub const EIOCBQUEUED: u32 = 529;
pub const ERECALLCONFLICT: u32 = 530;
pub const ENOGRACE: u32 = 531;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const UINT_MAX: i32 = -1;
pub const ULONG_MAX: i32 = -1;
pub const ULLONG_MAX: i32 = -1;
pub const UINTPTR_MAX: i32 = -1;
pub const MAX_ERRNO: u32 = 4095;
pub const JUMP_TYPE_FALSE: u32 = 0;
pub const JUMP_TYPE_TRUE: u32 = 1;
pub const JUMP_TYPE_LINKED: u32 = 2;
pub const JUMP_TYPE_MASK: u32 = 3;
pub const __HAVE_ARCH_MEMCPY: u32 = 1;
pub const __HAVE_ARCH_MEMCPY_FLUSHCACHE: u32 = 1;
pub const BITMAP_MEM_ALIGNMENT: u32 = 8;
pub const BITMAP_MEM_MASK: u32 = 7;
pub const HAS_KERNEL_IBT: u32 = 1;
pub const ASM_ENDBR: &[u8; 10] = b"endbr64\n\t\0";
pub const ENDBR_INSN_SIZE: u32 = 4;
pub const ASM_RET: &[u8; 25] = b"jmp __x86_return_thunk\n\t\0";
pub const L1_CACHE_SHIFT: u32 = 6;
pub const L1_CACHE_BYTES: u32 = 64;
pub const INTERNODE_CACHE_SHIFT: u32 = 6;
pub const INTERNODE_CACHE_BYTES: u32 = 64;
pub const SMP_CACHE_BYTES: u32 = 64;
pub const MSEC_PER_SEC: u32 = 1000;
pub const USEC_PER_MSEC: u32 = 1000;
pub const NSEC_PER_USEC: u32 = 1000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const PSEC_PER_SEC: u64 = 1000000000000;
pub const FSEC_PER_SEC: u64 = 1000000000000000;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_SGI_CYCLE: u32 = 10;
pub const CLOCK_TAI: u32 = 11;
pub const MAX_CLOCKS: u32 = 16;
pub const CLOCKS_MASK: u32 = 1;
pub const CLOCKS_MONO: u32 = 1;
pub const TIMER_ABSTIME: u32 = 1;
pub const PSEC_PER_NSEC: u32 = 1000;
pub const TIME_UPTIME_SEC_MAX: u32 = 946080000;
pub const NTP_API: u32 = 4;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const TIME_OK: u32 = 0;
pub const TIME_INS: u32 = 1;
pub const TIME_DEL: u32 = 2;
pub const TIME_OOP: u32 = 3;
pub const TIME_WAIT: u32 = 4;
pub const TIME_ERROR: u32 = 5;
pub const TIME_BAD: u32 = 5;
pub const ADJ_ADJTIME: u32 = 32768;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 1;
pub const ADJ_OFFSET_READONLY: u32 = 8192;
pub const HZ: u32 = 100;
pub const EXEC_PAGESIZE: u32 = 4096;
pub const NOGROUP: i32 = -1;
pub const MAXHOSTNAMELEN: u32 = 64;
pub const USER_HZ: u32 = 100;
pub const CLOCKS_PER_SEC: u32 = 100;
pub const X86_EFLAGS_CF_BIT: u32 = 0;
pub const X86_EFLAGS_FIXED_BIT: u32 = 1;
pub const X86_EFLAGS_PF_BIT: u32 = 2;
pub const X86_EFLAGS_AF_BIT: u32 = 4;
pub const X86_EFLAGS_ZF_BIT: u32 = 6;
pub const X86_EFLAGS_SF_BIT: u32 = 7;
pub const X86_EFLAGS_TF_BIT: u32 = 8;
pub const X86_EFLAGS_IF_BIT: u32 = 9;
pub const X86_EFLAGS_DF_BIT: u32 = 10;
pub const X86_EFLAGS_OF_BIT: u32 = 11;
pub const X86_EFLAGS_IOPL_BIT: u32 = 12;
pub const X86_EFLAGS_NT_BIT: u32 = 14;
pub const X86_EFLAGS_RF_BIT: u32 = 16;
pub const X86_EFLAGS_VM_BIT: u32 = 17;
pub const X86_EFLAGS_AC_BIT: u32 = 18;
pub const X86_EFLAGS_VIF_BIT: u32 = 19;
pub const X86_EFLAGS_VIP_BIT: u32 = 20;
pub const X86_EFLAGS_ID_BIT: u32 = 21;
pub const X86_CR0_PE_BIT: u32 = 0;
pub const X86_CR0_MP_BIT: u32 = 1;
pub const X86_CR0_EM_BIT: u32 = 2;
pub const X86_CR0_TS_BIT: u32 = 3;
pub const X86_CR0_ET_BIT: u32 = 4;
pub const X86_CR0_NE_BIT: u32 = 5;
pub const X86_CR0_WP_BIT: u32 = 16;
pub const X86_CR0_AM_BIT: u32 = 18;
pub const X86_CR0_NW_BIT: u32 = 29;
pub const X86_CR0_CD_BIT: u32 = 30;
pub const X86_CR0_PG_BIT: u32 = 31;
pub const X86_CR3_PWT_BIT: u32 = 3;
pub const X86_CR3_PCD_BIT: u32 = 4;
pub const X86_CR3_PCID_BITS: u32 = 12;
pub const X86_CR3_LAM_U57_BIT: u32 = 61;
pub const X86_CR3_LAM_U48_BIT: u32 = 62;
pub const X86_CR3_PCID_NOFLUSH_BIT: u32 = 63;
pub const X86_CR4_VME_BIT: u32 = 0;
pub const X86_CR4_PVI_BIT: u32 = 1;
pub const X86_CR4_TSD_BIT: u32 = 2;
pub const X86_CR4_DE_BIT: u32 = 3;
pub const X86_CR4_PSE_BIT: u32 = 4;
pub const X86_CR4_PAE_BIT: u32 = 5;
pub const X86_CR4_MCE_BIT: u32 = 6;
pub const X86_CR4_PGE_BIT: u32 = 7;
pub const X86_CR4_PCE_BIT: u32 = 8;
pub const X86_CR4_OSFXSR_BIT: u32 = 9;
pub const X86_CR4_OSXMMEXCPT_BIT: u32 = 10;
pub const X86_CR4_UMIP_BIT: u32 = 11;
pub const X86_CR4_LA57_BIT: u32 = 12;
pub const X86_CR4_VMXE_BIT: u32 = 13;
pub const X86_CR4_SMXE_BIT: u32 = 14;
pub const X86_CR4_FSGSBASE_BIT: u32 = 16;
pub const X86_CR4_PCIDE_BIT: u32 = 17;
pub const X86_CR4_OSXSAVE_BIT: u32 = 18;
pub const X86_CR4_SMEP_BIT: u32 = 20;
pub const X86_CR4_SMAP_BIT: u32 = 21;
pub const X86_CR4_PKE_BIT: u32 = 22;
pub const X86_CR4_CET_BIT: u32 = 23;
pub const X86_CR4_LAM_SUP_BIT: u32 = 28;
pub const X86_CR4_FRED_BIT: u32 = 32;
pub const CX86_PCR0: u32 = 32;
pub const CX86_GCR: u32 = 184;
pub const CX86_CCR0: u32 = 192;
pub const CX86_CCR1: u32 = 193;
pub const CX86_CCR2: u32 = 194;
pub const CX86_CCR3: u32 = 195;
pub const CX86_CCR4: u32 = 232;
pub const CX86_CCR5: u32 = 233;
pub const CX86_CCR6: u32 = 234;
pub const CX86_CCR7: u32 = 235;
pub const CX86_PCR1: u32 = 240;
pub const CX86_DIR0: u32 = 254;
pub const CX86_DIR1: u32 = 255;
pub const CX86_ARR_BASE: u32 = 196;
pub const CX86_RCR_BASE: u32 = 220;
pub const sme_me_mask: u32 = 0;
pub const sev_status: u32 = 0;
pub const X86_VM_MASK: u32 = 0;
pub const CR3_PCID_MASK: u32 = 4095;
pub const X86_CR3_PTI_PCID_USER_BIT: u32 = 11;
pub const GDT_ENTRY_BOOT_CS: u32 = 2;
pub const GDT_ENTRY_BOOT_DS: u32 = 3;
pub const GDT_ENTRY_BOOT_TSS: u32 = 4;
pub const __BOOT_CS: u32 = 16;
pub const __BOOT_DS: u32 = 24;
pub const __BOOT_TSS: u32 = 32;
pub const SEGMENT_RPL_MASK: u32 = 3;
pub const USER_SEGMENT_RPL_MASK: u32 = 2;
pub const USER_RPL: u32 = 3;
pub const SEGMENT_TI_MASK: u32 = 4;
pub const SEGMENT_LDT: u32 = 4;
pub const SEGMENT_GDT: u32 = 0;
pub const GDT_ENTRY_INVALID_SEG: u32 = 0;
pub const GDT_ENTRY_KERNEL32_CS: u32 = 1;
pub const GDT_ENTRY_KERNEL_CS: u32 = 2;
pub const GDT_ENTRY_KERNEL_DS: u32 = 3;
pub const GDT_ENTRY_DEFAULT_USER32_CS: u32 = 4;
pub const GDT_ENTRY_DEFAULT_USER_DS: u32 = 5;
pub const GDT_ENTRY_DEFAULT_USER_CS: u32 = 6;
pub const GDT_ENTRY_TSS: u32 = 8;
pub const GDT_ENTRY_LDT: u32 = 10;
pub const GDT_ENTRY_TLS_MIN: u32 = 12;
pub const GDT_ENTRY_TLS_MAX: u32 = 14;
pub const GDT_ENTRY_CPUNODE: u32 = 15;
pub const GDT_ENTRIES: u32 = 16;
pub const __KERNEL32_CS: u32 = 8;
pub const __KERNEL_CS: u32 = 16;
pub const __KERNEL_DS: u32 = 24;
pub const __USER32_CS: u32 = 35;
pub const __USER_DS: u32 = 43;
pub const __USER_CS: u32 = 51;
pub const __CPUNODE_SEG: u32 = 123;
pub const IDT_ENTRIES: u32 = 256;
pub const NUM_EXCEPTION_VECTORS: u32 = 32;
pub const EXCEPTION_ERRCODE_MASK: u32 = 537033984;
pub const GDT_SIZE: u32 = 128;
pub const GDT_ENTRY_TLS_ENTRIES: u32 = 3;
pub const TLS_SIZE: u32 = 24;
pub const VDSO_CPUNODE_BITS: u32 = 12;
pub const VDSO_CPUNODE_MASK: u32 = 4095;
pub const EARLY_IDT_HANDLER_SIZE: u32 = 13;
pub const XEN_EARLY_IDT_HANDLER_SIZE: u32 = 12;
pub const PAGE_SHIFT: u32 = 12;
pub const HUGE_MAX_HSTATE: u32 = 2;
pub const LOAD_PHYSICAL_ADDR: u32 = 16777216;
pub const KASAN_STACK_ORDER: u32 = 0;
pub const THREAD_SIZE_ORDER: u32 = 2;
pub const EXCEPTION_STACK_ORDER: u32 = 1;
pub const IRQ_STACK_ORDER: u32 = 2;
pub const IST_INDEX_DF: u32 = 0;
pub const IST_INDEX_NMI: u32 = 1;
pub const IST_INDEX_DB: u32 = 2;
pub const IST_INDEX_MCE: u32 = 3;
pub const IST_INDEX_VC: u32 = 4;
pub const __PHYSICAL_MASK_SHIFT: u32 = 52;
pub const KERNEL_IMAGE_SIZE: u32 = 1073741824;
pub const FRAME_SIZE: u32 = 168;
pub const PTRACE_GETREGS: u32 = 12;
pub const PTRACE_SETREGS: u32 = 13;
pub const PTRACE_GETFPREGS: u32 = 14;
pub const PTRACE_SETFPREGS: u32 = 15;
pub const PTRACE_GETFPXREGS: u32 = 18;
pub const PTRACE_SETFPXREGS: u32 = 19;
pub const PTRACE_OLDSETOPTIONS: u32 = 21;
pub const PTRACE_GET_THREAD_AREA: u32 = 25;
pub const PTRACE_SET_THREAD_AREA: u32 = 26;
pub const PTRACE_ARCH_PRCTL: u32 = 30;
pub const PTRACE_SYSEMU: u32 = 31;
pub const PTRACE_SYSEMU_SINGLESTEP: u32 = 32;
pub const PTRACE_SINGLEBLOCK: u32 = 33;
pub const _DESC_ACCESSED: u32 = 1;
pub const _DESC_DATA_WRITABLE: u32 = 2;
pub const _DESC_CODE_READABLE: u32 = 2;
pub const _DESC_DATA_EXPAND_DOWN: u32 = 4;
pub const _DESC_CODE_CONFORMING: u32 = 4;
pub const _DESC_CODE_EXECUTABLE: u32 = 8;
pub const _DESC_S: u32 = 16;
pub const _DESC_PRESENT: u32 = 128;
pub const _DESC_LONG_CODE: u32 = 8192;
pub const _DESC_DB: u32 = 16384;
pub const _DESC_GRANULARITY_4K: u32 = 32768;
pub const _DESC_DATA: u32 = 147;
pub const _DESC_CODE: u32 = 155;
pub const DESC_DATA16: u32 = 147;
pub const DESC_CODE16: u32 = 155;
pub const DESC_DATA32: u32 = 49299;
pub const DESC_DATA32_BIOS: u32 = 16531;
pub const DESC_CODE32: u32 = 49307;
pub const DESC_CODE32_BIOS: u32 = 16539;
pub const DESC_DATA64: u32 = 49299;
pub const DESC_CODE64: u32 = 41115;
pub const BOOT_IDT_ENTRIES: u32 = 32;
pub const AR_TYPE_RODATA: u32 = 0;
pub const AR_TYPE_RWDATA: u32 = 512;
pub const AR_TYPE_RODATA_EXPDOWN: u32 = 1024;
pub const AR_TYPE_RWDATA_EXPDOWN: u32 = 1536;
pub const AR_TYPE_XOCODE: u32 = 2048;
pub const AR_TYPE_XRCODE: u32 = 2560;
pub const AR_TYPE_XOCODE_CONF: u32 = 3072;
pub const AR_TYPE_XRCODE_CONF: u32 = 3584;
pub const AR_TYPE_MASK: u32 = 3584;
pub const AR_DPL0: u32 = 0;
pub const AR_DPL3: u32 = 24576;
pub const AR_DPL_MASK: u32 = 24576;
pub const AR_A: u32 = 256;
pub const AR_S: u32 = 4096;
pub const AR_P: u32 = 32768;
pub const AR_AVL: u32 = 1048576;
pub const AR_L: u32 = 2097152;
pub const AR_DB: u32 = 4194304;
pub const AR_G: u32 = 8388608;
pub const _PAGE_BIT_PRESENT: u32 = 0;
pub const _PAGE_BIT_RW: u32 = 1;
pub const _PAGE_BIT_USER: u32 = 2;
pub const _PAGE_BIT_PWT: u32 = 3;
pub const _PAGE_BIT_PCD: u32 = 4;
pub const _PAGE_BIT_ACCESSED: u32 = 5;
pub const _PAGE_BIT_DIRTY: u32 = 6;
pub const _PAGE_BIT_PSE: u32 = 7;
pub const _PAGE_BIT_PAT: u32 = 7;
pub const _PAGE_BIT_GLOBAL: u32 = 8;
pub const _PAGE_BIT_SOFTW1: u32 = 9;
pub const _PAGE_BIT_SOFTW2: u32 = 10;
pub const _PAGE_BIT_SOFTW3: u32 = 11;
pub const _PAGE_BIT_PAT_LARGE: u32 = 12;
pub const _PAGE_BIT_SOFTW4: u32 = 57;
pub const _PAGE_BIT_SOFTW5: u32 = 58;
pub const _PAGE_BIT_PKEY_BIT0: u32 = 59;
pub const _PAGE_BIT_PKEY_BIT1: u32 = 60;
pub const _PAGE_BIT_PKEY_BIT2: u32 = 61;
pub const _PAGE_BIT_PKEY_BIT3: u32 = 62;
pub const _PAGE_BIT_NX: u32 = 63;
pub const _PAGE_BIT_SPECIAL: u32 = 9;
pub const _PAGE_BIT_CPA_TEST: u32 = 9;
pub const _PAGE_BIT_UFFD_WP: u32 = 10;
pub const _PAGE_BIT_SOFT_DIRTY: u32 = 11;
pub const _PAGE_BIT_DEVMAP: u32 = 57;
pub const _PAGE_BIT_SAVED_DIRTY: u32 = 58;
pub const _PAGE_BIT_PROTNONE: u32 = 8;
pub const SECTION_SIZE_BITS: u32 = 27;
pub const SHARED_KERNEL_PMD: u32 = 0;
pub const PTRS_PER_PGD: u32 = 512;
pub const P4D_SHIFT: u32 = 39;
pub const MAX_PTRS_PER_P4D: u32 = 512;
pub const MAX_POSSIBLE_PHYSMEM_BITS: u32 = 52;
pub const PUD_SHIFT: u32 = 30;
pub const PTRS_PER_PUD: u32 = 512;
pub const PMD_SHIFT: u32 = 21;
pub const PTRS_PER_PMD: u32 = 512;
pub const PTRS_PER_PTE: u32 = 512;
pub const GUARD_HOLE_PGD_ENTRY: i32 = -256;
pub const LDT_PGD_ENTRY: i32 = -240;
pub const __VMALLOC_BASE_L4: i64 = -60473139527680;
pub const __VMALLOC_BASE_L5: i64 = -27021597764222976;
pub const VMALLOC_SIZE_TB_L4: u32 = 32;
pub const VMALLOC_SIZE_TB_L5: u32 = 12800;
pub const __VMEMMAP_BASE_L4: i64 = -24189255811072;
pub const __VMEMMAP_BASE_L5: i64 = -12384898975268864;
pub const EARLY_DYNAMIC_PAGE_TABLES: u32 = 64;
pub const PGD_ALLOWED_BITS: i32 = -1;
pub const UNWIND_HINT_TYPE_UNDEFINED: u32 = 0;
pub const UNWIND_HINT_TYPE_END_OF_STACK: u32 = 1;
pub const UNWIND_HINT_TYPE_CALL: u32 = 2;
pub const UNWIND_HINT_TYPE_REGS: u32 = 3;
pub const UNWIND_HINT_TYPE_REGS_PARTIAL: u32 = 4;
pub const UNWIND_HINT_TYPE_FUNC: u32 = 5;
pub const UNWIND_HINT_TYPE_SAVE: u32 = 6;
pub const UNWIND_HINT_TYPE_RESTORE: u32 = 7;
pub const ANNOTATE_NOENDBR: &[u8; 64] =
    b"986: \n\t.pushsection .discard.noendbr\n\t.long 986b\n\t.popsection\n\t\0";
pub const ASM_REACHABLE: &[u8; 65] =
    b"998:\n\t.pushsection .discard.reachable\n\t.long 998b\n\t.popsection\n\t\0";
pub const MSR_EFER: u32 = 3221225600;
pub const MSR_STAR: u32 = 3221225601;
pub const MSR_LSTAR: u32 = 3221225602;
pub const MSR_CSTAR: u32 = 3221225603;
pub const MSR_SYSCALL_MASK: u32 = 3221225604;
pub const MSR_FS_BASE: u32 = 3221225728;
pub const MSR_GS_BASE: u32 = 3221225729;
pub const MSR_KERNEL_GS_BASE: u32 = 3221225730;
pub const MSR_TSC_AUX: u32 = 3221225731;
pub const _EFER_SCE: u32 = 0;
pub const _EFER_LME: u32 = 8;
pub const _EFER_LMA: u32 = 10;
pub const _EFER_NX: u32 = 11;
pub const _EFER_SVME: u32 = 12;
pub const _EFER_LMSLE: u32 = 13;
pub const _EFER_FFXSR: u32 = 14;
pub const _EFER_AUTOIBRS: u32 = 21;
pub const EFER_SCE: u32 = 1;
pub const EFER_LME: u32 = 256;
pub const EFER_LMA: u32 = 1024;
pub const EFER_NX: u32 = 2048;
pub const EFER_SVME: u32 = 4096;
pub const EFER_LMSLE: u32 = 8192;
pub const EFER_FFXSR: u32 = 16384;
pub const EFER_AUTOIBRS: u32 = 2097152;
pub const MSR_IA32_FRED_RSP0: u32 = 460;
pub const MSR_IA32_FRED_RSP1: u32 = 461;
pub const MSR_IA32_FRED_RSP2: u32 = 462;
pub const MSR_IA32_FRED_RSP3: u32 = 463;
pub const MSR_IA32_FRED_STKLVLS: u32 = 464;
pub const MSR_IA32_FRED_SSP1: u32 = 465;
pub const MSR_IA32_FRED_SSP2: u32 = 466;
pub const MSR_IA32_FRED_SSP3: u32 = 467;
pub const MSR_IA32_FRED_CONFIG: u32 = 468;
pub const MSR_TEST_CTRL: u32 = 51;
pub const MSR_TEST_CTRL_SPLIT_LOCK_DETECT_BIT: u32 = 29;
pub const MSR_IA32_SPEC_CTRL: u32 = 72;
pub const SPEC_CTRL_STIBP_SHIFT: u32 = 1;
pub const SPEC_CTRL_SSBD_SHIFT: u32 = 2;
pub const SPEC_CTRL_RRSBA_DIS_S_SHIFT: u32 = 6;
pub const SPEC_CTRL_BHI_DIS_S_SHIFT: u32 = 10;
pub const MSR_IA32_PRED_CMD: u32 = 73;
pub const MSR_PPIN_CTL: u32 = 78;
pub const MSR_PPIN: u32 = 79;
pub const MSR_IA32_PERFCTR0: u32 = 193;
pub const MSR_IA32_PERFCTR1: u32 = 194;
pub const MSR_FSB_FREQ: u32 = 205;
pub const MSR_PLATFORM_INFO: u32 = 206;
pub const MSR_PLATFORM_INFO_CPUID_FAULT_BIT: u32 = 31;
pub const MSR_IA32_UMWAIT_CONTROL: u32 = 225;
pub const MSR_IA32_UMWAIT_CONTROL_TIME_MASK: i32 = -4;
pub const MSR_IA32_CORE_CAPS: u32 = 207;
pub const MSR_IA32_CORE_CAPS_INTEGRITY_CAPS_BIT: u32 = 2;
pub const MSR_IA32_CORE_CAPS_SPLIT_LOCK_DETECT_BIT: u32 = 5;
pub const MSR_PKG_CST_CONFIG_CONTROL: u32 = 226;
pub const NHM_C3_AUTO_DEMOTE: u32 = 33554432;
pub const NHM_C1_AUTO_DEMOTE: u32 = 67108864;
pub const ATM_LNC_C6_AUTO_DEMOTE: u32 = 33554432;
pub const SNB_C3_AUTO_UNDEMOTE: u32 = 134217728;
pub const SNB_C1_AUTO_UNDEMOTE: u32 = 268435456;
pub const MSR_MTRRcap: u32 = 254;
pub const MSR_IA32_ARCH_CAPABILITIES: u32 = 266;
pub const MSR_IA32_FLUSH_CMD: u32 = 267;
pub const MSR_IA32_BBL_CR_CTL: u32 = 281;
pub const MSR_IA32_BBL_CR_CTL3: u32 = 286;
pub const MSR_IA32_TSX_CTRL: u32 = 290;
pub const MSR_IA32_MCU_OPT_CTRL: u32 = 291;
pub const MSR_IA32_SYSENTER_CS: u32 = 372;
pub const MSR_IA32_SYSENTER_ESP: u32 = 373;
pub const MSR_IA32_SYSENTER_EIP: u32 = 374;
pub const MSR_IA32_MCG_CAP: u32 = 377;
pub const MSR_IA32_MCG_STATUS: u32 = 378;
pub const MSR_IA32_MCG_CTL: u32 = 379;
pub const MSR_ERROR_CONTROL: u32 = 383;
pub const MSR_IA32_MCG_EXT_CTL: u32 = 1232;
pub const MSR_OFFCORE_RSP_0: u32 = 422;
pub const MSR_OFFCORE_RSP_1: u32 = 423;
pub const MSR_TURBO_RATIO_LIMIT: u32 = 429;
pub const MSR_TURBO_RATIO_LIMIT1: u32 = 430;
pub const MSR_TURBO_RATIO_LIMIT2: u32 = 431;
pub const MSR_SNOOP_RSP_0: u32 = 4904;
pub const MSR_SNOOP_RSP_1: u32 = 4905;
pub const MSR_LBR_SELECT: u32 = 456;
pub const MSR_LBR_TOS: u32 = 457;
pub const MSR_IA32_POWER_CTL: u32 = 508;
pub const MSR_IA32_POWER_CTL_BIT_EE: u32 = 19;
pub const MSR_INTEGRITY_CAPS: u32 = 729;
pub const MSR_INTEGRITY_CAPS_ARRAY_BIST_BIT: u32 = 2;
pub const MSR_INTEGRITY_CAPS_PERIODIC_BIST_BIT: u32 = 4;
pub const MSR_LBR_NHM_FROM: u32 = 1664;
pub const MSR_LBR_NHM_TO: u32 = 1728;
pub const MSR_LBR_CORE_FROM: u32 = 64;
pub const MSR_LBR_CORE_TO: u32 = 96;
pub const MSR_LBR_INFO_0: u32 = 3520;
pub const LBR_INFO_CYCLES: u32 = 65535;
pub const LBR_INFO_BR_TYPE_OFFSET: u32 = 56;
pub const LBR_INFO_BR_TYPE: u64 = 1080863910568919040;
pub const LBR_INFO_BR_CNTR_OFFSET: u32 = 32;
pub const LBR_INFO_BR_CNTR_NUM: u32 = 4;
pub const LBR_INFO_BR_CNTR_BITS: u32 = 2;
pub const MSR_ARCH_LBR_CTL: u32 = 5326;
pub const ARCH_LBR_CTL_CPL_OFFSET: u32 = 1;
pub const ARCH_LBR_CTL_CPL: u32 = 6;
pub const ARCH_LBR_CTL_STACK_OFFSET: u32 = 3;
pub const ARCH_LBR_CTL_STACK: u32 = 8;
pub const ARCH_LBR_CTL_FILTER_OFFSET: u32 = 16;
pub const ARCH_LBR_CTL_FILTER: u32 = 8323072;
pub const MSR_ARCH_LBR_DEPTH: u32 = 5327;
pub const MSR_ARCH_LBR_FROM_0: u32 = 5376;
pub const MSR_ARCH_LBR_TO_0: u32 = 5632;
pub const MSR_ARCH_LBR_INFO_0: u32 = 4608;
pub const MSR_IA32_PEBS_ENABLE: u32 = 1009;
pub const MSR_PEBS_DATA_CFG: u32 = 1010;
pub const MSR_IA32_DS_AREA: u32 = 1536;
pub const MSR_IA32_PERF_CAPABILITIES: u32 = 837;
pub const PERF_CAP_METRICS_IDX: u32 = 15;
pub const PERF_CAP_PT_IDX: u32 = 16;
pub const MSR_PEBS_LD_LAT_THRESHOLD: u32 = 1014;
pub const PERF_CAP_PEBS_FORMAT: u32 = 3840;
pub const MSR_IA32_RTIT_CTL: u32 = 1392;
pub const RTIT_CTL_MTC_RANGE_OFFSET: u32 = 14;
pub const RTIT_CTL_MTC_RANGE: u32 = 245760;
pub const RTIT_CTL_CYC_THRESH_OFFSET: u32 = 19;
pub const RTIT_CTL_CYC_THRESH: u32 = 7864320;
pub const RTIT_CTL_PSB_FREQ_OFFSET: u32 = 24;
pub const RTIT_CTL_PSB_FREQ: u32 = 251658240;
pub const RTIT_CTL_ADDR0_OFFSET: u32 = 32;
pub const RTIT_CTL_ADDR0: u64 = 64424509440;
pub const RTIT_CTL_ADDR1_OFFSET: u32 = 36;
pub const RTIT_CTL_ADDR1: u64 = 1030792151040;
pub const RTIT_CTL_ADDR2_OFFSET: u32 = 40;
pub const RTIT_CTL_ADDR2: u64 = 16492674416640;
pub const RTIT_CTL_ADDR3_OFFSET: u32 = 44;
pub const RTIT_CTL_ADDR3: u64 = 263882790666240;
pub const MSR_IA32_RTIT_STATUS: u32 = 1393;
pub const RTIT_STATUS_BYTECNT_OFFSET: u32 = 32;
pub const RTIT_STATUS_BYTECNT: u64 = 562945658454016;
pub const MSR_IA32_RTIT_ADDR0_A: u32 = 1408;
pub const MSR_IA32_RTIT_ADDR0_B: u32 = 1409;
pub const MSR_IA32_RTIT_ADDR1_A: u32 = 1410;
pub const MSR_IA32_RTIT_ADDR1_B: u32 = 1411;
pub const MSR_IA32_RTIT_ADDR2_A: u32 = 1412;
pub const MSR_IA32_RTIT_ADDR2_B: u32 = 1413;
pub const MSR_IA32_RTIT_ADDR3_A: u32 = 1414;
pub const MSR_IA32_RTIT_ADDR3_B: u32 = 1415;
pub const MSR_IA32_RTIT_CR3_MATCH: u32 = 1394;
pub const MSR_IA32_RTIT_OUTPUT_BASE: u32 = 1376;
pub const MSR_IA32_RTIT_OUTPUT_MASK: u32 = 1377;
pub const MSR_MTRRfix64K_00000: u32 = 592;
pub const MSR_MTRRfix16K_80000: u32 = 600;
pub const MSR_MTRRfix16K_A0000: u32 = 601;
pub const MSR_MTRRfix4K_C0000: u32 = 616;
pub const MSR_MTRRfix4K_C8000: u32 = 617;
pub const MSR_MTRRfix4K_D0000: u32 = 618;
pub const MSR_MTRRfix4K_D8000: u32 = 619;
pub const MSR_MTRRfix4K_E0000: u32 = 620;
pub const MSR_MTRRfix4K_E8000: u32 = 621;
pub const MSR_MTRRfix4K_F0000: u32 = 622;
pub const MSR_MTRRfix4K_F8000: u32 = 623;
pub const MSR_MTRRdefType: u32 = 767;
pub const MSR_IA32_CR_PAT: u32 = 631;
pub const MSR_IA32_DEBUGCTLMSR: u32 = 473;
pub const MSR_IA32_LASTBRANCHFROMIP: u32 = 475;
pub const MSR_IA32_LASTBRANCHTOIP: u32 = 476;
pub const MSR_IA32_LASTINTFROMIP: u32 = 477;
pub const MSR_IA32_LASTINTTOIP: u32 = 478;
pub const MSR_IA32_PASID: u32 = 3475;
pub const DEBUGCTLMSR_LBR: u32 = 1;
pub const DEBUGCTLMSR_BTF_SHIFT: u32 = 1;
pub const DEBUGCTLMSR_BTF: u32 = 2;
pub const DEBUGCTLMSR_BUS_LOCK_DETECT: u32 = 4;
pub const DEBUGCTLMSR_TR: u32 = 64;
pub const DEBUGCTLMSR_BTS: u32 = 128;
pub const DEBUGCTLMSR_BTINT: u32 = 256;
pub const DEBUGCTLMSR_BTS_OFF_OS: u32 = 512;
pub const DEBUGCTLMSR_BTS_OFF_USR: u32 = 1024;
pub const DEBUGCTLMSR_FREEZE_LBRS_ON_PMI: u32 = 2048;
pub const DEBUGCTLMSR_FREEZE_PERFMON_ON_PMI: u32 = 4096;
pub const DEBUGCTLMSR_FREEZE_IN_SMM_BIT: u32 = 14;
pub const DEBUGCTLMSR_FREEZE_IN_SMM: u32 = 16384;
pub const MSR_PEBS_FRONTEND: u32 = 1015;
pub const MSR_IA32_MC0_CTL: u32 = 1024;
pub const MSR_IA32_MC0_STATUS: u32 = 1025;
pub const MSR_IA32_MC0_ADDR: u32 = 1026;
pub const MSR_IA32_MC0_MISC: u32 = 1027;
pub const MSR_PKG_C3_RESIDENCY: u32 = 1016;
pub const MSR_PKG_C6_RESIDENCY: u32 = 1017;
pub const MSR_ATOM_PKG_C6_RESIDENCY: u32 = 1018;
pub const MSR_PKG_C7_RESIDENCY: u32 = 1018;
pub const MSR_CORE_C3_RESIDENCY: u32 = 1020;
pub const MSR_CORE_C6_RESIDENCY: u32 = 1021;
pub const MSR_CORE_C7_RESIDENCY: u32 = 1022;
pub const MSR_KNL_CORE_C6_RESIDENCY: u32 = 1023;
pub const MSR_PKG_C2_RESIDENCY: u32 = 1549;
pub const MSR_PKG_C8_RESIDENCY: u32 = 1584;
pub const MSR_PKG_C9_RESIDENCY: u32 = 1585;
pub const MSR_PKG_C10_RESIDENCY: u32 = 1586;
pub const MSR_PKGC3_IRTL: u32 = 1546;
pub const MSR_PKGC6_IRTL: u32 = 1547;
pub const MSR_PKGC7_IRTL: u32 = 1548;
pub const MSR_PKGC8_IRTL: u32 = 1587;
pub const MSR_PKGC9_IRTL: u32 = 1588;
pub const MSR_PKGC10_IRTL: u32 = 1589;
pub const MSR_VR_CURRENT_CONFIG: u32 = 1537;
pub const MSR_RAPL_POWER_UNIT: u32 = 1542;
pub const MSR_PKG_POWER_LIMIT: u32 = 1552;
pub const MSR_PKG_ENERGY_STATUS: u32 = 1553;
pub const MSR_PKG_PERF_STATUS: u32 = 1555;
pub const MSR_PKG_POWER_INFO: u32 = 1556;
pub const MSR_DRAM_POWER_LIMIT: u32 = 1560;
pub const MSR_DRAM_ENERGY_STATUS: u32 = 1561;
pub const MSR_DRAM_PERF_STATUS: u32 = 1563;
pub const MSR_DRAM_POWER_INFO: u32 = 1564;
pub const MSR_PP0_POWER_LIMIT: u32 = 1592;
pub const MSR_PP0_ENERGY_STATUS: u32 = 1593;
pub const MSR_PP0_POLICY: u32 = 1594;
pub const MSR_PP0_PERF_STATUS: u32 = 1595;
pub const MSR_PP1_POWER_LIMIT: u32 = 1600;
pub const MSR_PP1_ENERGY_STATUS: u32 = 1601;
pub const MSR_PP1_POLICY: u32 = 1602;
pub const MSR_AMD_RAPL_POWER_UNIT: u32 = 3221291673;
pub const MSR_AMD_CORE_ENERGY_STATUS: u32 = 3221291674;
pub const MSR_AMD_PKG_ENERGY_STATUS: u32 = 3221291675;
pub const MSR_CONFIG_TDP_NOMINAL: u32 = 1608;
pub const MSR_CONFIG_TDP_LEVEL_1: u32 = 1609;
pub const MSR_CONFIG_TDP_LEVEL_2: u32 = 1610;
pub const MSR_CONFIG_TDP_CONTROL: u32 = 1611;
pub const MSR_TURBO_ACTIVATION_RATIO: u32 = 1612;
pub const MSR_PLATFORM_ENERGY_STATUS: u32 = 1613;
pub const MSR_SECONDARY_TURBO_RATIO_LIMIT: u32 = 1616;
pub const MSR_PKG_WEIGHTED_CORE_C0_RES: u32 = 1624;
pub const MSR_PKG_ANY_CORE_C0_RES: u32 = 1625;
pub const MSR_PKG_ANY_GFXE_C0_RES: u32 = 1626;
pub const MSR_PKG_BOTH_CORE_GFXE_C0_RES: u32 = 1627;
pub const MSR_CORE_C1_RES: u32 = 1632;
pub const MSR_MODULE_C6_RES_MS: u32 = 1636;
pub const MSR_CC6_DEMOTION_POLICY_CONFIG: u32 = 1640;
pub const MSR_MC6_DEMOTION_POLICY_CONFIG: u32 = 1641;
pub const MSR_ATOM_CORE_RATIOS: u32 = 1642;
pub const MSR_ATOM_CORE_VIDS: u32 = 1643;
pub const MSR_ATOM_CORE_TURBO_RATIOS: u32 = 1644;
pub const MSR_ATOM_CORE_TURBO_VIDS: u32 = 1645;
pub const MSR_CORE_PERF_LIMIT_REASONS: u32 = 1680;
pub const MSR_GFX_PERF_LIMIT_REASONS: u32 = 1712;
pub const MSR_RING_PERF_LIMIT_REASONS: u32 = 1713;
pub const MSR_IA32_U_CET: u32 = 1696;
pub const MSR_IA32_S_CET: u32 = 1698;
pub const MSR_IA32_PL0_SSP: u32 = 1700;
pub const MSR_IA32_PL1_SSP: u32 = 1701;
pub const MSR_IA32_PL2_SSP: u32 = 1702;
pub const MSR_IA32_PL3_SSP: u32 = 1703;
pub const MSR_IA32_INT_SSP_TAB: u32 = 1704;
pub const MSR_PPERF: u32 = 1614;
pub const MSR_PERF_LIMIT_REASONS: u32 = 1615;
pub const MSR_PM_ENABLE: u32 = 1904;
pub const MSR_HWP_CAPABILITIES: u32 = 1905;
pub const MSR_HWP_REQUEST_PKG: u32 = 1906;
pub const MSR_HWP_INTERRUPT: u32 = 1907;
pub const MSR_HWP_REQUEST: u32 = 1908;
pub const MSR_HWP_STATUS: u32 = 1911;
pub const HWP_BASE_BIT: u32 = 128;
pub const HWP_NOTIFICATIONS_BIT: u32 = 256;
pub const HWP_ACTIVITY_WINDOW_BIT: u32 = 512;
pub const HWP_ENERGY_PERF_PREFERENCE_BIT: u32 = 1024;
pub const HWP_PACKAGE_LEVEL_REQUEST_BIT: u32 = 2048;
pub const HWP_EPP_PERFORMANCE: u32 = 0;
pub const HWP_EPP_BALANCE_PERFORMANCE: u32 = 128;
pub const HWP_EPP_BALANCE_POWERSAVE: u32 = 192;
pub const HWP_EPP_POWERSAVE: u32 = 255;
pub const MSR_AMD64_MC0_MASK: u32 = 3221291076;
pub const MSR_IA32_MC0_CTL2: u32 = 640;
pub const MSR_P6_PERFCTR0: u32 = 193;
pub const MSR_P6_PERFCTR1: u32 = 194;
pub const MSR_P6_EVNTSEL0: u32 = 390;
pub const MSR_P6_EVNTSEL1: u32 = 391;
pub const MSR_KNC_PERFCTR0: u32 = 32;
pub const MSR_KNC_PERFCTR1: u32 = 33;
pub const MSR_KNC_EVNTSEL0: u32 = 40;
pub const MSR_KNC_EVNTSEL1: u32 = 41;
pub const MSR_IA32_PMC0: u32 = 1217;
pub const MSR_RELOAD_PMC0: u32 = 5313;
pub const MSR_RELOAD_FIXED_CTR0: u32 = 4873;
pub const MSR_IA32_PMC_V6_GP0_CTR: u32 = 6400;
pub const MSR_IA32_PMC_V6_GP0_CFG_A: u32 = 6401;
pub const MSR_IA32_PMC_V6_FX0_CTR: u32 = 6528;
pub const MSR_IA32_PMC_V6_STEP: u32 = 4;
pub const MSR_IA32_MKTME_KEYID_PARTITIONING: u32 = 135;
pub const MSR_AMD64_PATCH_LEVEL: u32 = 139;
pub const MSR_AMD64_TSC_RATIO: u32 = 3221225732;
pub const MSR_AMD64_NB_CFG: u32 = 3221291039;
pub const MSR_AMD64_PATCH_LOADER: u32 = 3221291040;
pub const MSR_AMD_PERF_CTL: u32 = 3221291106;
pub const MSR_AMD_PERF_STATUS: u32 = 3221291107;
pub const MSR_AMD_PSTATE_DEF_BASE: u32 = 3221291108;
pub const MSR_AMD64_OSVW_ID_LENGTH: u32 = 3221291328;
pub const MSR_AMD64_OSVW_STATUS: u32 = 3221291329;
pub const MSR_AMD_PPIN_CTL: u32 = 3221291760;
pub const MSR_AMD_PPIN: u32 = 3221291761;
pub const MSR_AMD64_CPUID_FN_1: u32 = 3221295108;
pub const MSR_AMD64_LS_CFG: u32 = 3221295136;
pub const MSR_AMD64_DC_CFG: u32 = 3221295138;
pub const MSR_AMD64_TW_CFG: u32 = 3221295139;
pub const MSR_AMD64_DE_CFG: u32 = 3221295145;
pub const MSR_AMD64_DE_CFG_LFENCE_SERIALIZE_BIT: u32 = 1;
pub const MSR_AMD64_DE_CFG_ZEN2_FP_BACKUP_FIX_BIT: u32 = 9;
pub const MSR_AMD64_BU_CFG2: u32 = 3221295146;
pub const MSR_AMD64_IBSFETCHCTL: u32 = 3221295152;
pub const MSR_AMD64_IBSFETCHLINAD: u32 = 3221295153;
pub const MSR_AMD64_IBSFETCHPHYSAD: u32 = 3221295154;
pub const MSR_AMD64_IBSFETCH_REG_COUNT: u32 = 3;
pub const MSR_AMD64_IBSFETCH_REG_MASK: u32 = 7;
pub const MSR_AMD64_IBSOPCTL: u32 = 3221295155;
pub const MSR_AMD64_IBSOPRIP: u32 = 3221295156;
pub const MSR_AMD64_IBSOPDATA: u32 = 3221295157;
pub const MSR_AMD64_IBSOPDATA2: u32 = 3221295158;
pub const MSR_AMD64_IBSOPDATA3: u32 = 3221295159;
pub const MSR_AMD64_IBSDCLINAD: u32 = 3221295160;
pub const MSR_AMD64_IBSDCPHYSAD: u32 = 3221295161;
pub const MSR_AMD64_IBSOP_REG_COUNT: u32 = 7;
pub const MSR_AMD64_IBSOP_REG_MASK: u32 = 127;
pub const MSR_AMD64_IBSCTL: u32 = 3221295162;
pub const MSR_AMD64_IBSBRTARGET: u32 = 3221295163;
pub const MSR_AMD64_ICIBSEXTDCTL: u32 = 3221295164;
pub const MSR_AMD64_IBSOPDATA4: u32 = 3221295165;
pub const MSR_AMD64_IBS_REG_COUNT_MAX: u32 = 8;
pub const MSR_AMD64_SVM_AVIC_DOORBELL: u32 = 3221291291;
pub const MSR_AMD64_VM_PAGE_FLUSH: u32 = 3221291294;
pub const MSR_AMD64_SEV_ES_GHCB: u32 = 3221291312;
pub const MSR_AMD64_SEV: u32 = 3221291313;
pub const MSR_AMD64_SEV_ENABLED_BIT: u32 = 0;
pub const MSR_AMD64_SEV_ES_ENABLED_BIT: u32 = 1;
pub const MSR_AMD64_SEV_SNP_ENABLED_BIT: u32 = 2;
pub const MSR_AMD64_SNP_VTOM_BIT: u32 = 3;
pub const MSR_AMD64_SNP_REFLECT_VC_BIT: u32 = 4;
pub const MSR_AMD64_SNP_RESTRICTED_INJ_BIT: u32 = 5;
pub const MSR_AMD64_SNP_ALT_INJ_BIT: u32 = 6;
pub const MSR_AMD64_SNP_DEBUG_SWAP_BIT: u32 = 7;
pub const MSR_AMD64_SNP_PREVENT_HOST_IBS_BIT: u32 = 8;
pub const MSR_AMD64_SNP_BTB_ISOLATION_BIT: u32 = 9;
pub const MSR_AMD64_SNP_VMPL_SSS_BIT: u32 = 10;
pub const MSR_AMD64_SNP_SECURE_TSC_BIT: u32 = 11;
pub const MSR_AMD64_SNP_VMGEXIT_PARAM_BIT: u32 = 12;
pub const MSR_AMD64_SNP_IBS_VIRT_BIT: u32 = 14;
pub const MSR_AMD64_SNP_VMSA_REG_PROT_BIT: u32 = 16;
pub const MSR_AMD64_SNP_SMT_PROT_BIT: u32 = 17;
pub const MSR_AMD64_SNP_RESV_BIT: u32 = 18;
pub const MSR_AMD64_VIRT_SPEC_CTRL: u32 = 3221291295;
pub const MSR_AMD64_RMP_BASE: u32 = 3221291314;
pub const MSR_AMD64_RMP_END: u32 = 3221291315;
pub const MSR_SVSM_CAA: u32 = 3221352448;
pub const MSR_AMD_CPPC_CAP1: u32 = 3221291696;
pub const MSR_AMD_CPPC_ENABLE: u32 = 3221291697;
pub const MSR_AMD_CPPC_CAP2: u32 = 3221291698;
pub const MSR_AMD_CPPC_REQ: u32 = 3221291699;
pub const MSR_AMD_CPPC_STATUS: u32 = 3221291700;
pub const MSR_AMD64_PERF_CNTR_GLOBAL_STATUS: u32 = 3221226240;
pub const MSR_AMD64_PERF_CNTR_GLOBAL_CTL: u32 = 3221226241;
pub const MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_CLR: u32 = 3221226242;
pub const MSR_AMD64_LBR_SELECT: u32 = 3221225742;
pub const MSR_ZEN4_BP_CFG: u32 = 3221295150;
pub const MSR_ZEN4_BP_CFG_SHARED_BTB_FIX_BIT: u32 = 5;
pub const MSR_F19H_UMC_PERF_CTL: u32 = 3221293056;
pub const MSR_F19H_UMC_PERF_CTR: u32 = 3221293057;
pub const MSR_ZEN2_SPECTRAL_CHICKEN: u32 = 3221295331;
pub const MSR_F17H_IRPERF: u32 = 3221225705;
pub const MSR_F16H_L2I_PERF_CTL: u32 = 3221291568;
pub const MSR_F16H_L2I_PERF_CTR: u32 = 3221291569;
pub const MSR_F16H_DR1_ADDR_MASK: u32 = 3221295129;
pub const MSR_F16H_DR2_ADDR_MASK: u32 = 3221295130;
pub const MSR_F16H_DR3_ADDR_MASK: u32 = 3221295131;
pub const MSR_F16H_DR0_ADDR_MASK: u32 = 3221295143;
pub const MSR_F15H_CU_PWR_ACCUMULATOR: u32 = 3221291130;
pub const MSR_F15H_CU_MAX_PWR_ACCUMULATOR: u32 = 3221291131;
pub const MSR_F15H_PERF_CTL: u32 = 3221291520;
pub const MSR_F15H_PERF_CTL0: u32 = 3221291520;
pub const MSR_F15H_PERF_CTL1: u32 = 3221291522;
pub const MSR_F15H_PERF_CTL2: u32 = 3221291524;
pub const MSR_F15H_PERF_CTL3: u32 = 3221291526;
pub const MSR_F15H_PERF_CTL4: u32 = 3221291528;
pub const MSR_F15H_PERF_CTL5: u32 = 3221291530;
pub const MSR_F15H_PERF_CTR: u32 = 3221291521;
pub const MSR_F15H_PERF_CTR0: u32 = 3221291521;
pub const MSR_F15H_PERF_CTR1: u32 = 3221291523;
pub const MSR_F15H_PERF_CTR2: u32 = 3221291525;
pub const MSR_F15H_PERF_CTR3: u32 = 3221291527;
pub const MSR_F15H_PERF_CTR4: u32 = 3221291529;
pub const MSR_F15H_PERF_CTR5: u32 = 3221291531;
pub const MSR_F15H_NB_PERF_CTL: u32 = 3221291584;
pub const MSR_F15H_NB_PERF_CTR: u32 = 3221291585;
pub const MSR_F15H_PTSC: u32 = 3221291648;
pub const MSR_F15H_IC_CFG: u32 = 3221295137;
pub const MSR_F15H_EX_CFG: u32 = 3221295148;
pub const MSR_FAM10H_MMIO_CONF_BASE: u32 = 3221291096;
pub const FAM10H_MMIO_CONF_ENABLE: u32 = 1;
pub const FAM10H_MMIO_CONF_BUSRANGE_MASK: u32 = 15;
pub const FAM10H_MMIO_CONF_BUSRANGE_SHIFT: u32 = 2;
pub const FAM10H_MMIO_CONF_BASE_MASK: u32 = 268435455;
pub const FAM10H_MMIO_CONF_BASE_SHIFT: u32 = 20;
pub const MSR_FAM10H_NODE_ID: u32 = 3221295116;
pub const MSR_K8_TOP_MEM1: u32 = 3221291034;
pub const MSR_K8_TOP_MEM2: u32 = 3221291037;
pub const MSR_AMD64_SYSCFG: u32 = 3221291024;
pub const MSR_AMD64_SYSCFG_MEM_ENCRYPT_BIT: u32 = 23;
pub const MSR_AMD64_SYSCFG_SNP_EN_BIT: u32 = 24;
pub const MSR_AMD64_SYSCFG_SNP_VMPL_EN_BIT: u32 = 25;
pub const MSR_AMD64_SYSCFG_MFDM_BIT: u32 = 19;
pub const MSR_K8_INT_PENDING_MSG: u32 = 3221291093;
pub const K8_INTP_C1E_ACTIVE_MASK: u32 = 402653184;
pub const MSR_K8_TSEG_ADDR: u32 = 3221291282;
pub const MSR_K8_TSEG_MASK: u32 = 3221291283;
pub const K8_MTRRFIXRANGE_DRAM_ENABLE: u32 = 262144;
pub const K8_MTRRFIXRANGE_DRAM_MODIFY: u32 = 524288;
pub const K8_MTRR_RDMEM_WRMEM_MASK: u32 = 404232216;
pub const MSR_K7_EVNTSEL0: u32 = 3221291008;
pub const MSR_K7_PERFCTR0: u32 = 3221291012;
pub const MSR_K7_EVNTSEL1: u32 = 3221291009;
pub const MSR_K7_PERFCTR1: u32 = 3221291013;
pub const MSR_K7_EVNTSEL2: u32 = 3221291010;
pub const MSR_K7_PERFCTR2: u32 = 3221291014;
pub const MSR_K7_EVNTSEL3: u32 = 3221291011;
pub const MSR_K7_PERFCTR3: u32 = 3221291015;
pub const MSR_K7_CLK_CTL: u32 = 3221291035;
pub const MSR_K7_HWCR: u32 = 3221291029;
pub const MSR_K7_HWCR_SMMLOCK_BIT: u32 = 0;
pub const MSR_K7_HWCR_IRPERF_EN_BIT: u32 = 30;
pub const MSR_K7_FID_VID_CTL: u32 = 3221291073;
pub const MSR_K7_FID_VID_STATUS: u32 = 3221291074;
pub const MSR_K7_HWCR_CPB_DIS_BIT: u32 = 25;
pub const MSR_K6_WHCR: u32 = 3221225602;
pub const MSR_K6_UWCCR: u32 = 3221225605;
pub const MSR_K6_EPMR: u32 = 3221225606;
pub const MSR_K6_PSOR: u32 = 3221225607;
pub const MSR_K6_PFIR: u32 = 3221225608;
pub const MSR_IDT_FCR1: u32 = 263;
pub const MSR_IDT_FCR2: u32 = 264;
pub const MSR_IDT_FCR3: u32 = 265;
pub const MSR_IDT_FCR4: u32 = 266;
pub const MSR_IDT_MCR0: u32 = 272;
pub const MSR_IDT_MCR1: u32 = 273;
pub const MSR_IDT_MCR2: u32 = 274;
pub const MSR_IDT_MCR3: u32 = 275;
pub const MSR_IDT_MCR4: u32 = 276;
pub const MSR_IDT_MCR5: u32 = 277;
pub const MSR_IDT_MCR6: u32 = 278;
pub const MSR_IDT_MCR7: u32 = 279;
pub const MSR_IDT_MCR_CTRL: u32 = 288;
pub const MSR_VIA_FCR: u32 = 4359;
pub const MSR_VIA_LONGHAUL: u32 = 4362;
pub const MSR_VIA_RNG: u32 = 4363;
pub const MSR_VIA_BCR2: u32 = 4423;
pub const MSR_TMTA_LONGRUN_CTRL: u32 = 2156298256;
pub const MSR_TMTA_LONGRUN_FLAGS: u32 = 2156298257;
pub const MSR_TMTA_LRTI_READOUT: u32 = 2156298264;
pub const MSR_TMTA_LRTI_VOLT_MHZ: u32 = 2156298266;
pub const MSR_IA32_P5_MC_ADDR: u32 = 0;
pub const MSR_IA32_P5_MC_TYPE: u32 = 1;
pub const MSR_IA32_TSC: u32 = 16;
pub const MSR_IA32_PLATFORM_ID: u32 = 23;
pub const MSR_IA32_EBL_CR_POWERON: u32 = 42;
pub const MSR_EBC_FREQUENCY_ID: u32 = 44;
pub const MSR_SMI_COUNT: u32 = 52;
pub const MSR_IA32_FEAT_CTL: u32 = 58;
pub const MSR_IA32_TSC_ADJUST: u32 = 59;
pub const MSR_IA32_BNDCFGS: u32 = 3472;
pub const MSR_IA32_BNDCFGS_RSVD: u32 = 4092;
pub const MSR_IA32_XFD: u32 = 452;
pub const MSR_IA32_XFD_ERR: u32 = 453;
pub const MSR_IA32_XSS: u32 = 3488;
pub const MSR_IA32_APICBASE: u32 = 27;
pub const MSR_IA32_APICBASE_BSP: u32 = 256;
pub const MSR_IA32_APICBASE_ENABLE: u32 = 2048;
pub const MSR_IA32_APICBASE_BASE: u32 = 4294963200;
pub const MSR_IA32_UCODE_WRITE: u32 = 121;
pub const MSR_IA32_UCODE_REV: u32 = 139;
pub const MSR_IA32_SGXLEPUBKEYHASH0: u32 = 140;
pub const MSR_IA32_SGXLEPUBKEYHASH1: u32 = 141;
pub const MSR_IA32_SGXLEPUBKEYHASH2: u32 = 142;
pub const MSR_IA32_SGXLEPUBKEYHASH3: u32 = 143;
pub const MSR_IA32_SMM_MONITOR_CTL: u32 = 155;
pub const MSR_IA32_SMBASE: u32 = 158;
pub const MSR_IA32_PERF_STATUS: u32 = 408;
pub const MSR_IA32_PERF_CTL: u32 = 409;
pub const INTEL_PERF_CTL_MASK: u32 = 65535;
pub const MSR_AMD_DBG_EXTN_CFG: u32 = 3221225743;
pub const MSR_AMD_SAMP_BR_FROM: u32 = 3221291776;
pub const MSR_IA32_MPERF: u32 = 231;
pub const MSR_IA32_APERF: u32 = 232;
pub const MSR_IA32_THERM_CONTROL: u32 = 410;
pub const MSR_IA32_THERM_INTERRUPT: u32 = 411;
pub const THERM_INT_HIGH_ENABLE: u32 = 1;
pub const THERM_INT_LOW_ENABLE: u32 = 2;
pub const THERM_INT_PLN_ENABLE: u32 = 16777216;
pub const MSR_IA32_THERM_STATUS: u32 = 412;
pub const THERM_STATUS_PROCHOT: u32 = 1;
pub const THERM_STATUS_POWER_LIMIT: u32 = 1024;
pub const MSR_THERM2_CTL: u32 = 413;
pub const MSR_THERM2_CTL_TM_SELECT: u32 = 65536;
pub const MSR_IA32_MISC_ENABLE: u32 = 416;
pub const MSR_IA32_TEMPERATURE_TARGET: u32 = 418;
pub const MSR_MISC_FEATURE_CONTROL: u32 = 420;
pub const MSR_MISC_PWR_MGMT: u32 = 426;
pub const MSR_IA32_ENERGY_PERF_BIAS: u32 = 432;
pub const ENERGY_PERF_BIAS_PERFORMANCE: u32 = 0;
pub const ENERGY_PERF_BIAS_BALANCE_PERFORMANCE: u32 = 4;
pub const ENERGY_PERF_BIAS_NORMAL: u32 = 6;
pub const ENERGY_PERF_BIAS_NORMAL_POWERSAVE: u32 = 7;
pub const ENERGY_PERF_BIAS_BALANCE_POWERSAVE: u32 = 8;
pub const ENERGY_PERF_BIAS_POWERSAVE: u32 = 15;
pub const MSR_IA32_PACKAGE_THERM_STATUS: u32 = 433;
pub const PACKAGE_THERM_STATUS_PROCHOT: u32 = 1;
pub const PACKAGE_THERM_STATUS_POWER_LIMIT: u32 = 1024;
pub const PACKAGE_THERM_STATUS_HFI_UPDATED: u32 = 67108864;
pub const MSR_IA32_PACKAGE_THERM_INTERRUPT: u32 = 434;
pub const PACKAGE_THERM_INT_HIGH_ENABLE: u32 = 1;
pub const PACKAGE_THERM_INT_LOW_ENABLE: u32 = 2;
pub const PACKAGE_THERM_INT_PLN_ENABLE: u32 = 16777216;
pub const PACKAGE_THERM_INT_HFI_ENABLE: u32 = 33554432;
pub const THERM_INT_THRESHOLD0_ENABLE: u32 = 32768;
pub const THERM_SHIFT_THRESHOLD0: u32 = 8;
pub const THERM_MASK_THRESHOLD0: u32 = 32512;
pub const THERM_INT_THRESHOLD1_ENABLE: u32 = 8388608;
pub const THERM_SHIFT_THRESHOLD1: u32 = 16;
pub const THERM_MASK_THRESHOLD1: u32 = 8323072;
pub const THERM_STATUS_THRESHOLD0: u32 = 64;
pub const THERM_LOG_THRESHOLD0: u32 = 128;
pub const THERM_STATUS_THRESHOLD1: u32 = 256;
pub const THERM_LOG_THRESHOLD1: u32 = 512;
pub const MSR_IA32_MISC_ENABLE_FAST_STRING_BIT: u32 = 0;
pub const MSR_IA32_MISC_ENABLE_FAST_STRING: u32 = 1;
pub const MSR_IA32_MISC_ENABLE_TCC_BIT: u32 = 1;
pub const MSR_IA32_MISC_ENABLE_TCC: u32 = 2;
pub const MSR_IA32_MISC_ENABLE_EMON_BIT: u32 = 7;
pub const MSR_IA32_MISC_ENABLE_EMON: u32 = 128;
pub const MSR_IA32_MISC_ENABLE_BTS_UNAVAIL_BIT: u32 = 11;
pub const MSR_IA32_MISC_ENABLE_BTS_UNAVAIL: u32 = 2048;
pub const MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL_BIT: u32 = 12;
pub const MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL: u32 = 4096;
pub const MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP_BIT: u32 = 16;
pub const MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP: u32 = 65536;
pub const MSR_IA32_MISC_ENABLE_MWAIT_BIT: u32 = 18;
pub const MSR_IA32_MISC_ENABLE_MWAIT: u32 = 262144;
pub const MSR_IA32_MISC_ENABLE_LIMIT_CPUID_BIT: u32 = 22;
pub const MSR_IA32_MISC_ENABLE_LIMIT_CPUID: u32 = 4194304;
pub const MSR_IA32_MISC_ENABLE_XTPR_DISABLE_BIT: u32 = 23;
pub const MSR_IA32_MISC_ENABLE_XTPR_DISABLE: u32 = 8388608;
pub const MSR_IA32_MISC_ENABLE_XD_DISABLE_BIT: u32 = 34;
pub const MSR_IA32_MISC_ENABLE_XD_DISABLE: u64 = 17179869184;
pub const MSR_IA32_MISC_ENABLE_X87_COMPAT_BIT: u32 = 2;
pub const MSR_IA32_MISC_ENABLE_X87_COMPAT: u32 = 4;
pub const MSR_IA32_MISC_ENABLE_TM1_BIT: u32 = 3;
pub const MSR_IA32_MISC_ENABLE_TM1: u32 = 8;
pub const MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE_BIT: u32 = 4;
pub const MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE: u32 = 16;
pub const MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE_BIT: u32 = 6;
pub const MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE: u32 = 64;
pub const MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK_BIT: u32 = 8;
pub const MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK: u32 = 256;
pub const MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE_BIT: u32 = 9;
pub const MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE: u32 = 512;
pub const MSR_IA32_MISC_ENABLE_FERR_BIT: u32 = 10;
pub const MSR_IA32_MISC_ENABLE_FERR: u32 = 1024;
pub const MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX_BIT: u32 = 10;
pub const MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX: u32 = 1024;
pub const MSR_IA32_MISC_ENABLE_TM2_BIT: u32 = 13;
pub const MSR_IA32_MISC_ENABLE_TM2: u32 = 8192;
pub const MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE_BIT: u32 = 19;
pub const MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE: u32 = 524288;
pub const MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK_BIT: u32 = 20;
pub const MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK: u32 = 1048576;
pub const MSR_IA32_MISC_ENABLE_L1D_CONTEXT_BIT: u32 = 24;
pub const MSR_IA32_MISC_ENABLE_L1D_CONTEXT: u32 = 16777216;
pub const MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE_BIT: u32 = 37;
pub const MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE: u64 = 137438953472;
pub const MSR_IA32_MISC_ENABLE_TURBO_DISABLE_BIT: u32 = 38;
pub const MSR_IA32_MISC_ENABLE_TURBO_DISABLE: u64 = 274877906944;
pub const MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE_BIT: u32 = 39;
pub const MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE: u64 = 549755813888;
pub const MSR_MISC_FEATURES_ENABLES: u32 = 320;
pub const MSR_MISC_FEATURES_ENABLES_CPUID_FAULT_BIT: u32 = 0;
pub const MSR_MISC_FEATURES_ENABLES_RING3MWAIT_BIT: u32 = 1;
pub const MSR_IA32_TSC_DEADLINE: u32 = 1760;
pub const MSR_TSX_FORCE_ABORT: u32 = 271;
pub const MSR_TFA_RTM_FORCE_ABORT_BIT: u32 = 0;
pub const MSR_TFA_TSX_CPUID_CLEAR_BIT: u32 = 1;
pub const MSR_TFA_SDV_ENABLE_RTM_BIT: u32 = 2;
pub const MSR_IA32_MCG_EAX: u32 = 384;
pub const MSR_IA32_MCG_EBX: u32 = 385;
pub const MSR_IA32_MCG_ECX: u32 = 386;
pub const MSR_IA32_MCG_EDX: u32 = 387;
pub const MSR_IA32_MCG_ESI: u32 = 388;
pub const MSR_IA32_MCG_EDI: u32 = 389;
pub const MSR_IA32_MCG_EBP: u32 = 390;
pub const MSR_IA32_MCG_ESP: u32 = 391;
pub const MSR_IA32_MCG_EFLAGS: u32 = 392;
pub const MSR_IA32_MCG_EIP: u32 = 393;
pub const MSR_IA32_MCG_RESERVED: u32 = 394;
pub const MSR_P4_BPU_PERFCTR0: u32 = 768;
pub const MSR_P4_BPU_PERFCTR1: u32 = 769;
pub const MSR_P4_BPU_PERFCTR2: u32 = 770;
pub const MSR_P4_BPU_PERFCTR3: u32 = 771;
pub const MSR_P4_MS_PERFCTR0: u32 = 772;
pub const MSR_P4_MS_PERFCTR1: u32 = 773;
pub const MSR_P4_MS_PERFCTR2: u32 = 774;
pub const MSR_P4_MS_PERFCTR3: u32 = 775;
pub const MSR_P4_FLAME_PERFCTR0: u32 = 776;
pub const MSR_P4_FLAME_PERFCTR1: u32 = 777;
pub const MSR_P4_FLAME_PERFCTR2: u32 = 778;
pub const MSR_P4_FLAME_PERFCTR3: u32 = 779;
pub const MSR_P4_IQ_PERFCTR0: u32 = 780;
pub const MSR_P4_IQ_PERFCTR1: u32 = 781;
pub const MSR_P4_IQ_PERFCTR2: u32 = 782;
pub const MSR_P4_IQ_PERFCTR3: u32 = 783;
pub const MSR_P4_IQ_PERFCTR4: u32 = 784;
pub const MSR_P4_IQ_PERFCTR5: u32 = 785;
pub const MSR_P4_BPU_CCCR0: u32 = 864;
pub const MSR_P4_BPU_CCCR1: u32 = 865;
pub const MSR_P4_BPU_CCCR2: u32 = 866;
pub const MSR_P4_BPU_CCCR3: u32 = 867;
pub const MSR_P4_MS_CCCR0: u32 = 868;
pub const MSR_P4_MS_CCCR1: u32 = 869;
pub const MSR_P4_MS_CCCR2: u32 = 870;
pub const MSR_P4_MS_CCCR3: u32 = 871;
pub const MSR_P4_FLAME_CCCR0: u32 = 872;
pub const MSR_P4_FLAME_CCCR1: u32 = 873;
pub const MSR_P4_FLAME_CCCR2: u32 = 874;
pub const MSR_P4_FLAME_CCCR3: u32 = 875;
pub const MSR_P4_IQ_CCCR0: u32 = 876;
pub const MSR_P4_IQ_CCCR1: u32 = 877;
pub const MSR_P4_IQ_CCCR2: u32 = 878;
pub const MSR_P4_IQ_CCCR3: u32 = 879;
pub const MSR_P4_IQ_CCCR4: u32 = 880;
pub const MSR_P4_IQ_CCCR5: u32 = 881;
pub const MSR_P4_ALF_ESCR0: u32 = 970;
pub const MSR_P4_ALF_ESCR1: u32 = 971;
pub const MSR_P4_BPU_ESCR0: u32 = 946;
pub const MSR_P4_BPU_ESCR1: u32 = 947;
pub const MSR_P4_BSU_ESCR0: u32 = 928;
pub const MSR_P4_BSU_ESCR1: u32 = 929;
pub const MSR_P4_CRU_ESCR0: u32 = 952;
pub const MSR_P4_CRU_ESCR1: u32 = 953;
pub const MSR_P4_CRU_ESCR2: u32 = 972;
pub const MSR_P4_CRU_ESCR3: u32 = 973;
pub const MSR_P4_CRU_ESCR4: u32 = 992;
pub const MSR_P4_CRU_ESCR5: u32 = 993;
pub const MSR_P4_DAC_ESCR0: u32 = 936;
pub const MSR_P4_DAC_ESCR1: u32 = 937;
pub const MSR_P4_FIRM_ESCR0: u32 = 932;
pub const MSR_P4_FIRM_ESCR1: u32 = 933;
pub const MSR_P4_FLAME_ESCR0: u32 = 934;
pub const MSR_P4_FLAME_ESCR1: u32 = 935;
pub const MSR_P4_FSB_ESCR0: u32 = 930;
pub const MSR_P4_FSB_ESCR1: u32 = 931;
pub const MSR_P4_IQ_ESCR0: u32 = 954;
pub const MSR_P4_IQ_ESCR1: u32 = 955;
pub const MSR_P4_IS_ESCR0: u32 = 948;
pub const MSR_P4_IS_ESCR1: u32 = 949;
pub const MSR_P4_ITLB_ESCR0: u32 = 950;
pub const MSR_P4_ITLB_ESCR1: u32 = 951;
pub const MSR_P4_IX_ESCR0: u32 = 968;
pub const MSR_P4_IX_ESCR1: u32 = 969;
pub const MSR_P4_MOB_ESCR0: u32 = 938;
pub const MSR_P4_MOB_ESCR1: u32 = 939;
pub const MSR_P4_MS_ESCR0: u32 = 960;
pub const MSR_P4_MS_ESCR1: u32 = 961;
pub const MSR_P4_PMH_ESCR0: u32 = 940;
pub const MSR_P4_PMH_ESCR1: u32 = 941;
pub const MSR_P4_RAT_ESCR0: u32 = 956;
pub const MSR_P4_RAT_ESCR1: u32 = 957;
pub const MSR_P4_SAAT_ESCR0: u32 = 942;
pub const MSR_P4_SAAT_ESCR1: u32 = 943;
pub const MSR_P4_SSU_ESCR0: u32 = 958;
pub const MSR_P4_SSU_ESCR1: u32 = 959;
pub const MSR_P4_TBPU_ESCR0: u32 = 962;
pub const MSR_P4_TBPU_ESCR1: u32 = 963;
pub const MSR_P4_TC_ESCR0: u32 = 964;
pub const MSR_P4_TC_ESCR1: u32 = 965;
pub const MSR_P4_U2L_ESCR0: u32 = 944;
pub const MSR_P4_U2L_ESCR1: u32 = 945;
pub const MSR_P4_PEBS_MATRIX_VERT: u32 = 1010;
pub const MSR_CORE_PERF_FIXED_CTR0: u32 = 777;
pub const MSR_CORE_PERF_FIXED_CTR1: u32 = 778;
pub const MSR_CORE_PERF_FIXED_CTR2: u32 = 779;
pub const MSR_CORE_PERF_FIXED_CTR3: u32 = 780;
pub const MSR_CORE_PERF_FIXED_CTR_CTRL: u32 = 909;
pub const MSR_CORE_PERF_GLOBAL_STATUS: u32 = 910;
pub const MSR_CORE_PERF_GLOBAL_CTRL: u32 = 911;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL: u32 = 912;
pub const MSR_PERF_METRICS: u32 = 809;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_TRACE_TOPA_PMI_BIT: u32 = 55;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_TRACE_TOPA_PMI: u64 = 36028797018963968;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_OVF_BUF_BIT: u32 = 62;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_OVF_BUF: u64 = 4611686018427387904;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_COND_CHGD_BIT: u32 = 63;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_COND_CHGD: i64 = -9223372036854775808;
pub const MSR_GEODE_BUSCONT_CONF0: u32 = 6400;
pub const MSR_IA32_VMX_BASIC: u32 = 1152;
pub const MSR_IA32_VMX_PINBASED_CTLS: u32 = 1153;
pub const MSR_IA32_VMX_PROCBASED_CTLS: u32 = 1154;
pub const MSR_IA32_VMX_EXIT_CTLS: u32 = 1155;
pub const MSR_IA32_VMX_ENTRY_CTLS: u32 = 1156;
pub const MSR_IA32_VMX_MISC: u32 = 1157;
pub const MSR_IA32_VMX_CR0_FIXED0: u32 = 1158;
pub const MSR_IA32_VMX_CR0_FIXED1: u32 = 1159;
pub const MSR_IA32_VMX_CR4_FIXED0: u32 = 1160;
pub const MSR_IA32_VMX_CR4_FIXED1: u32 = 1161;
pub const MSR_IA32_VMX_VMCS_ENUM: u32 = 1162;
pub const MSR_IA32_VMX_PROCBASED_CTLS2: u32 = 1163;
pub const MSR_IA32_VMX_EPT_VPID_CAP: u32 = 1164;
pub const MSR_IA32_VMX_TRUE_PINBASED_CTLS: u32 = 1165;
pub const MSR_IA32_VMX_TRUE_PROCBASED_CTLS: u32 = 1166;
pub const MSR_IA32_VMX_TRUE_EXIT_CTLS: u32 = 1167;
pub const MSR_IA32_VMX_TRUE_ENTRY_CTLS: u32 = 1168;
pub const MSR_IA32_VMX_VMFUNC: u32 = 1169;
pub const MSR_IA32_VMX_PROCBASED_CTLS3: u32 = 1170;
pub const VMX_BASIC_VMCS_SIZE_SHIFT: u32 = 32;
pub const VMX_BASIC_TRUE_CTLS: u64 = 36028797018963968;
pub const VMX_BASIC_64: u64 = 281474976710656;
pub const VMX_BASIC_MEM_TYPE_SHIFT: u32 = 50;
pub const VMX_BASIC_MEM_TYPE_MASK: u64 = 16888498602639360;
pub const VMX_BASIC_MEM_TYPE_WB: u32 = 6;
pub const VMX_BASIC_INOUT: u64 = 18014398509481984;
pub const MSR_IA32_L3_QOS_CFG: u32 = 3201;
pub const MSR_IA32_L2_QOS_CFG: u32 = 3202;
pub const MSR_IA32_QM_EVTSEL: u32 = 3213;
pub const MSR_IA32_QM_CTR: u32 = 3214;
pub const MSR_IA32_PQR_ASSOC: u32 = 3215;
pub const MSR_IA32_L3_CBM_BASE: u32 = 3216;
pub const MSR_RMID_SNC_CONFIG: u32 = 3232;
pub const MSR_IA32_L2_CBM_BASE: u32 = 3344;
pub const MSR_IA32_MBA_THRTL_BASE: u32 = 3408;
pub const MSR_IA32_MBA_BW_BASE: u32 = 3221225984;
pub const MSR_IA32_SMBA_BW_BASE: u32 = 3221226112;
pub const MSR_IA32_EVT_CFG_BASE: u32 = 3221226496;
pub const MSR_IA32_VMX_MISC_INTEL_PT: u32 = 16384;
pub const MSR_IA32_VMX_MISC_VMWRITE_SHADOW_RO_FIELDS: u32 = 536870912;
pub const MSR_IA32_VMX_MISC_PREEMPTION_TIMER_SCALE: u32 = 31;
pub const MSR_VM_CR: u32 = 3221291284;
pub const MSR_VM_IGNNE: u32 = 3221291285;
pub const MSR_VM_HSAVE_PA: u32 = 3221291287;
pub const SVM_VM_CR_VALID_MASK: u32 = 31;
pub const SVM_VM_CR_SVM_LOCK_MASK: u32 = 8;
pub const SVM_VM_CR_SVM_DIS_MASK: u32 = 16;
pub const MSR_IA32_HW_FEEDBACK_PTR: u32 = 6096;
pub const MSR_IA32_HW_FEEDBACK_CONFIG: u32 = 6097;
pub const MSR_IA32_XAPIC_DISABLE_STATUS: u32 = 189;
pub const ORC_REG_UNDEFINED: u32 = 0;
pub const ORC_REG_PREV_SP: u32 = 1;
pub const ORC_REG_DX: u32 = 2;
pub const ORC_REG_DI: u32 = 3;
pub const ORC_REG_BP: u32 = 4;
pub const ORC_REG_SP: u32 = 5;
pub const ORC_REG_R10: u32 = 6;
pub const ORC_REG_R13: u32 = 7;
pub const ORC_REG_BP_INDIRECT: u32 = 8;
pub const ORC_REG_SP_INDIRECT: u32 = 9;
pub const ORC_REG_MAX: u32 = 15;
pub const ORC_TYPE_UNDEFINED: u32 = 0;
pub const ORC_TYPE_END_OF_STACK: u32 = 1;
pub const ORC_TYPE_CALL: u32 = 2;
pub const ORC_TYPE_REGS: u32 = 3;
pub const ORC_TYPE_REGS_PARTIAL: u32 = 4;
pub const NR_CPUS: u32 = 64;
pub const MIN_THREADS_LEFT_FOR_ROOT: u32 = 4;
pub const PIDS_PER_CPU_DEFAULT: u32 = 1024;
pub const PIDS_PER_CPU_MIN: u32 = 8;
pub const PER_CPU_SHARED_ALIGNED_SECTION: &[u8; 1] = b"\0";
pub const PER_CPU_ALIGNED_SECTION: &[u8; 1] = b"\0";
pub const PER_CPU_FIRST_SECTION: &[u8; 8] = b"..first\0";
pub const PER_CPU_BASE_SECTION: &[u8; 14] = b".data..percpu\0";
pub const RET_DEPTH_SHIFT: u32 = 5;
pub const RSB_RET_STUFF_LOOPS: u32 = 16;
pub const RET_DEPTH_INIT: i64 = -9223372036854775808;
pub const RET_DEPTH_INIT_FROM_CALL: i64 = -288230376151711744;
pub const RET_DEPTH_CREDIT: i32 = -1;
pub const KVM_STEAL_TIME_preempted: u32 = 16;
pub const pt_regs_bx: u32 = 40;
pub const pt_regs_cx: u32 = 88;
pub const pt_regs_dx: u32 = 96;
pub const pt_regs_sp: u32 = 152;
pub const pt_regs_bp: u32 = 32;
pub const pt_regs_si: u32 = 104;
pub const pt_regs_di: u32 = 112;
pub const pt_regs_r8: u32 = 72;
pub const pt_regs_r9: u32 = 64;
pub const pt_regs_r10: u32 = 56;
pub const pt_regs_r11: u32 = 48;
pub const pt_regs_r12: u32 = 24;
pub const pt_regs_r13: u32 = 16;
pub const pt_regs_r14: u32 = 8;
pub const pt_regs_r15: u32 = 0;
pub const pt_regs_flags: u32 = 144;
pub const saved_context_cr0: u32 = 200;
pub const saved_context_cr2: u32 = 208;
pub const saved_context_cr3: u32 = 216;
pub const saved_context_cr4: u32 = 224;
pub const saved_context_gdt_desc: u32 = 266;
pub const FIXED_stack_canary: u32 = 40;
pub const TASK_threadsp: u32 = 2904;
pub const TASK_stack_canary: u32 = 1360;
pub const pbe_address: u32 = 0;
pub const pbe_orig_address: u32 = 8;
pub const pbe_next: u32 = 16;
pub const IA32_SIGCONTEXT_ax: u32 = 44;
pub const IA32_SIGCONTEXT_bx: u32 = 32;
pub const IA32_SIGCONTEXT_cx: u32 = 40;
pub const IA32_SIGCONTEXT_dx: u32 = 36;
pub const IA32_SIGCONTEXT_si: u32 = 20;
pub const IA32_SIGCONTEXT_di: u32 = 16;
pub const IA32_SIGCONTEXT_bp: u32 = 24;
pub const IA32_SIGCONTEXT_sp: u32 = 28;
pub const IA32_SIGCONTEXT_ip: u32 = 56;
pub const IA32_RT_SIGFRAME_sigcontext: u32 = 164;
pub const TDX_MODULE_rcx: u32 = 0;
pub const TDX_MODULE_rdx: u32 = 8;
pub const TDX_MODULE_r8: u32 = 16;
pub const TDX_MODULE_r9: u32 = 24;
pub const TDX_MODULE_r10: u32 = 32;
pub const TDX_MODULE_r11: u32 = 40;
pub const TDX_MODULE_r12: u32 = 48;
pub const TDX_MODULE_r13: u32 = 56;
pub const TDX_MODULE_r14: u32 = 64;
pub const TDX_MODULE_r15: u32 = 72;
pub const TDX_MODULE_rbx: u32 = 80;
pub const TDX_MODULE_rdi: u32 = 88;
pub const TDX_MODULE_rsi: u32 = 96;
pub const BP_scratch: u32 = 484;
pub const BP_secure_boot: u32 = 492;
pub const BP_loadflags: u32 = 529;
pub const BP_hardware_subarch: u32 = 572;
pub const BP_version: u32 = 518;
pub const BP_kernel_alignment: u32 = 560;
pub const BP_init_size: u32 = 608;
pub const BP_pref_address: u32 = 600;
pub const PTREGS_SIZE: u32 = 168;
pub const TLB_STATE_user_pcid_flush_mask: u32 = 22;
pub const CPU_ENTRY_AREA_entry_stack: u32 = 4096;
pub const SIZEOF_entry_stack: u32 = 4096;
pub const MASK_entry_stack: i32 = -4096;
pub const TSS_sp0: u32 = 4;
pub const TSS_sp1: u32 = 12;
pub const TSS_sp2: u32 = 20;
pub const X86_top_of_stack: u32 = 24;
pub const X86_current_task: u32 = 0;
pub const X86_call_depth: u32 = 16;
pub const RETPOLINE_THUNK_SIZE: u32 = 32;
pub const RSB_CLEAR_LOOPS: u32 = 32;
pub const ANNOTATE_RETPOLINE_SAFE: &[u8; 70] =
    b"999:\n\t.pushsection .discard.retpoline_safe\n\t.long 999b\n\t.popsection\n\t\0";
pub const _Q_LOCKED_OFFSET: u32 = 0;
pub const _Q_LOCKED_BITS: u32 = 8;
pub const _Q_PENDING_OFFSET: u32 = 8;
pub const _Q_PENDING_BITS: u32 = 8;
pub const _Q_TAIL_IDX_OFFSET: u32 = 16;
pub const _Q_TAIL_IDX_BITS: u32 = 2;
pub const _Q_TAIL_CPU_OFFSET: u32 = 18;
pub const _Q_TAIL_CPU_BITS: u32 = 14;
pub const _Q_TAIL_OFFSET: u32 = 16;
pub const _Q_LOCKED_VAL: u32 = 1;
pub const _Q_PENDING_VAL: u32 = 256;
pub const PARAVIRT_CALL : & [u8 ; 94] = b"999:\n\t.pushsection .discard.retpoline_safe\n\t.long 999b\n\t.popsection\n\tcall *%[paravirt_opptr];\0" ;
pub const LDT_ENTRIES: u32 = 8192;
pub const LDT_ENTRY_SIZE: u32 = 8;
pub const MODIFY_LDT_CONTENTS_DATA: u32 = 0;
pub const MODIFY_LDT_CONTENTS_STACK: u32 = 1;
pub const MODIFY_LDT_CONTENTS_CODE: u32 = 2;
pub const NR_REG_ARGUMENTS: u32 = 6;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const X86_FXSR_MAGIC: u32 = 0;
pub const __HAVE_ARCH_GATE_AREA: u32 = 1;
pub const MXCSR_DEFAULT: u32 = 8064;
pub const NVMXINTS: u32 = 5;
pub const VMX_FEATURE_INTR_EXITING: u32 = 0;
pub const VMX_FEATURE_NMI_EXITING: u32 = 3;
pub const VMX_FEATURE_VIRTUAL_NMIS: u32 = 5;
pub const VMX_FEATURE_PREEMPTION_TIMER: u32 = 6;
pub const VMX_FEATURE_POSTED_INTR: u32 = 7;
pub const VMX_FEATURE_INVVPID: u32 = 16;
pub const VMX_FEATURE_EPT_EXECUTE_ONLY: u32 = 17;
pub const VMX_FEATURE_EPT_AD: u32 = 18;
pub const VMX_FEATURE_EPT_1GB: u32 = 19;
pub const VMX_FEATURE_EPT_5LEVEL: u32 = 20;
pub const VMX_FEATURE_FLEXPRIORITY: u32 = 24;
pub const VMX_FEATURE_APICV: u32 = 25;
pub const VMX_FEATURE_EPTP_SWITCHING: u32 = 28;
pub const VMX_FEATURE_INTR_WINDOW_EXITING: u32 = 34;
pub const VMX_FEATURE_USE_TSC_OFFSETTING: u32 = 35;
pub const VMX_FEATURE_HLT_EXITING: u32 = 39;
pub const VMX_FEATURE_INVLPG_EXITING: u32 = 41;
pub const VMX_FEATURE_MWAIT_EXITING: u32 = 42;
pub const VMX_FEATURE_RDPMC_EXITING: u32 = 43;
pub const VMX_FEATURE_RDTSC_EXITING: u32 = 44;
pub const VMX_FEATURE_CR3_LOAD_EXITING: u32 = 47;
pub const VMX_FEATURE_CR3_STORE_EXITING: u32 = 48;
pub const VMX_FEATURE_TERTIARY_CONTROLS: u32 = 49;
pub const VMX_FEATURE_CR8_LOAD_EXITING: u32 = 51;
pub const VMX_FEATURE_CR8_STORE_EXITING: u32 = 52;
pub const VMX_FEATURE_VIRTUAL_TPR: u32 = 53;
pub const VMX_FEATURE_NMI_WINDOW_EXITING: u32 = 54;
pub const VMX_FEATURE_MOV_DR_EXITING: u32 = 55;
pub const VMX_FEATURE_UNCOND_IO_EXITING: u32 = 56;
pub const VMX_FEATURE_USE_IO_BITMAPS: u32 = 57;
pub const VMX_FEATURE_MONITOR_TRAP_FLAG: u32 = 59;
pub const VMX_FEATURE_USE_MSR_BITMAPS: u32 = 60;
pub const VMX_FEATURE_MONITOR_EXITING: u32 = 61;
pub const VMX_FEATURE_PAUSE_EXITING: u32 = 62;
pub const VMX_FEATURE_SEC_CONTROLS: u32 = 63;
pub const VMX_FEATURE_VIRT_APIC_ACCESSES: u32 = 64;
pub const VMX_FEATURE_EPT: u32 = 65;
pub const VMX_FEATURE_DESC_EXITING: u32 = 66;
pub const VMX_FEATURE_RDTSCP: u32 = 67;
pub const VMX_FEATURE_VIRTUAL_X2APIC: u32 = 68;
pub const VMX_FEATURE_VPID: u32 = 69;
pub const VMX_FEATURE_WBINVD_EXITING: u32 = 70;
pub const VMX_FEATURE_UNRESTRICTED_GUEST: u32 = 71;
pub const VMX_FEATURE_APIC_REGISTER_VIRT: u32 = 72;
pub const VMX_FEATURE_VIRT_INTR_DELIVERY: u32 = 73;
pub const VMX_FEATURE_PAUSE_LOOP_EXITING: u32 = 74;
pub const VMX_FEATURE_RDRAND_EXITING: u32 = 75;
pub const VMX_FEATURE_INVPCID: u32 = 76;
pub const VMX_FEATURE_VMFUNC: u32 = 77;
pub const VMX_FEATURE_SHADOW_VMCS: u32 = 78;
pub const VMX_FEATURE_ENCLS_EXITING: u32 = 79;
pub const VMX_FEATURE_RDSEED_EXITING: u32 = 80;
pub const VMX_FEATURE_PAGE_MOD_LOGGING: u32 = 81;
pub const VMX_FEATURE_EPT_VIOLATION_VE: u32 = 82;
pub const VMX_FEATURE_PT_CONCEAL_VMX: u32 = 83;
pub const VMX_FEATURE_XSAVES: u32 = 84;
pub const VMX_FEATURE_MODE_BASED_EPT_EXEC: u32 = 86;
pub const VMX_FEATURE_PT_USE_GPA: u32 = 88;
pub const VMX_FEATURE_TSC_SCALING: u32 = 89;
pub const VMX_FEATURE_USR_WAIT_PAUSE: u32 = 90;
pub const VMX_FEATURE_ENCLV_EXITING: u32 = 92;
pub const VMX_FEATURE_BUS_LOCK_DETECTION: u32 = 94;
pub const VMX_FEATURE_NOTIFY_VM_EXITING: u32 = 95;
pub const VMX_FEATURE_IPI_VIRT: u32 = 100;
pub const NET_IP_ALIGN: u32 = 0;
pub const HBP_NUM: u32 = 4;
pub const ARCH_MIN_MMSTRUCT_ALIGN: u32 = 0;
pub const X86_VENDOR_INTEL: u32 = 0;
pub const X86_VENDOR_CYRIX: u32 = 1;
pub const X86_VENDOR_AMD: u32 = 2;
pub const X86_VENDOR_UMC: u32 = 3;
pub const X86_VENDOR_CENTAUR: u32 = 5;
pub const X86_VENDOR_TRANSMETA: u32 = 7;
pub const X86_VENDOR_NSC: u32 = 8;
pub const X86_VENDOR_HYGON: u32 = 9;
pub const X86_VENDOR_ZHAOXIN: u32 = 10;
pub const X86_VENDOR_VORTEX: u32 = 11;
pub const X86_VENDOR_NUM: u32 = 12;
pub const X86_VENDOR_UNKNOWN: u32 = 255;
pub const IO_BITMAP_BITS: u32 = 65536;
pub const IO_BITMAP_BYTES: u32 = 8192;
pub const HAVE_ARCH_PICK_MMAP_LAYOUT: u32 = 1;
pub const BASE_PREFETCH: &[u8; 14] = b"prefetcht0 %1\0";
pub const xen_set_default_idle: u32 = 0;
pub const X86_CAP_FMT_NUM: &[u8; 6] = b"%d:%d\0";
pub const X86_CAP_FMT: &[u8; 3] = b"%s\0";
pub const MAX_CPU_FEATURES: u32 = 704;
pub const CPU_FEATURE_TYPEFMT: &[u8; 26] = b"x86,ven%04Xfam%04Xmod%04X\0";
pub const PANIC_CPU_INVALID: i32 = -1;
pub const TAINT_PROPRIETARY_MODULE: u32 = 0;
pub const TAINT_FORCED_MODULE: u32 = 1;
pub const TAINT_CPU_OUT_OF_SPEC: u32 = 2;
pub const TAINT_FORCED_RMMOD: u32 = 3;
pub const TAINT_MACHINE_CHECK: u32 = 4;
pub const TAINT_BAD_PAGE: u32 = 5;
pub const TAINT_USER: u32 = 6;
pub const TAINT_DIE: u32 = 7;
pub const TAINT_OVERRIDDEN_ACPI_TABLE: u32 = 8;
pub const TAINT_WARN: u32 = 9;
pub const TAINT_CRAP: u32 = 10;
pub const TAINT_FIRMWARE_WORKAROUND: u32 = 11;
pub const TAINT_OOT_MODULE: u32 = 12;
pub const TAINT_UNSIGNED_MODULE: u32 = 13;
pub const TAINT_SOFTLOCKUP: u32 = 14;
pub const TAINT_LIVEPATCH: u32 = 15;
pub const TAINT_AUX: u32 = 16;
pub const TAINT_RANDSTRUCT: u32 = 17;
pub const TAINT_TEST: u32 = 18;
pub const TAINT_FLAGS_COUNT: u32 = 19;
pub const TAINT_FLAGS_MAX: u32 = 524287;
pub const KERN_SOH: &[u8; 2] = b"\x01\0";
pub const KERN_SOH_ASCII: u8 = 1u8;
pub const KERN_EMERG: &[u8; 3] = b"\x010\0";
pub const KERN_ALERT: &[u8; 3] = b"\x011\0";
pub const KERN_CRIT: &[u8; 3] = b"\x012\0";
pub const KERN_ERR: &[u8; 3] = b"\x013\0";
pub const KERN_WARNING: &[u8; 3] = b"\x014\0";
pub const KERN_NOTICE: &[u8; 3] = b"\x015\0";
pub const KERN_INFO: &[u8; 3] = b"\x016\0";
pub const KERN_DEBUG: &[u8; 3] = b"\x017\0";
pub const KERN_DEFAULT: &[u8; 1] = b"\0";
pub const KERN_CONT: &[u8; 3] = b"\x01c\0";
pub const LOGLEVEL_SCHED: i32 = -2;
pub const LOGLEVEL_DEFAULT: i32 = -1;
pub const LOGLEVEL_EMERG: u32 = 0;
pub const LOGLEVEL_ALERT: u32 = 1;
pub const LOGLEVEL_CRIT: u32 = 2;
pub const LOGLEVEL_ERR: u32 = 3;
pub const LOGLEVEL_WARNING: u32 = 4;
pub const LOGLEVEL_NOTICE: u32 = 5;
pub const LOGLEVEL_INFO: u32 = 6;
pub const LOGLEVEL_DEBUG: u32 = 7;
pub const MAX_LOCKDEP_SUBCLASSES: u32 = 8;
pub const SPINLOCK_MAGIC: u32 = 3735899821;
pub const DEFAULT_RATELIMIT_INTERVAL: u32 = 5000;
pub const DEFAULT_RATELIMIT_BURST: u32 = 10;
pub const PRINTK_MAX_SINGLE_HEADER_LEN: u32 = 2;
pub const MESSAGE_LOGLEVEL_DEFAULT: u32 = 4;
pub const CONSOLE_LOGLEVEL_SILENT: u32 = 0;
pub const CONSOLE_LOGLEVEL_MIN: u32 = 1;
pub const CONSOLE_LOGLEVEL_DEBUG: u32 = 10;
pub const CONSOLE_LOGLEVEL_MOTORMOUTH: u32 = 15;
pub const CONSOLE_LOGLEVEL_DEFAULT: u32 = 7;
pub const CONSOLE_LOGLEVEL_QUIET: u32 = 4;
pub const DEVKMSG_STR_MAX_SIZE: u32 = 10;
pub const FW_BUG: &[u8; 17] = b"[Firmware Bug]: \0";
pub const FW_WARN: &[u8; 18] = b"[Firmware Warn]: \0";
pub const FW_INFO: &[u8; 18] = b"[Firmware Info]: \0";
pub const HW_ERR: &[u8; 19] = b"[Hardware Error]: \0";
pub const DEPRECATED: &[u8; 15] = b"[Deprecated]: \0";
pub const STATIC_CALL_SITE_TAIL: u32 = 1;
pub const STATIC_CALL_SITE_INIT: u32 = 2;
pub const STATIC_CALL_SITE_FLAGS: u32 = 3;
pub const STACK_MAGIC: u32 = 3735928559;
pub const READ: u32 = 0;
pub const WRITE: u32 = 1;
pub const __X86_CASE_B: u32 = 1;
pub const __X86_CASE_W: u32 = 2;
pub const __X86_CASE_L: u32 = 4;
pub const __X86_CASE_Q: u32 = 8;
pub const ASM_UD2: &[u8; 17] = b".byte 0x0f, 0x0b\0";
pub const INSN_UD2: u32 = 2831;
pub const LEN_UD2: u32 = 2;
pub const CUT_HERE: &[u8; 38] = b"------------[ cut here ]------------\n\0";
pub const BUGFLAG_WARNING: u32 = 1;
pub const BUGFLAG_ONCE: u32 = 2;
pub const BUGFLAG_DONE: u32 = 4;
pub const BUGFLAG_NO_CUT_HERE: u32 = 8;
pub const ___GFP_SKIP_ZERO: u32 = 0;
pub const ___GFP_SKIP_KASAN: u32 = 0;
pub const ___GFP_NOLOCKDEP: u32 = 0;
pub const ___GFP_NO_OBJ_EXT: u32 = 0;
pub const NODES_SHIFT: u32 = 6;
pub const MAX_NUMNODES: u32 = 64;
pub const NUMA_NO_NODE: i32 = -1;
pub const NUMA_NO_MEMBLK: i32 = -1;
pub const PREEMPT_BITS: u32 = 8;
pub const SOFTIRQ_BITS: u32 = 8;
pub const HARDIRQ_BITS: u32 = 4;
pub const NMI_BITS: u32 = 4;
pub const PREEMPT_SHIFT: u32 = 0;
pub const SOFTIRQ_SHIFT: u32 = 8;
pub const HARDIRQ_SHIFT: u32 = 16;
pub const NMI_SHIFT: u32 = 20;
pub const PREEMPT_OFFSET: u32 = 1;
pub const SOFTIRQ_OFFSET: u32 = 256;
pub const HARDIRQ_OFFSET: u32 = 65536;
pub const NMI_OFFSET: u32 = 1048576;
pub const SOFTIRQ_DISABLE_OFFSET: u32 = 512;
pub const INIT_PREEMPT_COUNT: u32 = 1;
pub const PREEMPT_NEED_RESCHED: u32 = 2147483648;
pub const PREEMPT_ENABLED: u32 = 2147483648;
pub const PREEMPT_DISABLE_OFFSET: u32 = 1;
pub const PREEMPT_LOCK_OFFSET: u32 = 1;
pub const SOFTIRQ_LOCK_OFFSET: u32 = 513;
pub const PAGE_POISON: u32 = 170;
pub const SLUB_RED_INACTIVE: u32 = 187;
pub const SLUB_RED_ACTIVE: u32 = 204;
pub const POISON_INUSE: u32 = 90;
pub const POISON_FREE: u32 = 107;
pub const POISON_END: u32 = 165;
pub const POISON_FREE_INITMEM: u32 = 204;
pub const JBD_POISON_FREE: u32 = 91;
pub const JBD2_POISON_FREE: u32 = 92;
pub const POOL_POISON_FREED: u32 = 167;
pub const POOL_POISON_ALLOCATED: u32 = 169;
pub const ATM_POISON_FREE: u32 = 18;
pub const ATM_POISON: u32 = 3735928559;
pub const MUTEX_DEBUG_INIT: u32 = 17;
pub const MUTEX_DEBUG_FREE: u32 = 34;
pub const KEY_DESTROY: u32 = 189;
pub const TOP_OF_KERNEL_STACK_PADDING: u32 = 0;
pub const TIF_NOTIFY_RESUME: u32 = 1;
pub const TIF_SIGPENDING: u32 = 2;
pub const TIF_NEED_RESCHED: u32 = 3;
pub const TIF_SINGLESTEP: u32 = 4;
pub const TIF_SSBD: u32 = 5;
pub const TIF_SPEC_IB: u32 = 9;
pub const TIF_SPEC_L1D_FLUSH: u32 = 10;
pub const TIF_USER_RETURN_NOTIFY: u32 = 11;
pub const TIF_UPROBE: u32 = 12;
pub const TIF_PATCH_PENDING: u32 = 13;
pub const TIF_NEED_FPU_LOAD: u32 = 14;
pub const TIF_NOCPUID: u32 = 15;
pub const TIF_NOTSC: u32 = 16;
pub const TIF_NOTIFY_SIGNAL: u32 = 17;
pub const TIF_MEMDIE: u32 = 20;
pub const TIF_POLLING_NRFLAG: u32 = 21;
pub const TIF_IO_BITMAP: u32 = 22;
pub const TIF_SPEC_FORCE_UPDATE: u32 = 23;
pub const TIF_FORCED_TF: u32 = 24;
pub const TIF_BLOCKSTEP: u32 = 25;
pub const TIF_LAZY_MMU_UPDATES: u32 = 27;
pub const TIF_ADDR32: u32 = 29;
pub const _TIF_NOTIFY_RESUME: u32 = 2;
pub const _TIF_SIGPENDING: u32 = 4;
pub const _TIF_NEED_RESCHED: u32 = 8;
pub const _TIF_SINGLESTEP: u32 = 16;
pub const _TIF_SSBD: u32 = 32;
pub const _TIF_SPEC_IB: u32 = 512;
pub const _TIF_SPEC_L1D_FLUSH: u32 = 1024;
pub const _TIF_USER_RETURN_NOTIFY: u32 = 2048;
pub const _TIF_UPROBE: u32 = 4096;
pub const _TIF_PATCH_PENDING: u32 = 8192;
pub const _TIF_NEED_FPU_LOAD: u32 = 16384;
pub const _TIF_NOCPUID: u32 = 32768;
pub const _TIF_NOTSC: u32 = 65536;
pub const _TIF_NOTIFY_SIGNAL: u32 = 131072;
pub const _TIF_POLLING_NRFLAG: u32 = 2097152;
pub const _TIF_IO_BITMAP: u32 = 4194304;
pub const _TIF_SPEC_FORCE_UPDATE: u32 = 8388608;
pub const _TIF_FORCED_TF: u32 = 16777216;
pub const _TIF_BLOCKSTEP: u32 = 33554432;
pub const _TIF_LAZY_MMU_UPDATES: u32 = 134217728;
pub const _TIF_ADDR32: u32 = 536870912;
pub const _TIF_WORK_CTXSW_BASE: u32 = 42041376;
pub const _TIF_WORK_CTXSW: u32 = 42041888;
pub const _TIF_WORK_CTXSW_PREV: u32 = 46238240;
pub const _TIF_WORK_CTXSW_NEXT: u32 = 42041888;
pub const TS_COMPAT: u32 = 2;
pub const TS_I386_REGS_POKED: u32 = 4;
pub const STARTUP_READ_APICID: u32 = 2147483648;
pub const STARTUP_PARALLEL_MASK: u32 = 4278190080;
pub const LINUX_MM_DEBUG_H: u32 = 1;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PIDFD: u32 = 4096;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const CLONE_CLEAR_SIGHAND: u64 = 4294967296;
pub const CLONE_INTO_CGROUP: u64 = 8589934592;
pub const CLONE_NEWTIME: u32 = 128;
pub const CLONE_ARGS_SIZE_VER0: u32 = 64;
pub const CLONE_ARGS_SIZE_VER1: u32 = 80;
pub const CLONE_ARGS_SIZE_VER2: u32 = 88;
pub const SCHED_NORMAL: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const SCHED_FLAG_RESET_ON_FORK: u32 = 1;
pub const SCHED_FLAG_RECLAIM: u32 = 2;
pub const SCHED_FLAG_DL_OVERRUN: u32 = 4;
pub const SCHED_FLAG_KEEP_POLICY: u32 = 8;
pub const SCHED_FLAG_KEEP_PARAMS: u32 = 16;
pub const SCHED_FLAG_UTIL_CLAMP_MIN: u32 = 32;
pub const SCHED_FLAG_UTIL_CLAMP_MAX: u32 = 64;
pub const SCHED_FLAG_KEEP_ALL: u32 = 24;
pub const SCHED_FLAG_UTIL_CLAMP: u32 = 96;
pub const SCHED_FLAG_ALL: u32 = 127;
pub const KMSAN_RETVAL_SIZE: u32 = 800;
pub const KMSAN_PARAM_SIZE: u32 = 800;
pub const OSQ_UNLOCKED_VAL: u32 = 0;
pub const RWLOCK_MAGIC: u32 = 3736018669;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_BOTH: i32 = -2;
pub const RUSAGE_THREAD: u32 = 1;
pub const RLIM64_INFINITY: i32 = -1;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const _STK_LIM: u32 = 8388608;
pub const MLOCK_LIMIT: u32 = 8388608;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_NPROC: u32 = 6;
pub const RLIMIT_NOFILE: u32 = 7;
pub const RLIMIT_MEMLOCK: u32 = 8;
pub const RLIMIT_AS: u32 = 9;
pub const RLIMIT_LOCKS: u32 = 10;
pub const RLIMIT_SIGPENDING: u32 = 11;
pub const RLIMIT_MSGQUEUE: u32 = 12;
pub const RLIMIT_NICE: u32 = 13;
pub const RLIMIT_RTPRIO: u32 = 14;
pub const RLIMIT_RTTIME: u32 = 15;
pub const RLIM_NLIMITS: u32 = 16;
pub const RLIM_INFINITY: i32 = -1;
pub const MAX_NICE: u32 = 19;
pub const MIN_NICE: i32 = -20;
pub const NICE_WIDTH: u32 = 40;
pub const MAX_RT_PRIO: u32 = 100;
pub const MAX_PRIO: u32 = 140;
pub const DEFAULT_PRIO: u32 = 120;
pub const _NSIG: u32 = 64;
pub const _NSIG_BPW: u32 = 64;
pub const _NSIG_WORDS: u32 = 1;
pub const SA_IA32_ABI: u32 = 33554432;
pub const SA_X32_ABI: u32 = 16777216;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGBUS: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGUSR1: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGUSR2: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGSTKFLT: u32 = 16;
pub const SIGCHLD: u32 = 17;
pub const SIGCONT: u32 = 18;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGURG: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGPOLL: u32 = 29;
pub const SIGPWR: u32 = 30;
pub const SIGSYS: u32 = 31;
pub const SIGUNUSED: u32 = 31;
pub const SIGRTMIN: u32 = 32;
pub const SIGRTMAX: u32 = 64;
pub const SA_RESTORER: u32 = 67108864;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_UNSUPPORTED: u32 = 1024;
pub const SA_EXPOSE_TAGBITS: u32 = 2048;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const SI_MAX_SIZE: u32 = 128;
pub const SI_USER: u32 = 0;
pub const SI_KERNEL: u32 = 128;
pub const SI_QUEUE: i32 = -1;
pub const SI_TIMER: i32 = -2;
pub const SI_MESGQ: i32 = -3;
pub const SI_ASYNCIO: i32 = -4;
pub const SI_SIGIO: i32 = -5;
pub const SI_TKILL: i32 = -6;
pub const SI_DETHREAD: i32 = -7;
pub const SI_ASYNCNL: i32 = -60;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLOPN: u32 = 2;
pub const ILL_ILLADR: u32 = 3;
pub const ILL_ILLTRP: u32 = 4;
pub const ILL_PRVOPC: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const ILL_BADIADDR: u32 = 9;
pub const __ILL_BREAK: u32 = 10;
pub const __ILL_BNDMOD: u32 = 11;
pub const NSIGILL: u32 = 11;
pub const FPE_INTDIV: u32 = 1;
pub const FPE_INTOVF: u32 = 2;
pub const FPE_FLTDIV: u32 = 3;
pub const FPE_FLTOVF: u32 = 4;
pub const FPE_FLTUND: u32 = 5;
pub const FPE_FLTRES: u32 = 6;
pub const FPE_FLTINV: u32 = 7;
pub const FPE_FLTSUB: u32 = 8;
pub const __FPE_DECOVF: u32 = 9;
pub const __FPE_DECDIV: u32 = 10;
pub const __FPE_DECERR: u32 = 11;
pub const __FPE_INVASC: u32 = 12;
pub const __FPE_INVDEC: u32 = 13;
pub const FPE_FLTUNK: u32 = 14;
pub const FPE_CONDTRAP: u32 = 15;
pub const NSIGFPE: u32 = 15;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const SEGV_BNDERR: u32 = 3;
pub const SEGV_PKUERR: u32 = 4;
pub const SEGV_ACCADI: u32 = 5;
pub const SEGV_ADIDERR: u32 = 6;
pub const SEGV_ADIPERR: u32 = 7;
pub const SEGV_MTEAERR: u32 = 8;
pub const SEGV_MTESERR: u32 = 9;
pub const SEGV_CPERR: u32 = 10;
pub const NSIGSEGV: u32 = 10;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const BUS_MCEERR_AR: u32 = 4;
pub const BUS_MCEERR_AO: u32 = 5;
pub const NSIGBUS: u32 = 5;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const TRAP_BRANCH: u32 = 3;
pub const TRAP_HWBKPT: u32 = 4;
pub const TRAP_UNK: u32 = 5;
pub const TRAP_PERF: u32 = 6;
pub const NSIGTRAP: u32 = 6;
pub const TRAP_PERF_FLAG_ASYNC: u32 = 1;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const NSIGCHLD: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const NSIGPOLL: u32 = 6;
pub const SYS_SECCOMP: u32 = 1;
pub const SYS_USER_DISPATCH: u32 = 2;
pub const NSIGSYS: u32 = 2;
pub const EMT_TAGOVF: u32 = 1;
pub const NSIGEMT: u32 = 1;
pub const SIGEV_SIGNAL: u32 = 0;
pub const SIGEV_NONE: u32 = 1;
pub const SIGEV_THREAD: u32 = 2;
pub const SIGEV_THREAD_ID: u32 = 4;
pub const SIGEV_MAX_SIZE: u32 = 64;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 2;
pub const SS_AUTODISARM: u32 = 2147483648;
pub const SS_FLAG_BITS: u32 = 2147483648;
pub const SIGQUEUE_PREALLOC: u32 = 1;
pub const SA_IMMUTABLE: u32 = 8388608;
pub const __ARCH_UAPI_SA_FLAGS: u32 = 67108864;
pub const UAPI_SA_FLAGS: u32 = 3690989575;
pub const CPUCLOCK_PERTHREAD_MASK: u32 = 4;
pub const CPUCLOCK_CLOCK_MASK: u32 = 3;
pub const CPUCLOCK_PROF: u32 = 0;
pub const CPUCLOCK_VIRT: u32 = 1;
pub const CPUCLOCK_SCHED: u32 = 2;
pub const CPUCLOCK_MAX: u32 = 3;
pub const CLOCKFD: u32 = 3;
pub const CLOCKFD_MASK: u32 = 7;
pub const MAX_DA_NAME_LEN: u32 = 24;
pub const KM_MAX_IDX: u32 = 16;
pub const TASK_RUNNING: u32 = 0;
pub const TASK_INTERRUPTIBLE: u32 = 1;
pub const TASK_UNINTERRUPTIBLE: u32 = 2;
pub const __TASK_STOPPED: u32 = 4;
pub const __TASK_TRACED: u32 = 8;
pub const EXIT_DEAD: u32 = 16;
pub const EXIT_ZOMBIE: u32 = 32;
pub const EXIT_TRACE: u32 = 48;
pub const TASK_PARKED: u32 = 64;
pub const TASK_DEAD: u32 = 128;
pub const TASK_WAKEKILL: u32 = 256;
pub const TASK_WAKING: u32 = 512;
pub const TASK_NOLOAD: u32 = 1024;
pub const TASK_NEW: u32 = 2048;
pub const TASK_RTLOCK_WAIT: u32 = 4096;
pub const TASK_FREEZABLE: u32 = 8192;
pub const TASK_FROZEN: u32 = 32768;
pub const TASK_STATE_MAX: u32 = 65536;
pub const TASK_ANY: u32 = 65535;
pub const TASK_KILLABLE: u32 = 258;
pub const TASK_STOPPED: u32 = 260;
pub const TASK_TRACED: u32 = 8;
pub const TASK_IDLE: u32 = 1026;
pub const TASK_NORMAL: u32 = 3;
pub const TASK_REPORT: u32 = 127;
pub const SCHED_FIXEDPOINT_SHIFT: u32 = 10;
pub const SCHED_FIXEDPOINT_SCALE: u32 = 1024;
pub const SCHED_CAPACITY_SHIFT: u32 = 10;
pub const SCHED_CAPACITY_SCALE: u32 = 1024;
pub const UTIL_EST_WEIGHT_SHIFT: u32 = 2;
pub const UTIL_AVG_UNCHANGED: u32 = 2147483648;
pub const PERF_NR_CONTEXTS: u32 = 4;
pub const TASK_REPORT_IDLE: u32 = 128;
pub const TASK_REPORT_MAX: u32 = 256;
pub const PF_VCPU: u32 = 1;
pub const PF_IDLE: u32 = 2;
pub const PF_EXITING: u32 = 4;
pub const PF_POSTCOREDUMP: u32 = 8;
pub const PF_IO_WORKER: u32 = 16;
pub const PF_WQ_WORKER: u32 = 32;
pub const PF_FORKNOEXEC: u32 = 64;
pub const PF_MCE_PROCESS: u32 = 128;
pub const PF_SUPERPRIV: u32 = 256;
pub const PF_DUMPCORE: u32 = 512;
pub const PF_SIGNALED: u32 = 1024;
pub const PF_MEMALLOC: u32 = 2048;
pub const PF_NPROC_EXCEEDED: u32 = 4096;
pub const PF_USED_MATH: u32 = 8192;
pub const PF_USER_WORKER: u32 = 16384;
pub const PF_NOFREEZE: u32 = 32768;
pub const PF__HOLE__00010000: u32 = 65536;
pub const PF_KSWAPD: u32 = 131072;
pub const PF_MEMALLOC_NOFS: u32 = 262144;
pub const PF_MEMALLOC_NOIO: u32 = 524288;
pub const PF_LOCAL_THROTTLE: u32 = 1048576;
pub const PF_KTHREAD: u32 = 2097152;
pub const PF_RANDOMIZE: u32 = 4194304;
pub const PF_MEMALLOC_NORECLAIM: u32 = 8388608;
pub const PF_MEMALLOC_NOWARN: u32 = 16777216;
pub const PF__HOLE__02000000: u32 = 33554432;
pub const PF_NO_SETAFFINITY: u32 = 67108864;
pub const PF_MCE_EARLY: u32 = 134217728;
pub const PF_MEMALLOC_PIN: u32 = 268435456;
pub const PF_BLOCK_TS: u32 = 536870912;
pub const PF__HOLE__40000000: u32 = 1073741824;
pub const PF_SUSPEND_TASK: u32 = 2147483648;
pub const PFA_NO_NEW_PRIVS: u32 = 0;
pub const PFA_SPREAD_PAGE: u32 = 1;
pub const PFA_SPREAD_SLAB: u32 = 2;
pub const PFA_SPEC_SSB_DISABLE: u32 = 3;
pub const PFA_SPEC_SSB_FORCE_DISABLE: u32 = 4;
pub const PFA_SPEC_IB_DISABLE: u32 = 5;
pub const PFA_SPEC_IB_FORCE_DISABLE: u32 = 6;
pub const PFA_SPEC_SSB_NOEXEC: u32 = 7;
pub const MIGHT_RESCHED_RCU_SHIFT: u32 = 8;
pub const MIGHT_RESCHED_PREEMPT_MASK: u32 = 255;
pub const PREEMPT_LOCK_RESCHED_OFFSETS: u32 = 1;
pub const force_read_lock_recursive: u32 = 0;
pub const SINGLE_DEPTH_NESTING: u32 = 1;
pub const LOCK_SECTION_END: &[u8; 12] = b".previous\n\t\0";
pub const FRAME_OFFSET: u32 = 0;
pub const PV_SAVE_ALL_CALLER_REGS: &[u8; 79] =
    b"push %rcx;push %rdx;push %rsi;push %rdi;push %r8;push %r9;push %r10;push %r11;\0";
pub const PV_RESTORE_ALL_CALLER_REGS: &[u8; 71] =
    b"pop %r11;pop %r10;pop %r9;pop %r8;pop %rdi;pop %rsi;pop %rdx;pop %rcx;\0";
pub const SPIN_THRESHOLD: u32 = 32768;
pub const _Q_PENDING_LOOPS: u32 = 512;
pub const _QW_WAITING: u32 = 256;
pub const _QW_LOCKED: u32 = 255;
pub const _QW_WMASK: u32 = 511;
pub const _QR_SHIFT: u32 = 9;
pub const _QR_BIAS: u32 = 512;
pub const PERCPU_MODULE_RESERVE: u32 = 8192;
pub const PCPU_MIN_ALLOC_SHIFT: u32 = 2;
pub const PCPU_MIN_ALLOC_SIZE: u32 = 4;
pub const PERCPU_DYNAMIC_SIZE_SHIFT: u32 = 10;
pub const PERCPU_DYNAMIC_EARLY_SIZE: u32 = 20480;
pub const PERCPU_DYNAMIC_RESERVE: u32 = 28672;
pub const TRACEPOINT_DEFS_H: u32 = 1;
pub const SHIFT_PLL: u32 = 2;
pub const SHIFT_FLL: u32 = 2;
pub const MAXTC: u32 = 10;
pub const SHIFT_USEC: u32 = 16;
pub const PPM_SCALE_INV_SHIFT: u32 = 19;
pub const MAXPHASE: u32 = 500000000;
pub const MAXFREQ: u32 = 500000;
pub const MINSEC: u32 = 256;
pub const MAXSEC: u32 = 2048;
pub const NTP_PHASE_LIMIT: u32 = 16000000;
pub const NTP_SCALE_SHIFT: u32 = 32;
pub const NTP_INTERVAL_FREQ: u32 = 1000;
pub const NTP_INTERVAL_LENGTH: u32 = 1000000;
pub const PIT_TICK_RATE: u32 = 1193182;
pub const STAT_HAVE_NSEC: u32 = 1;
pub const S_IFMT: u32 = 61440;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFLNK: u32 = 40960;
pub const S_IFREG: u32 = 32768;
pub const S_IFBLK: u32 = 24576;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFIFO: u32 = 4096;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const STATX_TYPE: u32 = 1;
pub const STATX_MODE: u32 = 2;
pub const STATX_NLINK: u32 = 4;
pub const STATX_UID: u32 = 8;
pub const STATX_GID: u32 = 16;
pub const STATX_ATIME: u32 = 32;
pub const STATX_MTIME: u32 = 64;
pub const STATX_CTIME: u32 = 128;
pub const STATX_INO: u32 = 256;
pub const STATX_SIZE: u32 = 512;
pub const STATX_BLOCKS: u32 = 1024;
pub const STATX_BASIC_STATS: u32 = 2047;
pub const STATX_BTIME: u32 = 2048;
pub const STATX_MNT_ID: u32 = 4096;
pub const STATX_DIOALIGN: u32 = 8192;
pub const STATX_MNT_ID_UNIQUE: u32 = 16384;
pub const STATX_SUBVOL: u32 = 32768;
pub const STATX_WRITE_ATOMIC: u32 = 65536;
pub const STATX__RESERVED: u32 = 2147483648;
pub const STATX_ATTR_COMPRESSED: u32 = 4;
pub const STATX_ATTR_IMMUTABLE: u32 = 16;
pub const STATX_ATTR_APPEND: u32 = 32;
pub const STATX_ATTR_NODUMP: u32 = 64;
pub const STATX_ATTR_ENCRYPTED: u32 = 2048;
pub const STATX_ATTR_AUTOMOUNT: u32 = 4096;
pub const STATX_ATTR_MOUNT_ROOT: u32 = 8192;
pub const STATX_ATTR_VERITY: u32 = 1048576;
pub const STATX_ATTR_DAX: u32 = 2097152;
pub const STATX_ATTR_WRITE_ATOMIC: u32 = 4194304;
pub const S_IRWXUGO: u32 = 511;
pub const S_IALLUGO: u32 = 4095;
pub const S_IRUGO: u32 = 292;
pub const S_IWUGO: u32 = 146;
pub const S_IXUGO: u32 = 73;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const DEFAULT_OVERFLOWUID: u32 = 65534;
pub const DEFAULT_OVERFLOWGID: u32 = 65534;
pub const DEFAULT_FS_OVERFLOWUID: u32 = 65534;
pub const DEFAULT_FS_OVERFLOWGID: u32 = 65534;
pub const KSTAT_ATTR_FS_IOC_FLAGS: u32 = 1050740;
pub const KSTAT_ATTR_VFS_FLAGS: u32 = 48;
pub const STATX_CHANGE_COOKIE: u32 = 1073741824;
pub const STATX_ATTR_CHANGE_MONOTONIC: i64 = -9223372036854775808;
pub const IPC_CREAT: u32 = 512;
pub const IPC_EXCL: u32 = 1024;
pub const IPC_NOWAIT: u32 = 2048;
pub const IPC_DIPC: u32 = 4096;
pub const IPC_OWN: u32 = 8192;
pub const IPC_RMID: u32 = 0;
pub const IPC_SET: u32 = 1;
pub const IPC_STAT: u32 = 2;
pub const IPC_INFO: u32 = 3;
pub const IPC_OLD: u32 = 0;
pub const IPC_64: u32 = 256;
pub const SEMOP: u32 = 1;
pub const SEMGET: u32 = 2;
pub const SEMCTL: u32 = 3;
pub const SEMTIMEDOP: u32 = 4;
pub const MSGSND: u32 = 11;
pub const MSGRCV: u32 = 12;
pub const MSGGET: u32 = 13;
pub const MSGCTL: u32 = 14;
pub const SHMAT: u32 = 21;
pub const SHMDT: u32 = 22;
pub const SHMGET: u32 = 23;
pub const SHMCTL: u32 = 24;
pub const DIPC: u32 = 25;
pub const SEM_UNDO: u32 = 4096;
pub const GETPID: u32 = 11;
pub const GETVAL: u32 = 12;
pub const GETALL: u32 = 13;
pub const GETNCNT: u32 = 14;
pub const GETZCNT: u32 = 15;
pub const SETVAL: u32 = 16;
pub const SETALL: u32 = 17;
pub const SEM_STAT: u32 = 18;
pub const SEM_INFO: u32 = 19;
pub const SEM_STAT_ANY: u32 = 20;
pub const SEMMNI: u32 = 32000;
pub const SEMMSL: u32 = 32000;
pub const SEMMNS: u32 = 1024000000;
pub const SEMOPM: u32 = 500;
pub const SEMVMX: u32 = 32767;
pub const SEMAEM: u32 = 32767;
pub const SEMUME: u32 = 500;
pub const SEMMNU: u32 = 1024000000;
pub const SEMMAP: u32 = 1024000000;
pub const SEMUSZ: u32 = 20;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_RESERVE_MEM: u32 = 73;
pub const SO_TXREHASH: u32 = 74;
pub const SO_RCVMARK: u32 = 75;
pub const SO_PASSPIDFD: u32 = 76;
pub const SO_PEERPIDFD: u32 = 77;
pub const SOCK_IOC_TYPE: u32 = 137;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SIOCADDRT: u32 = 35083;
pub const SIOCDELRT: u32 = 35084;
pub const SIOCRTMSG: u32 = 35085;
pub const SIOCGIFNAME: u32 = 35088;
pub const SIOCSIFLINK: u32 = 35089;
pub const SIOCGIFCONF: u32 = 35090;
pub const SIOCGIFFLAGS: u32 = 35091;
pub const SIOCSIFFLAGS: u32 = 35092;
pub const SIOCGIFADDR: u32 = 35093;
pub const SIOCSIFADDR: u32 = 35094;
pub const SIOCGIFDSTADDR: u32 = 35095;
pub const SIOCSIFDSTADDR: u32 = 35096;
pub const SIOCGIFBRDADDR: u32 = 35097;
pub const SIOCSIFBRDADDR: u32 = 35098;
pub const SIOCGIFNETMASK: u32 = 35099;
pub const SIOCSIFNETMASK: u32 = 35100;
pub const SIOCGIFMETRIC: u32 = 35101;
pub const SIOCSIFMETRIC: u32 = 35102;
pub const SIOCGIFMEM: u32 = 35103;
pub const SIOCSIFMEM: u32 = 35104;
pub const SIOCGIFMTU: u32 = 35105;
pub const SIOCSIFMTU: u32 = 35106;
pub const SIOCSIFNAME: u32 = 35107;
pub const SIOCSIFHWADDR: u32 = 35108;
pub const SIOCGIFENCAP: u32 = 35109;
pub const SIOCSIFENCAP: u32 = 35110;
pub const SIOCGIFHWADDR: u32 = 35111;
pub const SIOCGIFSLAVE: u32 = 35113;
pub const SIOCSIFSLAVE: u32 = 35120;
pub const SIOCADDMULTI: u32 = 35121;
pub const SIOCDELMULTI: u32 = 35122;
pub const SIOCGIFINDEX: u32 = 35123;
pub const SIOGIFINDEX: u32 = 35123;
pub const SIOCSIFPFLAGS: u32 = 35124;
pub const SIOCGIFPFLAGS: u32 = 35125;
pub const SIOCDIFADDR: u32 = 35126;
pub const SIOCSIFHWBROADCAST: u32 = 35127;
pub const SIOCGIFCOUNT: u32 = 35128;
pub const SIOCGIFBR: u32 = 35136;
pub const SIOCSIFBR: u32 = 35137;
pub const SIOCGIFTXQLEN: u32 = 35138;
pub const SIOCSIFTXQLEN: u32 = 35139;
pub const SIOCETHTOOL: u32 = 35142;
pub const SIOCGMIIPHY: u32 = 35143;
pub const SIOCGMIIREG: u32 = 35144;
pub const SIOCSMIIREG: u32 = 35145;
pub const SIOCWANDEV: u32 = 35146;
pub const SIOCOUTQNSD: u32 = 35147;
pub const SIOCGSKNS: u32 = 35148;
pub const SIOCDARP: u32 = 35155;
pub const SIOCGARP: u32 = 35156;
pub const SIOCSARP: u32 = 35157;
pub const SIOCDRARP: u32 = 35168;
pub const SIOCGRARP: u32 = 35169;
pub const SIOCSRARP: u32 = 35170;
pub const SIOCGIFMAP: u32 = 35184;
pub const SIOCSIFMAP: u32 = 35185;
pub const SIOCADDDLCI: u32 = 35200;
pub const SIOCDELDLCI: u32 = 35201;
pub const SIOCGIFVLAN: u32 = 35202;
pub const SIOCSIFVLAN: u32 = 35203;
pub const SIOCBONDENSLAVE: u32 = 35216;
pub const SIOCBONDRELEASE: u32 = 35217;
pub const SIOCBONDSETHWADDR: u32 = 35218;
pub const SIOCBONDSLAVEINFOQUERY: u32 = 35219;
pub const SIOCBONDINFOQUERY: u32 = 35220;
pub const SIOCBONDCHANGEACTIVE: u32 = 35221;
pub const SIOCBRADDBR: u32 = 35232;
pub const SIOCBRDELBR: u32 = 35233;
pub const SIOCBRADDIF: u32 = 35234;
pub const SIOCBRDELIF: u32 = 35235;
pub const SIOCSHWTSTAMP: u32 = 35248;
pub const SIOCGHWTSTAMP: u32 = 35249;
pub const SIOCDEVPRIVATE: u32 = 35312;
pub const SIOCPROTOPRIVATE: u32 = 35296;
pub const AT_SYSINFO_EHDR: u32 = 33;
pub const AT_VECTOR_SIZE_ARCH: u32 = 3;
pub const AT_NULL: u32 = 0;
pub const AT_IGNORE: u32 = 1;
pub const AT_EXECFD: u32 = 2;
pub const AT_PHDR: u32 = 3;
pub const AT_PHENT: u32 = 4;
pub const AT_PHNUM: u32 = 5;
pub const AT_PAGESZ: u32 = 6;
pub const AT_BASE: u32 = 7;
pub const AT_FLAGS: u32 = 8;
pub const AT_ENTRY: u32 = 9;
pub const AT_NOTELF: u32 = 10;
pub const AT_UID: u32 = 11;
pub const AT_EUID: u32 = 12;
pub const AT_GID: u32 = 13;
pub const AT_EGID: u32 = 14;
pub const AT_PLATFORM: u32 = 15;
pub const AT_HWCAP: u32 = 16;
pub const AT_CLKTCK: u32 = 17;
pub const AT_SECURE: u32 = 23;
pub const AT_BASE_PLATFORM: u32 = 24;
pub const AT_RANDOM: u32 = 25;
pub const AT_HWCAP2: u32 = 26;
pub const AT_RSEQ_FEATURE_SIZE: u32 = 27;
pub const AT_RSEQ_ALIGN: u32 = 28;
pub const AT_HWCAP3: u32 = 29;
pub const AT_HWCAP4: u32 = 30;
pub const AT_EXECFN: u32 = 31;
pub const AT_MINSIGSTKSZ: u32 = 51;
pub const AT_VECTOR_SIZE_BASE: u32 = 22;
pub const NUM_ACTIVE_RCU_POLL_OLDSTATE: u32 = 2;
pub const NUM_ACTIVE_RCU_POLL_FULL_OLDSTATE: u32 = 4;
pub const MAPLE_NODE_SLOTS: u32 = 31;
pub const MAPLE_RANGE64_SLOTS: u32 = 16;
pub const MAPLE_ARANGE64_SLOTS: u32 = 10;
pub const MAPLE_ALLOC_SLOTS: u32 = 30;
pub const MAPLE_NODE_MASK: u32 = 255;
pub const MT_FLAGS_ALLOC_RANGE: u32 = 1;
pub const MT_FLAGS_USE_RCU: u32 = 2;
pub const MT_FLAGS_HEIGHT_OFFSET: u32 = 2;
pub const MT_FLAGS_HEIGHT_MASK: u32 = 124;
pub const MT_FLAGS_LOCK_MASK: u32 = 768;
pub const MT_FLAGS_LOCK_IRQ: u32 = 256;
pub const MT_FLAGS_LOCK_BH: u32 = 512;
pub const MT_FLAGS_LOCK_EXTERN: u32 = 768;
pub const MT_FLAGS_ALLOC_WRAPPED: u32 = 2048;
pub const MAPLE_HEIGHT_MAX: u32 = 31;
pub const MAPLE_NODE_TYPE_MASK: u32 = 15;
pub const MAPLE_NODE_TYPE_SHIFT: u32 = 3;
pub const MAPLE_RESERVED_RANGE: u32 = 4096;
pub const RWSEM_UNLOCKED_VALUE: u32 = 0;
pub const RWSEM_WRITER_LOCKED: u32 = 1;
pub const WQ_FLAG_EXCLUSIVE: u32 = 1;
pub const WQ_FLAG_WOKEN: u32 = 2;
pub const WQ_FLAG_CUSTOM: u32 = 4;
pub const WQ_FLAG_DONE: u32 = 8;
pub const WQ_FLAG_PRIORITY: u32 = 16;
pub const UPROBE_HANDLER_REMOVE: u32 = 1;
pub const UPROBE_HANDLER_MASK: u32 = 1;
pub const MAX_URETPROBE_DEPTH: u32 = 64;
pub const TICK_NSEC: u32 = 1000000;
pub const HZ_TO_MSEC_SHR32: u32 = 31;
pub const MSEC_TO_HZ_SHR32: u32 = 31;
pub const HZ_TO_MSEC_NUM: u32 = 1;
pub const HZ_TO_MSEC_DEN: u32 = 1;
pub const MSEC_TO_HZ_NUM: u32 = 1;
pub const MSEC_TO_HZ_DEN: u32 = 1;
pub const HZ_TO_USEC_SHR32: u32 = 22;
pub const USEC_TO_HZ_SHR32: u32 = 41;
pub const HZ_TO_USEC_NUM: u32 = 1000;
pub const HZ_TO_USEC_DEN: u32 = 1;
pub const USEC_TO_HZ_NUM: u32 = 1;
pub const USEC_TO_HZ_DEN: u32 = 1000;
pub const HZ_TO_NSEC_NUM: u32 = 1000000;
pub const HZ_TO_NSEC_DEN: u32 = 1;
pub const NSEC_TO_HZ_NUM: u32 = 1;
pub const NSEC_TO_HZ_DEN: u32 = 1000000;
pub const SHIFT_HZ: u32 = 10;
pub const TICK_USEC: u32 = 1000;
pub const USER_TICK_USEC: u32 = 10000;
pub const SEC_JIFFIE_SC: u32 = 21;
pub const NSEC_JIFFIE_SC: u32 = 51;
pub const TIMESTAMP_SIZE: u32 = 30;
pub const LOW_RES_NSEC: u32 = 1000000;
pub const KTIME_LOW_RES: u32 = 1000000;
pub const TIMER_CPUMASK: u32 = 262143;
pub const TIMER_MIGRATING: u32 = 262144;
pub const TIMER_BASEMASK: u32 = 524287;
pub const TIMER_DEFERRABLE: u32 = 524288;
pub const TIMER_PINNED: u32 = 1048576;
pub const TIMER_IRQSAFE: u32 = 2097152;
pub const TIMER_INIT_FLAGS: u32 = 3670016;
pub const TIMER_ARRAYSHIFT: u32 = 22;
pub const TIMER_ARRAYMASK: u32 = 4290772992;
pub const TIMER_TRACE_FLAGMASK: u32 = 3932160;
pub const NEXT_TIMER_MAX_DELTA: u32 = 1073741823;
pub const RCU_DONE_TAIL: u32 = 0;
pub const RCU_WAIT_TAIL: u32 = 1;
pub const RCU_NEXT_READY_TAIL: u32 = 2;
pub const RCU_NEXT_TAIL: u32 = 3;
pub const RCU_CBLIST_NSEGS: u32 = 4;
pub const RCU_FANOUT: u32 = 64;
pub const RCU_FANOUT_LEAF: u32 = 16;
pub const RCU_FANOUT_1: u32 = 16;
pub const RCU_FANOUT_2: u32 = 1024;
pub const RCU_FANOUT_3: u32 = 65536;
pub const RCU_FANOUT_4: u32 = 4194304;
pub const RCU_NUM_LVLS: u32 = 2;
pub const NUM_RCU_LVL_0: u32 = 1;
pub const SRCU_SIZE_SMALL: u32 = 0;
pub const SRCU_SIZE_ALLOC: u32 = 1;
pub const SRCU_SIZE_WAIT_BARRIER: u32 = 2;
pub const SRCU_SIZE_WAIT_CALL: u32 = 3;
pub const SRCU_SIZE_WAIT_CBS1: u32 = 4;
pub const SRCU_SIZE_WAIT_CBS2: u32 = 5;
pub const SRCU_SIZE_WAIT_CBS3: u32 = 6;
pub const SRCU_SIZE_WAIT_CBS4: u32 = 7;
pub const SRCU_SIZE_BIG: u32 = 8;
pub const SRCU_STATE_IDLE: u32 = 0;
pub const SRCU_STATE_SCAN1: u32 = 1;
pub const SRCU_STATE_SCAN2: u32 = 2;
pub const SRCU_GET_STATE_COMPLETED: u32 = 1;
pub const NUM_ACTIVE_SRCU_POLL_OLDSTATE: u32 = 2;
pub const SRCU_NMI_UNKNOWN: u32 = 0;
pub const SRCU_NMI_UNSAFE: u32 = 1;
pub const SRCU_NMI_SAFE: u32 = 2;
pub const NOTIFY_DONE: u32 = 0;
pub const NOTIFY_OK: u32 = 1;
pub const NOTIFY_STOP_MASK: u32 = 32768;
pub const NOTIFY_BAD: u32 = 32770;
pub const NOTIFY_STOP: u32 = 32769;
pub const NETLINK_URELEASE: u32 = 1;
pub const KBD_KEYCODE: u32 = 1;
pub const KBD_UNBOUND_KEYCODE: u32 = 2;
pub const KBD_UNICODE: u32 = 3;
pub const KBD_KEYSYM: u32 = 4;
pub const KBD_POST_KEYSYM: u32 = 5;
pub const MAX_UINSN_BYTES: u32 = 16;
pub const UPROBE_XOL_SLOT_BYTES: u32 = 128;
pub const UPROBE_SWBP_INSN: u32 = 204;
pub const UPROBE_SWBP_INSN_SIZE: u32 = 1;
pub const NR_PAGEFLAGS: u32 = 22;
pub const MAX_NR_ZONES: u32 = 4;
pub const NR_CPUS_BITS: u32 = 6;
pub const SPINLOCK_SIZE: u32 = 4;
pub const LRU_GEN_WIDTH: u32 = 0;
pub const __LRU_REFS_WIDTH: u32 = 0;
pub const ZONES_SHIFT: u32 = 2;
pub const ZONES_WIDTH: u32 = 2;
pub const SECTIONS_WIDTH: u32 = 0;
pub const NODES_WIDTH: u32 = 6;
pub const KASAN_TAG_WIDTH: u32 = 0;
pub const LAST_CPUPID_SHIFT: u32 = 0;
pub const LAST_CPUPID_WIDTH: u32 = 0;
pub const KCSAN_SEQLOCK_REGION_MAX: u32 = 1000;
pub const MM_CONTEXT_UPROBE_IA32: u32 = 0;
pub const MM_CONTEXT_HAS_VSYSCALL: u32 = 1;
pub const MM_CONTEXT_LOCK_LAM: u32 = 2;
pub const MM_CONTEXT_FORCE_TAGGED_SVA: u32 = 3;
pub const AT_VECTOR_SIZE: u32 = 52;
pub const INIT_PASID: u32 = 0;
pub const ENCODED_PAGE_BITS: u32 = 3;
pub const ENCODED_PAGE_BIT_DELAY_RMAP: u32 = 1;
pub const ENCODED_PAGE_BIT_NR_PAGES_NEXT: u32 = 2;
pub const MM_MT_FLAGS: u32 = 771;
pub const UIO_FASTIOV: u32 = 8;
pub const UIO_MAXIOV: u32 = 1024;
pub const ITER_SOURCE: u32 = 1;
pub const ITER_DEST: u32 = 0;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const SOCK_SNDBUF_LOCK: u32 = 1;
pub const SOCK_RCVBUF_LOCK: u32 = 2;
pub const SOCK_BUF_LOCK_MASK: u32 = 3;
pub const SOCK_TXREHASH_DEFAULT: u32 = 255;
pub const SOCK_TXREHASH_DISABLED: u32 = 0;
pub const SOCK_TXREHASH_ENABLED: u32 = 1;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_CREDENTIALS: u32 = 2;
pub const SCM_SECURITY: u32 = 3;
pub const SCM_PIDFD: u32 = 4;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const PF_UNSPEC: u32 = 0;
pub const PF_UNIX: u32 = 1;
pub const PF_LOCAL: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const SOMAXCONN: u32 = 4096;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_TRYHARD: u32 = 4;
pub const MSG_CTRUNC: u32 = 8;
pub const MSG_PROBE: u32 = 16;
pub const MSG_TRUNC: u32 = 32;
pub const MSG_DONTWAIT: u32 = 64;
pub const MSG_EOR: u32 = 128;
pub const MSG_WAITALL: u32 = 256;
pub const MSG_FIN: u32 = 512;
pub const MSG_SYN: u32 = 1024;
pub const MSG_CONFIRM: u32 = 2048;
pub const MSG_RST: u32 = 4096;
pub const MSG_ERRQUEUE: u32 = 8192;
pub const MSG_NOSIGNAL: u32 = 16384;
pub const MSG_MORE: u32 = 32768;
pub const MSG_WAITFORONE: u32 = 65536;
pub const MSG_SENDPAGE_NOPOLICY: u32 = 65536;
pub const MSG_BATCH: u32 = 262144;
pub const MSG_EOF: u32 = 512;
pub const MSG_NO_SHARED_FRAGS: u32 = 524288;
pub const MSG_SENDPAGE_DECRYPTED: u32 = 1048576;
pub const MSG_ZEROCOPY: u32 = 67108864;
pub const MSG_SPLICE_PAGES: u32 = 134217728;
pub const MSG_FASTOPEN: u32 = 536870912;
pub const MSG_CMSG_CLOEXEC: u32 = 1073741824;
pub const MSG_CMSG_COMPAT: u32 = 2147483648;
pub const MSG_INTERNAL_SENDMSG_FLAGS: u32 = 135331840;
pub const SOL_IP: u32 = 0;
pub const SOL_TCP: u32 = 6;
pub const SOL_UDP: u32 = 17;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const SOL_SCTP: u32 = 132;
pub const SOL_UDPLITE: u32 = 136;
pub const SOL_RAW: u32 = 255;
pub const SOL_IPX: u32 = 256;
pub const SOL_AX25: u32 = 257;
pub const SOL_ATALK: u32 = 258;
pub const SOL_NETROM: u32 = 259;
pub const SOL_ROSE: u32 = 260;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOL_MPTCP: u32 = 284;
pub const SOL_MCTP: u32 = 285;
pub const SOL_SMC: u32 = 286;
pub const SOL_VSOCK: u32 = 287;
pub const IPX_TYPE: u32 = 1;
pub const __UAPI_DEF_IF_IFCONF: u32 = 1;
pub const __UAPI_DEF_IF_IFMAP: u32 = 1;
pub const __UAPI_DEF_IF_IFNAMSIZ: u32 = 1;
pub const __UAPI_DEF_IF_IFREQ: u32 = 1;
pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS: u32 = 1;
pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO: u32 = 1;
pub const __UAPI_DEF_IN_ADDR: u32 = 1;
pub const __UAPI_DEF_IN_IPPROTO: u32 = 1;
pub const __UAPI_DEF_IN_PKTINFO: u32 = 1;
pub const __UAPI_DEF_IP_MREQ: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IN: u32 = 1;
pub const __UAPI_DEF_IN_CLASS: u32 = 1;
pub const __UAPI_DEF_IN6_ADDR: u32 = 1;
pub const __UAPI_DEF_IN6_ADDR_ALT: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IN6: u32 = 1;
pub const __UAPI_DEF_IPV6_MREQ: u32 = 1;
pub const __UAPI_DEF_IPPROTO_V6: u32 = 1;
pub const __UAPI_DEF_IPV6_OPTIONS: u32 = 1;
pub const __UAPI_DEF_IN6_PKTINFO: u32 = 1;
pub const __UAPI_DEF_IP6_MTUINFO: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IPX: u32 = 1;
pub const __UAPI_DEF_IPX_ROUTE_DEFINITION: u32 = 1;
pub const __UAPI_DEF_IPX_INTERFACE_DEFINITION: u32 = 1;
pub const __UAPI_DEF_IPX_CONFIG_DATA: u32 = 1;
pub const __UAPI_DEF_IPX_ROUTE_DEF: u32 = 1;
pub const __UAPI_DEF_XATTR: u32 = 1;
pub const IFNAMSIZ: u32 = 16;
pub const IFALIASZ: u32 = 256;
pub const ALTIFNAMSIZ: u32 = 128;
pub const GENERIC_HDLC_VERSION: u32 = 4;
pub const CLOCK_DEFAULT: u32 = 0;
pub const CLOCK_EXT: u32 = 1;
pub const CLOCK_INT: u32 = 2;
pub const CLOCK_TXINT: u32 = 3;
pub const CLOCK_TXFROMRX: u32 = 4;
pub const ENCODING_DEFAULT: u32 = 0;
pub const ENCODING_NRZ: u32 = 1;
pub const ENCODING_NRZI: u32 = 2;
pub const ENCODING_FM_MARK: u32 = 3;
pub const ENCODING_FM_SPACE: u32 = 4;
pub const ENCODING_MANCHESTER: u32 = 5;
pub const PARITY_DEFAULT: u32 = 0;
pub const PARITY_NONE: u32 = 1;
pub const PARITY_CRC16_PR0: u32 = 2;
pub const PARITY_CRC16_PR1: u32 = 3;
pub const PARITY_CRC16_PR0_CCITT: u32 = 4;
pub const PARITY_CRC16_PR1_CCITT: u32 = 5;
pub const PARITY_CRC32_PR0_CCITT: u32 = 6;
pub const PARITY_CRC32_PR1_CCITT: u32 = 7;
pub const LMI_DEFAULT: u32 = 0;
pub const LMI_NONE: u32 = 1;
pub const LMI_ANSI: u32 = 2;
pub const LMI_CCITT: u32 = 3;
pub const LMI_CISCO: u32 = 4;
pub const IF_GET_IFACE: u32 = 1;
pub const IF_GET_PROTO: u32 = 2;
pub const IF_IFACE_V35: u32 = 4096;
pub const IF_IFACE_V24: u32 = 4097;
pub const IF_IFACE_X21: u32 = 4098;
pub const IF_IFACE_T1: u32 = 4099;
pub const IF_IFACE_E1: u32 = 4100;
pub const IF_IFACE_SYNC_SERIAL: u32 = 4101;
pub const IF_IFACE_X21D: u32 = 4102;
pub const IF_PROTO_HDLC: u32 = 8192;
pub const IF_PROTO_PPP: u32 = 8193;
pub const IF_PROTO_CISCO: u32 = 8194;
pub const IF_PROTO_FR: u32 = 8195;
pub const IF_PROTO_FR_ADD_PVC: u32 = 8196;
pub const IF_PROTO_FR_DEL_PVC: u32 = 8197;
pub const IF_PROTO_X25: u32 = 8198;
pub const IF_PROTO_HDLC_ETH: u32 = 8199;
pub const IF_PROTO_FR_ADD_ETH_PVC: u32 = 8200;
pub const IF_PROTO_FR_DEL_ETH_PVC: u32 = 8201;
pub const IF_PROTO_FR_PVC: u32 = 8202;
pub const IF_PROTO_FR_ETH_PVC: u32 = 8203;
pub const IF_PROTO_RAW: u32 = 8204;
pub const IFHWADDRLEN: u32 = 6;
pub const MINORBITS: u32 = 20;
pub const MINORMASK: u32 = 1048575;
pub const LIST_BL_LOCKMASK: u32 = 1;
pub const GOLDEN_RATIO_32: u32 = 1640531527;
pub const GOLDEN_RATIO_64: u64 = 7046029254386353131;
pub const DNAME_INLINE_LEN: u32 = 40;
pub const DCACHE_ENTRY_TYPE: u32 = 7340032;
pub const DCACHE_MISS_TYPE: u32 = 0;
pub const DCACHE_WHITEOUT_TYPE: u32 = 1048576;
pub const DCACHE_DIRECTORY_TYPE: u32 = 2097152;
pub const DCACHE_AUTODIR_TYPE: u32 = 3145728;
pub const DCACHE_REGULAR_TYPE: u32 = 4194304;
pub const DCACHE_SPECIAL_TYPE: u32 = 5242880;
pub const DCACHE_SYMLINK_TYPE: u32 = 6291456;
pub const GRND_NONBLOCK: u32 = 1;
pub const GRND_RANDOM: u32 = 2;
pub const GRND_INSECURE: u32 = 4;
pub const SHRINKER_UNIT_BITS: u32 = 64;
pub const SHRINK_STOP: i32 = -1;
pub const SHRINK_EMPTY: i32 = -2;
pub const DEFAULT_SEEKS: u32 = 2;
pub const PB_migratetype_bits: u32 = 3;
pub const PAGEFLAGS_MASK: u32 = 4194303;
pub const PAGE_POISON_PATTERN: i32 = -1;
pub const FOLIO_PF_ANY: u32 = 0;
pub const FOLIO_PF_HEAD: u32 = 0;
pub const FOLIO_PF_NO_TAIL: u32 = 0;
pub const FOLIO_PF_NO_COMPOUND: u32 = 0;
pub const FOLIO_PF_SECOND: u32 = 1;
pub const FOLIO_HEAD_PAGE: u32 = 0;
pub const FOLIO_SECOND_PAGE: u32 = 1;
pub const __PG_HWPOISON: u32 = 0;
pub const PAGE_MAPPING_ANON: u32 = 1;
pub const PAGE_MAPPING_MOVABLE: u32 = 2;
pub const PAGE_MAPPING_KSM: u32 = 3;
pub const PAGE_MAPPING_FLAGS: u32 = 3;
pub const MAX_PAGE_ORDER: u32 = 10;
pub const MAX_ORDER_NR_PAGES: u32 = 1024;
pub const NR_PAGE_ORDERS: u32 = 11;
pub const PAGE_ALLOC_COSTLY_ORDER: u32 = 3;
pub const MIGRATETYPE_MASK: u32 = 7;
pub const LRU_BASE: u32 = 0;
pub const LRU_ACTIVE: u32 = 1;
pub const LRU_FILE: u32 = 2;
pub const WORKINGSET_ANON: u32 = 0;
pub const WORKINGSET_FILE: u32 = 1;
pub const ANON_AND_FILE: u32 = 2;
pub const MIN_NR_GENS: u32 = 2;
pub const MAX_NR_GENS: u32 = 4;
pub const MAX_NR_TIERS: u32 = 4;
pub const NR_PCP_THP: u32 = 0;
pub const ASYNC_AND_SYNC: u32 = 2;
pub const ZONEID_SHIFT: u32 = 8;
pub const ZONES_MASK: u32 = 3;
pub const NODES_MASK: u32 = 63;
pub const SECTIONS_MASK: u32 = 0;
pub const LAST_CPUPID_MASK: u32 = 0;
pub const KASAN_TAG_MASK: u32 = 0;
pub const ZONEID_MASK: u32 = 255;
pub const DEF_PRIORITY: u32 = 12;
pub const MAX_ZONES_PER_ZONELIST: u32 = 256;
pub const PA_SECTION_SHIFT: u32 = 27;
pub const PFN_SECTION_SHIFT: u32 = 15;
pub const PAGES_PER_SECTION: u32 = 32768;
pub const PAGE_SECTION_MASK: i32 = -32768;
pub const SUBSECTION_SHIFT: u32 = 21;
pub const SUBSECTION_SIZE: u32 = 2097152;
pub const PFN_SUBSECTION_SHIFT: u32 = 9;
pub const PAGES_PER_SUBSECTION: u32 = 512;
pub const PAGE_SUBSECTION_MASK: i32 = -512;
pub const SUBSECTIONS_PER_SECTION: u32 = 64;
pub const MPC_SIGNATURE: &[u8; 5] = b"PCMP\0";
pub const MP_PROCESSOR: u32 = 0;
pub const MP_BUS: u32 = 1;
pub const MP_IOAPIC: u32 = 2;
pub const MP_INTSRC: u32 = 3;
pub const MP_LINTSRC: u32 = 4;
pub const MP_TRANSLATION: u32 = 192;
pub const CPU_ENABLED: u32 = 1;
pub const CPU_BOOTPROCESSOR: u32 = 2;
pub const CPU_STEPPING_MASK: u32 = 15;
pub const CPU_MODEL_MASK: u32 = 240;
pub const CPU_FAMILY_MASK: u32 = 3840;
pub const BUSTYPE_EISA: &[u8; 5] = b"EISA\0";
pub const BUSTYPE_ISA: &[u8; 4] = b"ISA\0";
pub const BUSTYPE_INTERN: &[u8; 7] = b"INTERN\0";
pub const BUSTYPE_MCA: &[u8; 4] = b"MCA\0";
pub const BUSTYPE_VL: &[u8; 3] = b"VL\0";
pub const BUSTYPE_PCI: &[u8; 4] = b"PCI\0";
pub const BUSTYPE_PCMCIA: &[u8; 7] = b"PCMCIA\0";
pub const BUSTYPE_CBUS: &[u8; 5] = b"CBUS\0";
pub const BUSTYPE_CBUSII: &[u8; 7] = b"CBUSII\0";
pub const BUSTYPE_FUTURE: &[u8; 7] = b"FUTURE\0";
pub const BUSTYPE_MBI: &[u8; 4] = b"MBI\0";
pub const BUSTYPE_MBII: &[u8; 5] = b"MBII\0";
pub const BUSTYPE_MPI: &[u8; 4] = b"MPI\0";
pub const BUSTYPE_MPSA: &[u8; 5] = b"MPSA\0";
pub const BUSTYPE_NUBUS: &[u8; 6] = b"NUBUS\0";
pub const BUSTYPE_TC: &[u8; 3] = b"TC\0";
pub const BUSTYPE_VME: &[u8; 4] = b"VME\0";
pub const BUSTYPE_XPRESS: &[u8; 7] = b"XPRESS\0";
pub const MPC_APIC_USABLE: u32 = 1;
pub const MP_IRQPOL_DEFAULT: u32 = 0;
pub const MP_IRQPOL_ACTIVE_HIGH: u32 = 1;
pub const MP_IRQPOL_RESERVED: u32 = 2;
pub const MP_IRQPOL_ACTIVE_LOW: u32 = 3;
pub const MP_IRQPOL_MASK: u32 = 3;
pub const MP_IRQTRIG_DEFAULT: u32 = 0;
pub const MP_IRQTRIG_EDGE: u32 = 4;
pub const MP_IRQTRIG_RESERVED: u32 = 8;
pub const MP_IRQTRIG_LEVEL: u32 = 12;
pub const MP_IRQTRIG_MASK: u32 = 12;
pub const MP_APIC_ALL: u32 = 255;
pub const MPC_OEM_SIGNATURE: &[u8; 5] = b"_OEM\0";
pub const IO_APIC_DEFAULT_PHYS_BASE: u32 = 4273995776;
pub const APIC_DEFAULT_PHYS_BASE: u32 = 4276092928;
pub const IO_APIC_SLOT_SIZE: u32 = 1024;
pub const APIC_DELIVERY_MODE_FIXED: u32 = 0;
pub const APIC_DELIVERY_MODE_LOWESTPRIO: u32 = 1;
pub const APIC_DELIVERY_MODE_SMI: u32 = 2;
pub const APIC_DELIVERY_MODE_NMI: u32 = 4;
pub const APIC_DELIVERY_MODE_INIT: u32 = 5;
pub const APIC_DELIVERY_MODE_EXTINT: u32 = 7;
pub const APIC_ID: u32 = 32;
pub const APIC_LVR: u32 = 48;
pub const APIC_LVR_MASK: u32 = 16711935;
pub const APIC_LVR_DIRECTED_EOI: u32 = 16777216;
pub const APIC_TASKPRI: u32 = 128;
pub const APIC_TPRI_MASK: u32 = 255;
pub const APIC_ARBPRI: u32 = 144;
pub const APIC_ARBPRI_MASK: u32 = 255;
pub const APIC_PROCPRI: u32 = 160;
pub const APIC_EOI: u32 = 176;
pub const APIC_EOI_ACK: u32 = 0;
pub const APIC_RRR: u32 = 192;
pub const APIC_LDR: u32 = 208;
pub const APIC_LDR_MASK: u32 = 4278190080;
pub const APIC_ALL_CPUS: u32 = 255;
pub const APIC_DFR: u32 = 224;
pub const APIC_DFR_CLUSTER: u32 = 268435455;
pub const APIC_DFR_FLAT: u32 = 4294967295;
pub const APIC_SPIV: u32 = 240;
pub const APIC_SPIV_DIRECTED_EOI: u32 = 4096;
pub const APIC_SPIV_FOCUS_DISABLED: u32 = 512;
pub const APIC_SPIV_APIC_ENABLED: u32 = 256;
pub const APIC_ISR: u32 = 256;
pub const APIC_ISR_NR: u32 = 8;
pub const APIC_TMR: u32 = 384;
pub const APIC_IRR: u32 = 512;
pub const APIC_ESR: u32 = 640;
pub const APIC_ESR_SEND_CS: u32 = 1;
pub const APIC_ESR_RECV_CS: u32 = 2;
pub const APIC_ESR_SEND_ACC: u32 = 4;
pub const APIC_ESR_RECV_ACC: u32 = 8;
pub const APIC_ESR_SENDILL: u32 = 32;
pub const APIC_ESR_RECVILL: u32 = 64;
pub const APIC_ESR_ILLREGA: u32 = 128;
pub const APIC_LVTCMCI: u32 = 752;
pub const APIC_ICR: u32 = 768;
pub const APIC_DEST_SELF: u32 = 262144;
pub const APIC_DEST_ALLINC: u32 = 524288;
pub const APIC_DEST_ALLBUT: u32 = 786432;
pub const APIC_ICR_RR_MASK: u32 = 196608;
pub const APIC_ICR_RR_INVALID: u32 = 0;
pub const APIC_ICR_RR_INPROG: u32 = 65536;
pub const APIC_ICR_RR_VALID: u32 = 131072;
pub const APIC_INT_LEVELTRIG: u32 = 32768;
pub const APIC_INT_ASSERT: u32 = 16384;
pub const APIC_ICR_BUSY: u32 = 4096;
pub const APIC_DEST_LOGICAL: u32 = 2048;
pub const APIC_DEST_PHYSICAL: u32 = 0;
pub const APIC_DM_FIXED: u32 = 0;
pub const APIC_DM_FIXED_MASK: u32 = 1792;
pub const APIC_DM_LOWEST: u32 = 256;
pub const APIC_DM_SMI: u32 = 512;
pub const APIC_DM_REMRD: u32 = 768;
pub const APIC_DM_NMI: u32 = 1024;
pub const APIC_DM_INIT: u32 = 1280;
pub const APIC_DM_STARTUP: u32 = 1536;
pub const APIC_DM_EXTINT: u32 = 1792;
pub const APIC_VECTOR_MASK: u32 = 255;
pub const APIC_ICR2: u32 = 784;
pub const APIC_LVTT: u32 = 800;
pub const APIC_LVTTHMR: u32 = 816;
pub const APIC_LVTPC: u32 = 832;
pub const APIC_LVT0: u32 = 848;
pub const APIC_LVT_TIMER_ONESHOT: u32 = 0;
pub const APIC_LVT_TIMER_PERIODIC: u32 = 131072;
pub const APIC_LVT_TIMER_TSCDEADLINE: u32 = 262144;
pub const APIC_LVT_MASKED: u32 = 65536;
pub const APIC_LVT_LEVEL_TRIGGER: u32 = 32768;
pub const APIC_LVT_REMOTE_IRR: u32 = 16384;
pub const APIC_INPUT_POLARITY: u32 = 8192;
pub const APIC_SEND_PENDING: u32 = 4096;
pub const APIC_MODE_MASK: u32 = 1792;
pub const APIC_MODE_FIXED: u32 = 0;
pub const APIC_MODE_NMI: u32 = 4;
pub const APIC_MODE_EXTINT: u32 = 7;
pub const APIC_LVT1: u32 = 864;
pub const APIC_LVTERR: u32 = 880;
pub const APIC_TMICT: u32 = 896;
pub const APIC_TMCCT: u32 = 912;
pub const APIC_TDCR: u32 = 992;
pub const APIC_SELF_IPI: u32 = 1008;
pub const APIC_TDR_DIV_TMBASE: u32 = 4;
pub const APIC_TDR_DIV_1: u32 = 11;
pub const APIC_TDR_DIV_2: u32 = 0;
pub const APIC_TDR_DIV_4: u32 = 1;
pub const APIC_TDR_DIV_8: u32 = 2;
pub const APIC_TDR_DIV_16: u32 = 3;
pub const APIC_TDR_DIV_32: u32 = 8;
pub const APIC_TDR_DIV_64: u32 = 9;
pub const APIC_TDR_DIV_128: u32 = 10;
pub const APIC_EFEAT: u32 = 1024;
pub const APIC_ECTRL: u32 = 1040;
pub const APIC_EILVT_NR_AMD_K8: u32 = 1;
pub const APIC_EILVT_NR_AMD_10H: u32 = 4;
pub const APIC_EILVT_NR_MAX: u32 = 4;
pub const APIC_EILVT_MSG_FIX: u32 = 0;
pub const APIC_EILVT_MSG_SMI: u32 = 2;
pub const APIC_EILVT_MSG_NMI: u32 = 4;
pub const APIC_EILVT_MSG_EXT: u32 = 7;
pub const APIC_EILVT_MASKED: u32 = 65536;
pub const APIC_BASE_MSR: u32 = 2048;
pub const APIC_X2APIC_ID_MSR: u32 = 2050;
pub const MAX_IO_APICS: u32 = 128;
pub const MAX_LOCAL_APIC: u32 = 32768;
pub const XAPIC_DEST_CPUS_SHIFT: u32 = 4;
pub const XAPIC_DEST_CPUS_MASK: u32 = 15;
pub const XAPIC_DEST_CLUSTER_MASK: u32 = 240;
pub const BAD_APICID: u32 = 65535;
pub const MAX_MP_BUSSES: u32 = 256;
pub const MAX_IRQ_SOURCES: u32 = 1024;
pub const LOCAL_DISTANCE: u32 = 10;
pub const REMOTE_DISTANCE: u32 = 20;
pub const DISTANCE_BITS: u32 = 8;
pub const RECLAIM_DISTANCE: u32 = 30;
pub const PENALTY_FOR_NODE_WITH_CPUS: u32 = 1;
pub const GFP_MOVABLE_SHIFT: u32 = 3;
pub const GFP_ZONES_SHIFT: u32 = 2;
pub const SUID_DUMP_DISABLE: u32 = 0;
pub const SUID_DUMP_USER: u32 = 1;
pub const SUID_DUMP_ROOT: u32 = 2;
pub const MMF_DUMPABLE_BITS: u32 = 2;
pub const MMF_DUMPABLE_MASK: u32 = 3;
pub const MMF_DUMP_ANON_PRIVATE: u32 = 2;
pub const MMF_DUMP_ANON_SHARED: u32 = 3;
pub const MMF_DUMP_MAPPED_PRIVATE: u32 = 4;
pub const MMF_DUMP_MAPPED_SHARED: u32 = 5;
pub const MMF_DUMP_ELF_HEADERS: u32 = 6;
pub const MMF_DUMP_HUGETLB_PRIVATE: u32 = 7;
pub const MMF_DUMP_HUGETLB_SHARED: u32 = 8;
pub const MMF_DUMP_DAX_PRIVATE: u32 = 9;
pub const MMF_DUMP_DAX_SHARED: u32 = 10;
pub const MMF_DUMP_FILTER_SHIFT: u32 = 2;
pub const MMF_DUMP_FILTER_BITS: u32 = 9;
pub const MMF_DUMP_FILTER_MASK: u32 = 2044;
pub const MMF_DUMP_MASK_DEFAULT_ELF: u32 = 64;
pub const MMF_VM_MERGEABLE: u32 = 16;
pub const MMF_VM_HUGEPAGE: u32 = 17;
pub const MMF_HAS_UPROBES: u32 = 19;
pub const MMF_RECALC_UPROBES: u32 = 20;
pub const MMF_OOM_SKIP: u32 = 21;
pub const MMF_UNSTABLE: u32 = 22;
pub const MMF_HUGE_ZERO_PAGE: u32 = 23;
pub const MMF_DISABLE_THP: u32 = 24;
pub const MMF_DISABLE_THP_MASK: u32 = 16777216;
pub const MMF_OOM_REAP_QUEUED: u32 = 25;
pub const MMF_MULTIPROCESS: u32 = 26;
pub const MMF_HAS_PINNED: u32 = 27;
pub const MMF_HAS_MDWE: u32 = 28;
pub const MMF_HAS_MDWE_MASK: u32 = 268435456;
pub const MMF_HAS_MDWE_NO_INHERIT: u32 = 29;
pub const MMF_VM_MERGE_ANY: u32 = 30;
pub const MMF_VM_MERGE_ANY_MASK: u32 = 1073741824;
pub const MMF_TOPDOWN: u32 = 31;
pub const MMF_TOPDOWN_MASK: u32 = 2147483648;
pub const MMF_INIT_MASK: u32 = 3506440191;
pub const BITS_PER_XA_VALUE: u32 = 63;
pub const XA_MAX_MARKS: u32 = 3;
pub const RADIX_TREE_ENTRY_MASK: u32 = 3;
pub const RADIX_TREE_INTERNAL_NODE: u32 = 2;
pub const RADIX_TREE_MAX_TAGS: u32 = 3;
pub const RESERVED_PIDS: u32 = 300;
pub const _LINUX_CAPABILITY_VERSION_1: u32 = 429392688;
pub const _LINUX_CAPABILITY_U32S_1: u32 = 1;
pub const _LINUX_CAPABILITY_VERSION_2: u32 = 537333798;
pub const _LINUX_CAPABILITY_U32S_2: u32 = 2;
pub const _LINUX_CAPABILITY_VERSION_3: u32 = 537396514;
pub const _LINUX_CAPABILITY_U32S_3: u32 = 2;
pub const VFS_CAP_REVISION_MASK: u32 = 4278190080;
pub const VFS_CAP_REVISION_SHIFT: u32 = 24;
pub const VFS_CAP_FLAGS_MASK: i64 = -4278190081;
pub const VFS_CAP_FLAGS_EFFECTIVE: u32 = 1;
pub const VFS_CAP_REVISION_1: u32 = 16777216;
pub const VFS_CAP_U32_1: u32 = 1;
pub const VFS_CAP_REVISION_2: u32 = 33554432;
pub const VFS_CAP_U32_2: u32 = 2;
pub const VFS_CAP_REVISION_3: u32 = 50331648;
pub const VFS_CAP_U32_3: u32 = 2;
pub const VFS_CAP_U32: u32 = 2;
pub const VFS_CAP_REVISION: u32 = 50331648;
pub const CAP_CHOWN: u32 = 0;
pub const CAP_DAC_OVERRIDE: u32 = 1;
pub const CAP_DAC_READ_SEARCH: u32 = 2;
pub const CAP_FOWNER: u32 = 3;
pub const CAP_FSETID: u32 = 4;
pub const CAP_KILL: u32 = 5;
pub const CAP_SETGID: u32 = 6;
pub const CAP_SETUID: u32 = 7;
pub const CAP_SETPCAP: u32 = 8;
pub const CAP_LINUX_IMMUTABLE: u32 = 9;
pub const CAP_NET_BIND_SERVICE: u32 = 10;
pub const CAP_NET_BROADCAST: u32 = 11;
pub const CAP_NET_ADMIN: u32 = 12;
pub const CAP_NET_RAW: u32 = 13;
pub const CAP_IPC_LOCK: u32 = 14;
pub const CAP_IPC_OWNER: u32 = 15;
pub const CAP_SYS_MODULE: u32 = 16;
pub const CAP_SYS_RAWIO: u32 = 17;
pub const CAP_SYS_CHROOT: u32 = 18;
pub const CAP_SYS_PTRACE: u32 = 19;
pub const CAP_SYS_PACCT: u32 = 20;
pub const CAP_SYS_ADMIN: u32 = 21;
pub const CAP_SYS_BOOT: u32 = 22;
pub const CAP_SYS_NICE: u32 = 23;
pub const CAP_SYS_RESOURCE: u32 = 24;
pub const CAP_SYS_TIME: u32 = 25;
pub const CAP_SYS_TTY_CONFIG: u32 = 26;
pub const CAP_MKNOD: u32 = 27;
pub const CAP_LEASE: u32 = 28;
pub const CAP_AUDIT_WRITE: u32 = 29;
pub const CAP_AUDIT_CONTROL: u32 = 30;
pub const CAP_SETFCAP: u32 = 31;
pub const CAP_MAC_OVERRIDE: u32 = 32;
pub const CAP_MAC_ADMIN: u32 = 33;
pub const CAP_SYSLOG: u32 = 34;
pub const CAP_WAKE_ALARM: u32 = 35;
pub const CAP_BLOCK_SUSPEND: u32 = 36;
pub const CAP_AUDIT_READ: u32 = 37;
pub const CAP_PERFMON: u32 = 38;
pub const CAP_BPF: u32 = 39;
pub const CAP_CHECKPOINT_RESTORE: u32 = 40;
pub const CAP_LAST_CAP: u32 = 40;
pub const _KERNEL_CAPABILITY_VERSION: u32 = 537396514;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_DSYNC: u32 = 4096;
pub const FASYNC: u32 = 8192;
pub const O_DIRECT: u32 = 16384;
pub const O_LARGEFILE: u32 = 32768;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_NOATIME: u32 = 262144;
pub const O_CLOEXEC: u32 = 524288;
pub const __O_SYNC: u32 = 1048576;
pub const O_SYNC: u32 = 1052672;
pub const O_PATH: u32 = 2097152;
pub const __O_TMPFILE: u32 = 4194304;
pub const O_TMPFILE: u32 = 4259840;
pub const O_NDELAY: u32 = 2048;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const F_SETSIG: u32 = 10;
pub const F_GETSIG: u32 = 11;
pub const F_GETLK64: u32 = 12;
pub const F_SETLK64: u32 = 13;
pub const F_SETLKW64: u32 = 14;
pub const F_SETOWN_EX: u32 = 15;
pub const F_GETOWN_EX: u32 = 16;
pub const F_GETOWNER_UIDS: u32 = 17;
pub const F_OFD_GETLK: u32 = 36;
pub const F_OFD_SETLK: u32 = 37;
pub const F_OFD_SETLKW: u32 = 38;
pub const F_OWNER_TID: u32 = 0;
pub const F_OWNER_PID: u32 = 1;
pub const F_OWNER_PGRP: u32 = 2;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const LOCK_MAND: u32 = 32;
pub const LOCK_READ: u32 = 64;
pub const LOCK_WRITE: u32 = 128;
pub const LOCK_RW: u32 = 192;
pub const F_LINUX_SPECIFIC_BASE: u32 = 1024;
pub const RESOLVE_NO_XDEV: u32 = 1;
pub const RESOLVE_NO_MAGICLINKS: u32 = 2;
pub const RESOLVE_NO_SYMLINKS: u32 = 4;
pub const RESOLVE_BENEATH: u32 = 8;
pub const RESOLVE_IN_ROOT: u32 = 16;
pub const RESOLVE_CACHED: u32 = 32;
pub const F_SETLEASE: u32 = 1024;
pub const F_GETLEASE: u32 = 1025;
pub const F_NOTIFY: u32 = 1026;
pub const F_DUPFD_QUERY: u32 = 1027;
pub const F_CANCELLK: u32 = 1029;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const F_SETPIPE_SZ: u32 = 1031;
pub const F_GETPIPE_SZ: u32 = 1032;
pub const F_ADD_SEALS: u32 = 1033;
pub const F_GET_SEALS: u32 = 1034;
pub const F_SEAL_SEAL: u32 = 1;
pub const F_SEAL_SHRINK: u32 = 2;
pub const F_SEAL_GROW: u32 = 4;
pub const F_SEAL_WRITE: u32 = 8;
pub const F_SEAL_FUTURE_WRITE: u32 = 16;
pub const F_SEAL_EXEC: u32 = 32;
pub const F_GET_RW_HINT: u32 = 1035;
pub const F_SET_RW_HINT: u32 = 1036;
pub const F_GET_FILE_RW_HINT: u32 = 1037;
pub const F_SET_FILE_RW_HINT: u32 = 1038;
pub const RWH_WRITE_LIFE_NOT_SET: u32 = 0;
pub const RWH_WRITE_LIFE_NONE: u32 = 1;
pub const RWH_WRITE_LIFE_SHORT: u32 = 2;
pub const RWH_WRITE_LIFE_MEDIUM: u32 = 3;
pub const RWH_WRITE_LIFE_LONG: u32 = 4;
pub const RWH_WRITE_LIFE_EXTREME: u32 = 5;
pub const RWF_WRITE_LIFE_NOT_SET: u32 = 0;
pub const DN_ACCESS: u32 = 1;
pub const DN_MODIFY: u32 = 2;
pub const DN_CREATE: u32 = 4;
pub const DN_DELETE: u32 = 8;
pub const DN_RENAME: u32 = 16;
pub const DN_ATTRIB: u32 = 32;
pub const DN_MULTISHOT: u32 = 2147483648;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_EACCESS: u32 = 512;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_NO_AUTOMOUNT: u32 = 2048;
pub const AT_EMPTY_PATH: u32 = 4096;
pub const AT_STATX_SYNC_TYPE: u32 = 24576;
pub const AT_STATX_SYNC_AS_STAT: u32 = 0;
pub const AT_STATX_FORCE_SYNC: u32 = 8192;
pub const AT_STATX_DONT_SYNC: u32 = 16384;
pub const AT_RECURSIVE: u32 = 32768;
pub const AT_HANDLE_FID: u32 = 512;
pub const AT_GETATTR_NOSEC: u32 = 2147483648;
pub const VALID_OPEN_FLAGS: u32 = 8388547;
pub const VALID_RESOLVE_FLAGS: u32 = 63;
pub const OPEN_HOW_SIZE_VER0: u32 = 24;
pub const OPEN_HOW_SIZE_LATEST: u32 = 24;
pub const SIGEMT_MASK: u32 = 0;
pub const JOBCTL_STOP_SIGMASK: u32 = 65535;
pub const JOBCTL_STOP_DEQUEUED_BIT: u32 = 16;
pub const JOBCTL_STOP_PENDING_BIT: u32 = 17;
pub const JOBCTL_STOP_CONSUME_BIT: u32 = 18;
pub const JOBCTL_TRAP_STOP_BIT: u32 = 19;
pub const JOBCTL_TRAP_NOTIFY_BIT: u32 = 20;
pub const JOBCTL_TRAPPING_BIT: u32 = 21;
pub const JOBCTL_LISTENING_BIT: u32 = 22;
pub const JOBCTL_TRAP_FREEZE_BIT: u32 = 23;
pub const JOBCTL_PTRACE_FROZEN_BIT: u32 = 24;
pub const JOBCTL_STOPPED_BIT: u32 = 26;
pub const JOBCTL_TRACED_BIT: u32 = 27;
pub const JOBCTL_STOP_DEQUEUED: u32 = 65536;
pub const JOBCTL_STOP_PENDING: u32 = 131072;
pub const JOBCTL_STOP_CONSUME: u32 = 262144;
pub const JOBCTL_TRAP_STOP: u32 = 524288;
pub const JOBCTL_TRAP_NOTIFY: u32 = 1048576;
pub const JOBCTL_TRAPPING: u32 = 2097152;
pub const JOBCTL_LISTENING: u32 = 4194304;
pub const JOBCTL_TRAP_FREEZE: u32 = 8388608;
pub const JOBCTL_PTRACE_FROZEN: u32 = 16777216;
pub const JOBCTL_STOPPED: u32 = 67108864;
pub const JOBCTL_TRACED: u32 = 134217728;
pub const JOBCTL_TRAP_MASK: u32 = 1572864;
pub const JOBCTL_PENDING_MASK: u32 = 1703936;
pub const __ASM_CLAC: &[u8; 21] = b".byte 0x0f,0x01,0xca\0";
pub const __ASM_STAC: &[u8; 21] = b".byte 0x0f,0x01,0xcb\0";
pub const MMU_NOTIFIER_RANGE_BLOCKABLE: u32 = 1;
pub const INVPCID_TYPE_INDIV_ADDR: u32 = 0;
pub const INVPCID_TYPE_SINGLE_CTXT: u32 = 1;
pub const INVPCID_TYPE_ALL_INCL_GLOBAL: u32 = 2;
pub const INVPCID_TYPE_ALL_NON_GLOBAL: u32 = 3;
pub const PKRU_AD_BIT: u32 = 1;
pub const PKRU_WD_BIT: u32 = 2;
pub const PKRU_BITS_PER_PKEY: u32 = 2;
pub const PFN_PTE_SHIFT: u32 = 12;
pub const FIXMAP_PMD_NUM: u32 = 2;
pub const FIXMAP_PMD_TOP: u32 = 507;
pub const VSYSCALL_ADDR: i32 = -10485760;
pub const NR_FIX_BTMAPS: u32 = 64;
pub const FIX_BTMAPS_SLOTS: u32 = 8;
pub const TOTAL_FIX_BTMAPS: u32 = 512;
pub const SWP_TYPE_BITS: u32 = 5;
pub const SWP_OFFSET_FIRST_BIT: u32 = 9;
pub const SWP_OFFSET_SHIFT: u32 = 14;
pub const HAVE_PAGE_AGP: u32 = 1;
pub const _ASM_PGTABLE_INVERT_H: u32 = 1;
pub const PTI_PGTABLE_SWITCH_BIT: u32 = 12;
pub const __HAVE_ARCH_PFN_MODIFY_ALLOWED: u32 = 1;
pub const TLB_FLUSH_ALL: i32 = -1;
pub const TLB_GENERATION_INVALID: u32 = 0;
pub const ARCH_HAS_NOCACHE_UACCESS: u32 = 1;
pub const CLONE_LEGACY_FLAGS: u32 = 4294967295;
pub const CTL_MAXNAME: u32 = 10;
pub const ASSOC_ARRAY_KEY_CHUNK_SIZE: u32 = 64;
pub const KEY_POS_VIEW: u32 = 16777216;
pub const KEY_POS_READ: u32 = 33554432;
pub const KEY_POS_WRITE: u32 = 67108864;
pub const KEY_POS_SEARCH: u32 = 134217728;
pub const KEY_POS_LINK: u32 = 268435456;
pub const KEY_POS_SETATTR: u32 = 536870912;
pub const KEY_POS_ALL: u32 = 1056964608;
pub const KEY_USR_VIEW: u32 = 65536;
pub const KEY_USR_READ: u32 = 131072;
pub const KEY_USR_WRITE: u32 = 262144;
pub const KEY_USR_SEARCH: u32 = 524288;
pub const KEY_USR_LINK: u32 = 1048576;
pub const KEY_USR_SETATTR: u32 = 2097152;
pub const KEY_USR_ALL: u32 = 4128768;
pub const KEY_GRP_VIEW: u32 = 256;
pub const KEY_GRP_READ: u32 = 512;
pub const KEY_GRP_WRITE: u32 = 1024;
pub const KEY_GRP_SEARCH: u32 = 2048;
pub const KEY_GRP_LINK: u32 = 4096;
pub const KEY_GRP_SETATTR: u32 = 8192;
pub const KEY_GRP_ALL: u32 = 16128;
pub const KEY_OTH_VIEW: u32 = 1;
pub const KEY_OTH_READ: u32 = 2;
pub const KEY_OTH_WRITE: u32 = 4;
pub const KEY_OTH_SEARCH: u32 = 8;
pub const KEY_OTH_LINK: u32 = 16;
pub const KEY_OTH_SETATTR: u32 = 32;
pub const KEY_OTH_ALL: u32 = 63;
pub const KEY_PERM_UNDEF: u32 = 4294967295;
pub const KEY_FLAG_DEAD: u32 = 0;
pub const KEY_FLAG_REVOKED: u32 = 1;
pub const KEY_FLAG_IN_QUOTA: u32 = 2;
pub const KEY_FLAG_USER_CONSTRUCT: u32 = 3;
pub const KEY_FLAG_ROOT_CAN_CLEAR: u32 = 4;
pub const KEY_FLAG_INVALIDATED: u32 = 5;
pub const KEY_FLAG_BUILTIN: u32 = 6;
pub const KEY_FLAG_ROOT_CAN_INVAL: u32 = 7;
pub const KEY_FLAG_KEEP: u32 = 8;
pub const KEY_FLAG_UID_KEYRING: u32 = 9;
pub const KEY_ALLOC_IN_QUOTA: u32 = 0;
pub const KEY_ALLOC_QUOTA_OVERRUN: u32 = 1;
pub const KEY_ALLOC_NOT_IN_QUOTA: u32 = 2;
pub const KEY_ALLOC_BUILT_IN: u32 = 4;
pub const KEY_ALLOC_BYPASS_RESTRICTION: u32 = 8;
pub const KEY_ALLOC_UID_KEYRING: u32 = 16;
pub const KEY_ALLOC_SET_KEEP: u32 = 32;
pub const HIGH_RES_NSEC: u32 = 1;
pub const KTIME_HIGH_RES: u32 = 1;
pub const MONOTONIC_RES_NSEC: u32 = 1;
pub const KTIME_MONOTONIC_RES: u32 = 1;
pub const HRTIMER_STATE_INACTIVE: u32 = 0;
pub const HRTIMER_STATE_ENQUEUED: u32 = 1;
pub const ALARMTIMER_STATE_INACTIVE: u32 = 0;
pub const ALARMTIMER_STATE_ENQUEUED: u32 = 1;
pub const REQUEUE_PENDING: u32 = 1;
pub const SIGNAL_STOP_STOPPED: u32 = 1;
pub const SIGNAL_STOP_CONTINUED: u32 = 2;
pub const SIGNAL_GROUP_EXIT: u32 = 4;
pub const SIGNAL_CLD_STOPPED: u32 = 16;
pub const SIGNAL_CLD_CONTINUED: u32 = 32;
pub const SIGNAL_CLD_MASK: u32 = 48;
pub const SIGNAL_UNKILLABLE: u32 = 64;
pub const SIGNAL_STOP_MASK: u32 = 51;
pub const UUID_SIZE: u32 = 16;
pub const UUID_STRING_LEN: u32 = 36;
pub const RR_TIMESLICE: u32 = 100;
pub const IOPRIO_CLASS_SHIFT: u32 = 13;
pub const IOPRIO_NR_CLASSES: u32 = 8;
pub const IOPRIO_CLASS_MASK: u32 = 7;
pub const IOPRIO_PRIO_MASK: u32 = 8191;
pub const IOPRIO_LEVEL_NR_BITS: u32 = 3;
pub const IOPRIO_NR_LEVELS: u32 = 8;
pub const IOPRIO_LEVEL_MASK: u32 = 7;
pub const IOPRIO_BE_NR: u32 = 8;
pub const IOPRIO_NORM: u32 = 4;
pub const IOPRIO_BE_NORM: u32 = 4;
pub const IOPRIO_HINT_SHIFT: u32 = 3;
pub const IOPRIO_HINT_NR_BITS: u32 = 10;
pub const IOPRIO_NR_HINTS: u32 = 1024;
pub const IOPRIO_HINT_MASK: u32 = 1023;
pub const S_DT_SHIFT: u32 = 12;
pub const S_DT_MASK: u32 = 15;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DT_MAX: u32 = 16;
pub const FT_UNKNOWN: u32 = 0;
pub const FT_REG_FILE: u32 = 1;
pub const FT_DIR: u32 = 2;
pub const FT_CHRDEV: u32 = 3;
pub const FT_BLKDEV: u32 = 4;
pub const FT_FIFO: u32 = 5;
pub const FT_SOCK: u32 = 6;
pub const FT_SYMLINK: u32 = 7;
pub const FT_MAX: u32 = 8;
pub const MNT_NOSUID: u32 = 1;
pub const MNT_NODEV: u32 = 2;
pub const MNT_NOEXEC: u32 = 4;
pub const MNT_NOATIME: u32 = 8;
pub const MNT_NODIRATIME: u32 = 16;
pub const MNT_RELATIME: u32 = 32;
pub const MNT_READONLY: u32 = 64;
pub const MNT_NOSYMFOLLOW: u32 = 128;
pub const MNT_SHRINKABLE: u32 = 256;
pub const MNT_WRITE_HOLD: u32 = 512;
pub const MNT_SHARED: u32 = 4096;
pub const MNT_UNBINDABLE: u32 = 8192;
pub const MNT_SHARED_MASK: u32 = 8192;
pub const MNT_USER_SETTABLE_MASK: u32 = 255;
pub const MNT_ATIME_MASK: u32 = 56;
pub const MNT_INTERNAL: u32 = 16384;
pub const MNT_LOCK_ATIME: u32 = 262144;
pub const MNT_LOCK_NOEXEC: u32 = 524288;
pub const MNT_LOCK_NOSUID: u32 = 1048576;
pub const MNT_LOCK_NODEV: u32 = 2097152;
pub const MNT_LOCK_READONLY: u32 = 4194304;
pub const MNT_LOCKED: u32 = 8388608;
pub const MNT_DOOMED: u32 = 16777216;
pub const MNT_SYNC_UMOUNT: u32 = 33554432;
pub const MNT_MARKED: u32 = 67108864;
pub const MNT_UMOUNT: u32 = 134217728;
pub const MNT_ONRB: u32 = 268435456;
pub const KASAN_TAG_KERNEL: u32 = 255;
pub const KASAN_TAG_INVALID: u32 = 254;
pub const KASAN_TAG_MAX: u32 = 253;
pub const KASAN_TAG_MIN: u32 = 0;
pub const KMALLOC_SHIFT_HIGH: u32 = 13;
pub const KMALLOC_SHIFT_MAX: u32 = 22;
pub const KMALLOC_SHIFT_LOW: u32 = 3;
pub const KMALLOC_MAX_SIZE: u32 = 4194304;
pub const KMALLOC_MAX_CACHE_SIZE: u32 = 8192;
pub const KMALLOC_MAX_ORDER: u32 = 10;
pub const KMALLOC_MIN_SIZE: u32 = 8;
pub const RANDOM_KMALLOC_CACHES_NR: u32 = 0;
pub const INR_OPEN_CUR: u32 = 1024;
pub const INR_OPEN_MAX: u32 = 4096;
pub const BLOCK_SIZE_BITS: u32 = 10;
pub const BLOCK_SIZE: u32 = 1024;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const SEEK_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const FILE_DEDUPE_RANGE_SAME: u32 = 0;
pub const FILE_DEDUPE_RANGE_DIFFERS: u32 = 1;
pub const NR_FILE: u32 = 8192;
pub const FS_XFLAG_REALTIME: u32 = 1;
pub const FS_XFLAG_PREALLOC: u32 = 2;
pub const FS_XFLAG_IMMUTABLE: u32 = 8;
pub const FS_XFLAG_APPEND: u32 = 16;
pub const FS_XFLAG_SYNC: u32 = 32;
pub const FS_XFLAG_NOATIME: u32 = 64;
pub const FS_XFLAG_NODUMP: u32 = 128;
pub const FS_XFLAG_RTINHERIT: u32 = 256;
pub const FS_XFLAG_PROJINHERIT: u32 = 512;
pub const FS_XFLAG_NOSYMLINKS: u32 = 1024;
pub const FS_XFLAG_EXTSIZE: u32 = 2048;
pub const FS_XFLAG_EXTSZINHERIT: u32 = 4096;
pub const FS_XFLAG_NODEFRAG: u32 = 8192;
pub const FS_XFLAG_FILESTREAM: u32 = 16384;
pub const FS_XFLAG_DAX: u32 = 32768;
pub const FS_XFLAG_COWEXTSIZE: u32 = 65536;
pub const FS_XFLAG_HASATTR: u32 = 2147483648;
pub const BMAP_IOCTL: u32 = 1;
pub const FSLABEL_MAX: u32 = 256;
pub const FS_SECRM_FL: u32 = 1;
pub const FS_UNRM_FL: u32 = 2;
pub const FS_COMPR_FL: u32 = 4;
pub const FS_SYNC_FL: u32 = 8;
pub const FS_IMMUTABLE_FL: u32 = 16;
pub const FS_APPEND_FL: u32 = 32;
pub const FS_NODUMP_FL: u32 = 64;
pub const FS_NOATIME_FL: u32 = 128;
pub const FS_DIRTY_FL: u32 = 256;
pub const FS_COMPRBLK_FL: u32 = 512;
pub const FS_NOCOMP_FL: u32 = 1024;
pub const FS_ENCRYPT_FL: u32 = 2048;
pub const FS_BTREE_FL: u32 = 4096;
pub const FS_INDEX_FL: u32 = 4096;
pub const FS_IMAGIC_FL: u32 = 8192;
pub const FS_JOURNAL_DATA_FL: u32 = 16384;
pub const FS_NOTAIL_FL: u32 = 32768;
pub const FS_DIRSYNC_FL: u32 = 65536;
pub const FS_TOPDIR_FL: u32 = 131072;
pub const FS_HUGE_FILE_FL: u32 = 262144;
pub const FS_EXTENT_FL: u32 = 524288;
pub const FS_VERITY_FL: u32 = 1048576;
pub const FS_EA_INODE_FL: u32 = 2097152;
pub const FS_EOFBLOCKS_FL: u32 = 4194304;
pub const FS_NOCOW_FL: u32 = 8388608;
pub const FS_DAX_FL: u32 = 33554432;
pub const FS_INLINE_DATA_FL: u32 = 268435456;
pub const FS_PROJINHERIT_FL: u32 = 536870912;
pub const FS_CASEFOLD_FL: u32 = 1073741824;
pub const FS_RESERVED_FL: u32 = 2147483648;
pub const FS_FL_USER_VISIBLE: u32 = 253951;
pub const FS_FL_USER_MODIFIABLE: u32 = 229631;
pub const SYNC_FILE_RANGE_WAIT_BEFORE: u32 = 1;
pub const SYNC_FILE_RANGE_WRITE: u32 = 2;
pub const SYNC_FILE_RANGE_WAIT_AFTER: u32 = 4;
pub const SYNC_FILE_RANGE_WRITE_AND_WAIT: u32 = 7;
pub const PROCFS_IOCTL_MAGIC: u8 = 102u8;
pub const PAGE_IS_WPALLOWED: u32 = 1;
pub const PAGE_IS_WRITTEN: u32 = 2;
pub const PAGE_IS_FILE: u32 = 4;
pub const PAGE_IS_PRESENT: u32 = 8;
pub const PAGE_IS_SWAPPED: u32 = 16;
pub const PAGE_IS_PFNZERO: u32 = 32;
pub const PAGE_IS_HUGE: u32 = 64;
pub const PAGE_IS_SOFT_DIRTY: u32 = 128;
pub const PM_SCAN_WP_MATCHING: u32 = 1;
pub const PM_SCAN_CHECK_WPASYNC: u32 = 2;
pub const MAY_EXEC: u32 = 1;
pub const MAY_WRITE: u32 = 2;
pub const MAY_READ: u32 = 4;
pub const MAY_APPEND: u32 = 8;
pub const MAY_ACCESS: u32 = 16;
pub const MAY_OPEN: u32 = 32;
pub const MAY_CHDIR: u32 = 64;
pub const MAY_NOT_BLOCK: u32 = 128;
pub const ATTR_MODE: u32 = 1;
pub const ATTR_UID: u32 = 2;
pub const ATTR_GID: u32 = 4;
pub const ATTR_SIZE: u32 = 8;
pub const ATTR_ATIME: u32 = 16;
pub const ATTR_MTIME: u32 = 32;
pub const ATTR_CTIME: u32 = 64;
pub const ATTR_ATIME_SET: u32 = 128;
pub const ATTR_MTIME_SET: u32 = 256;
pub const ATTR_FORCE: u32 = 512;
pub const ATTR_KILL_SUID: u32 = 2048;
pub const ATTR_KILL_SGID: u32 = 4096;
pub const ATTR_FILE: u32 = 8192;
pub const ATTR_KILL_PRIV: u32 = 16384;
pub const ATTR_OPEN: u32 = 32768;
pub const ATTR_TIMES_SET: u32 = 65536;
pub const ATTR_TOUCH: u32 = 131072;
pub const WHITEOUT_MODE: u32 = 0;
pub const WHITEOUT_DEV: u32 = 0;
pub const XQM_USRQUOTA: u32 = 0;
pub const XQM_GRPQUOTA: u32 = 1;
pub const XQM_PRJQUOTA: u32 = 2;
pub const XQM_MAXQUOTAS: u32 = 3;
pub const FS_DQUOT_VERSION: u32 = 1;
pub const FS_DQ_ISOFT: u32 = 1;
pub const FS_DQ_IHARD: u32 = 2;
pub const FS_DQ_BSOFT: u32 = 4;
pub const FS_DQ_BHARD: u32 = 8;
pub const FS_DQ_RTBSOFT: u32 = 16;
pub const FS_DQ_RTBHARD: u32 = 32;
pub const FS_DQ_LIMIT_MASK: u32 = 63;
pub const FS_DQ_BTIMER: u32 = 64;
pub const FS_DQ_ITIMER: u32 = 128;
pub const FS_DQ_RTBTIMER: u32 = 256;
pub const FS_DQ_TIMER_MASK: u32 = 448;
pub const FS_DQ_BWARNS: u32 = 512;
pub const FS_DQ_IWARNS: u32 = 1024;
pub const FS_DQ_RTBWARNS: u32 = 2048;
pub const FS_DQ_WARNS_MASK: u32 = 3584;
pub const FS_DQ_BCOUNT: u32 = 4096;
pub const FS_DQ_ICOUNT: u32 = 8192;
pub const FS_DQ_RTBCOUNT: u32 = 16384;
pub const FS_DQ_ACCT_MASK: u32 = 28672;
pub const FS_DQ_BIGTIME: u32 = 32768;
pub const FS_QUOTA_UDQ_ACCT: u32 = 1;
pub const FS_QUOTA_UDQ_ENFD: u32 = 2;
pub const FS_QUOTA_GDQ_ACCT: u32 = 4;
pub const FS_QUOTA_GDQ_ENFD: u32 = 8;
pub const FS_QUOTA_PDQ_ACCT: u32 = 16;
pub const FS_QUOTA_PDQ_ENFD: u32 = 32;
pub const FS_USER_QUOTA: u32 = 1;
pub const FS_PROJ_QUOTA: u32 = 2;
pub const FS_GROUP_QUOTA: u32 = 4;
pub const FS_QSTAT_VERSION: u32 = 1;
pub const FS_QSTATV_VERSION1: u32 = 1;
pub const V1_INIT_ALLOC: u32 = 1;
pub const V1_INIT_REWRITE: u32 = 1;
pub const V1_DEL_ALLOC: u32 = 0;
pub const V1_DEL_REWRITE: u32 = 2;
pub const QTREE_INIT_ALLOC: u32 = 4;
pub const QTREE_INIT_REWRITE: u32 = 2;
pub const QTREE_DEL_ALLOC: u32 = 0;
pub const QTREE_DEL_REWRITE: u32 = 6;
pub const V2_INIT_ALLOC: u32 = 4;
pub const V2_INIT_REWRITE: u32 = 2;
pub const V2_DEL_ALLOC: u32 = 0;
pub const V2_DEL_REWRITE: u32 = 6;
pub const OVERFLOW_PROJID: u32 = 65534;
pub const __DQUOT_VERSION__: &[u8; 12] = b"dquot_6.6.0\0";
pub const MAXQUOTAS: u32 = 3;
pub const USRQUOTA: u32 = 0;
pub const GRPQUOTA: u32 = 1;
pub const PRJQUOTA: u32 = 2;
pub const SUBCMDMASK: u32 = 255;
pub const SUBCMDSHIFT: u32 = 8;
pub const Q_SYNC: u32 = 8388609;
pub const Q_QUOTAON: u32 = 8388610;
pub const Q_QUOTAOFF: u32 = 8388611;
pub const Q_GETFMT: u32 = 8388612;
pub const Q_GETINFO: u32 = 8388613;
pub const Q_SETINFO: u32 = 8388614;
pub const Q_GETQUOTA: u32 = 8388615;
pub const Q_SETQUOTA: u32 = 8388616;
pub const Q_GETNEXTQUOTA: u32 = 8388617;
pub const QFMT_VFS_OLD: u32 = 1;
pub const QFMT_VFS_V0: u32 = 2;
pub const QFMT_OCFS2: u32 = 3;
pub const QFMT_VFS_V1: u32 = 4;
pub const QFMT_SHMEM: u32 = 5;
pub const QIF_DQBLKSIZE_BITS: u32 = 10;
pub const QIF_DQBLKSIZE: u32 = 1024;
pub const IIF_BGRACE: u32 = 1;
pub const IIF_IGRACE: u32 = 2;
pub const IIF_FLAGS: u32 = 4;
pub const IIF_ALL: u32 = 7;
pub const QUOTA_NL_NOWARN: u32 = 0;
pub const QUOTA_NL_IHARDWARN: u32 = 1;
pub const QUOTA_NL_ISOFTLONGWARN: u32 = 2;
pub const QUOTA_NL_ISOFTWARN: u32 = 3;
pub const QUOTA_NL_BHARDWARN: u32 = 4;
pub const QUOTA_NL_BSOFTLONGWARN: u32 = 5;
pub const QUOTA_NL_BSOFTWARN: u32 = 6;
pub const QUOTA_NL_IHARDBELOW: u32 = 7;
pub const QUOTA_NL_ISOFTBELOW: u32 = 8;
pub const QUOTA_NL_BHARDBELOW: u32 = 9;
pub const QUOTA_NL_BSOFTBELOW: u32 = 10;
pub const QTYPE_MASK_USR: u32 = 1;
pub const QTYPE_MASK_GRP: u32 = 2;
pub const QTYPE_MASK_PRJ: u32 = 4;
pub const DQ_MOD_B: u32 = 0;
pub const DQ_BLKS_B: u32 = 1;
pub const DQ_INODES_B: u32 = 2;
pub const DQ_FAKE_B: u32 = 3;
pub const DQ_READ_B: u32 = 4;
pub const DQ_ACTIVE_B: u32 = 5;
pub const DQ_RELEASING_B: u32 = 6;
pub const DQ_LASTSET_B: u32 = 7;
pub const QC_INO_SOFT: u32 = 1;
pub const QC_INO_HARD: u32 = 2;
pub const QC_SPC_SOFT: u32 = 4;
pub const QC_SPC_HARD: u32 = 8;
pub const QC_RT_SPC_SOFT: u32 = 16;
pub const QC_RT_SPC_HARD: u32 = 32;
pub const QC_LIMIT_MASK: u32 = 63;
pub const QC_SPC_TIMER: u32 = 64;
pub const QC_INO_TIMER: u32 = 128;
pub const QC_RT_SPC_TIMER: u32 = 256;
pub const QC_TIMER_MASK: u32 = 448;
pub const QC_SPC_WARNS: u32 = 512;
pub const QC_INO_WARNS: u32 = 1024;
pub const QC_RT_SPC_WARNS: u32 = 2048;
pub const QC_WARNS_MASK: u32 = 3584;
pub const QC_SPACE: u32 = 4096;
pub const QC_INO_COUNT: u32 = 8192;
pub const QC_RT_SPACE: u32 = 16384;
pub const QC_ACCT_MASK: u32 = 28672;
pub const QC_FLAGS: u32 = 32768;
pub const QCI_SYSFILE: u32 = 1;
pub const QCI_ROOT_SQUASH: u32 = 2;
pub const QCI_ACCT_ENABLED: u32 = 4;
pub const QCI_LIMITS_ENFORCED: u32 = 8;
pub const FILESYSTEM_MAX_STACK_DEPTH: u32 = 2;
pub const IOCB_EVENTFD: u32 = 65536;
pub const IOCB_DIRECT: u32 = 131072;
pub const IOCB_WRITE: u32 = 262144;
pub const IOCB_WAITQ: u32 = 524288;
pub const IOCB_NOIO: u32 = 1048576;
pub const IOCB_ALLOC_CACHE: u32 = 2097152;
pub const IOCB_DIO_CALLER_COMP: u32 = 4194304;
pub const IOCB_AIO_RW: u32 = 8388608;
pub const IOP_FASTPERM: u32 = 1;
pub const IOP_LOOKUP: u32 = 2;
pub const IOP_NOFOLLOW: u32 = 4;
pub const IOP_XATTR: u32 = 8;
pub const IOP_DEFAULT_READLINK: u32 = 16;
pub const MAX_NON_LFS: u32 = 2147483647;
pub const FASYNC_MAGIC: u32 = 17921;
pub const SB_ENC_STRICT_MODE_FL: u32 = 1;
pub const MNT_FORCE: u32 = 1;
pub const MNT_DETACH: u32 = 2;
pub const MNT_EXPIRE: u32 = 4;
pub const UMOUNT_NOFOLLOW: u32 = 8;
pub const UMOUNT_UNUSED: u32 = 2147483648;
pub const SB_I_CGROUPWB: u32 = 1;
pub const SB_I_NOEXEC: u32 = 2;
pub const SB_I_NODEV: u32 = 4;
pub const SB_I_STABLE_WRITES: u32 = 8;
pub const SB_I_USERNS_VISIBLE: u32 = 16;
pub const SB_I_IMA_UNVERIFIABLE_SIGNATURE: u32 = 32;
pub const SB_I_UNTRUSTED_MOUNTER: u32 = 64;
pub const SB_I_EVM_HMAC_UNSUPPORTED: u32 = 128;
pub const SB_I_SKIP_SYNC: u32 = 256;
pub const SB_I_PERSB_BDI: u32 = 512;
pub const SB_I_TS_EXPIRY_WARNED: u32 = 1024;
pub const SB_I_RETIRED: u32 = 2048;
pub const SB_I_NOUMASK: u32 = 4096;
pub const NOMMU_MAP_COPY: u32 = 1;
pub const NOMMU_MAP_DIRECT: u32 = 8;
pub const REMAP_FILE_DEDUP: u32 = 1;
pub const REMAP_FILE_CAN_SHORTEN: u32 = 2;
pub const REMAP_FILE_ADVISORY: u32 = 2;
pub const COPY_FILE_SPLICE: u32 = 1;
pub const S_SYNC: u32 = 1;
pub const S_NOATIME: u32 = 2;
pub const S_APPEND: u32 = 4;
pub const S_IMMUTABLE: u32 = 8;
pub const S_DEAD: u32 = 16;
pub const S_NOQUOTA: u32 = 32;
pub const S_DIRSYNC: u32 = 64;
pub const S_NOCMTIME: u32 = 128;
pub const S_SWAPFILE: u32 = 256;
pub const S_PRIVATE: u32 = 512;
pub const S_IMA: u32 = 1024;
pub const S_AUTOMOUNT: u32 = 2048;
pub const S_NOSEC: u32 = 4096;
pub const S_DAX: u32 = 0;
pub const S_ENCRYPTED: u32 = 16384;
pub const S_CASEFOLD: u32 = 32768;
pub const S_VERITY: u32 = 65536;
pub const S_KERNEL_FILE: u32 = 131072;
pub const I_DIRTY_SYNC: u32 = 1;
pub const I_DIRTY_DATASYNC: u32 = 2;
pub const I_DIRTY_PAGES: u32 = 4;
pub const __I_NEW: u32 = 3;
pub const I_NEW: u32 = 8;
pub const I_WILL_FREE: u32 = 16;
pub const I_FREEING: u32 = 32;
pub const I_CLEAR: u32 = 64;
pub const __I_SYNC: u32 = 7;
pub const I_SYNC: u32 = 128;
pub const I_REFERENCED: u32 = 256;
pub const __I_DIO_WAKEUP: u32 = 9;
pub const I_DIO_WAKEUP: u32 = 512;
pub const I_LINKABLE: u32 = 1024;
pub const I_DIRTY_TIME: u32 = 2048;
pub const I_WB_SWITCH: u32 = 8192;
pub const I_OVL_INUSE: u32 = 16384;
pub const I_CREATING: u32 = 32768;
pub const I_DONTCACHE: u32 = 65536;
pub const I_SYNC_QUEUED: u32 = 131072;
pub const I_PINNING_NETFS_WB: u32 = 262144;
pub const I_DIRTY_INODE: u32 = 3;
pub const I_DIRTY: u32 = 7;
pub const I_DIRTY_ALL: u32 = 2055;
pub const FS_REQUIRES_DEV: u32 = 1;
pub const FS_BINARY_MOUNTDATA: u32 = 2;
pub const FS_HAS_SUBTYPE: u32 = 4;
pub const FS_USERNS_MOUNT: u32 = 8;
pub const FS_DISALLOW_NOTIFY_PERM: u32 = 16;
pub const FS_ALLOW_IDMAP: u32 = 32;
pub const FS_RENAME_DOES_D_MOVE: u32 = 32768;
pub const CHRDEV_MAJOR_MAX: u32 = 512;
pub const CHRDEV_MAJOR_DYN_END: u32 = 234;
pub const CHRDEV_MAJOR_DYN_EXT_START: u32 = 511;
pub const CHRDEV_MAJOR_DYN_EXT_END: u32 = 384;
pub const IOCB_FLAG_RESFD: u32 = 1;
pub const IOCB_FLAG_IOPRIO: u32 = 2;
pub const _ASM_X86_UNISTD_H: u32 = 1;
pub const __X32_SYSCALL_BIT: u32 = 1073741824;
pub const __NR_read: u32 = 0;
pub const __NR_write: u32 = 1;
pub const __NR_open: u32 = 2;
pub const __NR_close: u32 = 3;
pub const __NR_stat: u32 = 4;
pub const __NR_fstat: u32 = 5;
pub const __NR_lstat: u32 = 6;
pub const __NR_poll: u32 = 7;
pub const __NR_lseek: u32 = 8;
pub const __NR_mmap: u32 = 9;
pub const __NR_mprotect: u32 = 10;
pub const __NR_munmap: u32 = 11;
pub const __NR_brk: u32 = 12;
pub const __NR_rt_sigaction: u32 = 13;
pub const __NR_rt_sigprocmask: u32 = 14;
pub const __NR_rt_sigreturn: u32 = 15;
pub const __NR_ioctl: u32 = 16;
pub const __NR_pread64: u32 = 17;
pub const __NR_pwrite64: u32 = 18;
pub const __NR_readv: u32 = 19;
pub const __NR_writev: u32 = 20;
pub const __NR_access: u32 = 21;
pub const __NR_pipe: u32 = 22;
pub const __NR_select: u32 = 23;
pub const __NR_sched_yield: u32 = 24;
pub const __NR_mremap: u32 = 25;
pub const __NR_msync: u32 = 26;
pub const __NR_mincore: u32 = 27;
pub const __NR_madvise: u32 = 28;
pub const __NR_shmget: u32 = 29;
pub const __NR_shmat: u32 = 30;
pub const __NR_shmctl: u32 = 31;
pub const __NR_dup: u32 = 32;
pub const __NR_dup2: u32 = 33;
pub const __NR_pause: u32 = 34;
pub const __NR_nanosleep: u32 = 35;
pub const __NR_getitimer: u32 = 36;
pub const __NR_alarm: u32 = 37;
pub const __NR_setitimer: u32 = 38;
pub const __NR_getpid: u32 = 39;
pub const __NR_sendfile: u32 = 40;
pub const __NR_socket: u32 = 41;
pub const __NR_connect: u32 = 42;
pub const __NR_accept: u32 = 43;
pub const __NR_sendto: u32 = 44;
pub const __NR_recvfrom: u32 = 45;
pub const __NR_sendmsg: u32 = 46;
pub const __NR_recvmsg: u32 = 47;
pub const __NR_shutdown: u32 = 48;
pub const __NR_bind: u32 = 49;
pub const __NR_listen: u32 = 50;
pub const __NR_getsockname: u32 = 51;
pub const __NR_getpeername: u32 = 52;
pub const __NR_socketpair: u32 = 53;
pub const __NR_setsockopt: u32 = 54;
pub const __NR_getsockopt: u32 = 55;
pub const __NR_clone: u32 = 56;
pub const __NR_fork: u32 = 57;
pub const __NR_vfork: u32 = 58;
pub const __NR_execve: u32 = 59;
pub const __NR_exit: u32 = 60;
pub const __NR_wait4: u32 = 61;
pub const __NR_kill: u32 = 62;
pub const __NR_uname: u32 = 63;
pub const __NR_semget: u32 = 64;
pub const __NR_semop: u32 = 65;
pub const __NR_semctl: u32 = 66;
pub const __NR_shmdt: u32 = 67;
pub const __NR_msgget: u32 = 68;
pub const __NR_msgsnd: u32 = 69;
pub const __NR_msgrcv: u32 = 70;
pub const __NR_msgctl: u32 = 71;
pub const __NR_fcntl: u32 = 72;
pub const __NR_flock: u32 = 73;
pub const __NR_fsync: u32 = 74;
pub const __NR_fdatasync: u32 = 75;
pub const __NR_truncate: u32 = 76;
pub const __NR_ftruncate: u32 = 77;
pub const __NR_getdents: u32 = 78;
pub const __NR_getcwd: u32 = 79;
pub const __NR_chdir: u32 = 80;
pub const __NR_fchdir: u32 = 81;
pub const __NR_rename: u32 = 82;
pub const __NR_mkdir: u32 = 83;
pub const __NR_rmdir: u32 = 84;
pub const __NR_creat: u32 = 85;
pub const __NR_link: u32 = 86;
pub const __NR_unlink: u32 = 87;
pub const __NR_symlink: u32 = 88;
pub const __NR_readlink: u32 = 89;
pub const __NR_chmod: u32 = 90;
pub const __NR_fchmod: u32 = 91;
pub const __NR_chown: u32 = 92;
pub const __NR_fchown: u32 = 93;
pub const __NR_lchown: u32 = 94;
pub const __NR_umask: u32 = 95;
pub const __NR_gettimeofday: u32 = 96;
pub const __NR_getrlimit: u32 = 97;
pub const __NR_getrusage: u32 = 98;
pub const __NR_sysinfo: u32 = 99;
pub const __NR_times: u32 = 100;
pub const __NR_ptrace: u32 = 101;
pub const __NR_getuid: u32 = 102;
pub const __NR_syslog: u32 = 103;
pub const __NR_getgid: u32 = 104;
pub const __NR_setuid: u32 = 105;
pub const __NR_setgid: u32 = 106;
pub const __NR_geteuid: u32 = 107;
pub const __NR_getegid: u32 = 108;
pub const __NR_setpgid: u32 = 109;
pub const __NR_getppid: u32 = 110;
pub const __NR_getpgrp: u32 = 111;
pub const __NR_setsid: u32 = 112;
pub const __NR_setreuid: u32 = 113;
pub const __NR_setregid: u32 = 114;
pub const __NR_getgroups: u32 = 115;
pub const __NR_setgroups: u32 = 116;
pub const __NR_setresuid: u32 = 117;
pub const __NR_getresuid: u32 = 118;
pub const __NR_setresgid: u32 = 119;
pub const __NR_getresgid: u32 = 120;
pub const __NR_getpgid: u32 = 121;
pub const __NR_setfsuid: u32 = 122;
pub const __NR_setfsgid: u32 = 123;
pub const __NR_getsid: u32 = 124;
pub const __NR_capget: u32 = 125;
pub const __NR_capset: u32 = 126;
pub const __NR_rt_sigpending: u32 = 127;
pub const __NR_rt_sigtimedwait: u32 = 128;
pub const __NR_rt_sigqueueinfo: u32 = 129;
pub const __NR_rt_sigsuspend: u32 = 130;
pub const __NR_sigaltstack: u32 = 131;
pub const __NR_utime: u32 = 132;
pub const __NR_mknod: u32 = 133;
pub const __NR_uselib: u32 = 134;
pub const __NR_personality: u32 = 135;
pub const __NR_ustat: u32 = 136;
pub const __NR_statfs: u32 = 137;
pub const __NR_fstatfs: u32 = 138;
pub const __NR_sysfs: u32 = 139;
pub const __NR_getpriority: u32 = 140;
pub const __NR_setpriority: u32 = 141;
pub const __NR_sched_setparam: u32 = 142;
pub const __NR_sched_getparam: u32 = 143;
pub const __NR_sched_setscheduler: u32 = 144;
pub const __NR_sched_getscheduler: u32 = 145;
pub const __NR_sched_get_priority_max: u32 = 146;
pub const __NR_sched_get_priority_min: u32 = 147;
pub const __NR_sched_rr_get_interval: u32 = 148;
pub const __NR_mlock: u32 = 149;
pub const __NR_munlock: u32 = 150;
pub const __NR_mlockall: u32 = 151;
pub const __NR_munlockall: u32 = 152;
pub const __NR_vhangup: u32 = 153;
pub const __NR_modify_ldt: u32 = 154;
pub const __NR_pivot_root: u32 = 155;
pub const __NR__sysctl: u32 = 156;
pub const __NR_prctl: u32 = 157;
pub const __NR_arch_prctl: u32 = 158;
pub const __NR_adjtimex: u32 = 159;
pub const __NR_setrlimit: u32 = 160;
pub const __NR_chroot: u32 = 161;
pub const __NR_sync: u32 = 162;
pub const __NR_acct: u32 = 163;
pub const __NR_settimeofday: u32 = 164;
pub const __NR_mount: u32 = 165;
pub const __NR_umount2: u32 = 166;
pub const __NR_swapon: u32 = 167;
pub const __NR_swapoff: u32 = 168;
pub const __NR_reboot: u32 = 169;
pub const __NR_sethostname: u32 = 170;
pub const __NR_setdomainname: u32 = 171;
pub const __NR_iopl: u32 = 172;
pub const __NR_ioperm: u32 = 173;
pub const __NR_create_module: u32 = 174;
pub const __NR_init_module: u32 = 175;
pub const __NR_delete_module: u32 = 176;
pub const __NR_get_kernel_syms: u32 = 177;
pub const __NR_query_module: u32 = 178;
pub const __NR_quotactl: u32 = 179;
pub const __NR_nfsservctl: u32 = 180;
pub const __NR_getpmsg: u32 = 181;
pub const __NR_putpmsg: u32 = 182;
pub const __NR_afs_syscall: u32 = 183;
pub const __NR_tuxcall: u32 = 184;
pub const __NR_security: u32 = 185;
pub const __NR_gettid: u32 = 186;
pub const __NR_readahead: u32 = 187;
pub const __NR_setxattr: u32 = 188;
pub const __NR_lsetxattr: u32 = 189;
pub const __NR_fsetxattr: u32 = 190;
pub const __NR_getxattr: u32 = 191;
pub const __NR_lgetxattr: u32 = 192;
pub const __NR_fgetxattr: u32 = 193;
pub const __NR_listxattr: u32 = 194;
pub const __NR_llistxattr: u32 = 195;
pub const __NR_flistxattr: u32 = 196;
pub const __NR_removexattr: u32 = 197;
pub const __NR_lremovexattr: u32 = 198;
pub const __NR_fremovexattr: u32 = 199;
pub const __NR_tkill: u32 = 200;
pub const __NR_time: u32 = 201;
pub const __NR_futex: u32 = 202;
pub const __NR_sched_setaffinity: u32 = 203;
pub const __NR_sched_getaffinity: u32 = 204;
pub const __NR_set_thread_area: u32 = 205;
pub const __NR_io_setup: u32 = 206;
pub const __NR_io_destroy: u32 = 207;
pub const __NR_io_getevents: u32 = 208;
pub const __NR_io_submit: u32 = 209;
pub const __NR_io_cancel: u32 = 210;
pub const __NR_get_thread_area: u32 = 211;
pub const __NR_lookup_dcookie: u32 = 212;
pub const __NR_epoll_create: u32 = 213;
pub const __NR_epoll_ctl_old: u32 = 214;
pub const __NR_epoll_wait_old: u32 = 215;
pub const __NR_remap_file_pages: u32 = 216;
pub const __NR_getdents64: u32 = 217;
pub const __NR_set_tid_address: u32 = 218;
pub const __NR_restart_syscall: u32 = 219;
pub const __NR_semtimedop: u32 = 220;
pub const __NR_fadvise64: u32 = 221;
pub const __NR_timer_create: u32 = 222;
pub const __NR_timer_settime: u32 = 223;
pub const __NR_timer_gettime: u32 = 224;
pub const __NR_timer_getoverrun: u32 = 225;
pub const __NR_timer_delete: u32 = 226;
pub const __NR_clock_settime: u32 = 227;
pub const __NR_clock_gettime: u32 = 228;
pub const __NR_clock_getres: u32 = 229;
pub const __NR_clock_nanosleep: u32 = 230;
pub const __NR_exit_group: u32 = 231;
pub const __NR_epoll_wait: u32 = 232;
pub const __NR_epoll_ctl: u32 = 233;
pub const __NR_tgkill: u32 = 234;
pub const __NR_utimes: u32 = 235;
pub const __NR_vserver: u32 = 236;
pub const __NR_mbind: u32 = 237;
pub const __NR_set_mempolicy: u32 = 238;
pub const __NR_get_mempolicy: u32 = 239;
pub const __NR_mq_open: u32 = 240;
pub const __NR_mq_unlink: u32 = 241;
pub const __NR_mq_timedsend: u32 = 242;
pub const __NR_mq_timedreceive: u32 = 243;
pub const __NR_mq_notify: u32 = 244;
pub const __NR_mq_getsetattr: u32 = 245;
pub const __NR_kexec_load: u32 = 246;
pub const __NR_waitid: u32 = 247;
pub const __NR_add_key: u32 = 248;
pub const __NR_request_key: u32 = 249;
pub const __NR_keyctl: u32 = 250;
pub const __NR_ioprio_set: u32 = 251;
pub const __NR_ioprio_get: u32 = 252;
pub const __NR_inotify_init: u32 = 253;
pub const __NR_inotify_add_watch: u32 = 254;
pub const __NR_inotify_rm_watch: u32 = 255;
pub const __NR_migrate_pages: u32 = 256;
pub const __NR_openat: u32 = 257;
pub const __NR_mkdirat: u32 = 258;
pub const __NR_mknodat: u32 = 259;
pub const __NR_fchownat: u32 = 260;
pub const __NR_futimesat: u32 = 261;
pub const __NR_newfstatat: u32 = 262;
pub const __NR_unlinkat: u32 = 263;
pub const __NR_renameat: u32 = 264;
pub const __NR_linkat: u32 = 265;
pub const __NR_symlinkat: u32 = 266;
pub const __NR_readlinkat: u32 = 267;
pub const __NR_fchmodat: u32 = 268;
pub const __NR_faccessat: u32 = 269;
pub const __NR_pselect6: u32 = 270;
pub const __NR_ppoll: u32 = 271;
pub const __NR_unshare: u32 = 272;
pub const __NR_set_robust_list: u32 = 273;
pub const __NR_get_robust_list: u32 = 274;
pub const __NR_splice: u32 = 275;
pub const __NR_tee: u32 = 276;
pub const __NR_sync_file_range: u32 = 277;
pub const __NR_vmsplice: u32 = 278;
pub const __NR_move_pages: u32 = 279;
pub const __NR_utimensat: u32 = 280;
pub const __NR_epoll_pwait: u32 = 281;
pub const __NR_signalfd: u32 = 282;
pub const __NR_timerfd_create: u32 = 283;
pub const __NR_eventfd: u32 = 284;
pub const __NR_fallocate: u32 = 285;
pub const __NR_timerfd_settime: u32 = 286;
pub const __NR_timerfd_gettime: u32 = 287;
pub const __NR_accept4: u32 = 288;
pub const __NR_signalfd4: u32 = 289;
pub const __NR_eventfd2: u32 = 290;
pub const __NR_epoll_create1: u32 = 291;
pub const __NR_dup3: u32 = 292;
pub const __NR_pipe2: u32 = 293;
pub const __NR_inotify_init1: u32 = 294;
pub const __NR_preadv: u32 = 295;
pub const __NR_pwritev: u32 = 296;
pub const __NR_rt_tgsigqueueinfo: u32 = 297;
pub const __NR_perf_event_open: u32 = 298;
pub const __NR_recvmmsg: u32 = 299;
pub const __NR_fanotify_init: u32 = 300;
pub const __NR_fanotify_mark: u32 = 301;
pub const __NR_prlimit64: u32 = 302;
pub const __NR_name_to_handle_at: u32 = 303;
pub const __NR_open_by_handle_at: u32 = 304;
pub const __NR_clock_adjtime: u32 = 305;
pub const __NR_syncfs: u32 = 306;
pub const __NR_sendmmsg: u32 = 307;
pub const __NR_setns: u32 = 308;
pub const __NR_getcpu: u32 = 309;
pub const __NR_process_vm_readv: u32 = 310;
pub const __NR_process_vm_writev: u32 = 311;
pub const __NR_kcmp: u32 = 312;
pub const __NR_finit_module: u32 = 313;
pub const __NR_sched_setattr: u32 = 314;
pub const __NR_sched_getattr: u32 = 315;
pub const __NR_renameat2: u32 = 316;
pub const __NR_seccomp: u32 = 317;
pub const __NR_getrandom: u32 = 318;
pub const __NR_memfd_create: u32 = 319;
pub const __NR_kexec_file_load: u32 = 320;
pub const __NR_bpf: u32 = 321;
pub const __NR_execveat: u32 = 322;
pub const __NR_userfaultfd: u32 = 323;
pub const __NR_membarrier: u32 = 324;
pub const __NR_mlock2: u32 = 325;
pub const __NR_copy_file_range: u32 = 326;
pub const __NR_preadv2: u32 = 327;
pub const __NR_pwritev2: u32 = 328;
pub const __NR_pkey_mprotect: u32 = 329;
pub const __NR_pkey_alloc: u32 = 330;
pub const __NR_pkey_free: u32 = 331;
pub const __NR_statx: u32 = 332;
pub const __NR_io_pgetevents: u32 = 333;
pub const __NR_rseq: u32 = 334;
pub const __NR_pidfd_send_signal: u32 = 424;
pub const __NR_io_uring_setup: u32 = 425;
pub const __NR_io_uring_enter: u32 = 426;
pub const __NR_io_uring_register: u32 = 427;
pub const __NR_open_tree: u32 = 428;
pub const __NR_move_mount: u32 = 429;
pub const __NR_fsopen: u32 = 430;
pub const __NR_fsconfig: u32 = 431;
pub const __NR_fsmount: u32 = 432;
pub const __NR_fspick: u32 = 433;
pub const __NR_pidfd_open: u32 = 434;
pub const __NR_clone3: u32 = 435;
pub const __NR_close_range: u32 = 436;
pub const __NR_openat2: u32 = 437;
pub const __NR_pidfd_getfd: u32 = 438;
pub const __NR_faccessat2: u32 = 439;
pub const __NR_process_madvise: u32 = 440;
pub const __NR_epoll_pwait2: u32 = 441;
pub const __NR_mount_setattr: u32 = 442;
pub const __NR_quotactl_fd: u32 = 443;
pub const __NR_landlock_create_ruleset: u32 = 444;
pub const __NR_landlock_add_rule: u32 = 445;
pub const __NR_landlock_restrict_self: u32 = 446;
pub const __NR_memfd_secret: u32 = 447;
pub const __NR_process_mrelease: u32 = 448;
pub const __NR_futex_waitv: u32 = 449;
pub const __NR_set_mempolicy_home_node: u32 = 450;
pub const __NR_cachestat: u32 = 451;
pub const __NR_fchmodat2: u32 = 452;
pub const __NR_map_shadow_stack: u32 = 453;
pub const __NR_futex_wake: u32 = 454;
pub const __NR_futex_wait: u32 = 455;
pub const __NR_futex_requeue: u32 = 456;
pub const __NR_statmount: u32 = 457;
pub const __NR_listmount: u32 = 458;
pub const __NR_lsm_get_self_attr: u32 = 459;
pub const __NR_lsm_set_self_attr: u32 = 460;
pub const __NR_lsm_list_modules: u32 = 461;
pub const __NR_mseal: u32 = 462;
pub const __NR_uretprobe: u32 = 467;
pub const __NR_syscalls: u32 = 468;
pub const __NR_x32_rt_sigaction: u32 = 512;
pub const __NR_x32_rt_sigreturn: u32 = 513;
pub const __NR_x32_ioctl: u32 = 514;
pub const __NR_x32_readv: u32 = 515;
pub const __NR_x32_writev: u32 = 516;
pub const __NR_x32_recvfrom: u32 = 517;
pub const __NR_x32_sendmsg: u32 = 518;
pub const __NR_x32_recvmsg: u32 = 519;
pub const __NR_x32_execve: u32 = 520;
pub const __NR_x32_ptrace: u32 = 521;
pub const __NR_x32_rt_sigpending: u32 = 522;
pub const __NR_x32_rt_sigtimedwait: u32 = 523;
pub const __NR_x32_rt_sigqueueinfo: u32 = 524;
pub const __NR_x32_sigaltstack: u32 = 525;
pub const __NR_x32_timer_create: u32 = 526;
pub const __NR_x32_mq_notify: u32 = 527;
pub const __NR_x32_kexec_load: u32 = 528;
pub const __NR_x32_waitid: u32 = 529;
pub const __NR_x32_set_robust_list: u32 = 530;
pub const __NR_x32_get_robust_list: u32 = 531;
pub const __NR_x32_vmsplice: u32 = 532;
pub const __NR_x32_move_pages: u32 = 533;
pub const __NR_x32_preadv: u32 = 534;
pub const __NR_x32_pwritev: u32 = 535;
pub const __NR_x32_rt_tgsigqueueinfo: u32 = 536;
pub const __NR_x32_recvmmsg: u32 = 537;
pub const __NR_x32_sendmmsg: u32 = 538;
pub const __NR_x32_process_vm_readv: u32 = 539;
pub const __NR_x32_process_vm_writev: u32 = 540;
pub const __NR_x32_setsockopt: u32 = 541;
pub const __NR_x32_getsockopt: u32 = 542;
pub const __NR_x32_io_setup: u32 = 543;
pub const __NR_x32_io_submit: u32 = 544;
pub const __NR_x32_execveat: u32 = 545;
pub const __NR_x32_preadv2: u32 = 546;
pub const __NR_x32_pwritev2: u32 = 547;
pub const __NR_x32_syscalls: u32 = 548;
pub const __NR_ia32_restart_syscall: u32 = 0;
pub const __NR_ia32_exit: u32 = 1;
pub const __NR_ia32_fork: u32 = 2;
pub const __NR_ia32_read: u32 = 3;
pub const __NR_ia32_write: u32 = 4;
pub const __NR_ia32_open: u32 = 5;
pub const __NR_ia32_close: u32 = 6;
pub const __NR_ia32_waitpid: u32 = 7;
pub const __NR_ia32_creat: u32 = 8;
pub const __NR_ia32_link: u32 = 9;
pub const __NR_ia32_unlink: u32 = 10;
pub const __NR_ia32_execve: u32 = 11;
pub const __NR_ia32_chdir: u32 = 12;
pub const __NR_ia32_time: u32 = 13;
pub const __NR_ia32_mknod: u32 = 14;
pub const __NR_ia32_chmod: u32 = 15;
pub const __NR_ia32_lchown: u32 = 16;
pub const __NR_ia32_break: u32 = 17;
pub const __NR_ia32_oldstat: u32 = 18;
pub const __NR_ia32_lseek: u32 = 19;
pub const __NR_ia32_getpid: u32 = 20;
pub const __NR_ia32_mount: u32 = 21;
pub const __NR_ia32_umount: u32 = 22;
pub const __NR_ia32_setuid: u32 = 23;
pub const __NR_ia32_getuid: u32 = 24;
pub const __NR_ia32_stime: u32 = 25;
pub const __NR_ia32_ptrace: u32 = 26;
pub const __NR_ia32_alarm: u32 = 27;
pub const __NR_ia32_oldfstat: u32 = 28;
pub const __NR_ia32_pause: u32 = 29;
pub const __NR_ia32_utime: u32 = 30;
pub const __NR_ia32_stty: u32 = 31;
pub const __NR_ia32_gtty: u32 = 32;
pub const __NR_ia32_access: u32 = 33;
pub const __NR_ia32_nice: u32 = 34;
pub const __NR_ia32_ftime: u32 = 35;
pub const __NR_ia32_sync: u32 = 36;
pub const __NR_ia32_kill: u32 = 37;
pub const __NR_ia32_rename: u32 = 38;
pub const __NR_ia32_mkdir: u32 = 39;
pub const __NR_ia32_rmdir: u32 = 40;
pub const __NR_ia32_dup: u32 = 41;
pub const __NR_ia32_pipe: u32 = 42;
pub const __NR_ia32_times: u32 = 43;
pub const __NR_ia32_prof: u32 = 44;
pub const __NR_ia32_brk: u32 = 45;
pub const __NR_ia32_setgid: u32 = 46;
pub const __NR_ia32_getgid: u32 = 47;
pub const __NR_ia32_signal: u32 = 48;
pub const __NR_ia32_geteuid: u32 = 49;
pub const __NR_ia32_getegid: u32 = 50;
pub const __NR_ia32_acct: u32 = 51;
pub const __NR_ia32_umount2: u32 = 52;
pub const __NR_ia32_lock: u32 = 53;
pub const __NR_ia32_ioctl: u32 = 54;
pub const __NR_ia32_fcntl: u32 = 55;
pub const __NR_ia32_mpx: u32 = 56;
pub const __NR_ia32_setpgid: u32 = 57;
pub const __NR_ia32_ulimit: u32 = 58;
pub const __NR_ia32_oldolduname: u32 = 59;
pub const __NR_ia32_umask: u32 = 60;
pub const __NR_ia32_chroot: u32 = 61;
pub const __NR_ia32_ustat: u32 = 62;
pub const __NR_ia32_dup2: u32 = 63;
pub const __NR_ia32_getppid: u32 = 64;
pub const __NR_ia32_getpgrp: u32 = 65;
pub const __NR_ia32_setsid: u32 = 66;
pub const __NR_ia32_sigaction: u32 = 67;
pub const __NR_ia32_sgetmask: u32 = 68;
pub const __NR_ia32_ssetmask: u32 = 69;
pub const __NR_ia32_setreuid: u32 = 70;
pub const __NR_ia32_setregid: u32 = 71;
pub const __NR_ia32_sigsuspend: u32 = 72;
pub const __NR_ia32_sigpending: u32 = 73;
pub const __NR_ia32_sethostname: u32 = 74;
pub const __NR_ia32_setrlimit: u32 = 75;
pub const __NR_ia32_getrlimit: u32 = 76;
pub const __NR_ia32_getrusage: u32 = 77;
pub const __NR_ia32_gettimeofday: u32 = 78;
pub const __NR_ia32_settimeofday: u32 = 79;
pub const __NR_ia32_getgroups: u32 = 80;
pub const __NR_ia32_setgroups: u32 = 81;
pub const __NR_ia32_select: u32 = 82;
pub const __NR_ia32_symlink: u32 = 83;
pub const __NR_ia32_oldlstat: u32 = 84;
pub const __NR_ia32_readlink: u32 = 85;
pub const __NR_ia32_uselib: u32 = 86;
pub const __NR_ia32_swapon: u32 = 87;
pub const __NR_ia32_reboot: u32 = 88;
pub const __NR_ia32_readdir: u32 = 89;
pub const __NR_ia32_mmap: u32 = 90;
pub const __NR_ia32_munmap: u32 = 91;
pub const __NR_ia32_truncate: u32 = 92;
pub const __NR_ia32_ftruncate: u32 = 93;
pub const __NR_ia32_fchmod: u32 = 94;
pub const __NR_ia32_fchown: u32 = 95;
pub const __NR_ia32_getpriority: u32 = 96;
pub const __NR_ia32_setpriority: u32 = 97;
pub const __NR_ia32_profil: u32 = 98;
pub const __NR_ia32_statfs: u32 = 99;
pub const __NR_ia32_fstatfs: u32 = 100;
pub const __NR_ia32_ioperm: u32 = 101;
pub const __NR_ia32_socketcall: u32 = 102;
pub const __NR_ia32_syslog: u32 = 103;
pub const __NR_ia32_setitimer: u32 = 104;
pub const __NR_ia32_getitimer: u32 = 105;
pub const __NR_ia32_stat: u32 = 106;
pub const __NR_ia32_lstat: u32 = 107;
pub const __NR_ia32_fstat: u32 = 108;
pub const __NR_ia32_olduname: u32 = 109;
pub const __NR_ia32_iopl: u32 = 110;
pub const __NR_ia32_vhangup: u32 = 111;
pub const __NR_ia32_idle: u32 = 112;
pub const __NR_ia32_vm86old: u32 = 113;
pub const __NR_ia32_wait4: u32 = 114;
pub const __NR_ia32_swapoff: u32 = 115;
pub const __NR_ia32_sysinfo: u32 = 116;
pub const __NR_ia32_ipc: u32 = 117;
pub const __NR_ia32_fsync: u32 = 118;
pub const __NR_ia32_sigreturn: u32 = 119;
pub const __NR_ia32_clone: u32 = 120;
pub const __NR_ia32_setdomainname: u32 = 121;
pub const __NR_ia32_uname: u32 = 122;
pub const __NR_ia32_modify_ldt: u32 = 123;
pub const __NR_ia32_adjtimex: u32 = 124;
pub const __NR_ia32_mprotect: u32 = 125;
pub const __NR_ia32_sigprocmask: u32 = 126;
pub const __NR_ia32_create_module: u32 = 127;
pub const __NR_ia32_init_module: u32 = 128;
pub const __NR_ia32_delete_module: u32 = 129;
pub const __NR_ia32_get_kernel_syms: u32 = 130;
pub const __NR_ia32_quotactl: u32 = 131;
pub const __NR_ia32_getpgid: u32 = 132;
pub const __NR_ia32_fchdir: u32 = 133;
pub const __NR_ia32_bdflush: u32 = 134;
pub const __NR_ia32_sysfs: u32 = 135;
pub const __NR_ia32_personality: u32 = 136;
pub const __NR_ia32_afs_syscall: u32 = 137;
pub const __NR_ia32_setfsuid: u32 = 138;
pub const __NR_ia32_setfsgid: u32 = 139;
pub const __NR_ia32__llseek: u32 = 140;
pub const __NR_ia32_getdents: u32 = 141;
pub const __NR_ia32__newselect: u32 = 142;
pub const __NR_ia32_flock: u32 = 143;
pub const __NR_ia32_msync: u32 = 144;
pub const __NR_ia32_readv: u32 = 145;
pub const __NR_ia32_writev: u32 = 146;
pub const __NR_ia32_getsid: u32 = 147;
pub const __NR_ia32_fdatasync: u32 = 148;
pub const __NR_ia32__sysctl: u32 = 149;
pub const __NR_ia32_mlock: u32 = 150;
pub const __NR_ia32_munlock: u32 = 151;
pub const __NR_ia32_mlockall: u32 = 152;
pub const __NR_ia32_munlockall: u32 = 153;
pub const __NR_ia32_sched_setparam: u32 = 154;
pub const __NR_ia32_sched_getparam: u32 = 155;
pub const __NR_ia32_sched_setscheduler: u32 = 156;
pub const __NR_ia32_sched_getscheduler: u32 = 157;
pub const __NR_ia32_sched_yield: u32 = 158;
pub const __NR_ia32_sched_get_priority_max: u32 = 159;
pub const __NR_ia32_sched_get_priority_min: u32 = 160;
pub const __NR_ia32_sched_rr_get_interval: u32 = 161;
pub const __NR_ia32_nanosleep: u32 = 162;
pub const __NR_ia32_mremap: u32 = 163;
pub const __NR_ia32_setresuid: u32 = 164;
pub const __NR_ia32_getresuid: u32 = 165;
pub const __NR_ia32_vm86: u32 = 166;
pub const __NR_ia32_query_module: u32 = 167;
pub const __NR_ia32_poll: u32 = 168;
pub const __NR_ia32_nfsservctl: u32 = 169;
pub const __NR_ia32_setresgid: u32 = 170;
pub const __NR_ia32_getresgid: u32 = 171;
pub const __NR_ia32_prctl: u32 = 172;
pub const __NR_ia32_rt_sigreturn: u32 = 173;
pub const __NR_ia32_rt_sigaction: u32 = 174;
pub const __NR_ia32_rt_sigprocmask: u32 = 175;
pub const __NR_ia32_rt_sigpending: u32 = 176;
pub const __NR_ia32_rt_sigtimedwait: u32 = 177;
pub const __NR_ia32_rt_sigqueueinfo: u32 = 178;
pub const __NR_ia32_rt_sigsuspend: u32 = 179;
pub const __NR_ia32_pread64: u32 = 180;
pub const __NR_ia32_pwrite64: u32 = 181;
pub const __NR_ia32_chown: u32 = 182;
pub const __NR_ia32_getcwd: u32 = 183;
pub const __NR_ia32_capget: u32 = 184;
pub const __NR_ia32_capset: u32 = 185;
pub const __NR_ia32_sigaltstack: u32 = 186;
pub const __NR_ia32_sendfile: u32 = 187;
pub const __NR_ia32_getpmsg: u32 = 188;
pub const __NR_ia32_putpmsg: u32 = 189;
pub const __NR_ia32_vfork: u32 = 190;
pub const __NR_ia32_ugetrlimit: u32 = 191;
pub const __NR_ia32_mmap2: u32 = 192;
pub const __NR_ia32_truncate64: u32 = 193;
pub const __NR_ia32_ftruncate64: u32 = 194;
pub const __NR_ia32_stat64: u32 = 195;
pub const __NR_ia32_lstat64: u32 = 196;
pub const __NR_ia32_fstat64: u32 = 197;
pub const __NR_ia32_lchown32: u32 = 198;
pub const __NR_ia32_getuid32: u32 = 199;
pub const __NR_ia32_getgid32: u32 = 200;
pub const __NR_ia32_geteuid32: u32 = 201;
pub const __NR_ia32_getegid32: u32 = 202;
pub const __NR_ia32_setreuid32: u32 = 203;
pub const __NR_ia32_setregid32: u32 = 204;
pub const __NR_ia32_getgroups32: u32 = 205;
pub const __NR_ia32_setgroups32: u32 = 206;
pub const __NR_ia32_fchown32: u32 = 207;
pub const __NR_ia32_setresuid32: u32 = 208;
pub const __NR_ia32_getresuid32: u32 = 209;
pub const __NR_ia32_setresgid32: u32 = 210;
pub const __NR_ia32_getresgid32: u32 = 211;
pub const __NR_ia32_chown32: u32 = 212;
pub const __NR_ia32_setuid32: u32 = 213;
pub const __NR_ia32_setgid32: u32 = 214;
pub const __NR_ia32_setfsuid32: u32 = 215;
pub const __NR_ia32_setfsgid32: u32 = 216;
pub const __NR_ia32_pivot_root: u32 = 217;
pub const __NR_ia32_mincore: u32 = 218;
pub const __NR_ia32_madvise: u32 = 219;
pub const __NR_ia32_getdents64: u32 = 220;
pub const __NR_ia32_fcntl64: u32 = 221;
pub const __NR_ia32_gettid: u32 = 224;
pub const __NR_ia32_readahead: u32 = 225;
pub const __NR_ia32_setxattr: u32 = 226;
pub const __NR_ia32_lsetxattr: u32 = 227;
pub const __NR_ia32_fsetxattr: u32 = 228;
pub const __NR_ia32_getxattr: u32 = 229;
pub const __NR_ia32_lgetxattr: u32 = 230;
pub const __NR_ia32_fgetxattr: u32 = 231;
pub const __NR_ia32_listxattr: u32 = 232;
pub const __NR_ia32_llistxattr: u32 = 233;
pub const __NR_ia32_flistxattr: u32 = 234;
pub const __NR_ia32_removexattr: u32 = 235;
pub const __NR_ia32_lremovexattr: u32 = 236;
pub const __NR_ia32_fremovexattr: u32 = 237;
pub const __NR_ia32_tkill: u32 = 238;
pub const __NR_ia32_sendfile64: u32 = 239;
pub const __NR_ia32_futex: u32 = 240;
pub const __NR_ia32_sched_setaffinity: u32 = 241;
pub const __NR_ia32_sched_getaffinity: u32 = 242;
pub const __NR_ia32_set_thread_area: u32 = 243;
pub const __NR_ia32_get_thread_area: u32 = 244;
pub const __NR_ia32_io_setup: u32 = 245;
pub const __NR_ia32_io_destroy: u32 = 246;
pub const __NR_ia32_io_getevents: u32 = 247;
pub const __NR_ia32_io_submit: u32 = 248;
pub const __NR_ia32_io_cancel: u32 = 249;
pub const __NR_ia32_fadvise64: u32 = 250;
pub const __NR_ia32_exit_group: u32 = 252;
pub const __NR_ia32_lookup_dcookie: u32 = 253;
pub const __NR_ia32_epoll_create: u32 = 254;
pub const __NR_ia32_epoll_ctl: u32 = 255;
pub const __NR_ia32_epoll_wait: u32 = 256;
pub const __NR_ia32_remap_file_pages: u32 = 257;
pub const __NR_ia32_set_tid_address: u32 = 258;
pub const __NR_ia32_timer_create: u32 = 259;
pub const __NR_ia32_timer_settime: u32 = 260;
pub const __NR_ia32_timer_gettime: u32 = 261;
pub const __NR_ia32_timer_getoverrun: u32 = 262;
pub const __NR_ia32_timer_delete: u32 = 263;
pub const __NR_ia32_clock_settime: u32 = 264;
pub const __NR_ia32_clock_gettime: u32 = 265;
pub const __NR_ia32_clock_getres: u32 = 266;
pub const __NR_ia32_clock_nanosleep: u32 = 267;
pub const __NR_ia32_statfs64: u32 = 268;
pub const __NR_ia32_fstatfs64: u32 = 269;
pub const __NR_ia32_tgkill: u32 = 270;
pub const __NR_ia32_utimes: u32 = 271;
pub const __NR_ia32_fadvise64_64: u32 = 272;
pub const __NR_ia32_vserver: u32 = 273;
pub const __NR_ia32_mbind: u32 = 274;
pub const __NR_ia32_get_mempolicy: u32 = 275;
pub const __NR_ia32_set_mempolicy: u32 = 276;
pub const __NR_ia32_mq_open: u32 = 277;
pub const __NR_ia32_mq_unlink: u32 = 278;
pub const __NR_ia32_mq_timedsend: u32 = 279;
pub const __NR_ia32_mq_timedreceive: u32 = 280;
pub const __NR_ia32_mq_notify: u32 = 281;
pub const __NR_ia32_mq_getsetattr: u32 = 282;
pub const __NR_ia32_kexec_load: u32 = 283;
pub const __NR_ia32_waitid: u32 = 284;
pub const __NR_ia32_add_key: u32 = 286;
pub const __NR_ia32_request_key: u32 = 287;
pub const __NR_ia32_keyctl: u32 = 288;
pub const __NR_ia32_ioprio_set: u32 = 289;
pub const __NR_ia32_ioprio_get: u32 = 290;
pub const __NR_ia32_inotify_init: u32 = 291;
pub const __NR_ia32_inotify_add_watch: u32 = 292;
pub const __NR_ia32_inotify_rm_watch: u32 = 293;
pub const __NR_ia32_migrate_pages: u32 = 294;
pub const __NR_ia32_openat: u32 = 295;
pub const __NR_ia32_mkdirat: u32 = 296;
pub const __NR_ia32_mknodat: u32 = 297;
pub const __NR_ia32_fchownat: u32 = 298;
pub const __NR_ia32_futimesat: u32 = 299;
pub const __NR_ia32_fstatat64: u32 = 300;
pub const __NR_ia32_unlinkat: u32 = 301;
pub const __NR_ia32_renameat: u32 = 302;
pub const __NR_ia32_linkat: u32 = 303;
pub const __NR_ia32_symlinkat: u32 = 304;
pub const __NR_ia32_readlinkat: u32 = 305;
pub const __NR_ia32_fchmodat: u32 = 306;
pub const __NR_ia32_faccessat: u32 = 307;
pub const __NR_ia32_pselect6: u32 = 308;
pub const __NR_ia32_ppoll: u32 = 309;
pub const __NR_ia32_unshare: u32 = 310;
pub const __NR_ia32_set_robust_list: u32 = 311;
pub const __NR_ia32_get_robust_list: u32 = 312;
pub const __NR_ia32_splice: u32 = 313;
pub const __NR_ia32_sync_file_range: u32 = 314;
pub const __NR_ia32_tee: u32 = 315;
pub const __NR_ia32_vmsplice: u32 = 316;
pub const __NR_ia32_move_pages: u32 = 317;
pub const __NR_ia32_getcpu: u32 = 318;
pub const __NR_ia32_epoll_pwait: u32 = 319;
pub const __NR_ia32_utimensat: u32 = 320;
pub const __NR_ia32_signalfd: u32 = 321;
pub const __NR_ia32_timerfd_create: u32 = 322;
pub const __NR_ia32_eventfd: u32 = 323;
pub const __NR_ia32_fallocate: u32 = 324;
pub const __NR_ia32_timerfd_settime: u32 = 325;
pub const __NR_ia32_timerfd_gettime: u32 = 326;
pub const __NR_ia32_signalfd4: u32 = 327;
pub const __NR_ia32_eventfd2: u32 = 328;
pub const __NR_ia32_epoll_create1: u32 = 329;
pub const __NR_ia32_dup3: u32 = 330;
pub const __NR_ia32_pipe2: u32 = 331;
pub const __NR_ia32_inotify_init1: u32 = 332;
pub const __NR_ia32_preadv: u32 = 333;
pub const __NR_ia32_pwritev: u32 = 334;
pub const __NR_ia32_rt_tgsigqueueinfo: u32 = 335;
pub const __NR_ia32_perf_event_open: u32 = 336;
pub const __NR_ia32_recvmmsg: u32 = 337;
pub const __NR_ia32_fanotify_init: u32 = 338;
pub const __NR_ia32_fanotify_mark: u32 = 339;
pub const __NR_ia32_prlimit64: u32 = 340;
pub const __NR_ia32_name_to_handle_at: u32 = 341;
pub const __NR_ia32_open_by_handle_at: u32 = 342;
pub const __NR_ia32_clock_adjtime: u32 = 343;
pub const __NR_ia32_syncfs: u32 = 344;
pub const __NR_ia32_sendmmsg: u32 = 345;
pub const __NR_ia32_setns: u32 = 346;
pub const __NR_ia32_process_vm_readv: u32 = 347;
pub const __NR_ia32_process_vm_writev: u32 = 348;
pub const __NR_ia32_kcmp: u32 = 349;
pub const __NR_ia32_finit_module: u32 = 350;
pub const __NR_ia32_sched_setattr: u32 = 351;
pub const __NR_ia32_sched_getattr: u32 = 352;
pub const __NR_ia32_renameat2: u32 = 353;
pub const __NR_ia32_seccomp: u32 = 354;
pub const __NR_ia32_getrandom: u32 = 355;
pub const __NR_ia32_memfd_create: u32 = 356;
pub const __NR_ia32_bpf: u32 = 357;
pub const __NR_ia32_execveat: u32 = 358;
pub const __NR_ia32_socket: u32 = 359;
pub const __NR_ia32_socketpair: u32 = 360;
pub const __NR_ia32_bind: u32 = 361;
pub const __NR_ia32_connect: u32 = 362;
pub const __NR_ia32_listen: u32 = 363;
pub const __NR_ia32_accept4: u32 = 364;
pub const __NR_ia32_getsockopt: u32 = 365;
pub const __NR_ia32_setsockopt: u32 = 366;
pub const __NR_ia32_getsockname: u32 = 367;
pub const __NR_ia32_getpeername: u32 = 368;
pub const __NR_ia32_sendto: u32 = 369;
pub const __NR_ia32_sendmsg: u32 = 370;
pub const __NR_ia32_recvfrom: u32 = 371;
pub const __NR_ia32_recvmsg: u32 = 372;
pub const __NR_ia32_shutdown: u32 = 373;
pub const __NR_ia32_userfaultfd: u32 = 374;
pub const __NR_ia32_membarrier: u32 = 375;
pub const __NR_ia32_mlock2: u32 = 376;
pub const __NR_ia32_copy_file_range: u32 = 377;
pub const __NR_ia32_preadv2: u32 = 378;
pub const __NR_ia32_pwritev2: u32 = 379;
pub const __NR_ia32_pkey_mprotect: u32 = 380;
pub const __NR_ia32_pkey_alloc: u32 = 381;
pub const __NR_ia32_pkey_free: u32 = 382;
pub const __NR_ia32_statx: u32 = 383;
pub const __NR_ia32_arch_prctl: u32 = 384;
pub const __NR_ia32_io_pgetevents: u32 = 385;
pub const __NR_ia32_rseq: u32 = 386;
pub const __NR_ia32_semget: u32 = 393;
pub const __NR_ia32_semctl: u32 = 394;
pub const __NR_ia32_shmget: u32 = 395;
pub const __NR_ia32_shmctl: u32 = 396;
pub const __NR_ia32_shmat: u32 = 397;
pub const __NR_ia32_shmdt: u32 = 398;
pub const __NR_ia32_msgget: u32 = 399;
pub const __NR_ia32_msgsnd: u32 = 400;
pub const __NR_ia32_msgrcv: u32 = 401;
pub const __NR_ia32_msgctl: u32 = 402;
pub const __NR_ia32_clock_gettime64: u32 = 403;
pub const __NR_ia32_clock_settime64: u32 = 404;
pub const __NR_ia32_clock_adjtime64: u32 = 405;
pub const __NR_ia32_clock_getres_time64: u32 = 406;
pub const __NR_ia32_clock_nanosleep_time64: u32 = 407;
pub const __NR_ia32_timer_gettime64: u32 = 408;
pub const __NR_ia32_timer_settime64: u32 = 409;
pub const __NR_ia32_timerfd_gettime64: u32 = 410;
pub const __NR_ia32_timerfd_settime64: u32 = 411;
pub const __NR_ia32_utimensat_time64: u32 = 412;
pub const __NR_ia32_pselect6_time64: u32 = 413;
pub const __NR_ia32_ppoll_time64: u32 = 414;
pub const __NR_ia32_io_pgetevents_time64: u32 = 416;
pub const __NR_ia32_recvmmsg_time64: u32 = 417;
pub const __NR_ia32_mq_timedsend_time64: u32 = 418;
pub const __NR_ia32_mq_timedreceive_time64: u32 = 419;
pub const __NR_ia32_semtimedop_time64: u32 = 420;
pub const __NR_ia32_rt_sigtimedwait_time64: u32 = 421;
pub const __NR_ia32_futex_time64: u32 = 422;
pub const __NR_ia32_sched_rr_get_interval_time64: u32 = 423;
pub const __NR_ia32_pidfd_send_signal: u32 = 424;
pub const __NR_ia32_io_uring_setup: u32 = 425;
pub const __NR_ia32_io_uring_enter: u32 = 426;
pub const __NR_ia32_io_uring_register: u32 = 427;
pub const __NR_ia32_open_tree: u32 = 428;
pub const __NR_ia32_move_mount: u32 = 429;
pub const __NR_ia32_fsopen: u32 = 430;
pub const __NR_ia32_fsconfig: u32 = 431;
pub const __NR_ia32_fsmount: u32 = 432;
pub const __NR_ia32_fspick: u32 = 433;
pub const __NR_ia32_pidfd_open: u32 = 434;
pub const __NR_ia32_clone3: u32 = 435;
pub const __NR_ia32_close_range: u32 = 436;
pub const __NR_ia32_openat2: u32 = 437;
pub const __NR_ia32_pidfd_getfd: u32 = 438;
pub const __NR_ia32_faccessat2: u32 = 439;
pub const __NR_ia32_process_madvise: u32 = 440;
pub const __NR_ia32_epoll_pwait2: u32 = 441;
pub const __NR_ia32_mount_setattr: u32 = 442;
pub const __NR_ia32_quotactl_fd: u32 = 443;
pub const __NR_ia32_landlock_create_ruleset: u32 = 444;
pub const __NR_ia32_landlock_add_rule: u32 = 445;
pub const __NR_ia32_landlock_restrict_self: u32 = 446;
pub const __NR_ia32_memfd_secret: u32 = 447;
pub const __NR_ia32_process_mrelease: u32 = 448;
pub const __NR_ia32_futex_waitv: u32 = 449;
pub const __NR_ia32_set_mempolicy_home_node: u32 = 450;
pub const __NR_ia32_cachestat: u32 = 451;
pub const __NR_ia32_fchmodat2: u32 = 452;
pub const __NR_ia32_map_shadow_stack: u32 = 453;
pub const __NR_ia32_futex_wake: u32 = 454;
pub const __NR_ia32_futex_wait: u32 = 455;
pub const __NR_ia32_futex_requeue: u32 = 456;
pub const __NR_ia32_statmount: u32 = 457;
pub const __NR_ia32_listmount: u32 = 458;
pub const __NR_ia32_lsm_get_self_attr: u32 = 459;
pub const __NR_ia32_lsm_set_self_attr: u32 = 460;
pub const __NR_ia32_lsm_list_modules: u32 = 461;
pub const __NR_ia32_mseal: u32 = 462;
pub const __NR_ia32_syscalls: u32 = 463;
pub const X32_NR_syscalls: u32 = 548;
pub const IA32_NR_syscalls: u32 = 463;
pub const NR_syscalls: u32 = 468;
pub const ADFS_SUPER_MAGIC: u32 = 44533;
pub const AFFS_SUPER_MAGIC: u32 = 44543;
pub const AFS_SUPER_MAGIC: u32 = 1397113167;
pub const AUTOFS_SUPER_MAGIC: u32 = 391;
pub const CEPH_SUPER_MAGIC: u32 = 12805120;
pub const CODA_SUPER_MAGIC: u32 = 1937076805;
pub const CRAMFS_MAGIC: u32 = 684539205;
pub const CRAMFS_MAGIC_WEND: u32 = 1161678120;
pub const DEBUGFS_MAGIC: u32 = 1684170528;
pub const SECURITYFS_MAGIC: u32 = 1935894131;
pub const SELINUX_MAGIC: u32 = 4185718668;
pub const SMACK_MAGIC: u32 = 1128357203;
pub const RAMFS_MAGIC: u32 = 2240043254;
pub const TMPFS_MAGIC: u32 = 16914836;
pub const HUGETLBFS_MAGIC: u32 = 2508478710;
pub const SQUASHFS_MAGIC: u32 = 1936814952;
pub const ECRYPTFS_SUPER_MAGIC: u32 = 61791;
pub const EFS_SUPER_MAGIC: u32 = 4278867;
pub const EROFS_SUPER_MAGIC_V1: u32 = 3774210530;
pub const EXT2_SUPER_MAGIC: u32 = 61267;
pub const EXT3_SUPER_MAGIC: u32 = 61267;
pub const XENFS_SUPER_MAGIC: u32 = 2881100148;
pub const EXT4_SUPER_MAGIC: u32 = 61267;
pub const BTRFS_SUPER_MAGIC: u32 = 2435016766;
pub const NILFS_SUPER_MAGIC: u32 = 13364;
pub const F2FS_SUPER_MAGIC: u32 = 4076150800;
pub const HPFS_SUPER_MAGIC: u32 = 4187351113;
pub const ISOFS_SUPER_MAGIC: u32 = 38496;
pub const JFFS2_SUPER_MAGIC: u32 = 29366;
pub const XFS_SUPER_MAGIC: u32 = 1481003842;
pub const PSTOREFS_MAGIC: u32 = 1634035564;
pub const EFIVARFS_MAGIC: u32 = 3730735588;
pub const HOSTFS_SUPER_MAGIC: u32 = 12648430;
pub const OVERLAYFS_SUPER_MAGIC: u32 = 2035054128;
pub const FUSE_SUPER_MAGIC: u32 = 1702057286;
pub const BCACHEFS_SUPER_MAGIC: u32 = 3393526350;
pub const MINIX_SUPER_MAGIC: u32 = 4991;
pub const MINIX_SUPER_MAGIC2: u32 = 5007;
pub const MINIX2_SUPER_MAGIC: u32 = 9320;
pub const MINIX2_SUPER_MAGIC2: u32 = 9336;
pub const MINIX3_SUPER_MAGIC: u32 = 19802;
pub const MSDOS_SUPER_MAGIC: u32 = 19780;
pub const EXFAT_SUPER_MAGIC: u32 = 538032816;
pub const NCP_SUPER_MAGIC: u32 = 22092;
pub const NFS_SUPER_MAGIC: u32 = 26985;
pub const OCFS2_SUPER_MAGIC: u32 = 1952539503;
pub const OPENPROM_SUPER_MAGIC: u32 = 40865;
pub const QNX4_SUPER_MAGIC: u32 = 47;
pub const QNX6_SUPER_MAGIC: u32 = 1746473250;
pub const AFS_FS_MAGIC: u32 = 1799439955;
pub const REISERFS_SUPER_MAGIC: u32 = 1382369651;
pub const REISERFS_SUPER_MAGIC_STRING: &[u8; 9] = b"ReIsErFs\0";
pub const REISER2FS_SUPER_MAGIC_STRING: &[u8; 10] = b"ReIsEr2Fs\0";
pub const REISER2FS_JR_SUPER_MAGIC_STRING: &[u8; 10] = b"ReIsEr3Fs\0";
pub const SMB_SUPER_MAGIC: u32 = 20859;
pub const CIFS_SUPER_MAGIC: u32 = 4283649346;
pub const SMB2_SUPER_MAGIC: u32 = 4266872130;
pub const CGROUP_SUPER_MAGIC: u32 = 2613483;
pub const CGROUP2_SUPER_MAGIC: u32 = 1667723888;
pub const RDTGROUP_SUPER_MAGIC: u32 = 124082209;
pub const STACK_END_MAGIC: u32 = 1470918301;
pub const TRACEFS_MAGIC: u32 = 1953653091;
pub const V9FS_MAGIC: u32 = 16914839;
pub const BDEVFS_MAGIC: u32 = 1650746742;
pub const DAXFS_MAGIC: u32 = 1684300152;
pub const BINFMTFS_MAGIC: u32 = 1112100429;
pub const DEVPTS_SUPER_MAGIC: u32 = 7377;
pub const BINDERFS_SUPER_MAGIC: u32 = 1819242352;
pub const FUTEXFS_SUPER_MAGIC: u32 = 195894762;
pub const PIPEFS_MAGIC: u32 = 1346981957;
pub const PROC_SUPER_MAGIC: u32 = 40864;
pub const SOCKFS_MAGIC: u32 = 1397703499;
pub const SYSFS_MAGIC: u32 = 1650812274;
pub const USBDEVICE_SUPER_MAGIC: u32 = 40866;
pub const MTD_INODE_FS_MAGIC: u32 = 288389204;
pub const ANON_INODE_FS_MAGIC: u32 = 151263540;
pub const BTRFS_TEST_MAGIC: u32 = 1936880249;
pub const NSFS_MAGIC: u32 = 1853056627;
pub const BPF_FS_MAGIC: u32 = 3405662737;
pub const AAFS_MAGIC: u32 = 1513908720;
pub const ZONEFS_MAGIC: u32 = 1515144787;
pub const UDF_SUPER_MAGIC: u32 = 352400198;
pub const DMA_BUF_MAGIC: u32 = 1145913666;
pub const DEVMEM_MAGIC: u32 = 1162691661;
pub const SECRETMEM_MAGIC: u32 = 1397048141;
pub const PID_FS_MAGIC: u32 = 1346978886;
pub const COMPAT_USER_HZ: u32 = 100;
pub const COMPAT_RLIM_INFINITY: u32 = 4294967295;
pub const COMPAT_OFF_T_MAX: u32 = 2147483647;
pub const _COMPAT_NSIG: u32 = 64;
pub const _COMPAT_NSIG_BPW: u32 = 32;
pub const COMPAT_UTS_MACHINE: &[u8; 7] = b"i686\0\0\0";
pub const COMPAT_USE_64BIT_TIME: u32 = 0;
pub const COMPAT_MINSIGSTKSZ: u32 = 2048;
pub const _COMPAT_NSIG_WORDS: u32 = 2;
pub const SZ_1: u32 = 1;
pub const SZ_2: u32 = 2;
pub const SZ_4: u32 = 4;
pub const SZ_8: u32 = 8;
pub const SZ_16: u32 = 16;
pub const SZ_32: u32 = 32;
pub const SZ_64: u32 = 64;
pub const SZ_128: u32 = 128;
pub const SZ_256: u32 = 256;
pub const SZ_512: u32 = 512;
pub const SZ_1K: u32 = 1024;
pub const SZ_2K: u32 = 2048;
pub const SZ_4K: u32 = 4096;
pub const SZ_8K: u32 = 8192;
pub const SZ_16K: u32 = 16384;
pub const SZ_32K: u32 = 32768;
pub const SZ_64K: u32 = 65536;
pub const SZ_128K: u32 = 131072;
pub const SZ_256K: u32 = 262144;
pub const SZ_512K: u32 = 524288;
pub const SZ_1M: u32 = 1048576;
pub const SZ_2M: u32 = 2097152;
pub const SZ_4M: u32 = 4194304;
pub const SZ_8M: u32 = 8388608;
pub const SZ_16M: u32 = 16777216;
pub const SZ_32M: u32 = 33554432;
pub const SZ_64M: u32 = 67108864;
pub const SZ_128M: u32 = 134217728;
pub const SZ_256M: u32 = 268435456;
pub const SZ_512M: u32 = 536870912;
pub const SZ_1G: u32 = 1073741824;
pub const SZ_2G: u32 = 2147483648;
pub const PMD_ORDER: u32 = 9;
pub const PUD_ORDER: u32 = 18;
pub const USER_PGTABLES_CEILING: u32 = 0;
pub const FIRST_USER_ADDRESS: u32 = 0;
pub const __PGTBL_PGD_MODIFIED: u32 = 0;
pub const __PGTBL_P4D_MODIFIED: u32 = 1;
pub const __PGTBL_PUD_MODIFIED: u32 = 2;
pub const __PGTBL_PMD_MODIFIED: u32 = 3;
pub const __PGTBL_PTE_MODIFIED: u32 = 4;
pub const MAX_PTRS_PER_PTE: u32 = 512;
pub const MAX_PTRS_PER_PMD: u32 = 512;
pub const MAX_PTRS_PER_PUD: u32 = 512;
pub const IORESOURCE_BITS: u32 = 255;
pub const IORESOURCE_TYPE_BITS: u32 = 7936;
pub const IORESOURCE_IO: u32 = 256;
pub const IORESOURCE_MEM: u32 = 512;
pub const IORESOURCE_REG: u32 = 768;
pub const IORESOURCE_IRQ: u32 = 1024;
pub const IORESOURCE_DMA: u32 = 2048;
pub const IORESOURCE_BUS: u32 = 4096;
pub const IORESOURCE_PREFETCH: u32 = 8192;
pub const IORESOURCE_READONLY: u32 = 16384;
pub const IORESOURCE_CACHEABLE: u32 = 32768;
pub const IORESOURCE_RANGELENGTH: u32 = 65536;
pub const IORESOURCE_SHADOWABLE: u32 = 131072;
pub const IORESOURCE_SIZEALIGN: u32 = 262144;
pub const IORESOURCE_STARTALIGN: u32 = 524288;
pub const IORESOURCE_MEM_64: u32 = 1048576;
pub const IORESOURCE_WINDOW: u32 = 2097152;
pub const IORESOURCE_MUXED: u32 = 4194304;
pub const IORESOURCE_EXT_TYPE_BITS: u32 = 16777216;
pub const IORESOURCE_SYSRAM: u32 = 16777216;
pub const IORESOURCE_SYSRAM_DRIVER_MANAGED: u32 = 33554432;
pub const IORESOURCE_SYSRAM_MERGEABLE: u32 = 67108864;
pub const IORESOURCE_EXCLUSIVE: u32 = 134217728;
pub const IORESOURCE_DISABLED: u32 = 268435456;
pub const IORESOURCE_UNSET: u32 = 536870912;
pub const IORESOURCE_AUTO: u32 = 1073741824;
pub const IORESOURCE_BUSY: u32 = 2147483648;
pub const IORESOURCE_SYSTEM_RAM: u32 = 16777728;
pub const IORESOURCE_IRQ_HIGHEDGE: u32 = 1;
pub const IORESOURCE_IRQ_LOWEDGE: u32 = 2;
pub const IORESOURCE_IRQ_HIGHLEVEL: u32 = 4;
pub const IORESOURCE_IRQ_LOWLEVEL: u32 = 8;
pub const IORESOURCE_IRQ_SHAREABLE: u32 = 16;
pub const IORESOURCE_IRQ_OPTIONAL: u32 = 32;
pub const IORESOURCE_IRQ_WAKECAPABLE: u32 = 64;
pub const IORESOURCE_DMA_TYPE_MASK: u32 = 3;
pub const IORESOURCE_DMA_8BIT: u32 = 0;
pub const IORESOURCE_DMA_8AND16BIT: u32 = 1;
pub const IORESOURCE_DMA_16BIT: u32 = 2;
pub const IORESOURCE_DMA_MASTER: u32 = 4;
pub const IORESOURCE_DMA_BYTE: u32 = 8;
pub const IORESOURCE_DMA_WORD: u32 = 16;
pub const IORESOURCE_DMA_SPEED_MASK: u32 = 192;
pub const IORESOURCE_DMA_COMPATIBLE: u32 = 0;
pub const IORESOURCE_DMA_TYPEA: u32 = 64;
pub const IORESOURCE_DMA_TYPEB: u32 = 128;
pub const IORESOURCE_DMA_TYPEF: u32 = 192;
pub const IORESOURCE_MEM_WRITEABLE: u32 = 1;
pub const IORESOURCE_MEM_CACHEABLE: u32 = 2;
pub const IORESOURCE_MEM_RANGELENGTH: u32 = 4;
pub const IORESOURCE_MEM_TYPE_MASK: u32 = 24;
pub const IORESOURCE_MEM_8BIT: u32 = 0;
pub const IORESOURCE_MEM_16BIT: u32 = 8;
pub const IORESOURCE_MEM_8AND16BIT: u32 = 16;
pub const IORESOURCE_MEM_32BIT: u32 = 24;
pub const IORESOURCE_MEM_SHADOWABLE: u32 = 32;
pub const IORESOURCE_MEM_EXPANSIONROM: u32 = 64;
pub const IORESOURCE_MEM_NONPOSTED: u32 = 128;
pub const IORESOURCE_IO_16BIT_ADDR: u32 = 1;
pub const IORESOURCE_IO_FIXED: u32 = 2;
pub const IORESOURCE_IO_SPARSE: u32 = 4;
pub const IORESOURCE_ROM_ENABLE: u32 = 1;
pub const IORESOURCE_ROM_SHADOW: u32 = 2;
pub const IORESOURCE_PCI_FIXED: u32 = 16;
pub const IORESOURCE_PCI_EA_BEI: u32 = 32;
pub const PGMAP_ALTMAP_VALID: u32 = 1;
pub const MAPCOUNT_ELF_CORE_MARGIN: u32 = 5;
pub const VM_NONE: u32 = 0;
pub const VM_READ: u32 = 1;
pub const VM_WRITE: u32 = 2;
pub const VM_EXEC: u32 = 4;
pub const VM_SHARED: u32 = 8;
pub const VM_MAYREAD: u32 = 16;
pub const VM_MAYWRITE: u32 = 32;
pub const VM_MAYEXEC: u32 = 64;
pub const VM_MAYSHARE: u32 = 128;
pub const VM_GROWSDOWN: u32 = 256;
pub const VM_UFFD_MISSING: u32 = 512;
pub const VM_PFNMAP: u32 = 1024;
pub const VM_UFFD_WP: u32 = 4096;
pub const VM_LOCKED: u32 = 8192;
pub const VM_IO: u32 = 16384;
pub const VM_SEQ_READ: u32 = 32768;
pub const VM_RAND_READ: u32 = 65536;
pub const VM_DONTCOPY: u32 = 131072;
pub const VM_DONTEXPAND: u32 = 262144;
pub const VM_LOCKONFAULT: u32 = 524288;
pub const VM_ACCOUNT: u32 = 1048576;
pub const VM_NORESERVE: u32 = 2097152;
pub const VM_HUGETLB: u32 = 4194304;
pub const VM_SYNC: u32 = 8388608;
pub const VM_ARCH_1: u32 = 16777216;
pub const VM_WIPEONFORK: u32 = 33554432;
pub const VM_DONTDUMP: u32 = 67108864;
pub const VM_SOFTDIRTY: u32 = 0;
pub const VM_MIXEDMAP: u32 = 268435456;
pub const VM_HUGEPAGE: u32 = 536870912;
pub const VM_NOHUGEPAGE: u32 = 1073741824;
pub const VM_MERGEABLE: u32 = 2147483648;
pub const VM_HIGH_ARCH_BIT_0: u32 = 32;
pub const VM_HIGH_ARCH_BIT_1: u32 = 33;
pub const VM_HIGH_ARCH_BIT_2: u32 = 34;
pub const VM_HIGH_ARCH_BIT_3: u32 = 35;
pub const VM_HIGH_ARCH_BIT_4: u32 = 36;
pub const VM_HIGH_ARCH_BIT_5: u32 = 37;
pub const VM_PKEY_SHIFT: u32 = 32;
pub const VM_PKEY_BIT4: u32 = 0;
pub const VM_SHADOW_STACK: u32 = 0;
pub const VM_PAT: u32 = 16777216;
pub const VM_MTE: u32 = 0;
pub const VM_MTE_ALLOWED: u32 = 0;
pub const VM_GROWSUP: u32 = 0;
pub const VM_UFFD_MINOR: u32 = 0;
pub const VM_ALLOW_ANY_UNCACHED_BIT: u32 = 39;
pub const VM_DROPPABLE_BIT: u32 = 40;
pub const VM_DATA_FLAGS_NON_EXEC: u32 = 115;
pub const VM_DATA_FLAGS_EXEC: u32 = 119;
pub const VM_STARTGAP_FLAGS: u32 = 256;
pub const VM_STACK: u32 = 256;
pub const VM_STACK_EARLY: u32 = 0;
pub const VM_ACCESS_FLAGS: u32 = 7;
pub const VM_SPECIAL: u32 = 268715008;
pub const VM_NO_KHUGEPAGED: u32 = 272909312;
pub const VM_INIT_DEF_MASK: u32 = 1073741824;
pub const VM_LOCKED_MASK: u32 = 532480;
pub const VM_ARCH_CLEAR: u32 = 0;
pub const IDR_FREE: u32 = 0;
pub const IDA_CHUNK_SIZE: u32 = 128;
pub const KERNFS_TYPE_MASK: u32 = 15;
pub const KERNFS_FLAG_MASK: i32 = -16;
pub const KERNFS_MAX_USER_XATTRS: u32 = 128;
pub const KERNFS_USER_XATTR_SIZE_LIMIT: u32 = 131072;
pub const SYSFS_PREALLOC: u32 = 4096;
pub const SYSFS_GROUP_INVISIBLE: u32 = 8192;
pub const UEVENT_HELPER_PATH_LEN: u32 = 256;
pub const UEVENT_NUM_ENVP: u32 = 64;
pub const UEVENT_BUFFER_SIZE: u32 = 2048;
pub const TVA_SMAPS: u32 = 1;
pub const TVA_IN_PF: u32 = 2;
pub const TVA_ENFORCE_SYSFS: u32 = 4;
pub const HPAGE_PMD_SHIFT: u32 = 21;
pub const HPAGE_PUD_SHIFT: u32 = 30;
pub const HPAGE_PMD_ORDER: u32 = 9;
pub const HPAGE_PMD_NR: u32 = 512;
pub const HPAGE_PMD_SIZE: u32 = 2097152;
pub const HPAGE_PUD_ORDER: u32 = 18;
pub const HPAGE_PUD_NR: u32 = 262144;
pub const HPAGE_PUD_SIZE: u32 = 1073741824;
pub const transparent_hugepage_flags: u32 = 0;
pub const GUP_PIN_COUNTING_BIAS: u32 = 1024;
pub const MAX_FOLIO_NR_PAGES: u32 = 262144;
pub const ENABLE_NUMA_STAT: u32 = 1;
pub const DISABLE_NUMA_STAT: u32 = 0;
pub const MM_CP_TRY_CHANGE_WRITABLE: u32 = 1;
pub const MM_CP_PROT_NUMA: u32 = 2;
pub const MM_CP_UFFD_WP: u32 = 4;
pub const MM_CP_UFFD_WP_RESOLVE: u32 = 8;
pub const MM_CP_UFFD_WP_ALL: u32 = 12;
pub const VM_UNMAPPED_AREA_TOPDOWN: u32 = 1;
pub const VMEMMAP_RESERVE_NR: u32 = 2;
pub const ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE: u32 = 0;
pub const _HAVE_ARCH_COPY_AND_CSUM_FROM_USER: u32 = 1;
pub const _HAVE_ARCH_IPV6_CSUM: u32 = 1;
pub const PRINTK_INFO_SUBSYSTEM_LEN: u32 = 16;
pub const PRINTK_INFO_DEVICE_LEN: u32 = 48;
pub const SCHED_CPUFREQ_IOWAIT: u32 = 1;
pub const SDF_SHARED_CHILD: u32 = 1;
pub const SDF_SHARED_PARENT: u32 = 2;
pub const SDF_NEEDS_GROUPS: u32 = 4;
pub const SDTL_OVERLAP: u32 = 1;
pub const PM_EVENT_INVALID: i32 = -1;
pub const PM_EVENT_ON: u32 = 0;
pub const PM_EVENT_FREEZE: u32 = 1;
pub const PM_EVENT_SUSPEND: u32 = 2;
pub const PM_EVENT_HIBERNATE: u32 = 4;
pub const PM_EVENT_QUIESCE: u32 = 8;
pub const PM_EVENT_RESUME: u32 = 16;
pub const PM_EVENT_THAW: u32 = 32;
pub const PM_EVENT_RESTORE: u32 = 64;
pub const PM_EVENT_RECOVER: u32 = 128;
pub const PM_EVENT_USER: u32 = 256;
pub const PM_EVENT_REMOTE: u32 = 512;
pub const PM_EVENT_AUTO: u32 = 1024;
pub const PM_EVENT_SLEEP: u32 = 6;
pub const PM_EVENT_USER_SUSPEND: u32 = 258;
pub const PM_EVENT_USER_RESUME: u32 = 272;
pub const PM_EVENT_REMOTE_RESUME: u32 = 528;
pub const PM_EVENT_AUTO_SUSPEND: u32 = 1026;
pub const PM_EVENT_AUTO_RESUME: u32 = 1040;
pub const PM_EVENT_PRETHAW: u32 = 8;
pub const BUILD_ID_SIZE_MAX: u32 = 20;
pub const UMH_NO_WAIT: u32 = 0;
pub const UMH_WAIT_EXEC: u32 = 1;
pub const UMH_WAIT_PROC: u32 = 2;
pub const UMH_KILLABLE: u32 = 4;
pub const UMH_FREEZABLE: u32 = 8;
pub const KMOD_PATH_LEN: u32 = 256;
pub const STAT64_HAS_BROKEN_ST_INO: u32 = 1;
pub const USER_XSTATE_FX_SW_WORDS: u32 = 6;
pub const USER_XSTATE_XCR0_WORD: u32 = 0;
pub const R_X86_64_NONE: u32 = 0;
pub const R_X86_64_64: u32 = 1;
pub const R_X86_64_PC32: u32 = 2;
pub const R_X86_64_GOT32: u32 = 3;
pub const R_X86_64_PLT32: u32 = 4;
pub const R_X86_64_COPY: u32 = 5;
pub const R_X86_64_GLOB_DAT: u32 = 6;
pub const R_X86_64_JUMP_SLOT: u32 = 7;
pub const R_X86_64_RELATIVE: u32 = 8;
pub const R_X86_64_GOTPCREL: u32 = 9;
pub const R_X86_64_32: u32 = 10;
pub const R_X86_64_32S: u32 = 11;
pub const R_X86_64_16: u32 = 12;
pub const R_X86_64_PC16: u32 = 13;
pub const R_X86_64_8: u32 = 14;
pub const R_X86_64_PC8: u32 = 15;
pub const R_X86_64_PC64: u32 = 24;
pub const COMPAT_ELF_PLATFORM: &[u8; 5] = b"i686\0";
pub const ELF_PLATFORM: &[u8; 7] = b"x86_64\0";
pub const ELF_EXEC_PAGESIZE: u32 = 4096;
pub const AT_SYSINFO: u32 = 32;
pub const ARCH_HAS_SETUP_ADDITIONAL_PAGES: u32 = 1;
pub const EM_NONE: u32 = 0;
pub const EM_M32: u32 = 1;
pub const EM_SPARC: u32 = 2;
pub const EM_386: u32 = 3;
pub const EM_68K: u32 = 4;
pub const EM_88K: u32 = 5;
pub const EM_486: u32 = 6;
pub const EM_860: u32 = 7;
pub const EM_MIPS: u32 = 8;
pub const EM_MIPS_RS3_LE: u32 = 10;
pub const EM_MIPS_RS4_BE: u32 = 10;
pub const EM_PARISC: u32 = 15;
pub const EM_SPARC32PLUS: u32 = 18;
pub const EM_PPC: u32 = 20;
pub const EM_PPC64: u32 = 21;
pub const EM_SPU: u32 = 23;
pub const EM_ARM: u32 = 40;
pub const EM_SH: u32 = 42;
pub const EM_SPARCV9: u32 = 43;
pub const EM_H8_300: u32 = 46;
pub const EM_IA_64: u32 = 50;
pub const EM_X86_64: u32 = 62;
pub const EM_S390: u32 = 22;
pub const EM_CRIS: u32 = 76;
pub const EM_M32R: u32 = 88;
pub const EM_MN10300: u32 = 89;
pub const EM_OPENRISC: u32 = 92;
pub const EM_ARCOMPACT: u32 = 93;
pub const EM_XTENSA: u32 = 94;
pub const EM_BLACKFIN: u32 = 106;
pub const EM_UNICORE: u32 = 110;
pub const EM_ALTERA_NIOS2: u32 = 113;
pub const EM_TI_C6000: u32 = 140;
pub const EM_HEXAGON: u32 = 164;
pub const EM_NDS32: u32 = 167;
pub const EM_AARCH64: u32 = 183;
pub const EM_TILEPRO: u32 = 188;
pub const EM_MICROBLAZE: u32 = 189;
pub const EM_TILEGX: u32 = 191;
pub const EM_ARCV2: u32 = 195;
pub const EM_RISCV: u32 = 243;
pub const EM_BPF: u32 = 247;
pub const EM_CSKY: u32 = 252;
pub const EM_LOONGARCH: u32 = 258;
pub const EM_FRV: u32 = 21569;
pub const EM_ALPHA: u32 = 36902;
pub const EM_CYGNUS_M32R: u32 = 36929;
pub const EM_S390_OLD: u32 = 41872;
pub const EM_CYGNUS_MN10300: u32 = 48879;
pub const PT_NULL: u32 = 0;
pub const PT_LOAD: u32 = 1;
pub const PT_DYNAMIC: u32 = 2;
pub const PT_INTERP: u32 = 3;
pub const PT_NOTE: u32 = 4;
pub const PT_SHLIB: u32 = 5;
pub const PT_PHDR: u32 = 6;
pub const PT_TLS: u32 = 7;
pub const PT_LOOS: u32 = 1610612736;
pub const PT_HIOS: u32 = 1879048191;
pub const PT_LOPROC: u32 = 1879048192;
pub const PT_HIPROC: u32 = 2147483647;
pub const PT_GNU_EH_FRAME: u32 = 1685382480;
pub const PT_GNU_STACK: u32 = 1685382481;
pub const PT_GNU_RELRO: u32 = 1685382482;
pub const PT_GNU_PROPERTY: u32 = 1685382483;
pub const PT_AARCH64_MEMTAG_MTE: u32 = 1879048194;
pub const PN_XNUM: u32 = 65535;
pub const ET_NONE: u32 = 0;
pub const ET_REL: u32 = 1;
pub const ET_EXEC: u32 = 2;
pub const ET_DYN: u32 = 3;
pub const ET_CORE: u32 = 4;
pub const ET_LOPROC: u32 = 65280;
pub const ET_HIPROC: u32 = 65535;
pub const DT_NULL: u32 = 0;
pub const DT_NEEDED: u32 = 1;
pub const DT_PLTRELSZ: u32 = 2;
pub const DT_PLTGOT: u32 = 3;
pub const DT_HASH: u32 = 4;
pub const DT_STRTAB: u32 = 5;
pub const DT_SYMTAB: u32 = 6;
pub const DT_RELA: u32 = 7;
pub const DT_RELASZ: u32 = 8;
pub const DT_RELAENT: u32 = 9;
pub const DT_STRSZ: u32 = 10;
pub const DT_SYMENT: u32 = 11;
pub const DT_INIT: u32 = 12;
pub const DT_FINI: u32 = 13;
pub const DT_SONAME: u32 = 14;
pub const DT_RPATH: u32 = 15;
pub const DT_SYMBOLIC: u32 = 16;
pub const DT_REL: u32 = 17;
pub const DT_RELSZ: u32 = 18;
pub const DT_RELENT: u32 = 19;
pub const DT_PLTREL: u32 = 20;
pub const DT_DEBUG: u32 = 21;
pub const DT_TEXTREL: u32 = 22;
pub const DT_JMPREL: u32 = 23;
pub const DT_ENCODING: u32 = 32;
pub const OLD_DT_LOOS: u32 = 1610612736;
pub const DT_LOOS: u32 = 1610612749;
pub const DT_HIOS: u32 = 1879044096;
pub const DT_VALRNGLO: u32 = 1879047424;
pub const DT_VALRNGHI: u32 = 1879047679;
pub const DT_ADDRRNGLO: u32 = 1879047680;
pub const DT_ADDRRNGHI: u32 = 1879047935;
pub const DT_VERSYM: u32 = 1879048176;
pub const DT_RELACOUNT: u32 = 1879048185;
pub const DT_RELCOUNT: u32 = 1879048186;
pub const DT_FLAGS_1: u32 = 1879048187;
pub const DT_VERDEF: u32 = 1879048188;
pub const DT_VERDEFNUM: u32 = 1879048189;
pub const DT_VERNEED: u32 = 1879048190;
pub const DT_VERNEEDNUM: u32 = 1879048191;
pub const OLD_DT_HIOS: u32 = 1879048191;
pub const DT_LOPROC: u32 = 1879048192;
pub const DT_HIPROC: u32 = 2147483647;
pub const STB_LOCAL: u32 = 0;
pub const STB_GLOBAL: u32 = 1;
pub const STB_WEAK: u32 = 2;
pub const STT_NOTYPE: u32 = 0;
pub const STT_OBJECT: u32 = 1;
pub const STT_FUNC: u32 = 2;
pub const STT_SECTION: u32 = 3;
pub const STT_FILE: u32 = 4;
pub const STT_COMMON: u32 = 5;
pub const STT_TLS: u32 = 6;
pub const EI_NIDENT: u32 = 16;
pub const PF_R: u32 = 4;
pub const PF_W: u32 = 2;
pub const PF_X: u32 = 1;
pub const SHT_NULL: u32 = 0;
pub const SHT_PROGBITS: u32 = 1;
pub const SHT_SYMTAB: u32 = 2;
pub const SHT_STRTAB: u32 = 3;
pub const SHT_RELA: u32 = 4;
pub const SHT_HASH: u32 = 5;
pub const SHT_DYNAMIC: u32 = 6;
pub const SHT_NOTE: u32 = 7;
pub const SHT_NOBITS: u32 = 8;
pub const SHT_REL: u32 = 9;
pub const SHT_SHLIB: u32 = 10;
pub const SHT_DYNSYM: u32 = 11;
pub const SHT_NUM: u32 = 12;
pub const SHT_LOPROC: u32 = 1879048192;
pub const SHT_HIPROC: u32 = 2147483647;
pub const SHT_LOUSER: u32 = 2147483648;
pub const SHT_HIUSER: u32 = 4294967295;
pub const SHF_WRITE: u32 = 1;
pub const SHF_ALLOC: u32 = 2;
pub const SHF_EXECINSTR: u32 = 4;
pub const SHF_RELA_LIVEPATCH: u32 = 1048576;
pub const SHF_RO_AFTER_INIT: u32 = 2097152;
pub const SHF_MASKPROC: u32 = 4026531840;
pub const SHN_UNDEF: u32 = 0;
pub const SHN_LORESERVE: u32 = 65280;
pub const SHN_LOPROC: u32 = 65280;
pub const SHN_HIPROC: u32 = 65311;
pub const SHN_LIVEPATCH: u32 = 65312;
pub const SHN_ABS: u32 = 65521;
pub const SHN_COMMON: u32 = 65522;
pub const SHN_HIRESERVE: u32 = 65535;
pub const EI_MAG0: u32 = 0;
pub const EI_MAG1: u32 = 1;
pub const EI_MAG2: u32 = 2;
pub const EI_MAG3: u32 = 3;
pub const EI_CLASS: u32 = 4;
pub const EI_DATA: u32 = 5;
pub const EI_VERSION: u32 = 6;
pub const EI_OSABI: u32 = 7;
pub const EI_PAD: u32 = 8;
pub const ELFMAG0: u32 = 127;
pub const ELFMAG1: u8 = 69u8;
pub const ELFMAG2: u8 = 76u8;
pub const ELFMAG3: u8 = 70u8;
pub const ELFMAG: &[u8; 5] = b"\x7FELF\0";
pub const SELFMAG: u32 = 4;
pub const ELFCLASSNONE: u32 = 0;
pub const ELFCLASS32: u32 = 1;
pub const ELFCLASS64: u32 = 2;
pub const ELFCLASSNUM: u32 = 3;
pub const ELFDATANONE: u32 = 0;
pub const ELFDATA2LSB: u32 = 1;
pub const ELFDATA2MSB: u32 = 2;
pub const EV_NONE: u32 = 0;
pub const EV_CURRENT: u32 = 1;
pub const EV_NUM: u32 = 2;
pub const ELFOSABI_NONE: u32 = 0;
pub const ELFOSABI_LINUX: u32 = 3;
pub const ELF_OSABI: u32 = 0;
pub const NT_PRSTATUS: u32 = 1;
pub const NT_PRFPREG: u32 = 2;
pub const NT_PRPSINFO: u32 = 3;
pub const NT_TASKSTRUCT: u32 = 4;
pub const NT_AUXV: u32 = 6;
pub const NT_SIGINFO: u32 = 1397311305;
pub const NT_FILE: u32 = 1179208773;
pub const NT_PRXFPREG: u32 = 1189489535;
pub const NT_PPC_VMX: u32 = 256;
pub const NT_PPC_SPE: u32 = 257;
pub const NT_PPC_VSX: u32 = 258;
pub const NT_PPC_TAR: u32 = 259;
pub const NT_PPC_PPR: u32 = 260;
pub const NT_PPC_DSCR: u32 = 261;
pub const NT_PPC_EBB: u32 = 262;
pub const NT_PPC_PMU: u32 = 263;
pub const NT_PPC_TM_CGPR: u32 = 264;
pub const NT_PPC_TM_CFPR: u32 = 265;
pub const NT_PPC_TM_CVMX: u32 = 266;
pub const NT_PPC_TM_CVSX: u32 = 267;
pub const NT_PPC_TM_SPR: u32 = 268;
pub const NT_PPC_TM_CTAR: u32 = 269;
pub const NT_PPC_TM_CPPR: u32 = 270;
pub const NT_PPC_TM_CDSCR: u32 = 271;
pub const NT_PPC_PKEY: u32 = 272;
pub const NT_PPC_DEXCR: u32 = 273;
pub const NT_PPC_HASHKEYR: u32 = 274;
pub const NT_386_TLS: u32 = 512;
pub const NT_386_IOPERM: u32 = 513;
pub const NT_X86_XSTATE: u32 = 514;
pub const NT_X86_SHSTK: u32 = 516;
pub const NT_S390_HIGH_GPRS: u32 = 768;
pub const NT_S390_TIMER: u32 = 769;
pub const NT_S390_TODCMP: u32 = 770;
pub const NT_S390_TODPREG: u32 = 771;
pub const NT_S390_CTRS: u32 = 772;
pub const NT_S390_PREFIX: u32 = 773;
pub const NT_S390_LAST_BREAK: u32 = 774;
pub const NT_S390_SYSTEM_CALL: u32 = 775;
pub const NT_S390_TDB: u32 = 776;
pub const NT_S390_VXRS_LOW: u32 = 777;
pub const NT_S390_VXRS_HIGH: u32 = 778;
pub const NT_S390_GS_CB: u32 = 779;
pub const NT_S390_GS_BC: u32 = 780;
pub const NT_S390_RI_CB: u32 = 781;
pub const NT_S390_PV_CPU_DATA: u32 = 782;
pub const NT_ARM_VFP: u32 = 1024;
pub const NT_ARM_TLS: u32 = 1025;
pub const NT_ARM_HW_BREAK: u32 = 1026;
pub const NT_ARM_HW_WATCH: u32 = 1027;
pub const NT_ARM_SYSTEM_CALL: u32 = 1028;
pub const NT_ARM_SVE: u32 = 1029;
pub const NT_ARM_PAC_MASK: u32 = 1030;
pub const NT_ARM_PACA_KEYS: u32 = 1031;
pub const NT_ARM_PACG_KEYS: u32 = 1032;
pub const NT_ARM_TAGGED_ADDR_CTRL: u32 = 1033;
pub const NT_ARM_PAC_ENABLED_KEYS: u32 = 1034;
pub const NT_ARM_SSVE: u32 = 1035;
pub const NT_ARM_ZA: u32 = 1036;
pub const NT_ARM_ZT: u32 = 1037;
pub const NT_ARM_FPMR: u32 = 1038;
pub const NT_ARC_V2: u32 = 1536;
pub const NT_VMCOREDD: u32 = 1792;
pub const NT_MIPS_DSP: u32 = 2048;
pub const NT_MIPS_FP_MODE: u32 = 2049;
pub const NT_MIPS_MSA: u32 = 2050;
pub const NT_RISCV_CSR: u32 = 2304;
pub const NT_RISCV_VECTOR: u32 = 2305;
pub const NT_LOONGARCH_CPUCFG: u32 = 2560;
pub const NT_LOONGARCH_CSR: u32 = 2561;
pub const NT_LOONGARCH_LSX: u32 = 2562;
pub const NT_LOONGARCH_LASX: u32 = 2563;
pub const NT_LOONGARCH_LBT: u32 = 2564;
pub const NT_LOONGARCH_HW_BREAK: u32 = 2565;
pub const NT_LOONGARCH_HW_WATCH: u32 = 2566;
pub const NT_GNU_PROPERTY_TYPE_0: u32 = 5;
pub const GNU_PROPERTY_AARCH64_FEATURE_1_AND: u32 = 3221225472;
pub const GNU_PROPERTY_AARCH64_FEATURE_1_BTI: u32 = 1;
pub const ELF32_GNU_PROPERTY_ALIGN: u32 = 4;
pub const ELF64_GNU_PROPERTY_ALIGN: u32 = 8;
pub const ELF_GNU_PROPERTY_ALIGN: u32 = 8;
pub const CLS_BITS: u32 = 6;
pub const _DPRINTK_CLASS_DFLT: u32 = 63;
pub const _DPRINTK_FLAGS_NONE: u32 = 0;
pub const _DPRINTK_FLAGS_PRINT: u32 = 1;
pub const _DPRINTK_FLAGS_INCL_MODNAME: u32 = 2;
pub const _DPRINTK_FLAGS_INCL_FUNCNAME: u32 = 4;
pub const _DPRINTK_FLAGS_INCL_LINENO: u32 = 8;
pub const _DPRINTK_FLAGS_INCL_TID: u32 = 16;
pub const _DPRINTK_FLAGS_INCL_SOURCENAME: u32 = 32;
pub const _DPRINTK_FLAGS_INCL_ANY: u32 = 62;
pub const _DPRINTK_FLAGS_DEFAULT: u32 = 0;
pub const IO_SPACE_LIMIT: u32 = 65535;
pub const SWNODE_GRAPH_PORT_NAME_FMT: &[u8; 8] = b"port@%u\0";
pub const SWNODE_GRAPH_ENDPOINT_NAME_FMT: &[u8; 12] = b"endpoint@%u\0";
pub const NR_FWNODE_REFERENCE_ARGS: u32 = 8;
pub const PIO_INDIRECT_SIZE: u32 = 0;
pub const MMIO_UPPER_LIMIT: u32 = 65535;
pub const SG_CHAIN: u32 = 1;
pub const SG_END: u32 = 2;
pub const SG_PAGE_LINK_MASK: u32 = 3;
pub const SG_DMA_BUS_ADDRESS: u32 = 1;
pub const SG_DMA_SWIOTLB: u32 = 2;
pub const SG_CHUNK_SIZE: u32 = 128;
pub const SG_MAX_SEGMENTS: u32 = 2048;
pub const SG_MITER_ATOMIC: u32 = 1;
pub const SG_MITER_TO_SG: u32 = 2;
pub const SG_MITER_FROM_SG: u32 = 4;
pub const DMA_ATTR_WEAK_ORDERING: u32 = 2;
pub const DMA_ATTR_WRITE_COMBINE: u32 = 4;
pub const DMA_ATTR_NO_KERNEL_MAPPING: u32 = 16;
pub const DMA_ATTR_SKIP_CPU_SYNC: u32 = 32;
pub const DMA_ATTR_FORCE_CONTIGUOUS: u32 = 64;
pub const DMA_ATTR_ALLOC_SINGLE_PAGES: u32 = 128;
pub const DMA_ATTR_NO_WARN: u32 = 256;
pub const DMA_ATTR_PRIVILEGED: u32 = 512;
pub const IPV6_FL_A_GET: u32 = 0;
pub const IPV6_FL_A_PUT: u32 = 1;
pub const IPV6_FL_A_RENEW: u32 = 2;
pub const IPV6_FL_F_CREATE: u32 = 1;
pub const IPV6_FL_F_EXCL: u32 = 2;
pub const IPV6_FL_F_REFLECT: u32 = 4;
pub const IPV6_FL_F_REMOTE: u32 = 8;
pub const IPV6_FL_S_NONE: u32 = 0;
pub const IPV6_FL_S_EXCL: u32 = 1;
pub const IPV6_FL_S_PROCESS: u32 = 2;
pub const IPV6_FL_S_USER: u32 = 3;
pub const IPV6_FL_S_ANY: u32 = 255;
pub const IPV6_FLOWINFO_FLOWLABEL: u32 = 1048575;
pub const IPV6_FLOWINFO_PRIORITY: u32 = 267386880;
pub const IPV6_PRIORITY_UNCHARACTERIZED: u32 = 0;
pub const IPV6_PRIORITY_FILLER: u32 = 256;
pub const IPV6_PRIORITY_UNATTENDED: u32 = 512;
pub const IPV6_PRIORITY_RESERVED1: u32 = 768;
pub const IPV6_PRIORITY_BULK: u32 = 1024;
pub const IPV6_PRIORITY_RESERVED2: u32 = 1280;
pub const IPV6_PRIORITY_INTERACTIVE: u32 = 1536;
pub const IPV6_PRIORITY_CONTROL: u32 = 1792;
pub const IPV6_PRIORITY_8: u32 = 2048;
pub const IPV6_PRIORITY_9: u32 = 2304;
pub const IPV6_PRIORITY_10: u32 = 2560;
pub const IPV6_PRIORITY_11: u32 = 2816;
pub const IPV6_PRIORITY_12: u32 = 3072;
pub const IPV6_PRIORITY_13: u32 = 3328;
pub const IPV6_PRIORITY_14: u32 = 3584;
pub const IPV6_PRIORITY_15: u32 = 3840;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_MH: u32 = 135;
pub const IPV6_TLV_PAD1: u32 = 0;
pub const IPV6_TLV_PADN: u32 = 1;
pub const IPV6_TLV_ROUTERALERT: u32 = 5;
pub const IPV6_TLV_CALIPSO: u32 = 7;
pub const IPV6_TLV_IOAM: u32 = 49;
pub const IPV6_TLV_JUMBO: u32 = 194;
pub const IPV6_TLV_HAO: u32 = 201;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_FLOWINFO: u32 = 11;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const IPV6_FLOWLABEL_MGR: u32 = 32;
pub const IPV6_FLOWINFO_SEND: u32 = 33;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_PREFER_SRC_TMP: u32 = 1;
pub const IPV6_PREFER_SRC_PUBLIC: u32 = 2;
pub const IPV6_PREFER_SRC_PUBTMP_DEFAULT: u32 = 256;
pub const IPV6_PREFER_SRC_COA: u32 = 4;
pub const IPV6_PREFER_SRC_HOME: u32 = 1024;
pub const IPV6_PREFER_SRC_CGA: u32 = 8;
pub const IPV6_PREFER_SRC_NONCGA: u32 = 2048;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const SIPHASH_CONST_0: u64 = 8317987319222330741;
pub const SIPHASH_CONST_1: u64 = 7237128888997146477;
pub const SIPHASH_CONST_2: u64 = 7816392313619706465;
pub const SIPHASH_CONST_3: u64 = 8387220255154660723;
pub const HSIPHASH_CONST_0: u32 = 0;
pub const HSIPHASH_CONST_1: u32 = 0;
pub const HSIPHASH_CONST_2: u32 = 1819895653;
pub const HSIPHASH_CONST_3: u32 = 1952801890;
pub const ETH_ALEN: u32 = 6;
pub const ETH_TLEN: u32 = 2;
pub const ETH_HLEN: u32 = 14;
pub const ETH_ZLEN: u32 = 60;
pub const ETH_DATA_LEN: u32 = 1500;
pub const ETH_FRAME_LEN: u32 = 1514;
pub const ETH_FCS_LEN: u32 = 4;
pub const ETH_MIN_MTU: u32 = 68;
pub const ETH_MAX_MTU: u32 = 65535;
pub const ETH_P_LOOP: u32 = 96;
pub const ETH_P_PUP: u32 = 512;
pub const ETH_P_PUPAT: u32 = 513;
pub const ETH_P_TSN: u32 = 8944;
pub const ETH_P_ERSPAN2: u32 = 8939;
pub const ETH_P_IP: u32 = 2048;
pub const ETH_P_X25: u32 = 2053;
pub const ETH_P_ARP: u32 = 2054;
pub const ETH_P_BPQ: u32 = 2303;
pub const ETH_P_IEEEPUP: u32 = 2560;
pub const ETH_P_IEEEPUPAT: u32 = 2561;
pub const ETH_P_BATMAN: u32 = 17157;
pub const ETH_P_DEC: u32 = 24576;
pub const ETH_P_DNA_DL: u32 = 24577;
pub const ETH_P_DNA_RC: u32 = 24578;
pub const ETH_P_DNA_RT: u32 = 24579;
pub const ETH_P_LAT: u32 = 24580;
pub const ETH_P_DIAG: u32 = 24581;
pub const ETH_P_CUST: u32 = 24582;
pub const ETH_P_SCA: u32 = 24583;
pub const ETH_P_TEB: u32 = 25944;
pub const ETH_P_RARP: u32 = 32821;
pub const ETH_P_ATALK: u32 = 32923;
pub const ETH_P_AARP: u32 = 33011;
pub const ETH_P_8021Q: u32 = 33024;
pub const ETH_P_ERSPAN: u32 = 35006;
pub const ETH_P_IPX: u32 = 33079;
pub const ETH_P_IPV6: u32 = 34525;
pub const ETH_P_PAUSE: u32 = 34824;
pub const ETH_P_SLOW: u32 = 34825;
pub const ETH_P_WCCP: u32 = 34878;
pub const ETH_P_MPLS_UC: u32 = 34887;
pub const ETH_P_MPLS_MC: u32 = 34888;
pub const ETH_P_ATMMPOA: u32 = 34892;
pub const ETH_P_PPP_DISC: u32 = 34915;
pub const ETH_P_PPP_SES: u32 = 34916;
pub const ETH_P_LINK_CTL: u32 = 34924;
pub const ETH_P_ATMFATE: u32 = 34948;
pub const ETH_P_PAE: u32 = 34958;
pub const ETH_P_PROFINET: u32 = 34962;
pub const ETH_P_REALTEK: u32 = 34969;
pub const ETH_P_AOE: u32 = 34978;
pub const ETH_P_ETHERCAT: u32 = 34980;
pub const ETH_P_8021AD: u32 = 34984;
pub const ETH_P_802_EX1: u32 = 34997;
pub const ETH_P_PREAUTH: u32 = 35015;
pub const ETH_P_TIPC: u32 = 35018;
pub const ETH_P_LLDP: u32 = 35020;
pub const ETH_P_MRP: u32 = 35043;
pub const ETH_P_MACSEC: u32 = 35045;
pub const ETH_P_8021AH: u32 = 35047;
pub const ETH_P_MVRP: u32 = 35061;
pub const ETH_P_1588: u32 = 35063;
pub const ETH_P_NCSI: u32 = 35064;
pub const ETH_P_PRP: u32 = 35067;
pub const ETH_P_CFM: u32 = 35074;
pub const ETH_P_FCOE: u32 = 35078;
pub const ETH_P_IBOE: u32 = 35093;
pub const ETH_P_TDLS: u32 = 35085;
pub const ETH_P_FIP: u32 = 35092;
pub const ETH_P_80221: u32 = 35095;
pub const ETH_P_HSR: u32 = 35119;
pub const ETH_P_NSH: u32 = 35151;
pub const ETH_P_LOOPBACK: u32 = 36864;
pub const ETH_P_QINQ1: u32 = 37120;
pub const ETH_P_QINQ2: u32 = 37376;
pub const ETH_P_QINQ3: u32 = 37632;
pub const ETH_P_EDSA: u32 = 56026;
pub const ETH_P_DSA_8021Q: u32 = 56027;
pub const ETH_P_DSA_A5PSW: u32 = 57345;
pub const ETH_P_IFE: u32 = 60734;
pub const ETH_P_AF_IUCV: u32 = 64507;
pub const ETH_P_802_3_MIN: u32 = 1536;
pub const ETH_P_802_3: u32 = 1;
pub const ETH_P_AX25: u32 = 2;
pub const ETH_P_ALL: u32 = 3;
pub const ETH_P_802_2: u32 = 4;
pub const ETH_P_SNAP: u32 = 5;
pub const ETH_P_DDCMP: u32 = 6;
pub const ETH_P_WAN_PPP: u32 = 7;
pub const ETH_P_PPP_MP: u32 = 8;
pub const ETH_P_LOCALTALK: u32 = 9;
pub const ETH_P_CAN: u32 = 12;
pub const ETH_P_CANFD: u32 = 13;
pub const ETH_P_CANXL: u32 = 14;
pub const ETH_P_PPPTALK: u32 = 16;
pub const ETH_P_TR_802_2: u32 = 17;
pub const ETH_P_MOBITEX: u32 = 21;
pub const ETH_P_CONTROL: u32 = 22;
pub const ETH_P_IRDA: u32 = 23;
pub const ETH_P_ECONET: u32 = 24;
pub const ETH_P_HDLC: u32 = 25;
pub const ETH_P_ARCNET: u32 = 26;
pub const ETH_P_DSA: u32 = 27;
pub const ETH_P_TRAILER: u32 = 28;
pub const ETH_P_PHONET: u32 = 245;
pub const ETH_P_IEEE802154: u32 = 246;
pub const ETH_P_CAIF: u32 = 247;
pub const ETH_P_XDSA: u32 = 248;
pub const ETH_P_MAP: u32 = 249;
pub const ETH_P_MCTP: u32 = 250;
pub const __UAPI_DEF_ETHHDR: u32 = 1;
pub const TC_PRIO_BESTEFFORT: u32 = 0;
pub const TC_PRIO_FILLER: u32 = 1;
pub const TC_PRIO_BULK: u32 = 2;
pub const TC_PRIO_INTERACTIVE_BULK: u32 = 4;
pub const TC_PRIO_INTERACTIVE: u32 = 6;
pub const TC_PRIO_CONTROL: u32 = 7;
pub const TC_PRIO_MAX: u32 = 15;
pub const TC_H_MAJ_MASK: u32 = 4294901760;
pub const TC_H_MIN_MASK: u32 = 65535;
pub const TC_H_UNSPEC: u32 = 0;
pub const TC_H_ROOT: u32 = 4294967295;
pub const TC_H_INGRESS: u32 = 4294967281;
pub const TC_H_CLSACT: u32 = 4294967281;
pub const TC_H_MIN_PRIORITY: u32 = 65504;
pub const TC_H_MIN_INGRESS: u32 = 65522;
pub const TC_H_MIN_EGRESS: u32 = 65523;
pub const TC_LINKLAYER_MASK: u32 = 15;
pub const TC_RTAB_SIZE: u32 = 1024;
pub const SKBPRIO_MAX_PRIORITY: u32 = 64;
pub const TCQ_PRIO_BANDS: u32 = 16;
pub const TCQ_MIN_PRIO_BANDS: u32 = 2;
pub const TCQ_PLUG_BUFFER: u32 = 0;
pub const TCQ_PLUG_RELEASE_ONE: u32 = 1;
pub const TCQ_PLUG_RELEASE_INDEFINITE: u32 = 2;
pub const TCQ_PLUG_LIMIT: u32 = 3;
pub const TC_RED_ECN: u32 = 1;
pub const TC_RED_HARDDROP: u32 = 2;
pub const TC_RED_ADAPTATIVE: u32 = 4;
pub const TC_RED_NODROP: u32 = 8;
pub const TC_RED_HISTORIC_FLAGS: u32 = 7;
pub const MAX_DPs: u32 = 16;
pub const TC_HTB_NUMPRIO: u32 = 8;
pub const TC_HTB_MAXDEPTH: u32 = 8;
pub const TC_HTB_PROTOVER: u32 = 3;
pub const NETEM_DIST_SCALE: u32 = 8192;
pub const NETEM_DIST_MAX: u32 = 16384;
pub const TC_QOPT_BITMASK: u32 = 15;
pub const TC_QOPT_MAX_QUEUE: u32 = 16;
pub const TC_MQPRIO_F_MODE: u32 = 1;
pub const TC_MQPRIO_F_SHAPER: u32 = 2;
pub const TC_MQPRIO_F_MIN_RATE: u32 = 4;
pub const TC_MQPRIO_F_MAX_RATE: u32 = 8;
pub const SFB_MAX_PROB: u32 = 65535;
pub const FQ_CODEL_QUANTUM_MAX: u32 = 1048576;
pub const FQ_BANDS: u32 = 3;
pub const FQ_MIN_WEIGHT: u32 = 16384;
pub const TC_CAKE_MAX_TINS: u32 = 8;
pub const TCQ_ETS_MAX_BANDS: u32 = 16;
pub const TC_COOKIE_MAX_SIZE: u32 = 16;
pub const TCA_ACT_FLAGS_NO_PERCPU_STATS: u32 = 1;
pub const TCA_ACT_FLAGS_SKIP_HW: u32 = 2;
pub const TCA_ACT_FLAGS_SKIP_SW: u32 = 4;
pub const TCA_ACT_HW_STATS_IMMEDIATE: u32 = 1;
pub const TCA_ACT_HW_STATS_DELAYED: u32 = 2;
pub const TCA_ACT_MAX_PRIO: u32 = 32;
pub const TCA_ACT_BIND: u32 = 1;
pub const TCA_ACT_NOBIND: u32 = 0;
pub const TCA_ACT_UNBIND: u32 = 1;
pub const TCA_ACT_NOUNBIND: u32 = 0;
pub const TCA_ACT_REPLACE: u32 = 1;
pub const TCA_ACT_NOREPLACE: u32 = 0;
pub const TC_ACT_UNSPEC: i32 = -1;
pub const TC_ACT_OK: u32 = 0;
pub const TC_ACT_RECLASSIFY: u32 = 1;
pub const TC_ACT_SHOT: u32 = 2;
pub const TC_ACT_PIPE: u32 = 3;
pub const TC_ACT_STOLEN: u32 = 4;
pub const TC_ACT_QUEUED: u32 = 5;
pub const TC_ACT_REPEAT: u32 = 6;
pub const TC_ACT_REDIRECT: u32 = 7;
pub const TC_ACT_TRAP: u32 = 8;
pub const TC_ACT_VALUE_MAX: u32 = 8;
pub const __TC_ACT_EXT_SHIFT: u32 = 28;
pub const TC_ACT_EXT_VAL_MASK: u32 = 268435455;
pub const TCA_ACT_GACT: u32 = 5;
pub const TCA_ACT_IPT: u32 = 6;
pub const TCA_ACT_PEDIT: u32 = 7;
pub const TCA_ACT_MIRRED: u32 = 8;
pub const TCA_ACT_NAT: u32 = 9;
pub const TCA_ACT_XT: u32 = 10;
pub const TCA_ACT_SKBEDIT: u32 = 11;
pub const TCA_ACT_VLAN: u32 = 12;
pub const TCA_ACT_BPF: u32 = 13;
pub const TCA_ACT_CONNMARK: u32 = 14;
pub const TCA_ACT_SKBMOD: u32 = 15;
pub const TCA_ACT_CSUM: u32 = 16;
pub const TCA_ACT_TUNNEL_KEY: u32 = 17;
pub const TCA_ACT_SIMP: u32 = 22;
pub const TCA_ACT_IFE: u32 = 25;
pub const TCA_ACT_SAMPLE: u32 = 26;
pub const TC_POLICE_UNSPEC: i32 = -1;
pub const TC_POLICE_OK: u32 = 0;
pub const TC_POLICE_RECLASSIFY: u32 = 1;
pub const TC_POLICE_SHOT: u32 = 2;
pub const TC_POLICE_PIPE: u32 = 3;
pub const TCA_CLS_FLAGS_SKIP_HW: u32 = 1;
pub const TCA_CLS_FLAGS_SKIP_SW: u32 = 2;
pub const TCA_CLS_FLAGS_IN_HW: u32 = 4;
pub const TCA_CLS_FLAGS_NOT_IN_HW: u32 = 8;
pub const TCA_CLS_FLAGS_VERBOSE: u32 = 16;
pub const TC_U32_UNSPEC: u32 = 0;
pub const TC_U32_ROOT: u32 = 4293918720;
pub const TC_U32_TERMINAL: u32 = 1;
pub const TC_U32_OFFSET: u32 = 2;
pub const TC_U32_VAROFFSET: u32 = 4;
pub const TC_U32_EAT: u32 = 8;
pub const TC_U32_MAXDEPTH: u32 = 8;
pub const TCA_BPF_FLAG_ACT_DIRECT: u32 = 1;
pub const TCA_FLOWER_MASK_FLAGS_RANGE: u32 = 1;
pub const TCF_EM_REL_END: u32 = 0;
pub const TCF_EM_REL_AND: u32 = 1;
pub const TCF_EM_REL_OR: u32 = 2;
pub const TCF_EM_INVERT: u32 = 4;
pub const TCF_EM_SIMPLE: u32 = 8;
pub const TCF_EM_REL_MASK: u32 = 3;
pub const TCF_EM_CONTAINER: u32 = 0;
pub const TCF_EM_CMP: u32 = 1;
pub const TCF_EM_NBYTE: u32 = 2;
pub const TCF_EM_U32: u32 = 3;
pub const TCF_EM_META: u32 = 4;
pub const TCF_EM_TEXT: u32 = 5;
pub const TCF_EM_VLAN: u32 = 6;
pub const TCF_EM_CANID: u32 = 7;
pub const TCF_EM_IPSET: u32 = 8;
pub const TCF_EM_IPT: u32 = 9;
pub const TCF_EM_MAX: u32 = 9;
pub const FLOW_DIS_MPLS_MAX: u32 = 7;
pub const FLOW_DIS_TUN_OPTS_MAX: u32 = 255;
pub const FLOW_DIS_CFM_MDL_MAX: u32 = 7;
pub const FLOW_KEYS_DIGEST_LEN: u32 = 16;
pub const PACKET_HOST: u32 = 0;
pub const PACKET_BROADCAST: u32 = 1;
pub const PACKET_MULTICAST: u32 = 2;
pub const PACKET_OTHERHOST: u32 = 3;
pub const PACKET_OUTGOING: u32 = 4;
pub const PACKET_LOOPBACK: u32 = 5;
pub const PACKET_USER: u32 = 6;
pub const PACKET_KERNEL: u32 = 7;
pub const PACKET_FASTROUTE: u32 = 6;
pub const PACKET_ADD_MEMBERSHIP: u32 = 1;
pub const PACKET_DROP_MEMBERSHIP: u32 = 2;
pub const PACKET_RECV_OUTPUT: u32 = 3;
pub const PACKET_RX_RING: u32 = 5;
pub const PACKET_STATISTICS: u32 = 6;
pub const PACKET_COPY_THRESH: u32 = 7;
pub const PACKET_AUXDATA: u32 = 8;
pub const PACKET_ORIGDEV: u32 = 9;
pub const PACKET_VERSION: u32 = 10;
pub const PACKET_HDRLEN: u32 = 11;
pub const PACKET_RESERVE: u32 = 12;
pub const PACKET_TX_RING: u32 = 13;
pub const PACKET_LOSS: u32 = 14;
pub const PACKET_VNET_HDR: u32 = 15;
pub const PACKET_TX_TIMESTAMP: u32 = 16;
pub const PACKET_TIMESTAMP: u32 = 17;
pub const PACKET_FANOUT: u32 = 18;
pub const PACKET_TX_HAS_OFF: u32 = 19;
pub const PACKET_QDISC_BYPASS: u32 = 20;
pub const PACKET_ROLLOVER_STATS: u32 = 21;
pub const PACKET_FANOUT_DATA: u32 = 22;
pub const PACKET_IGNORE_OUTGOING: u32 = 23;
pub const PACKET_VNET_HDR_SZ: u32 = 24;
pub const PACKET_FANOUT_HASH: u32 = 0;
pub const PACKET_FANOUT_LB: u32 = 1;
pub const PACKET_FANOUT_CPU: u32 = 2;
pub const PACKET_FANOUT_ROLLOVER: u32 = 3;
pub const PACKET_FANOUT_RND: u32 = 4;
pub const PACKET_FANOUT_QM: u32 = 5;
pub const PACKET_FANOUT_CBPF: u32 = 6;
pub const PACKET_FANOUT_EBPF: u32 = 7;
pub const PACKET_FANOUT_FLAG_ROLLOVER: u32 = 4096;
pub const PACKET_FANOUT_FLAG_UNIQUEID: u32 = 8192;
pub const PACKET_FANOUT_FLAG_IGNORE_OUTGOING: u32 = 16384;
pub const PACKET_FANOUT_FLAG_DEFRAG: u32 = 32768;
pub const TP_STATUS_KERNEL: u32 = 0;
pub const TP_STATUS_USER: u32 = 1;
pub const TP_STATUS_COPY: u32 = 2;
pub const TP_STATUS_LOSING: u32 = 4;
pub const TP_STATUS_CSUMNOTREADY: u32 = 8;
pub const TP_STATUS_VLAN_VALID: u32 = 16;
pub const TP_STATUS_BLK_TMO: u32 = 32;
pub const TP_STATUS_VLAN_TPID_VALID: u32 = 64;
pub const TP_STATUS_CSUM_VALID: u32 = 128;
pub const TP_STATUS_GSO_TCP: u32 = 256;
pub const TP_STATUS_AVAILABLE: u32 = 0;
pub const TP_STATUS_SEND_REQUEST: u32 = 1;
pub const TP_STATUS_SENDING: u32 = 2;
pub const TP_STATUS_WRONG_FORMAT: u32 = 4;
pub const TP_STATUS_TS_SOFTWARE: u32 = 536870912;
pub const TP_STATUS_TS_SYS_HARDWARE: u32 = 1073741824;
pub const TP_STATUS_TS_RAW_HARDWARE: u32 = 2147483648;
pub const TP_FT_REQ_FILL_RXHASH: u32 = 1;
pub const TPACKET_ALIGNMENT: u32 = 16;
pub const PACKET_MR_MULTICAST: u32 = 0;
pub const PACKET_MR_PROMISC: u32 = 1;
pub const PACKET_MR_ALLMULTI: u32 = 2;
pub const PACKET_MR_UNICAST: u32 = 3;
pub const LOOPBACK_IFINDEX: u32 = 1;
pub const FLOWI_FLAG_ANYSRC: u32 = 1;
pub const FLOWI_FLAG_KNOWN_NH: u32 = 2;
pub const NF_CT_STATE_INVALID_BIT: u32 = 1;
pub const NF_CT_STATE_UNTRACKED_BIT: u32 = 64;
pub const NF_CT_EXPECT_PERMANENT: u32 = 1;
pub const NF_CT_EXPECT_INACTIVE: u32 = 2;
pub const NF_CT_EXPECT_USERSPACE: u32 = 4;
pub const NFCT_INFOMASK: u32 = 7;
pub const NFCT_PTRMASK: i32 = -8;
pub const SKB_DROP_REASON_SUBSYS_SHIFT: u32 = 16;
pub const CHECKSUM_NONE: u32 = 0;
pub const CHECKSUM_UNNECESSARY: u32 = 1;
pub const CHECKSUM_COMPLETE: u32 = 2;
pub const CHECKSUM_PARTIAL: u32 = 3;
pub const SKB_MAX_CSUM_LEVEL: u32 = 3;
pub const MAX_SKB_FRAGS: u32 = 17;
pub const GSO_BY_FRAGS: u32 = 65535;
pub const SKB_DATAREF_SHIFT: u32 = 16;
pub const SKB_DATAREF_MASK: u32 = 65535;
pub const NET_SKBUFF_DATA_USES_OFFSET: u32 = 1;
pub const CLONED_MASK: u32 = 1;
pub const PKT_TYPE_MAX: u32 = 7;
pub const SKB_TSTAMP_TYPE_MASK: u32 = 3;
pub const TC_AT_INGRESS_MASK: u32 = 4;
pub const SKB_ALLOC_FCLONE: u32 = 1;
pub const SKB_ALLOC_RX: u32 = 2;
pub const SKB_ALLOC_NAPI: u32 = 4;
pub const SKB_DST_NOREF: u32 = 1;
pub const SKB_DST_PTRMASK: i32 = -2;
pub const ENCAP_TYPE_ETHER: u32 = 0;
pub const ENCAP_TYPE_IPPROTO: u32 = 1;
pub const CHECKSUM_BREAK: u32 = 76;
pub const NPROTO: u32 = 46;
pub const SYS_SOCKET: u32 = 1;
pub const SYS_BIND: u32 = 2;
pub const SYS_CONNECT: u32 = 3;
pub const SYS_LISTEN: u32 = 4;
pub const SYS_ACCEPT: u32 = 5;
pub const SYS_GETSOCKNAME: u32 = 6;
pub const SYS_GETPEERNAME: u32 = 7;
pub const SYS_SOCKETPAIR: u32 = 8;
pub const SYS_SEND: u32 = 9;
pub const SYS_RECV: u32 = 10;
pub const SYS_SENDTO: u32 = 11;
pub const SYS_RECVFROM: u32 = 12;
pub const SYS_SHUTDOWN: u32 = 13;
pub const SYS_SETSOCKOPT: u32 = 14;
pub const SYS_GETSOCKOPT: u32 = 15;
pub const SYS_SENDMSG: u32 = 16;
pub const SYS_RECVMSG: u32 = 17;
pub const SYS_ACCEPT4: u32 = 18;
pub const SYS_RECVMMSG: u32 = 19;
pub const SYS_SENDMMSG: u32 = 20;
pub const __SO_ACCEPTCON: u32 = 65536;
pub const SOCKWQ_ASYNC_NOSPACE: u32 = 0;
pub const SOCKWQ_ASYNC_WAITDATA: u32 = 1;
pub const SOCK_NOSPACE: u32 = 2;
pub const SOCK_PASSCRED: u32 = 3;
pub const SOCK_PASSSEC: u32 = 4;
pub const SOCK_SUPPORT_ZC: u32 = 5;
pub const SOCK_CUSTOM_SOCKOPT: u32 = 6;
pub const SOCK_PASSPIDFD: u32 = 7;
pub const SOCK_TYPE_MASK: u32 = 15;
pub const SOCK_CLOEXEC: u32 = 524288;
pub const SOCK_NONBLOCK: u32 = 2048;
pub const FDPUT_FPUT: u32 = 1;
pub const FDPUT_POS_UNLOCK: u32 = 2;
pub const _LINUX_BPF_H: u32 = 1;
pub const BPF_LD: u32 = 0;
pub const BPF_LDX: u32 = 1;
pub const BPF_ST: u32 = 2;
pub const BPF_STX: u32 = 3;
pub const BPF_ALU: u32 = 4;
pub const BPF_JMP: u32 = 5;
pub const BPF_RET: u32 = 6;
pub const BPF_MISC: u32 = 7;
pub const BPF_W: u32 = 0;
pub const BPF_H: u32 = 8;
pub const BPF_B: u32 = 16;
pub const BPF_IMM: u32 = 0;
pub const BPF_ABS: u32 = 32;
pub const BPF_IND: u32 = 64;
pub const BPF_MEM: u32 = 96;
pub const BPF_LEN: u32 = 128;
pub const BPF_MSH: u32 = 160;
pub const BPF_ADD: u32 = 0;
pub const BPF_SUB: u32 = 16;
pub const BPF_MUL: u32 = 32;
pub const BPF_DIV: u32 = 48;
pub const BPF_OR: u32 = 64;
pub const BPF_AND: u32 = 80;
pub const BPF_LSH: u32 = 96;
pub const BPF_RSH: u32 = 112;
pub const BPF_NEG: u32 = 128;
pub const BPF_MOD: u32 = 144;
pub const BPF_XOR: u32 = 160;
pub const BPF_JA: u32 = 0;
pub const BPF_JEQ: u32 = 16;
pub const BPF_JGT: u32 = 32;
pub const BPF_JGE: u32 = 48;
pub const BPF_JSET: u32 = 64;
pub const BPF_K: u32 = 0;
pub const BPF_X: u32 = 8;
pub const BPF_MAXINSNS: u32 = 4096;
pub const BPF_JMP32: u32 = 6;
pub const BPF_ALU64: u32 = 7;
pub const BPF_DW: u32 = 24;
pub const BPF_MEMSX: u32 = 128;
pub const BPF_ATOMIC: u32 = 192;
pub const BPF_XADD: u32 = 192;
pub const BPF_MOV: u32 = 176;
pub const BPF_ARSH: u32 = 192;
pub const BPF_END: u32 = 208;
pub const BPF_TO_LE: u32 = 0;
pub const BPF_TO_BE: u32 = 8;
pub const BPF_FROM_LE: u32 = 0;
pub const BPF_FROM_BE: u32 = 8;
pub const BPF_JNE: u32 = 80;
pub const BPF_JLT: u32 = 160;
pub const BPF_JLE: u32 = 176;
pub const BPF_JSGT: u32 = 96;
pub const BPF_JSGE: u32 = 112;
pub const BPF_JSLT: u32 = 192;
pub const BPF_JSLE: u32 = 208;
pub const BPF_JCOND: u32 = 224;
pub const BPF_CALL: u32 = 128;
pub const BPF_EXIT: u32 = 144;
pub const BPF_FETCH: u32 = 1;
pub const BPF_XCHG: u32 = 225;
pub const BPF_CMPXCHG: u32 = 241;
pub const BPF_F_ALLOW_OVERRIDE: u32 = 1;
pub const BPF_F_ALLOW_MULTI: u32 = 2;
pub const BPF_F_REPLACE: u32 = 4;
pub const BPF_F_BEFORE: u32 = 8;
pub const BPF_F_AFTER: u32 = 16;
pub const BPF_F_ID: u32 = 32;
pub const BPF_F_STRICT_ALIGNMENT: u32 = 1;
pub const BPF_F_ANY_ALIGNMENT: u32 = 2;
pub const BPF_F_TEST_RND_HI32: u32 = 4;
pub const BPF_F_TEST_STATE_FREQ: u32 = 8;
pub const BPF_F_SLEEPABLE: u32 = 16;
pub const BPF_F_XDP_HAS_FRAGS: u32 = 32;
pub const BPF_F_XDP_DEV_BOUND_ONLY: u32 = 64;
pub const BPF_F_TEST_REG_INVARIANTS: u32 = 128;
pub const BPF_F_NETFILTER_IP_DEFRAG: u32 = 1;
pub const BPF_PSEUDO_MAP_FD: u32 = 1;
pub const BPF_PSEUDO_MAP_IDX: u32 = 5;
pub const BPF_PSEUDO_MAP_VALUE: u32 = 2;
pub const BPF_PSEUDO_MAP_IDX_VALUE: u32 = 6;
pub const BPF_PSEUDO_BTF_ID: u32 = 3;
pub const BPF_PSEUDO_FUNC: u32 = 4;
pub const BPF_PSEUDO_CALL: u32 = 1;
pub const BPF_PSEUDO_KFUNC_CALL: u32 = 2;
pub const BPF_F_QUERY_EFFECTIVE: u32 = 1;
pub const BPF_F_TEST_RUN_ON_CPU: u32 = 1;
pub const BPF_F_TEST_XDP_LIVE_FRAMES: u32 = 2;
pub const BPF_F_TEST_SKB_CHECKSUM_COMPLETE: u32 = 4;
pub const BPF_BUILD_ID_SIZE: u32 = 20;
pub const BPF_OBJ_NAME_LEN: u32 = 16;
pub const XDP_PACKET_HEADROOM: u32 = 256;
pub const BPF_TAG_SIZE: u32 = 8;
pub const BPF_MAJOR_VERSION: u32 = 1;
pub const BPF_MINOR_VERSION: u32 = 1;
pub const BPF_A: u32 = 16;
pub const BPF_TAX: u32 = 0;
pub const BPF_TXA: u32 = 128;
pub const BPF_MEMWORDS: u32 = 16;
pub const SKF_AD_OFF: i32 = -4096;
pub const SKF_AD_PROTOCOL: u32 = 0;
pub const SKF_AD_PKTTYPE: u32 = 4;
pub const SKF_AD_IFINDEX: u32 = 8;
pub const SKF_AD_NLATTR: u32 = 12;
pub const SKF_AD_NLATTR_NEST: u32 = 16;
pub const SKF_AD_MARK: u32 = 20;
pub const SKF_AD_QUEUE: u32 = 24;
pub const SKF_AD_HATYPE: u32 = 28;
pub const SKF_AD_RXHASH: u32 = 32;
pub const SKF_AD_CPU: u32 = 36;
pub const SKF_AD_ALU_XOR_X: u32 = 40;
pub const SKF_AD_VLAN_TAG: u32 = 44;
pub const SKF_AD_VLAN_TAG_PRESENT: u32 = 48;
pub const SKF_AD_PAY_OFFSET: u32 = 52;
pub const SKF_AD_RANDOM: u32 = 56;
pub const SKF_AD_VLAN_TPID: u32 = 60;
pub const SKF_AD_MAX: u32 = 64;
pub const SKF_NET_OFF: i32 = -1048576;
pub const SKF_LL_OFF: i32 = -2097152;
pub const BPF_NET_OFF: i32 = -1048576;
pub const BPF_LL_OFF: i32 = -2097152;
pub const KSYM_NAME_LEN: u32 = 512;
pub const _LINUX_BTF_H: u32 = 1;
pub const BTF_SET8_KFUNCS: u32 = 1;
pub const BTF_MAGIC: u32 = 60319;
pub const BTF_VERSION: u32 = 1;
pub const BTF_MAX_TYPE: u32 = 1048575;
pub const BTF_MAX_NAME_OFFSET: u32 = 16777215;
pub const BTF_MAX_VLEN: u32 = 65535;
pub const BTF_INT_SIGNED: u32 = 1;
pub const BTF_INT_CHAR: u32 = 2;
pub const BTF_INT_BOOL: u32 = 4;
pub const KF_ACQUIRE: u32 = 1;
pub const KF_RELEASE: u32 = 2;
pub const KF_RET_NULL: u32 = 4;
pub const KF_TRUSTED_ARGS: u32 = 16;
pub const KF_SLEEPABLE: u32 = 32;
pub const KF_DESTRUCTIVE: u32 = 64;
pub const KF_RCU: u32 = 128;
pub const KF_ITER_NEW: u32 = 256;
pub const KF_ITER_NEXT: u32 = 512;
pub const KF_ITER_DESTROY: u32 = 1024;
pub const KF_RCU_PROTECTED: u32 = 2048;
pub const BTF_SHOW_UNSAFE: u32 = 16;
pub const CPU_ONLINE: u32 = 2;
pub const CPU_UP_PREPARE: u32 = 3;
pub const CPU_DEAD: u32 = 7;
pub const CPU_DEAD_FROZEN: u32 = 8;
pub const CPU_POST_DEAD: u32 = 9;
pub const CPU_BROKEN: u32 = 11;
pub const POKE_MAX_OPCODE_SIZE: u32 = 5;
pub const INT3_INSN_SIZE: u32 = 1;
pub const INT3_INSN_OPCODE: u32 = 204;
pub const RET_INSN_SIZE: u32 = 1;
pub const RET_INSN_OPCODE: u32 = 195;
pub const CALL_INSN_SIZE: u32 = 5;
pub const CALL_INSN_OPCODE: u32 = 232;
pub const JMP32_INSN_SIZE: u32 = 5;
pub const JMP32_INSN_OPCODE: u32 = 233;
pub const JMP8_INSN_SIZE: u32 = 2;
pub const JMP8_INSN_OPCODE: u32 = 235;
pub const DISP32_SIZE: u32 = 4;
pub const TASKSTATS_VERSION: u32 = 14;
pub const TS_COMM_LEN: u32 = 32;
pub const TASKSTATS_GENL_NAME: &[u8; 10] = b"TASKSTATS\0";
pub const TASKSTATS_GENL_VERSION: u32 = 1;
pub const _U: u32 = 1;
pub const _L: u32 = 2;
pub const _D: u32 = 4;
pub const _C: u32 = 8;
pub const _P: u32 = 16;
pub const _S: u32 = 32;
pub const _X: u32 = 64;
pub const _SP: u32 = 128;
pub const SEQ_SKIP: u32 = 1;
pub const UID_GID_MAP_MAX_BASE_EXTENTS: u32 = 5;
pub const UID_GID_MAP_MAX_EXTENTS: u32 = 340;
pub const USERNS_SETGROUPS_ALLOWED: u32 = 1;
pub const USERNS_INIT_FLAGS: u32 = 1;
pub const NMI_VECTOR: u32 = 2;
pub const FIRST_EXTERNAL_VECTOR: u32 = 32;
pub const IA32_SYSCALL_VECTOR: u32 = 128;
pub const SPURIOUS_APIC_VECTOR: u32 = 255;
pub const ERROR_APIC_VECTOR: u32 = 254;
pub const RESCHEDULE_VECTOR: u32 = 253;
pub const CALL_FUNCTION_VECTOR: u32 = 252;
pub const CALL_FUNCTION_SINGLE_VECTOR: u32 = 251;
pub const THERMAL_APIC_VECTOR: u32 = 250;
pub const THRESHOLD_APIC_VECTOR: u32 = 249;
pub const REBOOT_VECTOR: u32 = 248;
pub const X86_PLATFORM_IPI_VECTOR: u32 = 247;
pub const IRQ_WORK_VECTOR: u32 = 246;
pub const DEFERRED_ERROR_VECTOR: u32 = 244;
pub const HYPERVISOR_CALLBACK_VECTOR: u32 = 243;
pub const POSTED_INTR_VECTOR: u32 = 242;
pub const POSTED_INTR_WAKEUP_VECTOR: u32 = 241;
pub const POSTED_INTR_NESTED_VECTOR: u32 = 240;
pub const MANAGED_IRQ_SHUTDOWN_VECTOR: u32 = 239;
pub const LOCAL_TIMER_VECTOR: u32 = 236;
pub const POSTED_MSI_NOTIFICATION_VECTOR: u32 = 235;
pub const NR_VECTORS: u32 = 256;
pub const FIRST_SYSTEM_VECTOR: u32 = 235;
pub const NR_EXTERNAL_VECTORS: u32 = 203;
pub const NR_SYSTEM_VECTORS: u32 = 21;
pub const NR_IRQS_LEGACY: u32 = 16;
pub const CPU_VECTOR_LIMIT: u32 = 4096;
pub const IO_APIC_VECTOR_LIMIT: u32 = 4096;
pub const IRQF_TRIGGER_NONE: u32 = 0;
pub const IRQF_TRIGGER_RISING: u32 = 1;
pub const IRQF_TRIGGER_FALLING: u32 = 2;
pub const IRQF_TRIGGER_HIGH: u32 = 4;
pub const IRQF_TRIGGER_LOW: u32 = 8;
pub const IRQF_TRIGGER_MASK: u32 = 15;
pub const IRQF_TRIGGER_PROBE: u32 = 16;
pub const IRQF_SHARED: u32 = 128;
pub const IRQF_PROBE_SHARED: u32 = 256;
pub const __IRQF_TIMER: u32 = 512;
pub const IRQF_PERCPU: u32 = 1024;
pub const IRQF_NOBALANCING: u32 = 2048;
pub const IRQF_IRQPOLL: u32 = 4096;
pub const IRQF_ONESHOT: u32 = 8192;
pub const IRQF_NO_SUSPEND: u32 = 16384;
pub const IRQF_FORCE_RESUME: u32 = 32768;
pub const IRQF_NO_THREAD: u32 = 65536;
pub const IRQF_EARLY_RESUME: u32 = 131072;
pub const IRQF_COND_SUSPEND: u32 = 262144;
pub const IRQF_NO_AUTOEN: u32 = 524288;
pub const IRQF_NO_DEBUG: u32 = 1048576;
pub const IRQF_COND_ONESHOT: u32 = 2097152;
pub const IRQF_TIMER: u32 = 82432;
pub const IRQ_NOTCONNECTED: u32 = 2147483648;
pub const IRQ_AFFINITY_MAX_SETS: u32 = 4;
pub const NR_PSI_RESOURCES: u32 = 0;
pub const MAX_CGROUP_TYPE_NAMELEN: u32 = 32;
pub const MAX_CGROUP_ROOT_NAMELEN: u32 = 64;
pub const MAX_CFTYPE_NAME: u32 = 64;
pub const CGROUP_WEIGHT_MIN: u32 = 1;
pub const CGROUP_WEIGHT_DFL: u32 = 100;
pub const CGROUP_WEIGHT_MAX: u32 = 10000;
pub const EFD_SEMAPHORE: u32 = 1;
pub const EFD_CLOEXEC: u32 = 524288;
pub const EFD_NONBLOCK: u32 = 2048;
pub const EFD_SHARED_FCNTL_FLAGS: u32 = 526336;
pub const EFD_FLAGS_SET: u32 = 526337;
pub const FPROP_FRAC_SHIFT: u32 = 10;
pub const FPROP_FRAC_BASE: u32 = 1024;
pub const SECTOR_SHIFT: u32 = 9;
pub const SECTOR_SIZE: u32 = 512;
pub const PAGE_SECTORS_SHIFT: u32 = 3;
pub const PAGE_SECTORS: u32 = 8;
pub const SECTOR_MASK: u32 = 7;
pub const BD_PARTNO: u32 = 255;
pub const BD_READ_ONLY: u32 = 256;
pub const BD_WRITE_HOLDER: u32 = 512;
pub const BD_HAS_SUBMIT_BIO: u32 = 1024;
pub const BD_RO_WARNED: u32 = 2048;
pub const BLK_STS_OK: u32 = 0;
pub const BLK_QC_T_NONE: i32 = -1;
pub const BIO_MAX_SECTORS: i32 = -1;
pub const REQ_OP_BITS: u32 = 8;
pub const REQ_FLAG_BITS: u32 = 24;
pub const PAGEVEC_SIZE: u32 = 31;
pub const DIRTY_SCOPE: u32 = 8;
pub const BDP_ASYNC: u32 = 1;
pub const __FIRST_OBJEXT_FLAG: u32 = 1;
pub const MEM_CGROUP_ID_SHIFT: u32 = 0;
pub const mem_cgroup_sockets_enabled: u32 = 0;
pub const cfi_bpf_hash: u32 = 0;
pub const cfi_bpf_subprog_hash: u32 = 0;
pub const BPF_BASE_TYPE_BITS: u32 = 8;
pub const BPF_BASE_TYPE_LIMIT: u32 = 256;
pub const MAX_BPF_FUNC_ARGS: u32 = 12;
pub const MAX_BPF_FUNC_REG_ARGS: u32 = 5;
pub const BPF_DISPATCHER_MAX: u32 = 48;
pub const BPF_STRUCT_OPS_MAX_NR_MEMBERS: u32 = 64;
pub const BPF_COMPLEXITY_LIMIT_INSNS: u32 = 1000000;
pub const MAX_TAIL_CALL_CNT: u32 = 33;
pub const BPF_MAX_USER_RINGBUF_SAMPLES: u32 = 131072;
pub const BPF_RET_BIND_NO_CAP_NET_BIND_SERVICE: u32 = 1;
pub const BPF_RET_SET_CN: u32 = 1;
pub const MAX_BPRINTF_VARARGS: u32 = 12;
pub const MAX_BPRINTF_BUF: u32 = 1024;
pub const LSM_ID_UNDEF: u32 = 0;
pub const LSM_ID_CAPABILITY: u32 = 100;
pub const LSM_ID_SELINUX: u32 = 101;
pub const LSM_ID_SMACK: u32 = 102;
pub const LSM_ID_TOMOYO: u32 = 103;
pub const LSM_ID_APPARMOR: u32 = 104;
pub const LSM_ID_YAMA: u32 = 105;
pub const LSM_ID_LOADPIN: u32 = 106;
pub const LSM_ID_SAFESETID: u32 = 107;
pub const LSM_ID_LOCKDOWN: u32 = 108;
pub const LSM_ID_BPF: u32 = 109;
pub const LSM_ID_LANDLOCK: u32 = 110;
pub const LSM_ID_IMA: u32 = 111;
pub const LSM_ID_EVM: u32 = 112;
pub const LSM_ATTR_UNDEF: u32 = 0;
pub const LSM_ATTR_CURRENT: u32 = 100;
pub const LSM_ATTR_EXEC: u32 = 101;
pub const LSM_ATTR_FSCREATE: u32 = 102;
pub const LSM_ATTR_KEYCREATE: u32 = 103;
pub const LSM_ATTR_PREV: u32 = 104;
pub const LSM_ATTR_SOCKCREATE: u32 = 105;
pub const LSM_FLAG_SINGLE: u32 = 1;
pub const CAP_OPT_NONE: u32 = 0;
pub const SECURITY_LSM_NATIVE_LABELS: u32 = 1;
pub const LSM_SETID_ID: u32 = 1;
pub const LSM_SETID_RE: u32 = 2;
pub const LSM_SETID_RES: u32 = 4;
pub const LSM_SETID_FS: u32 = 8;
pub const LSM_PRLIMIT_READ: u32 = 1;
pub const LSM_PRLIMIT_WRITE: u32 = 2;
pub const LSM_UNSAFE_SHARE: u32 = 1;
pub const LSM_UNSAFE_PTRACE: u32 = 2;
pub const LSM_UNSAFE_NO_NEW_PRIVS: u32 = 4;
pub const SCM_MAX_FD: u32 = 253;
pub const NETLINK_ROUTE: u32 = 0;
pub const NETLINK_UNUSED: u32 = 1;
pub const NETLINK_USERSOCK: u32 = 2;
pub const NETLINK_FIREWALL: u32 = 3;
pub const NETLINK_SOCK_DIAG: u32 = 4;
pub const NETLINK_NFLOG: u32 = 5;
pub const NETLINK_XFRM: u32 = 6;
pub const NETLINK_SELINUX: u32 = 7;
pub const NETLINK_ISCSI: u32 = 8;
pub const NETLINK_AUDIT: u32 = 9;
pub const NETLINK_FIB_LOOKUP: u32 = 10;
pub const NETLINK_CONNECTOR: u32 = 11;
pub const NETLINK_NETFILTER: u32 = 12;
pub const NETLINK_IP6_FW: u32 = 13;
pub const NETLINK_DNRTMSG: u32 = 14;
pub const NETLINK_KOBJECT_UEVENT: u32 = 15;
pub const NETLINK_GENERIC: u32 = 16;
pub const NETLINK_SCSITRANSPORT: u32 = 18;
pub const NETLINK_ECRYPTFS: u32 = 19;
pub const NETLINK_RDMA: u32 = 20;
pub const NETLINK_CRYPTO: u32 = 21;
pub const NETLINK_SMC: u32 = 22;
pub const NETLINK_INET_DIAG: u32 = 4;
pub const MAX_LINKS: u32 = 32;
pub const NLM_F_REQUEST: u32 = 1;
pub const NLM_F_MULTI: u32 = 2;
pub const NLM_F_ACK: u32 = 4;
pub const NLM_F_ECHO: u32 = 8;
pub const NLM_F_DUMP_INTR: u32 = 16;
pub const NLM_F_DUMP_FILTERED: u32 = 32;
pub const NLM_F_ROOT: u32 = 256;
pub const NLM_F_MATCH: u32 = 512;
pub const NLM_F_ATOMIC: u32 = 1024;
pub const NLM_F_DUMP: u32 = 768;
pub const NLM_F_REPLACE: u32 = 256;
pub const NLM_F_EXCL: u32 = 512;
pub const NLM_F_CREATE: u32 = 1024;
pub const NLM_F_APPEND: u32 = 2048;
pub const NLM_F_NONREC: u32 = 256;
pub const NLM_F_BULK: u32 = 512;
pub const NLM_F_CAPPED: u32 = 256;
pub const NLM_F_ACK_TLVS: u32 = 512;
pub const NLMSG_ALIGNTO: u32 = 4;
pub const NLMSG_NOOP: u32 = 1;
pub const NLMSG_ERROR: u32 = 2;
pub const NLMSG_DONE: u32 = 3;
pub const NLMSG_OVERRUN: u32 = 4;
pub const NLMSG_MIN_TYPE: u32 = 16;
pub const NETLINK_ADD_MEMBERSHIP: u32 = 1;
pub const NETLINK_DROP_MEMBERSHIP: u32 = 2;
pub const NETLINK_PKTINFO: u32 = 3;
pub const NETLINK_BROADCAST_ERROR: u32 = 4;
pub const NETLINK_NO_ENOBUFS: u32 = 5;
pub const NETLINK_LISTEN_ALL_NSID: u32 = 8;
pub const NETLINK_LIST_MEMBERSHIPS: u32 = 9;
pub const NETLINK_CAP_ACK: u32 = 10;
pub const NETLINK_EXT_ACK: u32 = 11;
pub const NETLINK_GET_STRICT_CHK: u32 = 12;
pub const NET_MAJOR: u32 = 36;
pub const NLA_F_NESTED: u32 = 32768;
pub const NLA_F_NET_BYTEORDER: u32 = 16384;
pub const NLA_TYPE_MASK: i32 = -49153;
pub const NLA_ALIGNTO: u32 = 4;
pub const NL_CFG_F_NONROOT_RECV: u32 = 1;
pub const NL_CFG_F_NONROOT_SEND: u32 = 2;
pub const NETLINK_MAX_COOKIE_LEN: u32 = 20;
pub const NETLINK_MAX_FMTMSG_LEN: u32 = 80;
pub const ETH_MDIO_SUPPORTS_C22: u32 = 1;
pub const ETH_MDIO_SUPPORTS_C45: u32 = 2;
pub const ETHTOOL_FWVERS_LEN: u32 = 32;
pub const ETHTOOL_BUSINFO_LEN: u32 = 32;
pub const ETHTOOL_EROMVERS_LEN: u32 = 32;
pub const SOPASS_MAX: u32 = 6;
pub const PFC_STORM_PREVENTION_AUTO: u32 = 65535;
pub const PFC_STORM_PREVENTION_DISABLE: u32 = 0;
pub const DOWNSHIFT_DEV_DEFAULT_COUNT: u32 = 255;
pub const DOWNSHIFT_DEV_DISABLE: u32 = 0;
pub const ETHTOOL_PHY_FAST_LINK_DOWN_ON: u32 = 0;
pub const ETHTOOL_PHY_FAST_LINK_DOWN_OFF: u32 = 255;
pub const ETHTOOL_PHY_EDPD_DFLT_TX_MSECS: u32 = 65535;
pub const ETHTOOL_PHY_EDPD_NO_TX: u32 = 65534;
pub const ETHTOOL_PHY_EDPD_DISABLE: u32 = 0;
pub const ETH_GSTRING_LEN: u32 = 32;
pub const ETH_RX_NFC_IP4: u32 = 1;
pub const ETHTOOL_RX_FLOW_SPEC_RING: u32 = 4294967295;
pub const ETHTOOL_RX_FLOW_SPEC_RING_VF: u64 = 1095216660480;
pub const ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF: u32 = 32;
pub const ETH_RXFH_CONTEXT_ALLOC: u32 = 4294967295;
pub const ETH_RXFH_INDIR_NO_CHANGE: u32 = 4294967295;
pub const ETHTOOL_RXNTUPLE_ACTION_DROP: i32 = -1;
pub const ETHTOOL_RXNTUPLE_ACTION_CLEAR: i32 = -2;
pub const ETHTOOL_FLASH_MAX_FILENAME: u32 = 128;
pub const ETH_FW_DUMP_DISABLE: u32 = 0;
pub const MAX_NUM_QUEUE: u32 = 4096;
pub const ETHTOOL_GSET: u32 = 1;
pub const ETHTOOL_SSET: u32 = 2;
pub const ETHTOOL_GDRVINFO: u32 = 3;
pub const ETHTOOL_GREGS: u32 = 4;
pub const ETHTOOL_GWOL: u32 = 5;
pub const ETHTOOL_SWOL: u32 = 6;
pub const ETHTOOL_GMSGLVL: u32 = 7;
pub const ETHTOOL_SMSGLVL: u32 = 8;
pub const ETHTOOL_NWAY_RST: u32 = 9;
pub const ETHTOOL_GLINK: u32 = 10;
pub const ETHTOOL_GEEPROM: u32 = 11;
pub const ETHTOOL_SEEPROM: u32 = 12;
pub const ETHTOOL_GCOALESCE: u32 = 14;
pub const ETHTOOL_SCOALESCE: u32 = 15;
pub const ETHTOOL_GRINGPARAM: u32 = 16;
pub const ETHTOOL_SRINGPARAM: u32 = 17;
pub const ETHTOOL_GPAUSEPARAM: u32 = 18;
pub const ETHTOOL_SPAUSEPARAM: u32 = 19;
pub const ETHTOOL_GRXCSUM: u32 = 20;
pub const ETHTOOL_SRXCSUM: u32 = 21;
pub const ETHTOOL_GTXCSUM: u32 = 22;
pub const ETHTOOL_STXCSUM: u32 = 23;
pub const ETHTOOL_GSG: u32 = 24;
pub const ETHTOOL_SSG: u32 = 25;
pub const ETHTOOL_TEST: u32 = 26;
pub const ETHTOOL_GSTRINGS: u32 = 27;
pub const ETHTOOL_PHYS_ID: u32 = 28;
pub const ETHTOOL_GSTATS: u32 = 29;
pub const ETHTOOL_GTSO: u32 = 30;
pub const ETHTOOL_STSO: u32 = 31;
pub const ETHTOOL_GPERMADDR: u32 = 32;
pub const ETHTOOL_GUFO: u32 = 33;
pub const ETHTOOL_SUFO: u32 = 34;
pub const ETHTOOL_GGSO: u32 = 35;
pub const ETHTOOL_SGSO: u32 = 36;
pub const ETHTOOL_GFLAGS: u32 = 37;
pub const ETHTOOL_SFLAGS: u32 = 38;
pub const ETHTOOL_GPFLAGS: u32 = 39;
pub const ETHTOOL_SPFLAGS: u32 = 40;
pub const ETHTOOL_GRXFH: u32 = 41;
pub const ETHTOOL_SRXFH: u32 = 42;
pub const ETHTOOL_GGRO: u32 = 43;
pub const ETHTOOL_SGRO: u32 = 44;
pub const ETHTOOL_GRXRINGS: u32 = 45;
pub const ETHTOOL_GRXCLSRLCNT: u32 = 46;
pub const ETHTOOL_GRXCLSRULE: u32 = 47;
pub const ETHTOOL_GRXCLSRLALL: u32 = 48;
pub const ETHTOOL_SRXCLSRLDEL: u32 = 49;
pub const ETHTOOL_SRXCLSRLINS: u32 = 50;
pub const ETHTOOL_FLASHDEV: u32 = 51;
pub const ETHTOOL_RESET: u32 = 52;
pub const ETHTOOL_SRXNTUPLE: u32 = 53;
pub const ETHTOOL_GRXNTUPLE: u32 = 54;
pub const ETHTOOL_GSSET_INFO: u32 = 55;
pub const ETHTOOL_GRXFHINDIR: u32 = 56;
pub const ETHTOOL_SRXFHINDIR: u32 = 57;
pub const ETHTOOL_GFEATURES: u32 = 58;
pub const ETHTOOL_SFEATURES: u32 = 59;
pub const ETHTOOL_GCHANNELS: u32 = 60;
pub const ETHTOOL_SCHANNELS: u32 = 61;
pub const ETHTOOL_SET_DUMP: u32 = 62;
pub const ETHTOOL_GET_DUMP_FLAG: u32 = 63;
pub const ETHTOOL_GET_DUMP_DATA: u32 = 64;
pub const ETHTOOL_GET_TS_INFO: u32 = 65;
pub const ETHTOOL_GMODULEINFO: u32 = 66;
pub const ETHTOOL_GMODULEEEPROM: u32 = 67;
pub const ETHTOOL_GEEE: u32 = 68;
pub const ETHTOOL_SEEE: u32 = 69;
pub const ETHTOOL_GRSSH: u32 = 70;
pub const ETHTOOL_SRSSH: u32 = 71;
pub const ETHTOOL_GTUNABLE: u32 = 72;
pub const ETHTOOL_STUNABLE: u32 = 73;
pub const ETHTOOL_GPHYSTATS: u32 = 74;
pub const ETHTOOL_PERQUEUE: u32 = 75;
pub const ETHTOOL_GLINKSETTINGS: u32 = 76;
pub const ETHTOOL_SLINKSETTINGS: u32 = 77;
pub const ETHTOOL_PHY_GTUNABLE: u32 = 78;
pub const ETHTOOL_PHY_STUNABLE: u32 = 79;
pub const ETHTOOL_GFECPARAM: u32 = 80;
pub const ETHTOOL_SFECPARAM: u32 = 81;
pub const SPARC_ETH_GSET: u32 = 1;
pub const SPARC_ETH_SSET: u32 = 2;
pub const SPEED_10: u32 = 10;
pub const SPEED_100: u32 = 100;
pub const SPEED_1000: u32 = 1000;
pub const SPEED_2500: u32 = 2500;
pub const SPEED_5000: u32 = 5000;
pub const SPEED_10000: u32 = 10000;
pub const SPEED_14000: u32 = 14000;
pub const SPEED_20000: u32 = 20000;
pub const SPEED_25000: u32 = 25000;
pub const SPEED_40000: u32 = 40000;
pub const SPEED_50000: u32 = 50000;
pub const SPEED_56000: u32 = 56000;
pub const SPEED_100000: u32 = 100000;
pub const SPEED_200000: u32 = 200000;
pub const SPEED_400000: u32 = 400000;
pub const SPEED_800000: u32 = 800000;
pub const SPEED_UNKNOWN: i32 = -1;
pub const DUPLEX_HALF: u32 = 0;
pub const DUPLEX_FULL: u32 = 1;
pub const DUPLEX_UNKNOWN: u32 = 255;
pub const MASTER_SLAVE_CFG_UNSUPPORTED: u32 = 0;
pub const MASTER_SLAVE_CFG_UNKNOWN: u32 = 1;
pub const MASTER_SLAVE_CFG_MASTER_PREFERRED: u32 = 2;
pub const MASTER_SLAVE_CFG_SLAVE_PREFERRED: u32 = 3;
pub const MASTER_SLAVE_CFG_MASTER_FORCE: u32 = 4;
pub const MASTER_SLAVE_CFG_SLAVE_FORCE: u32 = 5;
pub const MASTER_SLAVE_STATE_UNSUPPORTED: u32 = 0;
pub const MASTER_SLAVE_STATE_UNKNOWN: u32 = 1;
pub const MASTER_SLAVE_STATE_MASTER: u32 = 2;
pub const MASTER_SLAVE_STATE_SLAVE: u32 = 3;
pub const MASTER_SLAVE_STATE_ERR: u32 = 4;
pub const RATE_MATCH_NONE: u32 = 0;
pub const RATE_MATCH_PAUSE: u32 = 1;
pub const RATE_MATCH_CRS: u32 = 2;
pub const RATE_MATCH_OPEN_LOOP: u32 = 3;
pub const PORT_TP: u32 = 0;
pub const PORT_AUI: u32 = 1;
pub const PORT_MII: u32 = 2;
pub const PORT_FIBRE: u32 = 3;
pub const PORT_BNC: u32 = 4;
pub const PORT_DA: u32 = 5;
pub const PORT_NONE: u32 = 239;
pub const PORT_OTHER: u32 = 255;
pub const XCVR_INTERNAL: u32 = 0;
pub const XCVR_EXTERNAL: u32 = 1;
pub const XCVR_DUMMY1: u32 = 2;
pub const XCVR_DUMMY2: u32 = 3;
pub const XCVR_DUMMY3: u32 = 4;
pub const AUTONEG_DISABLE: u32 = 0;
pub const AUTONEG_ENABLE: u32 = 1;
pub const ETH_TP_MDI_INVALID: u32 = 0;
pub const ETH_TP_MDI: u32 = 1;
pub const ETH_TP_MDI_X: u32 = 2;
pub const ETH_TP_MDI_AUTO: u32 = 3;
pub const WAKE_PHY: u32 = 1;
pub const WAKE_UCAST: u32 = 2;
pub const WAKE_MCAST: u32 = 4;
pub const WAKE_BCAST: u32 = 8;
pub const WAKE_ARP: u32 = 16;
pub const WAKE_MAGIC: u32 = 32;
pub const WAKE_MAGICSECURE: u32 = 64;
pub const WAKE_FILTER: u32 = 128;
pub const WOL_MODE_COUNT: u32 = 8;
pub const RXH_XFRM_SYM_XOR: u32 = 1;
pub const RXH_XFRM_NO_CHANGE: u32 = 255;
pub const TCP_V4_FLOW: u32 = 1;
pub const UDP_V4_FLOW: u32 = 2;
pub const SCTP_V4_FLOW: u32 = 3;
pub const AH_ESP_V4_FLOW: u32 = 4;
pub const TCP_V6_FLOW: u32 = 5;
pub const UDP_V6_FLOW: u32 = 6;
pub const SCTP_V6_FLOW: u32 = 7;
pub const AH_ESP_V6_FLOW: u32 = 8;
pub const AH_V4_FLOW: u32 = 9;
pub const ESP_V4_FLOW: u32 = 10;
pub const AH_V6_FLOW: u32 = 11;
pub const ESP_V6_FLOW: u32 = 12;
pub const IPV4_USER_FLOW: u32 = 13;
pub const IP_USER_FLOW: u32 = 13;
pub const IPV6_USER_FLOW: u32 = 14;
pub const IPV4_FLOW: u32 = 16;
pub const IPV6_FLOW: u32 = 17;
pub const ETHER_FLOW: u32 = 18;
pub const GTPU_V4_FLOW: u32 = 19;
pub const GTPU_V6_FLOW: u32 = 20;
pub const GTPC_V4_FLOW: u32 = 21;
pub const GTPC_V6_FLOW: u32 = 22;
pub const GTPC_TEID_V4_FLOW: u32 = 23;
pub const GTPC_TEID_V6_FLOW: u32 = 24;
pub const GTPU_EH_V4_FLOW: u32 = 25;
pub const GTPU_EH_V6_FLOW: u32 = 26;
pub const GTPU_UL_V4_FLOW: u32 = 27;
pub const GTPU_UL_V6_FLOW: u32 = 28;
pub const GTPU_DL_V4_FLOW: u32 = 29;
pub const GTPU_DL_V6_FLOW: u32 = 30;
pub const FLOW_EXT: u32 = 2147483648;
pub const FLOW_MAC_EXT: u32 = 1073741824;
pub const FLOW_RSS: u32 = 536870912;
pub const RXH_L2DA: u32 = 2;
pub const RXH_VLAN: u32 = 4;
pub const RXH_L3_PROTO: u32 = 8;
pub const RXH_IP_SRC: u32 = 16;
pub const RXH_IP_DST: u32 = 32;
pub const RXH_L4_B_0_1: u32 = 64;
pub const RXH_L4_B_2_3: u32 = 128;
pub const RXH_GTP_TEID: u32 = 256;
pub const RXH_DISCARD: u32 = 2147483648;
pub const RX_CLS_FLOW_DISC: i32 = -1;
pub const RX_CLS_FLOW_WAKE: i32 = -2;
pub const RX_CLS_LOC_SPECIAL: u32 = 2147483648;
pub const RX_CLS_LOC_ANY: u32 = 4294967295;
pub const RX_CLS_LOC_FIRST: u32 = 4294967294;
pub const RX_CLS_LOC_LAST: u32 = 4294967293;
pub const ETH_MODULE_SFF_8079: u32 = 1;
pub const ETH_MODULE_SFF_8079_LEN: u32 = 256;
pub const ETH_MODULE_SFF_8472: u32 = 2;
pub const ETH_MODULE_SFF_8472_LEN: u32 = 512;
pub const ETH_MODULE_SFF_8636: u32 = 3;
pub const ETH_MODULE_SFF_8636_LEN: u32 = 256;
pub const ETH_MODULE_SFF_8436: u32 = 4;
pub const ETH_MODULE_SFF_8436_LEN: u32 = 256;
pub const ETH_MODULE_SFF_8636_MAX_LEN: u32 = 640;
pub const ETH_MODULE_SFF_8436_MAX_LEN: u32 = 640;
pub const ETH_RESET_SHARED_SHIFT: u32 = 16;
pub const ETH_RSS_HASH_UNKNOWN: u32 = 0;
pub const ETH_RSS_HASH_NO_CHANGE: u32 = 0;
pub const ETHTOOL_STAT_NOT_SET: i32 = -1;
pub const ETHTOOL_MAX_LANES: u32 = 8;
pub const ETHTOOL_RMON_HIST_MAX: u32 = 10;
pub const ETH_MODULE_EEPROM_PAGE_LEN: u32 = 128;
pub const ETH_MODULE_MAX_I2C_ADDRESS: u32 = 127;
pub const MII_BMCR: u32 = 0;
pub const MII_BMSR: u32 = 1;
pub const MII_PHYSID1: u32 = 2;
pub const MII_PHYSID2: u32 = 3;
pub const MII_ADVERTISE: u32 = 4;
pub const MII_LPA: u32 = 5;
pub const MII_EXPANSION: u32 = 6;
pub const MII_CTRL1000: u32 = 9;
pub const MII_STAT1000: u32 = 10;
pub const MII_MMD_CTRL: u32 = 13;
pub const MII_MMD_DATA: u32 = 14;
pub const MII_ESTATUS: u32 = 15;
pub const MII_DCOUNTER: u32 = 18;
pub const MII_FCSCOUNTER: u32 = 19;
pub const MII_NWAYTEST: u32 = 20;
pub const MII_RERRCOUNTER: u32 = 21;
pub const MII_SREVISION: u32 = 22;
pub const MII_RESV1: u32 = 23;
pub const MII_LBRERROR: u32 = 24;
pub const MII_PHYADDR: u32 = 25;
pub const MII_RESV2: u32 = 26;
pub const MII_TPISTATUS: u32 = 27;
pub const MII_NCONFIG: u32 = 28;
pub const BMCR_RESV: u32 = 63;
pub const BMCR_SPEED1000: u32 = 64;
pub const BMCR_CTST: u32 = 128;
pub const BMCR_FULLDPLX: u32 = 256;
pub const BMCR_ANRESTART: u32 = 512;
pub const BMCR_ISOLATE: u32 = 1024;
pub const BMCR_PDOWN: u32 = 2048;
pub const BMCR_ANENABLE: u32 = 4096;
pub const BMCR_SPEED100: u32 = 8192;
pub const BMCR_LOOPBACK: u32 = 16384;
pub const BMCR_RESET: u32 = 32768;
pub const BMCR_SPEED10: u32 = 0;
pub const BMSR_ERCAP: u32 = 1;
pub const BMSR_JCD: u32 = 2;
pub const BMSR_LSTATUS: u32 = 4;
pub const BMSR_ANEGCAPABLE: u32 = 8;
pub const BMSR_RFAULT: u32 = 16;
pub const BMSR_ANEGCOMPLETE: u32 = 32;
pub const BMSR_RESV: u32 = 192;
pub const BMSR_ESTATEN: u32 = 256;
pub const BMSR_100HALF2: u32 = 512;
pub const BMSR_100FULL2: u32 = 1024;
pub const BMSR_10HALF: u32 = 2048;
pub const BMSR_10FULL: u32 = 4096;
pub const BMSR_100HALF: u32 = 8192;
pub const BMSR_100FULL: u32 = 16384;
pub const BMSR_100BASE4: u32 = 32768;
pub const ADVERTISE_SLCT: u32 = 31;
pub const ADVERTISE_CSMA: u32 = 1;
pub const ADVERTISE_10HALF: u32 = 32;
pub const ADVERTISE_1000XFULL: u32 = 32;
pub const ADVERTISE_10FULL: u32 = 64;
pub const ADVERTISE_1000XHALF: u32 = 64;
pub const ADVERTISE_100HALF: u32 = 128;
pub const ADVERTISE_1000XPAUSE: u32 = 128;
pub const ADVERTISE_100FULL: u32 = 256;
pub const ADVERTISE_1000XPSE_ASYM: u32 = 256;
pub const ADVERTISE_100BASE4: u32 = 512;
pub const ADVERTISE_PAUSE_CAP: u32 = 1024;
pub const ADVERTISE_PAUSE_ASYM: u32 = 2048;
pub const ADVERTISE_RESV: u32 = 4096;
pub const ADVERTISE_RFAULT: u32 = 8192;
pub const ADVERTISE_LPACK: u32 = 16384;
pub const ADVERTISE_NPAGE: u32 = 32768;
pub const ADVERTISE_FULL: u32 = 321;
pub const ADVERTISE_ALL: u32 = 480;
pub const LPA_SLCT: u32 = 31;
pub const LPA_10HALF: u32 = 32;
pub const LPA_1000XFULL: u32 = 32;
pub const LPA_10FULL: u32 = 64;
pub const LPA_1000XHALF: u32 = 64;
pub const LPA_100HALF: u32 = 128;
pub const LPA_1000XPAUSE: u32 = 128;
pub const LPA_100FULL: u32 = 256;
pub const LPA_1000XPAUSE_ASYM: u32 = 256;
pub const LPA_100BASE4: u32 = 512;
pub const LPA_PAUSE_CAP: u32 = 1024;
pub const LPA_PAUSE_ASYM: u32 = 2048;
pub const LPA_RESV: u32 = 4096;
pub const LPA_RFAULT: u32 = 8192;
pub const LPA_LPACK: u32 = 16384;
pub const LPA_NPAGE: u32 = 32768;
pub const LPA_DUPLEX: u32 = 320;
pub const LPA_100: u32 = 896;
pub const EXPANSION_NWAY: u32 = 1;
pub const EXPANSION_LCWP: u32 = 2;
pub const EXPANSION_ENABLENPAGE: u32 = 4;
pub const EXPANSION_NPCAPABLE: u32 = 8;
pub const EXPANSION_MFAULTS: u32 = 16;
pub const EXPANSION_RESV: u32 = 65504;
pub const ESTATUS_1000_XFULL: u32 = 32768;
pub const ESTATUS_1000_XHALF: u32 = 16384;
pub const ESTATUS_1000_TFULL: u32 = 8192;
pub const ESTATUS_1000_THALF: u32 = 4096;
pub const NWAYTEST_RESV1: u32 = 255;
pub const NWAYTEST_LOOPBACK: u32 = 256;
pub const NWAYTEST_RESV2: u32 = 65024;
pub const ADVERTISE_SGMII: u32 = 1;
pub const LPA_SGMII: u32 = 1;
pub const LPA_SGMII_SPD_MASK: u32 = 3072;
pub const LPA_SGMII_FULL_DUPLEX: u32 = 4096;
pub const LPA_SGMII_DPX_SPD_MASK: u32 = 7168;
pub const LPA_SGMII_10: u32 = 0;
pub const LPA_SGMII_10HALF: u32 = 0;
pub const LPA_SGMII_10FULL: u32 = 4096;
pub const LPA_SGMII_100: u32 = 1024;
pub const LPA_SGMII_100HALF: u32 = 1024;
pub const LPA_SGMII_100FULL: u32 = 5120;
pub const LPA_SGMII_1000: u32 = 2048;
pub const LPA_SGMII_1000HALF: u32 = 2048;
pub const LPA_SGMII_1000FULL: u32 = 6144;
pub const LPA_SGMII_LINK: u32 = 32768;
pub const ADVERTISE_1000FULL: u32 = 512;
pub const ADVERTISE_1000HALF: u32 = 256;
pub const CTL1000_PREFER_MASTER: u32 = 1024;
pub const CTL1000_AS_MASTER: u32 = 2048;
pub const CTL1000_ENABLE_MASTER: u32 = 4096;
pub const LPA_1000MSFAIL: u32 = 32768;
pub const LPA_1000MSRES: u32 = 16384;
pub const LPA_1000LOCALRXOK: u32 = 8192;
pub const LPA_1000REMRXOK: u32 = 4096;
pub const LPA_1000FULL: u32 = 2048;
pub const LPA_1000HALF: u32 = 1024;
pub const FLOW_CTRL_TX: u32 = 1;
pub const FLOW_CTRL_RX: u32 = 2;
pub const MII_MMD_CTRL_DEVAD_MASK: u32 = 31;
pub const MII_MMD_CTRL_ADDR: u32 = 0;
pub const MII_MMD_CTRL_NOINCR: u32 = 16384;
pub const MII_MMD_CTRL_INCR_RDWT: u32 = 32768;
pub const MII_MMD_CTRL_INCR_ON_WT: u32 = 49152;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ftrace_branch_data {
    pub func: *const core::ffi::c_char,
    pub file: *const core::ffi::c_char,
    pub line: core::ffi::c_uint,
    pub __bindgen_anon_1: ftrace_branch_data__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ftrace_branch_data__bindgen_ty_1 {
    pub __bindgen_anon_1: ftrace_branch_data__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: ftrace_branch_data__bindgen_ty_1__bindgen_ty_2,
    pub miss_hit: [core::ffi::c_ulong; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ftrace_branch_data__bindgen_ty_1__bindgen_ty_1 {
    pub correct: core::ffi::c_ulong,
    pub incorrect: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ftrace_branch_data__bindgen_ty_1__bindgen_ty_2 {
    pub miss: core::ffi::c_ulong,
    pub hit: core::ffi::c_ulong,
}
impl Default for ftrace_branch_data__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ftrace_branch_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ftrace_likely_data {
    pub data: ftrace_branch_data,
    pub constant: core::ffi::c_ulong,
}
impl Default for ftrace_likely_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __s8 = core::ffi::c_schar;
pub type __u8 = core::ffi::c_uchar;
pub type __s16 = core::ffi::c_short;
pub type __u16 = core::ffi::c_ushort;
pub type __s32 = core::ffi::c_int;
pub type __u32 = core::ffi::c_uint;
pub type __s64 = core::ffi::c_longlong;
pub type __u64 = core::ffi::c_ulonglong;
pub type s8 = __s8;
pub type u8_ = __u8;
pub type s16 = __s16;
pub type u16_ = __u16;
pub type s32 = __s32;
pub type u32_ = __u32;
pub type s64 = __s64;
pub type u64_ = __u64;
pub const false_: _bindgen_ty_1 = 0;
pub const true_: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [core::ffi::c_ulong; 16usize],
}
pub type __kernel_sighandler_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: core::ffi::c_int)>;
pub type __kernel_key_t = core::ffi::c_int;
pub type __kernel_mqd_t = core::ffi::c_int;
pub type __kernel_old_uid_t = core::ffi::c_ushort;
pub type __kernel_old_gid_t = core::ffi::c_ushort;
pub type __kernel_old_dev_t = core::ffi::c_ulong;
pub type __kernel_long_t = core::ffi::c_long;
pub type __kernel_ulong_t = core::ffi::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = core::ffi::c_uint;
pub type __kernel_pid_t = core::ffi::c_int;
pub type __kernel_ipc_pid_t = core::ffi::c_int;
pub type __kernel_uid_t = core::ffi::c_uint;
pub type __kernel_gid_t = core::ffi::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = core::ffi::c_int;
pub type __kernel_uid32_t = core::ffi::c_uint;
pub type __kernel_gid32_t = core::ffi::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [core::ffi::c_int; 2usize],
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = core::ffi::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time64_t = core::ffi::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = core::ffi::c_int;
pub type __kernel_clockid_t = core::ffi::c_int;
pub type __kernel_caddr_t = *mut core::ffi::c_char;
pub type __kernel_uid16_t = core::ffi::c_ushort;
pub type __kernel_gid16_t = core::ffi::c_ushort;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = core::ffi::c_uint;
pub type s128 = __s128;
pub type u128_ = __u128;
pub type __kernel_dev_t = u32_;
pub type fd_set = __kernel_fd_set;
pub type dev_t = __kernel_dev_t;
pub type ino_t = __kernel_ulong_t;
pub type mode_t = __kernel_mode_t;
pub type umode_t = core::ffi::c_ushort;
pub type nlink_t = u32_;
pub type off_t = __kernel_off_t;
pub type pid_t = __kernel_pid_t;
pub type daddr_t = __kernel_daddr_t;
pub type key_t = __kernel_key_t;
pub type suseconds_t = __kernel_suseconds_t;
pub type timer_t = __kernel_timer_t;
pub type clockid_t = __kernel_clockid_t;
pub type mqd_t = __kernel_mqd_t;
pub type bool_ = bool;
pub type uid_t = __kernel_uid32_t;
pub type gid_t = __kernel_gid32_t;
pub type uid16_t = __kernel_uid16_t;
pub type gid16_t = __kernel_gid16_t;
pub type old_uid_t = __kernel_old_uid_t;
pub type old_gid_t = __kernel_old_gid_t;
pub type loff_t = __kernel_loff_t;
pub type clock_t = __kernel_clock_t;
pub type caddr_t = __kernel_caddr_t;
pub type u_char = core::ffi::c_uchar;
pub type u_short = core::ffi::c_ushort;
pub type u_int = core::ffi::c_uint;
pub type u_long = core::ffi::c_ulong;
pub type unchar = core::ffi::c_uchar;
pub type ushort = core::ffi::c_ushort;
pub type uint = core::ffi::c_uint;
pub type ulong = core::ffi::c_ulong;
pub type u_int8_t = u8_;
pub type u_int16_t = u16_;
pub type u_int32_t = u32_;
pub type u_int64_t = u64_;
pub type ktime_t = s64;
pub type sector_t = u64_;
pub type blkcnt_t = u64_;
pub type dma_addr_t = u64_;
pub type gfp_t = core::ffi::c_uint;
pub type slab_flags_t = core::ffi::c_uint;
pub type fmode_t = core::ffi::c_uint;
pub type phys_addr_t = u64_;
pub type resource_size_t = phys_addr_t;
pub type irq_hw_number_t = core::ffi::c_ulong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct atomic_t {
    pub counter: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct atomic64_t {
    pub counter: s64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rcuref_t {
    pub refcnt: atomic_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct list_head {
    pub next: *mut list_head,
    pub prev: *mut list_head,
}
impl Default for list_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_head {
    pub first: *mut hlist_node,
}
impl Default for hlist_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_node {
    pub next: *mut hlist_node,
    pub pprev: *mut *mut hlist_node,
}
impl Default for hlist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ustat {
    pub f_tfree: __kernel_daddr_t,
    pub f_tinode: core::ffi::c_ulong,
    pub f_fname: [core::ffi::c_char; 6usize],
    pub f_fpack: [core::ffi::c_char; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct callback_head {
    pub next: *mut callback_head,
    pub func: ::core::option::Option<unsafe extern "C" fn(head: *mut callback_head)>,
}
impl Default for callback_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rcu_callback_t = ::core::option::Option<unsafe extern "C" fn(head: *mut callback_head)>;
pub type call_rcu_func_t =
    ::core::option::Option<unsafe extern "C" fn(head: *mut callback_head, func: rcu_callback_t)>;
pub type swap_r_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        a: *mut core::ffi::c_void,
        b: *mut core::ffi::c_void,
        size: core::ffi::c_int,
        priv_: *const core::ffi::c_void,
    ),
>;
pub type swap_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        a: *mut core::ffi::c_void,
        b: *mut core::ffi::c_void,
        size: core::ffi::c_int,
    ),
>;
pub type cmp_r_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        a: *const core::ffi::c_void,
        b: *const core::ffi::c_void,
        priv_: *const core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
pub type cmp_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        a: *const core::ffi::c_void,
        b: *const core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn ftrace_likely_update(
        f: *mut ftrace_likely_data,
        val: core::ffi::c_int,
        expect: core::ffi::c_int,
        is_constant: core::ffi::c_int,
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kcsan_scoped_access {}
#[repr(C)]
#[derive(Default)]
pub struct sysinfo {
    pub uptime: __kernel_long_t,
    pub loads: [__kernel_ulong_t; 3usize],
    pub totalram: __kernel_ulong_t,
    pub freeram: __kernel_ulong_t,
    pub sharedram: __kernel_ulong_t,
    pub bufferram: __kernel_ulong_t,
    pub totalswap: __kernel_ulong_t,
    pub freeswap: __kernel_ulong_t,
    pub procs: __u16,
    pub pad: __u16,
    pub totalhigh: __kernel_ulong_t,
    pub freehigh: __kernel_ulong_t,
    pub mem_unit: __u32,
    pub _f: __IncompleteArrayField<core::ffi::c_char>,
}
extern "C" {
    pub fn __sw_hweight8(w: core::ffi::c_uint) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __sw_hweight16(w: core::ffi::c_uint) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __sw_hweight32(w: core::ffi::c_uint) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __sw_hweight64(w: __u64) -> core::ffi::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}rsp"]
    pub static mut current_stack_pointer: core::ffi::c_ulong;
}
#[repr(C)]
#[repr(align(1))]
#[derive(Default, Copy, Clone)]
pub struct alt_instr {
    pub _bindgen_opaque_blob: [u8; 14usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union alt_instr__bindgen_ty_1 {
    pub __bindgen_anon_1: alt_instr__bindgen_ty_1__bindgen_ty_1,
    pub ft_flags: u32_,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct alt_instr__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl alt_instr__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn cpuid(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_cpuid(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cpuid: u32_, flags: u32_) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let cpuid: u32 = unsafe { ::core::mem::transmute(cpuid) };
            cpuid as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let flags: u32 = unsafe { ::core::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for alt_instr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut __alt_instructions: [alt_instr; 0usize];
}
extern "C" {
    pub static mut __alt_instructions_end: [alt_instr; 0usize];
}
extern "C" {
    pub static mut alternatives_patched: core::ffi::c_int;
}
extern "C" {
    pub fn alternative_instructions();
}
extern "C" {
    pub fn apply_alternatives(start: *mut alt_instr, end: *mut alt_instr);
}
extern "C" {
    pub fn apply_retpolines(start: *mut s32, end: *mut s32);
}
extern "C" {
    pub fn apply_returns(start: *mut s32, end: *mut s32);
}
extern "C" {
    pub fn apply_seal_endbr(start: *mut s32, end: *mut s32);
}
extern "C" {
    pub fn apply_fineibt(
        start_retpoline: *mut s32,
        end_retpoine: *mut s32,
        start_cfi: *mut s32,
        end_cfi: *mut s32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct callthunk_sites {
    pub call_start: *mut s32,
    pub call_end: *mut s32,
    pub alt_start: *mut alt_instr,
    pub alt_end: *mut alt_instr,
}
impl Default for callthunk_sites {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn callthunks_patch_builtin_calls();
}
extern "C" {
    pub fn callthunks_patch_module_calls(sites: *mut callthunk_sites, mod_: *mut module);
}
extern "C" {
    pub fn callthunks_translate_call_dest(dest: *mut core::ffi::c_void) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn x86_call_depth_emit_accounting(
        pprog: *mut *mut u8_,
        func: *mut core::ffi::c_void,
        ip: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn alternatives_smp_module_add(
        mod_: *mut module,
        name: *mut core::ffi::c_char,
        locks: *mut core::ffi::c_void,
        locks_end: *mut core::ffi::c_void,
        text: *mut core::ffi::c_void,
        text_end: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn alternatives_smp_module_del(mod_: *mut module);
}
extern "C" {
    pub fn alternatives_enable_smp();
}
extern "C" {
    pub fn alternatives_text_reserved(
        start: *mut core::ffi::c_void,
        end: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut skip_smp_alternatives: bool_;
}
extern "C" {
    pub fn BUG_func();
}
extern "C" {
    pub fn nop_func();
}
extern "C" {
    pub static x86_nops: [*const core::ffi::c_uchar; 0usize];
}
extern "C" {
    pub fn _find_next_bit(
        addr1: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_next_and_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_next_andnot_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_next_or_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_next_zero_bit(
        addr: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_first_bit(
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __find_nth_bit(
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __find_nth_and_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __find_nth_andnot_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __find_nth_and_andnot_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        addr3: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_first_and_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_first_and_and_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        addr3: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_first_zero_bit(
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_last_bit(
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn find_next_clump8(
        clump: *mut core::ffi::c_ulong,
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        offset: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
pub type va_list = __builtin_va_list;
extern "C" {
    pub fn strndup_user(
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_long,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn memdup_user(arg1: *const core::ffi::c_void, arg2: usize) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn vmemdup_user(arg1: *const core::ffi::c_void, arg2: usize) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memdup_user_nul(arg1: *const core::ffi::c_void, arg2: usize) -> *mut core::ffi::c_void;
}
extern "C" {
    pub static mut static_key_initialized: bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_key {
    pub enabled: atomic_t,
    pub __bindgen_anon_1: static_key__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union static_key__bindgen_ty_1 {
    pub type_: core::ffi::c_ulong,
    pub entries: *mut jump_entry,
    pub next: *mut static_key_mod,
}
impl Default for static_key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for static_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn arch_jump_entry_size(entry: *mut jump_entry) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct jump_entry {
    pub code: s32,
    pub target: s32,
    pub key: core::ffi::c_long,
}
pub const jump_label_type_JUMP_LABEL_NOP: jump_label_type = 0;
pub const jump_label_type_JUMP_LABEL_JMP: jump_label_type = 1;
pub type jump_label_type = core::ffi::c_uint;
extern "C" {
    pub static mut __start___jump_table: [jump_entry; 0usize];
}
extern "C" {
    pub static mut __stop___jump_table: [jump_entry; 0usize];
}
extern "C" {
    pub fn jump_label_init();
}
extern "C" {
    pub fn jump_label_init_ro();
}
extern "C" {
    pub fn jump_label_lock();
}
extern "C" {
    pub fn jump_label_unlock();
}
extern "C" {
    pub fn arch_jump_label_transform(entry: *mut jump_entry, type_: jump_label_type);
}
extern "C" {
    pub fn arch_jump_label_transform_queue(entry: *mut jump_entry, type_: jump_label_type)
        -> bool_;
}
extern "C" {
    pub fn arch_jump_label_transform_apply();
}
extern "C" {
    pub fn jump_label_text_reserved(
        start: *mut core::ffi::c_void,
        end: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn static_key_slow_inc(key: *mut static_key) -> bool_;
}
extern "C" {
    pub fn static_key_fast_inc_not_disabled(key: *mut static_key) -> bool_;
}
extern "C" {
    pub fn static_key_slow_dec(key: *mut static_key);
}
extern "C" {
    pub fn static_key_slow_inc_cpuslocked(key: *mut static_key) -> bool_;
}
extern "C" {
    pub fn static_key_slow_dec_cpuslocked(key: *mut static_key);
}
extern "C" {
    pub fn static_key_count(key: *mut static_key) -> core::ffi::c_int;
}
extern "C" {
    pub fn static_key_enable(key: *mut static_key);
}
extern "C" {
    pub fn static_key_disable(key: *mut static_key);
}
extern "C" {
    pub fn static_key_enable_cpuslocked(key: *mut static_key);
}
extern "C" {
    pub fn static_key_disable_cpuslocked(key: *mut static_key);
}
extern "C" {
    pub fn jump_label_init_type(entry: *mut jump_entry) -> jump_label_type;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_key_true {
    pub key: static_key,
}
impl Default for static_key_true {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_key_false {
    pub key: static_key,
}
impl Default for static_key_false {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ____wrong_branch_error() -> bool_;
}
extern "C" {
    pub fn memcpy(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __memcpy(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memset(
        s: *mut core::ffi::c_void,
        c: core::ffi::c_int,
        n: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __memset(
        s: *mut core::ffi::c_void,
        c: core::ffi::c_int,
        n: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memmove(
        dest: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        count: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __memmove(
        dest: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        count: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memcmp(
        cs: *const core::ffi::c_void,
        ct: *const core::ffi::c_void,
        count: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn strlen(s: *const core::ffi::c_char) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn strcpy(
        dest: *mut core::ffi::c_char,
        src: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strcat(
        dest: *mut core::ffi::c_char,
        src: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strcmp(cs: *const core::ffi::c_char, ct: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn __memcpy_flushcache(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        cnt: usize,
    );
}
extern "C" {
    pub fn strncpy(
        arg1: *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn sized_strscpy(
        arg1: *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn strncat(
        arg1: *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn strncmp(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp(
        s1: *const core::ffi::c_char,
        s2: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp(
        s1: *const core::ffi::c_char,
        s2: *const core::ffi::c_char,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn strchr(arg1: *const core::ffi::c_char, arg2: core::ffi::c_int)
        -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strchrnul(
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strnchrnul(
        arg1: *const core::ffi::c_char,
        arg2: usize,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strnchr(
        arg1: *const core::ffi::c_char,
        arg2: usize,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strrchr(
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn skip_spaces(arg1: *const core::ffi::c_char) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strim(arg1: *mut core::ffi::c_char) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strstr(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strnstr(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: usize,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const core::ffi::c_char, arg2: __kernel_size_t) -> __kernel_size_t;
}
extern "C" {
    pub fn strpbrk(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strspn(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn strcspn(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __memcat_p(
        a: *mut *mut core::ffi::c_void,
        b: *mut *mut core::ffi::c_void,
    ) -> *mut *mut core::ffi::c_void;
}
extern "C" {
    pub fn memscan(
        arg1: *mut core::ffi::c_void,
        arg2: core::ffi::c_int,
        arg3: __kernel_size_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn bcmp(
        arg1: *const core::ffi::c_void,
        arg2: *const core::ffi::c_void,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const core::ffi::c_void,
        arg2: core::ffi::c_int,
        arg3: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memchr_inv(
        s: *const core::ffi::c_void,
        c: core::ffi::c_int,
        n: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn strreplace(
        str_: *mut core::ffi::c_char,
        old: core::ffi::c_char,
        new: core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kfree_const(x: *const core::ffi::c_void);
}
extern "C" {
    pub fn kstrdup(s: *const core::ffi::c_char, gfp: gfp_t) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kstrdup_const(s: *const core::ffi::c_char, gfp: gfp_t) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn kstrndup(s: *const core::ffi::c_char, len: usize, gfp: gfp_t) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kmemdup_noprof(
        src: *const core::ffi::c_void,
        len: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kvmemdup(
        src: *const core::ffi::c_void,
        len: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmemdup_nul(
        s: *const core::ffi::c_char,
        len: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kmemdup_array(
        src: *const core::ffi::c_void,
        count: usize,
        element_size: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn argv_split(
        gfp: gfp_t,
        str_: *const core::ffi::c_char,
        argcp: *mut core::ffi::c_int,
    ) -> *mut *mut core::ffi::c_char;
}
extern "C" {
    pub fn argv_free(argv: *mut *mut core::ffi::c_char);
}
extern "C" {
    pub fn get_option(
        str_: *mut *mut core::ffi::c_char,
        pint: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_options(
        str_: *const core::ffi::c_char,
        nints: core::ffi::c_int,
        ints: *mut core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn memparse(
        ptr: *const core::ffi::c_char,
        retptr: *mut *mut core::ffi::c_char,
    ) -> core::ffi::c_ulonglong;
}
extern "C" {
    pub fn parse_option_str(
        str_: *const core::ffi::c_char,
        option: *const core::ffi::c_char,
    ) -> bool_;
}
extern "C" {
    pub fn next_arg(
        args: *mut core::ffi::c_char,
        param: *mut *mut core::ffi::c_char,
        val: *mut *mut core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn sysfs_streq(s1: *const core::ffi::c_char, s2: *const core::ffi::c_char) -> bool_;
}
extern "C" {
    pub fn match_string(
        array: *const *const core::ffi::c_char,
        n: usize,
        string: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sysfs_match_string(
        array: *const *const core::ffi::c_char,
        n: usize,
        s: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vbin_printf(
        bin_buf: *mut u32_,
        size: usize,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bstr_printf(
        buf: *mut core::ffi::c_char,
        size: usize,
        fmt: *const core::ffi::c_char,
        bin_buf: *const u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bprintf(
        bin_buf: *mut u32_,
        size: usize,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memory_read_from_buffer(
        to: *mut core::ffi::c_void,
        count: usize,
        ppos: *mut loff_t,
        from: *const core::ffi::c_void,
        available: usize,
    ) -> isize;
}
extern "C" {
    pub fn ptr_to_hashval(
        ptr: *const core::ffi::c_void,
        hashval_out: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memweight(ptr: *const core::ffi::c_void, bytes: usize) -> usize;
}
extern "C" {
    pub fn memcpy_and_pad(
        dest: *mut core::ffi::c_void,
        dest_len: usize,
        src: *const core::ffi::c_void,
        count: usize,
        pad: core::ffi::c_int,
    );
}
extern "C" {
    pub fn bitmap_parse_user(
        ubuf: *const core::ffi::c_char,
        ulen: core::ffi::c_uint,
        dst: *mut core::ffi::c_ulong,
        nbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_print_to_pagebuf(
        list: bool_,
        buf: *mut core::ffi::c_char,
        maskp: *const core::ffi::c_ulong,
        nmaskbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_print_bitmask_to_buf(
        buf: *mut core::ffi::c_char,
        maskp: *const core::ffi::c_ulong,
        nmaskbits: core::ffi::c_int,
        off: loff_t,
        count: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_print_list_to_buf(
        buf: *mut core::ffi::c_char,
        maskp: *const core::ffi::c_ulong,
        nmaskbits: core::ffi::c_int,
        off: loff_t,
        count: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_parse(
        buf: *const core::ffi::c_char,
        buflen: core::ffi::c_uint,
        dst: *mut core::ffi::c_ulong,
        nbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_parselist(
        buf: *const core::ffi::c_char,
        maskp: *mut core::ffi::c_ulong,
        nmaskbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_parselist_user(
        ubuf: *const core::ffi::c_char,
        ulen: core::ffi::c_uint,
        dst: *mut core::ffi::c_ulong,
        nbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_alloc(nbits: core::ffi::c_uint, flags: gfp_t) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_zalloc(nbits: core::ffi::c_uint, flags: gfp_t) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_alloc_node(
        nbits: core::ffi::c_uint,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_zalloc_node(
        nbits: core::ffi::c_uint,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_free(bitmap: *const core::ffi::c_ulong);
}
extern "C" {
    pub fn devm_bitmap_alloc(
        dev: *mut device,
        nbits: core::ffi::c_uint,
        flags: gfp_t,
    ) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn devm_bitmap_zalloc(
        dev: *mut device,
        nbits: core::ffi::c_uint,
        flags: gfp_t,
    ) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn __bitmap_equal(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_or_equal(
        src1: *const core::ffi::c_ulong,
        src2: *const core::ffi::c_ulong,
        src3: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_complement(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_shift_right(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        shift: core::ffi::c_uint,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_shift_left(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        shift: core::ffi::c_uint,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_cut(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        first: core::ffi::c_uint,
        cut: core::ffi::c_uint,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_and(
        dst: *mut core::ffi::c_ulong,
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_or(
        dst: *mut core::ffi::c_ulong,
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_xor(
        dst: *mut core::ffi::c_ulong,
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_andnot(
        dst: *mut core::ffi::c_ulong,
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_replace(
        dst: *mut core::ffi::c_ulong,
        old: *const core::ffi::c_ulong,
        new: *const core::ffi::c_ulong,
        mask: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_intersects(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_subset(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_weight(
        bitmap: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __bitmap_weight_and(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __bitmap_weight_andnot(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __bitmap_set(
        map: *mut core::ffi::c_ulong,
        start: core::ffi::c_uint,
        len: core::ffi::c_int,
    );
}
extern "C" {
    pub fn __bitmap_clear(
        map: *mut core::ffi::c_ulong,
        start: core::ffi::c_uint,
        len: core::ffi::c_int,
    );
}
extern "C" {
    pub fn bitmap_find_next_zero_area_off(
        map: *mut core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
        nr: core::ffi::c_uint,
        align_mask: core::ffi::c_ulong,
        align_offset: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_remap(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        old: *const core::ffi::c_ulong,
        new: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_bitremap(
        oldbit: core::ffi::c_int,
        old: *const core::ffi::c_ulong,
        new: *const core::ffi::c_ulong,
        bits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_onto(
        dst: *mut core::ffi::c_ulong,
        orig: *const core::ffi::c_ulong,
        relmap: *const core::ffi::c_ulong,
        bits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_fold(
        dst: *mut core::ffi::c_ulong,
        orig: *const core::ffi::c_ulong,
        sz: core::ffi::c_uint,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_from_arr32(
        bitmap: *mut core::ffi::c_ulong,
        buf: *const u32_,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_to_arr32(
        buf: *mut u32_,
        bitmap: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn ibt_save(disable: bool_) -> u64_;
}
extern "C" {
    pub fn ibt_restore(save: u64_);
}
#[repr(C)]
#[repr(align(64))]
pub struct cacheline_padding {
    pub x: __IncompleteArrayField<core::ffi::c_char>,
}
impl Default for cacheline_padding {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct s8_fract {
    pub numerator: __s8,
    pub denominator: __s8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct u8_fract {
    pub numerator: __u8,
    pub denominator: __u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct s16_fract {
    pub numerator: __s16,
    pub denominator: __s16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct u16_fract {
    pub numerator: __u16,
    pub denominator: __u16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct s32_fract {
    pub numerator: __s32,
    pub denominator: __s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct u32_fract {
    pub numerator: __u32,
    pub denominator: __u32,
}
extern "C" {
    pub fn int_pow(base: u64_, exp: core::ffi::c_uint) -> u64_;
}
extern "C" {
    pub fn int_sqrt(arg1: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn iter_div_u64_rem(dividend: u64_, divisor: u32_, remainder: *mut u64_) -> u32_;
}
pub type time64_t = __s64;
pub type timeu64_t = __u64;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_timespec {
    pub tv_sec: __kernel_time64_t,
    pub tv_nsec: core::ffi::c_longlong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_itimerspec {
    pub it_interval: __kernel_timespec,
    pub it_value: __kernel_timespec,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_old_timeval {
    pub tv_sec: __kernel_long_t,
    pub tv_usec: __kernel_long_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_old_timespec {
    pub tv_sec: __kernel_old_time_t,
    pub tv_nsec: core::ffi::c_long,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_old_itimerval {
    pub it_interval: __kernel_old_timeval,
    pub it_value: __kernel_old_timeval,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_sock_timeval {
    pub tv_sec: __s64,
    pub tv_usec: __s64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: core::ffi::c_int,
    pub tz_dsttime: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timespec64 {
    pub tv_sec: time64_t,
    pub tv_nsec: core::ffi::c_long,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct itimerspec64 {
    pub it_interval: timespec64,
    pub it_value: timespec64,
}
extern "C" {
    pub fn set_normalized_timespec64(ts: *mut timespec64, sec: time64_t, nsec: s64);
}
extern "C" {
    pub fn ns_to_timespec64(nsec: s64) -> timespec64;
}
extern "C" {
    pub fn timespec64_add_safe(lhs: timespec64, rhs: timespec64) -> timespec64;
}
extern "C" {
    pub static mut sys_tz: timezone;
}
extern "C" {
    pub fn get_timespec64(ts: *mut timespec64, uts: *const __kernel_timespec) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_timespec64(ts: *const timespec64, uts: *mut __kernel_timespec) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_itimerspec64(
        it: *mut itimerspec64,
        uit: *const __kernel_itimerspec,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_itimerspec64(
        it: *const itimerspec64,
        uit: *mut __kernel_itimerspec,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mktime64(
        year: core::ffi::c_uint,
        mon: core::ffi::c_uint,
        day: core::ffi::c_uint,
        hour: core::ffi::c_uint,
        min: core::ffi::c_uint,
        sec: core::ffi::c_uint,
    ) -> time64_t;
}
extern "C" {
    pub fn clear_itimer();
}
extern "C" {
    pub fn do_utimes(
        dfd: core::ffi::c_int,
        filename: *const core::ffi::c_char,
        times: *mut timespec64,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_long;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm {
    pub tm_sec: core::ffi::c_int,
    pub tm_min: core::ffi::c_int,
    pub tm_hour: core::ffi::c_int,
    pub tm_mday: core::ffi::c_int,
    pub tm_mon: core::ffi::c_int,
    pub tm_year: core::ffi::c_long,
    pub tm_wday: core::ffi::c_int,
    pub tm_yday: core::ffi::c_int,
}
extern "C" {
    pub fn time64_to_tm(totalsecs: time64_t, offset: core::ffi::c_int, result: *mut tm);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_timex_timeval {
    pub tv_sec: __kernel_time64_t,
    pub tv_usec: core::ffi::c_longlong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_timex {
    pub modes: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub offset: core::ffi::c_longlong,
    pub freq: core::ffi::c_longlong,
    pub maxerror: core::ffi::c_longlong,
    pub esterror: core::ffi::c_longlong,
    pub status: core::ffi::c_int,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub constant: core::ffi::c_longlong,
    pub precision: core::ffi::c_longlong,
    pub tolerance: core::ffi::c_longlong,
    pub time: __kernel_timex_timeval,
    pub tick: core::ffi::c_longlong,
    pub ppsfreq: core::ffi::c_longlong,
    pub jitter: core::ffi::c_longlong,
    pub shift: core::ffi::c_int,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub stabil: core::ffi::c_longlong,
    pub jitcnt: core::ffi::c_longlong,
    pub calcnt: core::ffi::c_longlong,
    pub errcnt: core::ffi::c_longlong,
    pub stbcnt: core::ffi::c_longlong,
    pub tai: core::ffi::c_int,
    pub _bitfield_align_4: [u8; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 44usize]>,
}
impl Default for __kernel_timex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl __kernel_timex {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn new_bitfield_2() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn new_bitfield_3() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn random_get_entropy_fallback() -> core::ffi::c_ulong;
}
pub type initcall_t = ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>;
pub type exitcall_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type initcall_entry_t = core::ffi::c_int;
extern "C" {
    pub static mut __con_initcall_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __con_initcall_end: [initcall_entry_t; 0usize];
}
pub type ctor_fn_t = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn do_one_initcall(fn_: initcall_t) -> core::ffi::c_int;
}
extern "C" {
    pub static mut boot_command_line: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut saved_command_line: *mut core::ffi::c_char;
}
extern "C" {
    pub static mut saved_command_line_len: core::ffi::c_uint;
}
extern "C" {
    pub static mut reset_devices: core::ffi::c_uint;
}
extern "C" {
    pub fn setup_arch(arg1: *mut *mut core::ffi::c_char);
}
extern "C" {
    pub fn prepare_namespace();
}
extern "C" {
    pub fn init_rootfs();
}
extern "C" {
    pub fn init_IRQ();
}
extern "C" {
    pub fn time_init();
}
extern "C" {
    pub fn poking_init();
}
extern "C" {
    pub fn pgtable_cache_init();
}
extern "C" {
    pub static mut __initcall_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall0_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall1_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall2_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall3_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall4_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall5_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall6_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall7_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall_end: [initcall_entry_t; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_system_type {
    pub name: *const core::ffi::c_char,
    pub fs_flags: core::ffi::c_int,
    pub init_fs_context:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut fs_context) -> core::ffi::c_int>,
    pub parameters: *const fs_parameter_spec,
    pub mount: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file_system_type,
            arg2: core::ffi::c_int,
            arg3: *const core::ffi::c_char,
            arg4: *mut core::ffi::c_void,
        ) -> *mut dentry,
    >,
    pub kill_sb: ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub owner: *mut module,
    pub next: *mut file_system_type,
    pub fs_supers: hlist_head,
    pub s_lock_key: lock_class_key,
    pub s_umount_key: lock_class_key,
    pub s_vfs_rename_key: lock_class_key,
    pub s_writers_key: [lock_class_key; 3usize],
    pub i_lock_key: lock_class_key,
    pub i_mutex_key: lock_class_key,
    pub invalidate_lock_key: lock_class_key,
    pub i_mutex_dir_key: lock_class_key,
}
impl Default for file_system_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut rootfs_fs_type: file_system_type;
}
extern "C" {
    pub static mut rodata_enabled: bool_;
}
extern "C" {
    pub fn mark_rodata_ro();
}
extern "C" {
    pub static mut late_time_init: ::core::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub static mut initcall_debug: bool_;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct module {
    pub state: module_state,
    pub list: list_head,
    pub name: [core::ffi::c_char; 56usize],
    pub mkobj: module_kobject,
    pub modinfo_attrs: *mut module_attribute,
    pub version: *const core::ffi::c_char,
    pub srcversion: *const core::ffi::c_char,
    pub holders_dir: *mut kobject,
    pub syms: *mut kernel_symbol,
    pub crcs: *const s32,
    pub num_syms: core::ffi::c_uint,
    pub param_lock: mutex,
    pub kp: *mut kernel_param,
    pub num_kp: core::ffi::c_uint,
    pub num_gpl_syms: core::ffi::c_uint,
    pub gpl_syms: *const kernel_symbol,
    pub gpl_crcs: *const s32,
    pub using_gplonly_symbols: bool_,
    pub async_probe_requested: bool_,
    pub num_exentries: core::ffi::c_uint,
    pub extable: *mut exception_table_entry,
    pub init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub mem: [module_memory; 7usize],
    pub arch: mod_arch_specific,
    pub taints: core::ffi::c_ulong,
    pub num_bugs: core::ffi::c_uint,
    pub bug_list: list_head,
    pub bug_table: *mut bug_entry,
    pub kallsyms: *mut mod_kallsyms,
    pub core_kallsyms: mod_kallsyms,
    pub sect_attrs: *mut module_sect_attrs,
    pub notes_attrs: *mut module_notes_attrs,
    pub args: *mut core::ffi::c_char,
    pub percpu: *mut core::ffi::c_void,
    pub percpu_size: core::ffi::c_uint,
    pub noinstr_text_start: *mut core::ffi::c_void,
    pub noinstr_text_size: core::ffi::c_uint,
    pub num_tracepoints: core::ffi::c_uint,
    pub tracepoints_ptrs: *const core::ffi::c_int,
    pub num_srcu_structs: core::ffi::c_uint,
    pub srcu_struct_ptrs: *mut *mut srcu_struct,
    pub jump_entries: *mut jump_entry,
    pub num_jump_entries: core::ffi::c_uint,
    pub num_trace_bprintk_fmt: core::ffi::c_uint,
    pub trace_bprintk_fmt_start: *mut *const core::ffi::c_char,
    pub trace_events: *mut *mut trace_event_call,
    pub num_trace_events: core::ffi::c_uint,
    pub trace_evals: *mut *mut trace_eval_map,
    pub num_trace_evals: core::ffi::c_uint,
    pub kprobes_text_start: *mut core::ffi::c_void,
    pub kprobes_text_size: core::ffi::c_uint,
    pub kprobe_blacklist: *mut core::ffi::c_ulong,
    pub num_kprobe_blacklist: core::ffi::c_uint,
    pub num_static_call_sites: core::ffi::c_int,
    pub static_call_sites: *mut static_call_site,
    pub source_list: list_head,
    pub target_list: list_head,
    pub exit: ::core::option::Option<unsafe extern "C" fn()>,
    pub refcnt: atomic_t,
}
impl Default for module {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut __this_module: module;
}
pub const cc_attr_CC_ATTR_MEM_ENCRYPT: cc_attr = 0;
pub const cc_attr_CC_ATTR_HOST_MEM_ENCRYPT: cc_attr = 1;
pub const cc_attr_CC_ATTR_GUEST_MEM_ENCRYPT: cc_attr = 2;
pub const cc_attr_CC_ATTR_GUEST_STATE_ENCRYPT: cc_attr = 3;
pub const cc_attr_CC_ATTR_GUEST_UNROLL_STRING_IO: cc_attr = 4;
pub const cc_attr_CC_ATTR_GUEST_SEV_SNP: cc_attr = 5;
pub const cc_attr_CC_ATTR_HOST_SEV_SNP: cc_attr = 6;
pub type cc_attr = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct boot_params {
    _unused: [u8; 0],
}
extern "C" {
    pub fn add_encrypt_protection_map();
}
extern "C" {
    pub static mut __start_bss_decrypted: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __end_bss_decrypted: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __start_bss_decrypted_unused: [core::ffi::c_char; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_bitmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm86 {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut early_idt_handler_array: [[core::ffi::c_char; 13usize]; 32usize];
}
extern "C" {
    pub fn early_ignore_irq();
}
extern "C" {
    pub fn kaslr_get_random_long(purpose: *const core::ffi::c_char) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn kernel_randomize_memory();
}
extern "C" {
    pub fn init_trampoline_kaslr();
}
extern "C" {
    pub fn devmem_is_allowed(pagenr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub static mut max_low_pfn_mapped: core::ffi::c_ulong;
}
extern "C" {
    pub static mut max_pfn_mapped: core::ffi::c_ulong;
}
extern "C" {
    pub fn pfn_range_is_mapped(start_pfn: core::ffi::c_ulong, end_pfn: core::ffi::c_ulong)
        -> bool_;
}
extern "C" {
    pub fn initmem_init();
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default, Copy, Clone)]
pub struct fred_cs {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl fred_cs {
    #[inline]
    pub fn cs(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_cs(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn sl(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_sl(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn wfe(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_wfe(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cs: u64_, sl: u64_, wfe: u64_) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let cs: u64 = unsafe { ::core::mem::transmute(cs) };
            cs as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let sl: u64 = unsafe { ::core::mem::transmute(sl) };
            sl as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let wfe: u64 = unsafe { ::core::mem::transmute(wfe) };
            wfe as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default, Copy, Clone)]
pub struct fred_ss {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl fred_ss {
    #[inline]
    pub fn ss(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ss(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn sti(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sti(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn swevent(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_swevent(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nmi(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_nmi(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vector(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_vector(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn enclave(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(56usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_enclave(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(56usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lm(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(57usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_lm(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(57usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nested(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(58usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_nested(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(58usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn insnlen(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(60usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_insnlen(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(60usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ss: u64_,
        sti: u64_,
        swevent: u64_,
        nmi: u64_,
        vector: u64_,
        type_: u64_,
        enclave: u64_,
        lm: u64_,
        nested: u64_,
        insnlen: u64_,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ss: u64 = unsafe { ::core::mem::transmute(ss) };
            ss as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let sti: u64 = unsafe { ::core::mem::transmute(sti) };
            sti as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let swevent: u64 = unsafe { ::core::mem::transmute(swevent) };
            swevent as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let nmi: u64 = unsafe { ::core::mem::transmute(nmi) };
            nmi as u64
        });
        __bindgen_bitfield_unit.set(32usize, 8u8, {
            let vector: u64 = unsafe { ::core::mem::transmute(vector) };
            vector as u64
        });
        __bindgen_bitfield_unit.set(48usize, 4u8, {
            let type_: u64 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(56usize, 1u8, {
            let enclave: u64 = unsafe { ::core::mem::transmute(enclave) };
            enclave as u64
        });
        __bindgen_bitfield_unit.set(57usize, 1u8, {
            let lm: u64 = unsafe { ::core::mem::transmute(lm) };
            lm as u64
        });
        __bindgen_bitfield_unit.set(58usize, 1u8, {
            let nested: u64 = unsafe { ::core::mem::transmute(nested) };
            nested as u64
        });
        __bindgen_bitfield_unit.set(60usize, 4u8, {
            let insnlen: u64 = unsafe { ::core::mem::transmute(insnlen) };
            insnlen as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pt_regs {
    pub r15: core::ffi::c_ulong,
    pub r14: core::ffi::c_ulong,
    pub r13: core::ffi::c_ulong,
    pub r12: core::ffi::c_ulong,
    pub bp: core::ffi::c_ulong,
    pub bx: core::ffi::c_ulong,
    pub r11: core::ffi::c_ulong,
    pub r10: core::ffi::c_ulong,
    pub r9: core::ffi::c_ulong,
    pub r8: core::ffi::c_ulong,
    pub ax: core::ffi::c_ulong,
    pub cx: core::ffi::c_ulong,
    pub dx: core::ffi::c_ulong,
    pub si: core::ffi::c_ulong,
    pub di: core::ffi::c_ulong,
    pub orig_ax: core::ffi::c_ulong,
    pub ip: core::ffi::c_ulong,
    pub __bindgen_anon_1: pt_regs__bindgen_ty_1,
    pub flags: core::ffi::c_ulong,
    pub sp: core::ffi::c_ulong,
    pub __bindgen_anon_2: pt_regs__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pt_regs__bindgen_ty_1 {
    pub cs: u16_,
    pub csx: u64_,
    pub fred_cs: fred_cs,
}
impl Default for pt_regs__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pt_regs__bindgen_ty_2 {
    pub ss: u16_,
    pub ssx: u64_,
    pub fred_ss: fred_ss,
}
impl Default for pt_regs__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for pt_regs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(1))]
#[derive(Default, Copy, Clone)]
pub struct desc_struct {
    pub _bindgen_opaque_blob: [u8; 8usize],
}
pub const GATE_INTERRUPT: _bindgen_ty_2 = 14;
pub const GATE_TRAP: _bindgen_ty_2 = 15;
pub const GATE_CALL: _bindgen_ty_2 = 12;
pub const GATE_TASK: _bindgen_ty_2 = 5;
pub type _bindgen_ty_2 = core::ffi::c_uint;
pub const DESC_TSS: _bindgen_ty_3 = 9;
pub const DESC_LDT: _bindgen_ty_3 = 2;
pub const DESCTYPE_S: _bindgen_ty_3 = 16;
pub type _bindgen_ty_3 = core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct ldttss_desc {
    pub limit0: u16_,
    pub base0: u16_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub base3: u32_,
    pub zero1: u32_,
}
impl ldttss_desc {
    #[inline]
    pub fn base1(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_base1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn dpl(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_dpl(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_p(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit1(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_limit1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn zero0(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_zero0(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn g(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_g(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn base2(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_base2(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        base1: u16_,
        type_: u16_,
        dpl: u16_,
        p: u16_,
        limit1: u16_,
        zero0: u16_,
        g: u16_,
        base2: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let base1: u16 = unsafe { ::core::mem::transmute(base1) };
            base1 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let type_: u16 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let dpl: u16 = unsafe { ::core::mem::transmute(dpl) };
            dpl as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let p: u16 = unsafe { ::core::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let limit1: u16 = unsafe { ::core::mem::transmute(limit1) };
            limit1 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let zero0: u16 = unsafe { ::core::mem::transmute(zero0) };
            zero0 as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let g: u16 = unsafe { ::core::mem::transmute(g) };
            g as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let base2: u16 = unsafe { ::core::mem::transmute(base2) };
            base2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ldt_desc = ldttss_desc;
pub type tss_desc = ldttss_desc;
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct idt_bits {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl idt_bits {
    #[inline]
    pub fn ist(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_ist(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn dpl(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_dpl(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_p(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ist: u16_,
        zero: u16_,
        type_: u16_,
        dpl: u16_,
        p: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let ist: u16 = unsafe { ::core::mem::transmute(ist) };
            ist as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let zero: u16 = unsafe { ::core::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let type_: u16 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let dpl: u16 = unsafe { ::core::mem::transmute(dpl) };
            dpl as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let p: u16 = unsafe { ::core::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct idt_data {
    pub vector: core::ffi::c_uint,
    pub segment: core::ffi::c_uint,
    pub bits: idt_bits,
    pub addr: *const core::ffi::c_void,
}
impl Default for idt_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct gate_struct {
    pub offset_low: u16_,
    pub segment: u16_,
    pub bits: idt_bits,
    pub offset_middle: u16_,
    pub offset_high: u32_,
    pub reserved: u32_,
}
pub type gate_desc = gate_struct;
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct desc_ptr {
    pub size: core::ffi::c_ushort,
    pub address: core::ffi::c_ulong,
}
pub const page_cache_mode__PAGE_CACHE_MODE_WB: page_cache_mode = 0;
pub const page_cache_mode__PAGE_CACHE_MODE_WC: page_cache_mode = 1;
pub const page_cache_mode__PAGE_CACHE_MODE_UC_MINUS: page_cache_mode = 2;
pub const page_cache_mode__PAGE_CACHE_MODE_UC: page_cache_mode = 3;
pub const page_cache_mode__PAGE_CACHE_MODE_WT: page_cache_mode = 4;
pub const page_cache_mode__PAGE_CACHE_MODE_WP: page_cache_mode = 5;
pub const page_cache_mode__PAGE_CACHE_MODE_NUM: page_cache_mode = 8;
pub type page_cache_mode = core::ffi::c_uint;
pub type pteval_t = core::ffi::c_ulong;
pub type pmdval_t = core::ffi::c_ulong;
pub type pudval_t = core::ffi::c_ulong;
pub type p4dval_t = core::ffi::c_ulong;
pub type pgdval_t = core::ffi::c_ulong;
pub type pgprotval_t = core::ffi::c_ulong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pte_t {
    pub pte: pteval_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pmd_t {
    pub pmd: pmdval_t,
}
extern "C" {
    pub static mut __pgtable_l5_enabled: core::ffi::c_uint;
}
extern "C" {
    pub static mut pgdir_shift: core::ffi::c_uint;
}
extern "C" {
    pub static mut ptrs_per_p4d: core::ffi::c_uint;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pgprot {
    pub pgprot: pgprotval_t,
}
pub type pgprot_t = pgprot;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pgd_t {
    pub pgd: pgdval_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct p4d_t {
    pub p4d: p4dval_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pud_t {
    pub pud: pudval_t,
}
extern "C" {
    pub fn cachemode2protval(pcm: page_cache_mode) -> core::ffi::c_ulong;
}
pub type pgtable_t = *mut page;
extern "C" {
    pub static mut __supported_pte_mask: pteval_t;
}
extern "C" {
    pub static mut __default_kernel_pte_mask: pteval_t;
}
extern "C" {
    pub fn set_nx();
}
extern "C" {
    pub static mut nx_enabled: core::ffi::c_int;
}
extern "C" {
    pub fn pgprot_writecombine(prot: pgprot_t) -> pgprot_t;
}
extern "C" {
    pub fn pgprot_writethrough(prot: pgprot_t) -> pgprot_t;
}
extern "C" {
    pub fn phys_mem_access_prot(
        file: *mut file,
        pfn: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        vma_prot: pgprot_t,
    ) -> pgprot_t;
}
extern "C" {
    pub fn set_pte_vaddr(vaddr: core::ffi::c_ulong, pte: pte_t);
}
pub const pg_level_PG_LEVEL_NONE: pg_level = 0;
pub const pg_level_PG_LEVEL_4K: pg_level = 1;
pub const pg_level_PG_LEVEL_2M: pg_level = 2;
pub const pg_level_PG_LEVEL_1G: pg_level = 3;
pub const pg_level_PG_LEVEL_512G: pg_level = 4;
pub const pg_level_PG_LEVEL_256T: pg_level = 5;
pub const pg_level_PG_LEVEL_NUM: pg_level = 6;
pub type pg_level = core::ffi::c_uint;
extern "C" {
    pub fn update_page_count(level: core::ffi::c_int, pages: core::ffi::c_ulong);
}
extern "C" {
    pub fn lookup_address(address: core::ffi::c_ulong, level: *mut core::ffi::c_uint)
        -> *mut pte_t;
}
extern "C" {
    pub fn lookup_address_in_pgd(
        pgd: *mut pgd_t,
        address: core::ffi::c_ulong,
        level: *mut core::ffi::c_uint,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn lookup_address_in_pgd_attr(
        pgd: *mut pgd_t,
        address: core::ffi::c_ulong,
        level: *mut core::ffi::c_uint,
        nx: *mut bool_,
        rw: *mut bool_,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn lookup_pmd_address(address: core::ffi::c_ulong) -> *mut pmd_t;
}
extern "C" {
    pub fn slow_virt_to_phys(__address: *mut core::ffi::c_void) -> phys_addr_t;
}
extern "C" {
    pub fn kernel_map_pages_in_pgd(
        pgd: *mut pgd_t,
        pfn: u64_,
        address: core::ffi::c_ulong,
        numpages: core::ffi::c_uint,
        page_flags: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_unmap_pages_in_pgd(
        pgd: *mut pgd_t,
        address: core::ffi::c_ulong,
        numpages: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct unwind_hint {
    pub ip: u32_,
    pub sp_offset: s16,
    pub sp_reg: u8_,
    pub type_: u8_,
    pub signal: u8_,
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct orc_entry {
    pub sp_offset: s16,
    pub bp_offset: s16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl orc_entry {
    #[inline]
    pub fn sp_reg(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_sp_reg(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_reg(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_bp_reg(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn signal(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_signal(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sp_reg: core::ffi::c_uint,
        bp_reg: core::ffi::c_uint,
        type_: core::ffi::c_uint,
        signal: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let sp_reg: u32 = unsafe { ::core::mem::transmute(sp_reg) };
            sp_reg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let bp_reg: u32 = unsafe { ::core::mem::transmute(bp_reg) };
            bp_reg as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let signal: u32 = unsafe { ::core::mem::transmute(signal) };
            signal as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn __bad_size_call_parameter();
}
extern "C" {
    pub static mut __per_cpu_offset: [core::ffi::c_ulong; 64usize];
}
extern "C" {
    pub fn setup_per_cpu_areas();
}
extern "C" {
    pub static mut this_cpu_off: core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pcpu_hot {
    pub __bindgen_anon_1: pcpu_hot__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pcpu_hot__bindgen_ty_1 {
    pub __bindgen_anon_1: pcpu_hot__bindgen_ty_1__bindgen_ty_1,
    pub pad: [u8_; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pcpu_hot__bindgen_ty_1__bindgen_ty_1 {
    pub current_task: *mut task_struct,
    pub preempt_count: core::ffi::c_int,
    pub cpu_number: core::ffi::c_int,
    pub call_depth: u64_,
    pub top_of_stack: core::ffi::c_ulong,
    pub hardirq_stack_ptr: *mut core::ffi::c_void,
    pub softirq_pending: u16_,
    pub hardirq_stack_inuse: bool_,
}
impl Default for pcpu_hot__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for pcpu_hot__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for pcpu_hot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut pcpu_hot: pcpu_hot;
}
extern "C" {
    pub static mut const_pcpu_hot: pcpu_hot;
}
pub type retpoline_thunk_t = [u8_; 32usize];
extern "C" {
    pub static mut __x86_indirect_thunk_array: [retpoline_thunk_t; 0usize];
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_array: [retpoline_thunk_t; 0usize];
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_array: [retpoline_thunk_t; 0usize];
}
extern "C" {
    pub fn __x86_return_thunk();
}
extern "C" {
    pub fn retbleed_return_thunk();
}
extern "C" {
    pub fn srso_alias_untrain_ret();
}
extern "C" {
    pub fn srso_return_thunk();
}
extern "C" {
    pub fn srso_alias_return_thunk();
}
extern "C" {
    pub fn entry_untrain_ret();
}
extern "C" {
    pub fn entry_ibpb();
}
extern "C" {
    pub fn clear_bhb_loop();
}
extern "C" {
    pub static mut x86_return_thunk: ::core::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn __warn_thunk();
}
extern "C" {
    pub fn call_depth_return_thunk();
}
extern "C" {
    pub static mut __x86_indirect_thunk_rax: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rcx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rdx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rbx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rsp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rbp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rsi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rdi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r8: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r9: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r10: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r11: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r12: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r13: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r14: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r15: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rax: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rcx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rdx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rbx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rsp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rbp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rsi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rdi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r8: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r9: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r10: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r11: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r12: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r13: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r14: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r15: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rax: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rcx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rdx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rbx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rsp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rbp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rsi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rdi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r8: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r9: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r10: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r11: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r12: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r13: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r14: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r15: retpoline_thunk_t;
}
pub const spectre_v2_mitigation_SPECTRE_V2_NONE: spectre_v2_mitigation = 0;
pub const spectre_v2_mitigation_SPECTRE_V2_RETPOLINE: spectre_v2_mitigation = 1;
pub const spectre_v2_mitigation_SPECTRE_V2_LFENCE: spectre_v2_mitigation = 2;
pub const spectre_v2_mitigation_SPECTRE_V2_EIBRS: spectre_v2_mitigation = 3;
pub const spectre_v2_mitigation_SPECTRE_V2_EIBRS_RETPOLINE: spectre_v2_mitigation = 4;
pub const spectre_v2_mitigation_SPECTRE_V2_EIBRS_LFENCE: spectre_v2_mitigation = 5;
pub const spectre_v2_mitigation_SPECTRE_V2_IBRS: spectre_v2_mitigation = 6;
pub type spectre_v2_mitigation = core::ffi::c_uint;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_NONE: spectre_v2_user_mitigation = 0;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_STRICT: spectre_v2_user_mitigation = 1;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_STRICT_PREFERRED: spectre_v2_user_mitigation =
    2;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_PRCTL: spectre_v2_user_mitigation = 3;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_SECCOMP: spectre_v2_user_mitigation = 4;
pub type spectre_v2_user_mitigation = core::ffi::c_uint;
pub const ssb_mitigation_SPEC_STORE_BYPASS_NONE: ssb_mitigation = 0;
pub const ssb_mitigation_SPEC_STORE_BYPASS_DISABLE: ssb_mitigation = 1;
pub const ssb_mitigation_SPEC_STORE_BYPASS_PRCTL: ssb_mitigation = 2;
pub const ssb_mitigation_SPEC_STORE_BYPASS_SECCOMP: ssb_mitigation = 3;
pub type ssb_mitigation = core::ffi::c_uint;
extern "C" {
    pub static mut x86_pred_cmd: u64_;
}
extern "C" {
    pub static mut x86_spec_ctrl_base: u64_;
}
extern "C" {
    pub static mut x86_spec_ctrl_current: core::ffi::c_ulonglong;
}
extern "C" {
    pub fn update_spec_ctrl_cond(val: u64_);
}
extern "C" {
    pub fn spec_ctrl_current() -> u64_;
}
extern "C" {
    pub static mut switch_to_cond_stibp: static_key_false;
}
extern "C" {
    pub static mut switch_mm_cond_ibpb: static_key_false;
}
extern "C" {
    pub static mut switch_mm_always_ibpb: static_key_false;
}
extern "C" {
    pub static mut mds_idle_clear: static_key_false;
}
extern "C" {
    pub static mut switch_mm_cond_l1d_flush: static_key_false;
}
extern "C" {
    pub static mut mmio_stale_data_clear: static_key_false;
}
extern "C" {
    pub static mut mds_verw_sel: u16_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flush_tlb_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmu_gather {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct paravirt_callee_save {
    pub func: *mut core::ffi::c_void,
}
impl Default for paravirt_callee_save {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pv_info {
    pub name: *const core::ffi::c_char,
}
impl Default for pv_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pv_cpu_ops {
    pub io_delay: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pv_irq_ops {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pv_mmu_ops {
    pub flush_tlb_user: ::core::option::Option<unsafe extern "C" fn()>,
    pub flush_tlb_kernel: ::core::option::Option<unsafe extern "C" fn()>,
    pub flush_tlb_one_user: ::core::option::Option<unsafe extern "C" fn(addr: core::ffi::c_ulong)>,
    pub flush_tlb_multi: ::core::option::Option<
        unsafe extern "C" fn(cpus: *const cpumask, info: *const flush_tlb_info),
    >,
    pub tlb_remove_table: ::core::option::Option<
        unsafe extern "C" fn(tlb: *mut mmu_gather, table: *mut core::ffi::c_void),
    >,
    pub exit_mmap: ::core::option::Option<unsafe extern "C" fn(mm: *mut mm_struct)>,
    pub notify_page_enc_status_changed: ::core::option::Option<
        unsafe extern "C" fn(pfn: core::ffi::c_ulong, npages: core::ffi::c_int, enc: bool_),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arch_spinlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qspinlock {
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qspinlock__bindgen_ty_1 {
    pub val: atomic_t,
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: qspinlock__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_1 {
    pub locked: u8_,
    pub pending: u8_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_2 {
    pub locked_pending: u16_,
    pub tail: u16_,
}
impl Default for qspinlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for qspinlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arch_spinlock_t = qspinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qrwlock {
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1,
    pub wait_lock: arch_spinlock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qrwlock__bindgen_ty_1 {
    pub cnts: atomic_t,
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qrwlock__bindgen_ty_1__bindgen_ty_1 {
    pub wlocked: u8_,
    pub __lstate: [u8_; 3usize],
}
impl Default for qrwlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for qrwlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arch_rwlock_t = qrwlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pv_lock_ops {
    pub queued_spin_lock_slowpath:
        ::core::option::Option<unsafe extern "C" fn(lock: *mut qspinlock, val: u32_)>,
    pub queued_spin_unlock: paravirt_callee_save,
    pub wait: ::core::option::Option<unsafe extern "C" fn(ptr: *mut u8_, val: u8_)>,
    pub kick: ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int)>,
    pub vcpu_is_preempted: paravirt_callee_save,
}
impl Default for pv_lock_ops {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct paravirt_patch_template {
    pub cpu: pv_cpu_ops,
    pub irq: pv_irq_ops,
    pub mmu: pv_mmu_ops,
    pub lock: pv_lock_ops,
}
impl Default for paravirt_patch_template {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut pv_info: pv_info;
}
extern "C" {
    pub static mut pv_ops: paravirt_patch_template;
}
extern "C" {
    pub fn paravirt_disable_iospace() -> core::ffi::c_int;
}
extern "C" {
    pub fn paravirt_ret0() -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user_desc {
    pub entry_number: core::ffi::c_uint,
    pub base_addr: core::ffi::c_uint,
    pub limit: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl user_desc {
    #[inline]
    pub fn seg_32bit(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_32bit(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn contents(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_contents(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn read_exec_only(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_read_exec_only(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit_in_pages(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_limit_in_pages(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_not_present(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_not_present(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn useable(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_useable(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lm(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lm(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        seg_32bit: core::ffi::c_uint,
        contents: core::ffi::c_uint,
        read_exec_only: core::ffi::c_uint,
        limit_in_pages: core::ffi::c_uint,
        seg_not_present: core::ffi::c_uint,
        useable: core::ffi::c_uint,
        lm: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let seg_32bit: u32 = unsafe { ::core::mem::transmute(seg_32bit) };
            seg_32bit as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let contents: u32 = unsafe { ::core::mem::transmute(contents) };
            contents as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let read_exec_only: u32 = unsafe { ::core::mem::transmute(read_exec_only) };
            read_exec_only as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let limit_in_pages: u32 = unsafe { ::core::mem::transmute(limit_in_pages) };
            limit_in_pages as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let seg_not_present: u32 = unsafe { ::core::mem::transmute(seg_not_present) };
            seg_not_present as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let useable: u32 = unsafe { ::core::mem::transmute(useable) };
            useable as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let lm: u32 = unsafe { ::core::mem::transmute(lm) };
            lm as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn syscall_init();
}
extern "C" {
    pub fn entry_SYSCALL_64();
}
extern "C" {
    pub fn entry_SYSCALL_64_safe_stack();
}
extern "C" {
    pub fn entry_SYSRETQ_unsafe_stack();
}
extern "C" {
    pub fn entry_SYSRETQ_end();
}
extern "C" {
    pub fn do_arch_prctl_64(
        task: *mut task_struct,
        option: core::ffi::c_int,
        arg2: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn entry_SYSENTER_compat();
}
extern "C" {
    pub fn __end_entry_SYSENTER_compat();
}
extern "C" {
    pub fn entry_SYSCALL_compat();
}
extern "C" {
    pub fn entry_SYSCALL_compat_safe_stack();
}
extern "C" {
    pub fn entry_SYSRETL_compat_unsafe_stack();
}
extern "C" {
    pub fn entry_SYSRETL_compat_end();
}
extern "C" {
    pub fn x86_configure_nx();
}
extern "C" {
    pub static mut reboot_force: core::ffi::c_int;
}
extern "C" {
    pub fn do_arch_prctl_common(
        option: core::ffi::c_int,
        arg2: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn profile_pc(regs: *mut pt_regs) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn convert_ip_to_linear(child: *mut task_struct, regs: *mut pt_regs) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn send_sigtrap(
        regs: *mut pt_regs,
        error_code: core::ffi::c_int,
        si_code: core::ffi::c_int,
    );
}
extern "C" {
    pub fn regs_query_register_offset(name: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn regs_query_register_name(offset: core::ffi::c_uint) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn copy_from_kernel_nofault(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn do_get_thread_area(
        p: *mut task_struct,
        idx: core::ffi::c_int,
        info: *mut user_desc,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_set_thread_area(
        p: *mut task_struct,
        idx: core::ffi::c_int,
        info: *mut user_desc,
        can_allocate: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct math_emu_info {
    pub ___orig_eip: core::ffi::c_long,
    pub regs: *mut pt_regs,
}
impl Default for math_emu_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __u32,
    pub extended_size: __u32,
    pub xfeatures: __u64,
    pub xstate_size: __u32,
    pub padding: [__u32; 7usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _fpreg {
    pub significand: [__u16; 4usize],
    pub exponent: __u16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [__u16; 4usize],
    pub exponent: __u16,
    pub padding: [__u16; 3usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpstate_32 {
    pub cw: __u32,
    pub sw: __u32,
    pub tag: __u32,
    pub ipoff: __u32,
    pub cssel: __u32,
    pub dataoff: __u32,
    pub datasel: __u32,
    pub _st: [_fpreg; 8usize],
    pub status: __u16,
    pub magic: __u16,
    pub _fxsr_env: [__u32; 6usize],
    pub mxcsr: __u32,
    pub reserved: __u32,
    pub _fxsr_st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 8usize],
    pub __bindgen_anon_1: _fpstate_32__bindgen_ty_1,
    pub __bindgen_anon_2: _fpstate_32__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _fpstate_32__bindgen_ty_1 {
    pub padding1: [__u32; 44usize],
    pub padding: [__u32; 44usize],
}
impl Default for _fpstate_32__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _fpstate_32__bindgen_ty_2 {
    pub padding2: [__u32; 12usize],
    pub sw_reserved: _fpx_sw_bytes,
}
impl Default for _fpstate_32__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _fpstate_32 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpstate_64 {
    pub cwd: __u16,
    pub swd: __u16,
    pub twd: __u16,
    pub fop: __u16,
    pub rip: __u64,
    pub rdp: __u64,
    pub mxcsr: __u32,
    pub mxcsr_mask: __u32,
    pub st_space: [__u32; 32usize],
    pub xmm_space: [__u32; 64usize],
    pub reserved2: [__u32; 12usize],
    pub __bindgen_anon_1: _fpstate_64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _fpstate_64__bindgen_ty_1 {
    pub reserved3: [__u32; 12usize],
    pub sw_reserved: _fpx_sw_bytes,
}
impl Default for _fpstate_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _fpstate_64 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _header {
    pub xfeatures: __u64,
    pub reserved1: [__u64; 2usize],
    pub reserved2: [__u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__u32; 64usize],
}
impl Default for _ymmh_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate_64,
    pub xstate_hdr: _header,
    pub ymmh: _ymmh_state,
}
impl Default for _xstate {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sigcontext_32 {
    pub gs: __u16,
    pub __gsh: __u16,
    pub fs: __u16,
    pub __fsh: __u16,
    pub es: __u16,
    pub __esh: __u16,
    pub ds: __u16,
    pub __dsh: __u16,
    pub di: __u32,
    pub si: __u32,
    pub bp: __u32,
    pub sp: __u32,
    pub bx: __u32,
    pub dx: __u32,
    pub cx: __u32,
    pub ax: __u32,
    pub trapno: __u32,
    pub err: __u32,
    pub ip: __u32,
    pub cs: __u16,
    pub __csh: __u16,
    pub flags: __u32,
    pub sp_at_signal: __u32,
    pub ss: __u16,
    pub __ssh: __u16,
    pub fpstate: __u32,
    pub oldmask: __u32,
    pub cr2: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sigcontext_64 {
    pub r8: __u64,
    pub r9: __u64,
    pub r10: __u64,
    pub r11: __u64,
    pub r12: __u64,
    pub r13: __u64,
    pub r14: __u64,
    pub r15: __u64,
    pub di: __u64,
    pub si: __u64,
    pub bp: __u64,
    pub bx: __u64,
    pub dx: __u64,
    pub ax: __u64,
    pub cx: __u64,
    pub sp: __u64,
    pub ip: __u64,
    pub flags: __u64,
    pub cs: __u16,
    pub gs: __u16,
    pub fs: __u16,
    pub ss: __u16,
    pub err: __u64,
    pub trapno: __u64,
    pub oldmask: __u64,
    pub cr2: __u64,
    pub fpstate: __u64,
    pub reserved1: [__u64; 8usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpuid_regs {
    pub eax: u32_,
    pub ebx: u32_,
    pub ecx: u32_,
    pub edx: u32_,
}
pub const cpuid_regs_idx_CPUID_EAX: cpuid_regs_idx = 0;
pub const cpuid_regs_idx_CPUID_EBX: cpuid_regs_idx = 1;
pub const cpuid_regs_idx_CPUID_ECX: cpuid_regs_idx = 2;
pub const cpuid_regs_idx_CPUID_EDX: cpuid_regs_idx = 3;
pub type cpuid_regs_idx = core::ffi::c_uint;
extern "C" {
    pub static mut max_pfn: core::ffi::c_ulong;
}
extern "C" {
    pub static mut phys_base: core::ffi::c_ulong;
}
extern "C" {
    pub static mut page_offset_base: core::ffi::c_ulong;
}
extern "C" {
    pub static mut vmalloc_base: core::ffi::c_ulong;
}
extern "C" {
    pub static mut vmemmap_base: core::ffi::c_ulong;
}
extern "C" {
    pub fn clear_page_orig(page: *mut core::ffi::c_void);
}
extern "C" {
    pub fn clear_page_rep(page: *mut core::ffi::c_void);
}
extern "C" {
    pub fn clear_page_erms(page: *mut core::ffi::c_void);
}
extern "C" {
    pub fn copy_page(to: *mut core::ffi::c_void, from: *mut core::ffi::c_void);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct range {
    pub start: u64_,
    pub end: u64_,
}
extern "C" {
    pub fn add_range(
        range: *mut range,
        az: core::ffi::c_int,
        nr_range: core::ffi::c_int,
        start: u64_,
        end: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn add_range_with_merge(
        range: *mut range,
        az: core::ffi::c_int,
        nr_range: core::ffi::c_int,
        start: u64_,
        end: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn subtract_range(range: *mut range, az: core::ffi::c_int, start: u64_, end: u64_);
}
extern "C" {
    pub fn clean_sort_range(range: *mut range, az: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn sort_range(range: *mut range, nr_range: core::ffi::c_int);
}
extern "C" {
    pub static mut pfn_mapped: [range; 0usize];
}
extern "C" {
    pub static mut nr_pfn_mapped: core::ffi::c_int;
}
extern "C" {
    pub fn __virt_addr_valid(kaddr: core::ffi::c_ulong) -> bool_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pfn_t {
    pub val: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_irq_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_irqsave_t {
    pub lock: *mut core::ffi::c_void,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn native_write_cr0(val: core::ffi::c_ulong);
}
extern "C" {
    pub fn native_write_cr4(val: core::ffi::c_ulong);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fregs_state {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
    pub status: u32_,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct fxregs_state {
    pub cwd: u16_,
    pub swd: u16_,
    pub twd: u16_,
    pub fop: u16_,
    pub __bindgen_anon_1: fxregs_state__bindgen_ty_1,
    pub mxcsr: u32_,
    pub mxcsr_mask: u32_,
    pub st_space: [u32_; 32usize],
    pub xmm_space: [u32_; 64usize],
    pub padding: [u32_; 12usize],
    pub __bindgen_anon_2: fxregs_state__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fxregs_state__bindgen_ty_1 {
    pub __bindgen_anon_1: fxregs_state__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: fxregs_state__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fxregs_state__bindgen_ty_1__bindgen_ty_1 {
    pub rip: u64_,
    pub rdp: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fxregs_state__bindgen_ty_1__bindgen_ty_2 {
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
}
impl Default for fxregs_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fxregs_state__bindgen_ty_2 {
    pub padding1: [u32_; 12usize],
    pub sw_reserved: [u32_; 12usize],
}
impl Default for fxregs_state__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for fxregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swregs_state {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
    pub ftop: u8_,
    pub changed: u8_,
    pub lookahead: u8_,
    pub no_update: u8_,
    pub rm: u8_,
    pub alimit: u8_,
    pub info: *mut math_emu_info,
    pub entry_eip: u32_,
}
impl Default for swregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const xfeature_XFEATURE_FP: xfeature = 0;
pub const xfeature_XFEATURE_SSE: xfeature = 1;
pub const xfeature_XFEATURE_YMM: xfeature = 2;
pub const xfeature_XFEATURE_BNDREGS: xfeature = 3;
pub const xfeature_XFEATURE_BNDCSR: xfeature = 4;
pub const xfeature_XFEATURE_OPMASK: xfeature = 5;
pub const xfeature_XFEATURE_ZMM_Hi256: xfeature = 6;
pub const xfeature_XFEATURE_Hi16_ZMM: xfeature = 7;
pub const xfeature_XFEATURE_PT_UNIMPLEMENTED_SO_FAR: xfeature = 8;
pub const xfeature_XFEATURE_PKRU: xfeature = 9;
pub const xfeature_XFEATURE_PASID: xfeature = 10;
pub const xfeature_XFEATURE_CET_USER: xfeature = 11;
pub const xfeature_XFEATURE_CET_KERNEL_UNUSED: xfeature = 12;
pub const xfeature_XFEATURE_RSRVD_COMP_13: xfeature = 13;
pub const xfeature_XFEATURE_RSRVD_COMP_14: xfeature = 14;
pub const xfeature_XFEATURE_LBR: xfeature = 15;
pub const xfeature_XFEATURE_RSRVD_COMP_16: xfeature = 16;
pub const xfeature_XFEATURE_XTILE_CFG: xfeature = 17;
pub const xfeature_XFEATURE_XTILE_DATA: xfeature = 18;
pub const xfeature_XFEATURE_MAX: xfeature = 19;
pub type xfeature = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct reg_128_bit {
    pub regbytes: [u8_; 16usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct reg_256_bit {
    pub regbytes: [u8_; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct reg_512_bit {
    pub regbytes: [u8_; 64usize],
}
impl Default for reg_512_bit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct reg_1024_byte {
    pub regbytes: [u8_; 1024usize],
}
impl Default for reg_1024_byte {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct ymmh_struct {
    pub hi_ymm: [reg_128_bit; 16usize],
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct mpx_bndreg {
    pub lower_bound: u64_,
    pub upper_bound: u64_,
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct mpx_bndreg_state {
    pub bndreg: [mpx_bndreg; 4usize],
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct mpx_bndcsr {
    pub bndcfgu: u64_,
    pub bndstatus: u64_,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mpx_bndcsr_state {
    pub __bindgen_anon_1: mpx_bndcsr_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mpx_bndcsr_state__bindgen_ty_1 {
    pub bndcsr: mpx_bndcsr,
    pub pad_to_64_bytes: [u8_; 64usize],
}
impl Default for mpx_bndcsr_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for mpx_bndcsr_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct avx_512_opmask_state {
    pub opmask_reg: [u64_; 8usize],
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct avx_512_zmm_uppers_state {
    pub zmm_upper: [reg_256_bit; 16usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct avx_512_hi16_state {
    pub hi16_zmm: [reg_512_bit; 16usize],
}
impl Default for avx_512_hi16_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct pkru_state {
    pub pkru: u32_,
    pub pad: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cet_user_state {
    pub user_cet: u64_,
    pub user_ssp: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lbr_entry {
    pub from: u64_,
    pub to: u64_,
    pub info: u64_,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default, Copy, Clone)]
pub struct arch_lbr_state {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct xtile_cfg {
    pub tcfg: [u64_; 8usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct xtile_data {
    pub tmm: reg_1024_byte,
}
impl Default for xtile_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct ia32_pasid_state {
    pub pasid: u64_,
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct xstate_header {
    pub xfeatures: u64_,
    pub xcomp_bv: u64_,
    pub reserved: [u64_; 6usize],
}
#[repr(C)]
#[repr(align(64))]
pub struct xregs_state {
    pub _bindgen_opaque_blob: [u8; 576usize],
}
impl Default for xregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
pub struct fpregs_state {
    pub fsave: __BindgenUnionField<fregs_state>,
    pub fxsave: __BindgenUnionField<fxregs_state>,
    pub soft: __BindgenUnionField<swregs_state>,
    pub xsave: __BindgenUnionField<xregs_state>,
    pub __padding: __BindgenUnionField<[u8_; 4096usize]>,
    pub bindgen_union_field: [u8; 4096usize],
}
impl Default for fpregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
pub struct fpstate {
    pub size: core::ffi::c_uint,
    pub user_size: core::ffi::c_uint,
    pub xfeatures: u64_,
    pub user_xfeatures: u64_,
    pub xfd: u64_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u64; 3usize],
    pub regs: fpregs_state,
}
impl Default for fpstate {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl fpstate {
    #[inline]
    pub fn is_valloc(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_valloc(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_guest(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_guest(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_confidential(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_confidential(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_use(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_use(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_valloc: core::ffi::c_uint,
        is_guest: core::ffi::c_uint,
        is_confidential: core::ffi::c_uint,
        in_use: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_valloc: u32 = unsafe { ::core::mem::transmute(is_valloc) };
            is_valloc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_guest: u32 = unsafe { ::core::mem::transmute(is_guest) };
            is_guest as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_confidential: u32 = unsafe { ::core::mem::transmute(is_confidential) };
            is_confidential as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let in_use: u32 = unsafe { ::core::mem::transmute(in_use) };
            in_use as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fpu_state_perm {
    pub __state_perm: u64_,
    pub __state_size: core::ffi::c_uint,
    pub __user_state_size: core::ffi::c_uint,
}
#[repr(C)]
#[repr(align(64))]
pub struct fpu {
    pub last_cpu: core::ffi::c_uint,
    pub avx512_timestamp: core::ffi::c_ulong,
    pub fpstate: *mut fpstate,
    pub __task_fpstate: *mut fpstate,
    pub perm: fpu_state_perm,
    pub guest_perm: fpu_state_perm,
    pub __fpstate: fpstate,
}
impl Default for fpu {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fpu_guest {
    pub xfeatures: u64_,
    pub perm: u64_,
    pub xfd_err: u64_,
    pub uabi_size: core::ffi::c_uint,
    pub fpstate: *mut fpstate,
}
impl Default for fpu_guest {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fpu_state_config {
    pub max_size: core::ffi::c_uint,
    pub default_size: core::ffi::c_uint,
    pub max_features: u64_,
    pub default_features: u64_,
    pub legacy_features: u64_,
}
extern "C" {
    pub static mut fpu_kernel_cfg: fpu_state_config;
}
extern "C" {
    pub static mut fpu_user_cfg: fpu_state_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct getcpu_cache {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __vdso_getcpu(
        cpu: *mut core::ffi::c_uint,
        node: *mut core::ffi::c_uint,
        unused: *mut getcpu_cache,
    ) -> core::ffi::c_long;
}
pub const UNAME26: _bindgen_ty_4 = 131072;
pub const ADDR_NO_RANDOMIZE: _bindgen_ty_4 = 262144;
pub const FDPIC_FUNCPTRS: _bindgen_ty_4 = 524288;
pub const MMAP_PAGE_ZERO: _bindgen_ty_4 = 1048576;
pub const ADDR_COMPAT_LAYOUT: _bindgen_ty_4 = 2097152;
pub const READ_IMPLIES_EXEC: _bindgen_ty_4 = 4194304;
pub const ADDR_LIMIT_32BIT: _bindgen_ty_4 = 8388608;
pub const SHORT_INODE: _bindgen_ty_4 = 16777216;
pub const WHOLE_SECONDS: _bindgen_ty_4 = 33554432;
pub const STICKY_TIMEOUTS: _bindgen_ty_4 = 67108864;
pub const ADDR_LIMIT_3GB: _bindgen_ty_4 = 134217728;
pub type _bindgen_ty_4 = core::ffi::c_uint;
pub const PER_LINUX: _bindgen_ty_5 = 0;
pub const PER_LINUX_32BIT: _bindgen_ty_5 = 8388608;
pub const PER_LINUX_FDPIC: _bindgen_ty_5 = 524288;
pub const PER_SVR4: _bindgen_ty_5 = 68157441;
pub const PER_SVR3: _bindgen_ty_5 = 83886082;
pub const PER_SCOSVR3: _bindgen_ty_5 = 117440515;
pub const PER_OSR5: _bindgen_ty_5 = 100663299;
pub const PER_WYSEV386: _bindgen_ty_5 = 83886084;
pub const PER_ISCR4: _bindgen_ty_5 = 67108869;
pub const PER_BSD: _bindgen_ty_5 = 6;
pub const PER_SUNOS: _bindgen_ty_5 = 67108870;
pub const PER_XENIX: _bindgen_ty_5 = 83886087;
pub const PER_LINUX32: _bindgen_ty_5 = 8;
pub const PER_LINUX32_3GB: _bindgen_ty_5 = 134217736;
pub const PER_IRIX32: _bindgen_ty_5 = 67108873;
pub const PER_IRIXN32: _bindgen_ty_5 = 67108874;
pub const PER_IRIX64: _bindgen_ty_5 = 67108875;
pub const PER_RISCOS: _bindgen_ty_5 = 12;
pub const PER_SOLARIS: _bindgen_ty_5 = 67108877;
pub const PER_UW7: _bindgen_ty_5 = 68157454;
pub const PER_OSF4: _bindgen_ty_5 = 15;
pub const PER_HPUX: _bindgen_ty_5 = 16;
pub const PER_MASK: _bindgen_ty_5 = 255;
pub type _bindgen_ty_5 = core::ffi::c_uint;
pub const tlb_infos_ENTRIES: tlb_infos = 0;
pub const tlb_infos_NR_INFO: tlb_infos = 1;
pub type tlb_infos = core::ffi::c_uint;
extern "C" {
    pub static mut tlb_lli_4k: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lli_2m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lli_4m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_4k: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_2m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_4m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_1g: [u16_; 1usize];
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpuinfo_topology {
    pub apicid: u32_,
    pub initial_apicid: u32_,
    pub pkg_id: u32_,
    pub die_id: u32_,
    pub cu_id: u32_,
    pub core_id: u32_,
    pub logical_pkg_id: u32_,
    pub logical_die_id: u32_,
    pub amd_node_id: u32_,
    pub llc_id: u32_,
    pub l2c_id: u32_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpuinfo_x86 {
    pub __bindgen_anon_1: cpuinfo_x86__bindgen_ty_1,
    pub x86_stepping: __u8,
    pub x86_tlbsize: core::ffi::c_int,
    pub vmx_capability: [__u32; 5usize],
    pub x86_virt_bits: __u8,
    pub x86_phys_bits: __u8,
    pub extended_cpuid_level: __u32,
    pub cpuid_level: core::ffi::c_int,
    pub __bindgen_anon_2: cpuinfo_x86__bindgen_ty_2,
    pub x86_vendor_id: [core::ffi::c_char; 16usize],
    pub x86_model_id: [core::ffi::c_char; 64usize],
    pub topo: cpuinfo_topology,
    pub x86_cache_size: core::ffi::c_uint,
    pub x86_cache_alignment: core::ffi::c_int,
    pub x86_cache_max_rmid: core::ffi::c_int,
    pub x86_cache_occ_scale: core::ffi::c_int,
    pub x86_cache_mbm_width_offset: core::ffi::c_int,
    pub x86_power: core::ffi::c_int,
    pub loops_per_jiffy: core::ffi::c_ulong,
    pub ppin: u64_,
    pub x86_clflush_size: u16_,
    pub booted_cores: u16_,
    pub cpu_index: u16_,
    pub smt_active: bool_,
    pub microcode: u32_,
    pub x86_cache_bits: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpuinfo_x86__bindgen_ty_1 {
    pub __bindgen_anon_1: cpuinfo_x86__bindgen_ty_1__bindgen_ty_1,
    pub x86_vfm: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpuinfo_x86__bindgen_ty_1__bindgen_ty_1 {
    pub x86_model: __u8,
    pub x86: __u8,
    pub x86_vendor: __u8,
    pub x86_reserved: __u8,
}
impl Default for cpuinfo_x86__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpuinfo_x86__bindgen_ty_2 {
    pub x86_capability: [__u32; 24usize],
    pub x86_capability_alignment: core::ffi::c_ulong,
}
impl Default for cpuinfo_x86__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for cpuinfo_x86 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl cpuinfo_x86 {
    #[inline]
    pub fn initialized(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_initialized(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(initialized: core::ffi::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let initialized: u32 = unsafe { ::core::mem::transmute(initialized) };
            initialized as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut boot_cpu_data: cpuinfo_x86;
}
extern "C" {
    pub static mut new_cpu_data: cpuinfo_x86;
}
extern "C" {
    pub static mut cpu_caps_cleared: [__u32; 24usize];
}
extern "C" {
    pub static mut cpu_caps_set: [__u32; 24usize];
}
extern "C" {
    pub static mut cpu_info: cpuinfo_x86;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seq_operations {
    pub start: ::core::option::Option<
        unsafe extern "C" fn(m: *mut seq_file, pos: *mut loff_t) -> *mut core::ffi::c_void,
    >,
    pub stop:
        ::core::option::Option<unsafe extern "C" fn(m: *mut seq_file, v: *mut core::ffi::c_void)>,
    pub next: ::core::option::Option<
        unsafe extern "C" fn(
            m: *mut seq_file,
            v: *mut core::ffi::c_void,
            pos: *mut loff_t,
        ) -> *mut core::ffi::c_void,
    >,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(m: *mut seq_file, v: *mut core::ffi::c_void) -> core::ffi::c_int,
    >,
}
extern "C" {
    pub static cpuinfo_op: seq_operations;
}
extern "C" {
    pub fn cpu_detect(c: *mut cpuinfo_x86);
}
extern "C" {
    pub fn early_cpu_init();
}
extern "C" {
    pub fn identify_secondary_cpu(arg1: *mut cpuinfo_x86);
}
extern "C" {
    pub fn print_cpu_info(arg1: *mut cpuinfo_x86);
}
extern "C" {
    pub fn print_cpu_msr(arg1: *mut cpuinfo_x86);
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct x86_hw_tss {
    pub reserved1: u32_,
    pub sp0: u64_,
    pub sp1: u64_,
    pub sp2: u64_,
    pub reserved2: u64_,
    pub ist: [u64_; 7usize],
    pub reserved3: u32_,
    pub reserved4: u32_,
    pub reserved5: u16_,
    pub io_bitmap_base: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct entry_stack {
    pub stack: [core::ffi::c_char; 4096usize],
}
impl Default for entry_stack {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4096))]
#[derive(Copy, Clone)]
pub struct entry_stack_page {
    pub stack: entry_stack,
}
impl Default for entry_stack_page {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_io_bitmap {
    pub prev_sequence: u64_,
    pub prev_max: core::ffi::c_uint,
    pub bitmap: [core::ffi::c_ulong; 1025usize],
    pub mapall: [core::ffi::c_ulong; 1025usize],
}
impl Default for x86_io_bitmap {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4096))]
#[derive(Copy, Clone)]
pub struct tss_struct {
    pub x86_tss: x86_hw_tss,
    pub io_bitmap: x86_io_bitmap,
}
impl Default for tss_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut cpu_tss_rw: tss_struct;
}
#[repr(C)]
#[repr(align(16384))]
#[derive(Copy, Clone)]
pub struct irq_stack {
    pub stack: [core::ffi::c_char; 16384usize],
}
impl Default for irq_stack {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fixed_percpu_data {
    pub gs_base: [core::ffi::c_char; 40usize],
    pub stack_canary: core::ffi::c_ulong,
}
impl Default for fixed_percpu_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut fixed_percpu_data: fixed_percpu_data;
}
extern "C" {
    pub static mut init_per_cpu__fixed_percpu_data: fixed_percpu_data;
}
extern "C" {
    pub fn entry_SYSCALL32_ignore();
}
extern "C" {
    pub fn current_save_fsgs();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct perf_event {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(64))]
pub struct thread_struct {
    pub tls_array: [desc_struct; 3usize],
    pub sp: core::ffi::c_ulong,
    pub es: core::ffi::c_ushort,
    pub ds: core::ffi::c_ushort,
    pub fsindex: core::ffi::c_ushort,
    pub gsindex: core::ffi::c_ushort,
    pub fsbase: core::ffi::c_ulong,
    pub gsbase: core::ffi::c_ulong,
    pub ptrace_bps: [*mut perf_event; 4usize],
    pub virtual_dr6: core::ffi::c_ulong,
    pub ptrace_dr7: core::ffi::c_ulong,
    pub cr2: core::ffi::c_ulong,
    pub trap_nr: core::ffi::c_ulong,
    pub error_code: core::ffi::c_ulong,
    pub io_bitmap: *mut io_bitmap,
    pub iopl_emul: core::ffi::c_ulong,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub pkru: u32_,
    pub __bindgen_padding_0: [u64; 5usize],
    pub fpu: fpu,
}
impl Default for thread_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl thread_struct {
    #[inline]
    pub fn iopl_warn(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_iopl_warn(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(iopl_warn: core::ffi::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iopl_warn: u32 = unsafe { ::core::mem::transmute(iopl_warn) };
            iopl_warn as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn fpu_thread_struct_whitelist(
        offset: *mut core::ffi::c_ulong,
        size: *mut core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn __get_wchan(p: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn select_idle_routine();
}
extern "C" {
    pub fn amd_e400_c1e_apic_setup();
}
extern "C" {
    pub static mut boot_option_idle_override: core::ffi::c_ulong;
}
pub const idle_boot_override_IDLE_NO_OVERRIDE: idle_boot_override = 0;
pub const idle_boot_override_IDLE_HALT: idle_boot_override = 1;
pub const idle_boot_override_IDLE_NOMWAIT: idle_boot_override = 2;
pub const idle_boot_override_IDLE_POLL: idle_boot_override = 3;
pub type idle_boot_override = core::ffi::c_uint;
extern "C" {
    pub fn enable_sep_cpu();
}
extern "C" {
    pub static mut early_gdt_descr: desc_ptr;
}
extern "C" {
    pub fn switch_gdt_and_percpu_base(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn load_direct_gdt(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn load_fixmap_gdt(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn cpu_init();
}
extern "C" {
    pub fn cpu_init_exception_handling();
}
extern "C" {
    pub fn cr4_init();
}
extern "C" {
    pub fn set_task_blockstep(task: *mut task_struct, on: bool_);
}
extern "C" {
    pub static mut bootloader_type: core::ffi::c_int;
}
extern "C" {
    pub static mut bootloader_version: core::ffi::c_int;
}
extern "C" {
    pub static mut ignore_fpu_irq: core::ffi::c_char;
}
extern "C" {
    pub static mut __top_init_kernel_stack: [core::ffi::c_ulong; 0usize];
}
extern "C" {
    pub fn KSTK_ESP(task: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn start_thread(regs: *mut pt_regs, new_ip: core::ffi::c_ulong, new_sp: core::ffi::c_ulong);
}
extern "C" {
    pub fn get_tsc_mode(adr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_tsc_mode(val: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub static mut msr_misc_features_shadow: core::ffi::c_ulonglong;
}
extern "C" {
    pub fn amd_get_highest_perf() -> u32_;
}
extern "C" {
    pub fn amd_check_microcode();
}
extern "C" {
    pub fn arch_align_stack(sp: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn free_init_pages(
        what: *const core::ffi::c_char,
        begin: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn free_kernel_image_pages(
        what: *const core::ffi::c_char,
        begin: *mut core::ffi::c_void,
        end: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn default_idle();
}
extern "C" {
    pub fn stop_this_cpu(dummy: *mut core::ffi::c_void) -> !;
}
extern "C" {
    pub fn microcode_check(prev_info: *mut cpuinfo_x86);
}
extern "C" {
    pub fn store_cpu_caps(info: *mut cpuinfo_x86);
}
pub const l1tf_mitigations_L1TF_MITIGATION_OFF: l1tf_mitigations = 0;
pub const l1tf_mitigations_L1TF_MITIGATION_FLUSH_NOWARN: l1tf_mitigations = 1;
pub const l1tf_mitigations_L1TF_MITIGATION_FLUSH: l1tf_mitigations = 2;
pub const l1tf_mitigations_L1TF_MITIGATION_FLUSH_NOSMT: l1tf_mitigations = 3;
pub const l1tf_mitigations_L1TF_MITIGATION_FULL: l1tf_mitigations = 4;
pub const l1tf_mitigations_L1TF_MITIGATION_FULL_FORCE: l1tf_mitigations = 5;
pub type l1tf_mitigations = core::ffi::c_uint;
extern "C" {
    pub static mut l1tf_mitigation: l1tf_mitigations;
}
pub const mds_mitigations_MDS_MITIGATION_OFF: mds_mitigations = 0;
pub const mds_mitigations_MDS_MITIGATION_FULL: mds_mitigations = 1;
pub const mds_mitigations_MDS_MITIGATION_VMWERV: mds_mitigations = 2;
pub type mds_mitigations = core::ffi::c_uint;
extern "C" {
    pub fn gds_ucode_mitigated() -> bool_;
}
pub const cpuid_leafs_CPUID_1_EDX: cpuid_leafs = 0;
pub const cpuid_leafs_CPUID_8000_0001_EDX: cpuid_leafs = 1;
pub const cpuid_leafs_CPUID_8086_0001_EDX: cpuid_leafs = 2;
pub const cpuid_leafs_CPUID_LNX_1: cpuid_leafs = 3;
pub const cpuid_leafs_CPUID_1_ECX: cpuid_leafs = 4;
pub const cpuid_leafs_CPUID_C000_0001_EDX: cpuid_leafs = 5;
pub const cpuid_leafs_CPUID_8000_0001_ECX: cpuid_leafs = 6;
pub const cpuid_leafs_CPUID_LNX_2: cpuid_leafs = 7;
pub const cpuid_leafs_CPUID_LNX_3: cpuid_leafs = 8;
pub const cpuid_leafs_CPUID_7_0_EBX: cpuid_leafs = 9;
pub const cpuid_leafs_CPUID_D_1_EAX: cpuid_leafs = 10;
pub const cpuid_leafs_CPUID_LNX_4: cpuid_leafs = 11;
pub const cpuid_leafs_CPUID_7_1_EAX: cpuid_leafs = 12;
pub const cpuid_leafs_CPUID_8000_0008_EBX: cpuid_leafs = 13;
pub const cpuid_leafs_CPUID_6_EAX: cpuid_leafs = 14;
pub const cpuid_leafs_CPUID_8000_000A_EDX: cpuid_leafs = 15;
pub const cpuid_leafs_CPUID_7_ECX: cpuid_leafs = 16;
pub const cpuid_leafs_CPUID_8000_0007_EBX: cpuid_leafs = 17;
pub const cpuid_leafs_CPUID_7_EDX: cpuid_leafs = 18;
pub const cpuid_leafs_CPUID_8000_001F_EAX: cpuid_leafs = 19;
pub const cpuid_leafs_CPUID_8000_0021_EAX: cpuid_leafs = 20;
pub const cpuid_leafs_CPUID_LNX_5: cpuid_leafs = 21;
pub const cpuid_leafs_NR_CPUID_WORDS: cpuid_leafs = 22;
pub type cpuid_leafs = core::ffi::c_uint;
extern "C" {
    pub static x86_cap_flags: [*const core::ffi::c_char; 704usize];
}
extern "C" {
    pub static x86_power_flags: [*const core::ffi::c_char; 32usize];
}
extern "C" {
    pub static x86_bug_flags: [*const core::ffi::c_char; 64usize];
}
extern "C" {
    pub fn setup_clear_cpu_cap(bit: core::ffi::c_uint);
}
extern "C" {
    pub fn clear_cpu_cap(c: *mut cpuinfo_x86, bit: core::ffi::c_uint);
}
extern "C" {
    pub static hex_asc: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static hex_asc_upper: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub fn hex_to_bin(ch: core::ffi::c_uchar) -> core::ffi::c_int;
}
extern "C" {
    pub fn hex2bin(dst: *mut u8_, src: *const core::ffi::c_char, count: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn bin2hex(
        dst: *mut core::ffi::c_char,
        src: *const core::ffi::c_void,
        count: usize,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn mac_pton(s: *const core::ffi::c_char, mac: *mut u8_) -> bool_;
}
extern "C" {
    pub fn _kstrtoul(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn _kstrtol(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_long,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoull(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_ulonglong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoll(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_longlong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtouint(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoint(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtou16(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut u16_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtos16(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut s16,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtou8(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut u8_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtos8(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut s8,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtobool(s: *const core::ffi::c_char, res: *mut bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoull_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_ulonglong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoll_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_longlong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoul_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtol_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_long,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtouint_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoint_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtou16_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut u16_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtos16_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut s16,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtou8_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut u8_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtos8_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut s8,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtobool_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        res: *mut bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_strtoul(
        arg1: *const core::ffi::c_char,
        arg2: *mut *mut core::ffi::c_char,
        arg3: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn simple_strtol(
        arg1: *const core::ffi::c_char,
        arg2: *mut *mut core::ffi::c_char,
        arg3: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn simple_strtoull(
        arg1: *const core::ffi::c_char,
        arg2: *mut *mut core::ffi::c_char,
        arg3: core::ffi::c_uint,
    ) -> core::ffi::c_ulonglong;
}
extern "C" {
    pub fn simple_strtoll(
        arg1: *const core::ffi::c_char,
        arg2: *mut *mut core::ffi::c_char,
        arg3: core::ffi::c_uint,
    ) -> core::ffi::c_longlong;
}
extern "C" {
    pub static mut panic_blink:
        ::core::option::Option<unsafe extern "C" fn(state: core::ffi::c_int) -> core::ffi::c_long>;
}
extern "C" {
    pub fn panic(fmt: *const core::ffi::c_char, ...) -> !;
}
extern "C" {
    pub fn nmi_panic(regs: *mut pt_regs, msg: *const core::ffi::c_char);
}
extern "C" {
    pub fn check_panic_on_warn(origin: *const core::ffi::c_char);
}
extern "C" {
    pub fn oops_enter();
}
extern "C" {
    pub fn oops_exit();
}
extern "C" {
    pub fn oops_may_print() -> bool_;
}
extern "C" {
    pub static mut panic_timeout: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_print: core::ffi::c_ulong;
}
extern "C" {
    pub static mut panic_on_oops: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_on_unrecovered_nmi: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_on_io_nmi: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_on_warn: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_on_taint: core::ffi::c_ulong;
}
extern "C" {
    pub static mut panic_on_taint_nousertaint: bool_;
}
extern "C" {
    pub static mut sysctl_panic_on_rcu_stall: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_max_rcu_stall_to_panic: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_panic_on_stackoverflow: core::ffi::c_int;
}
extern "C" {
    pub static mut crash_kexec_post_notifiers: bool_;
}
extern "C" {
    pub fn __stack_chk_fail();
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub static mut panic_cpu: atomic_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct taint_flag {
    pub c_true: core::ffi::c_char,
    pub c_false: core::ffi::c_char,
    pub module: bool_,
    pub desc: *const core::ffi::c_char,
}
impl Default for taint_flag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static taint_flags: [taint_flag; 19usize];
}
pub const lockdep_ok_LOCKDEP_STILL_OK: lockdep_ok = 0;
pub const lockdep_ok_LOCKDEP_NOW_UNRELIABLE: lockdep_ok = 1;
pub type lockdep_ok = core::ffi::c_uint;
extern "C" {
    pub fn print_tainted() -> *const core::ffi::c_char;
}
extern "C" {
    pub fn print_tainted_verbose() -> *const core::ffi::c_char;
}
extern "C" {
    pub fn add_taint(flag: core::ffi::c_uint, arg1: lockdep_ok);
}
extern "C" {
    pub fn test_taint(flag: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_taint() -> core::ffi::c_ulong;
}
pub const lockdep_wait_type_LD_WAIT_INV: lockdep_wait_type = 0;
pub const lockdep_wait_type_LD_WAIT_FREE: lockdep_wait_type = 1;
pub const lockdep_wait_type_LD_WAIT_SPIN: lockdep_wait_type = 2;
pub const lockdep_wait_type_LD_WAIT_CONFIG: lockdep_wait_type = 2;
pub const lockdep_wait_type_LD_WAIT_SLEEP: lockdep_wait_type = 3;
pub const lockdep_wait_type_LD_WAIT_MAX: lockdep_wait_type = 4;
pub type lockdep_wait_type = core::ffi::c_uint;
pub const lockdep_lock_type_LD_LOCK_NORMAL: lockdep_lock_type = 0;
pub const lockdep_lock_type_LD_LOCK_PERCPU: lockdep_lock_type = 1;
pub const lockdep_lock_type_LD_LOCK_WAIT_OVERRIDE: lockdep_lock_type = 2;
pub const lockdep_lock_type_LD_LOCK_MAX: lockdep_lock_type = 3;
pub type lockdep_lock_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lock_class_key {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lockdep_map {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pin_cookie {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct raw_spinlock {
    pub raw_lock: arch_spinlock_t,
}
impl Default for raw_spinlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type raw_spinlock_t = raw_spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ratelimit_state {
    pub lock: raw_spinlock_t,
    pub interval: core::ffi::c_int,
    pub burst: core::ffi::c_int,
    pub printed: core::ffi::c_int,
    pub missed: core::ffi::c_int,
    pub begin: core::ffi::c_ulong,
    pub flags: core::ffi::c_ulong,
}
impl Default for ratelimit_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ___ratelimit(
        rs: *mut ratelimit_state,
        func: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static linux_banner: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static linux_proc_banner: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut oops_in_progress: core::ffi::c_int;
}
extern "C" {
    pub fn match_devname_and_update_preferred_console(
        match_: *const core::ffi::c_char,
        name: *const core::ffi::c_char,
        idx: core::ffi::c_short,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut console_printk: [core::ffi::c_int; 0usize];
}
extern "C" {
    pub fn console_verbose();
}
extern "C" {
    pub static mut devkmsg_log_str: [core::ffi::c_char; 10usize];
}
extern "C" {
    pub static mut suppress_printk: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct va_format {
    pub fmt: *const core::ffi::c_char,
    pub va: *mut va_list,
}
impl Default for va_format {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn early_printk(fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn vprintk_emit(
        facility: core::ffi::c_int,
        level: core::ffi::c_int,
        dev_info: *const dev_printk_info,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vprintk(fmt: *const core::ffi::c_char, args: *mut __va_list_tag) -> core::ffi::c_int;
}
extern "C" {
    pub fn _printk(fmt: *const core::ffi::c_char, ...) -> core::ffi::c_int;
}
extern "C" {
    pub fn _printk_deferred(fmt: *const core::ffi::c_char, ...) -> core::ffi::c_int;
}
extern "C" {
    pub fn __printk_safe_enter();
}
extern "C" {
    pub fn __printk_safe_exit();
}
extern "C" {
    pub fn __printk_ratelimit(func: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn printk_timed_ratelimit(
        caller_jiffies: *mut core::ffi::c_ulong,
        interval_msec: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub static mut printk_delay_msec: core::ffi::c_int;
}
extern "C" {
    pub static mut dmesg_restrict: core::ffi::c_int;
}
extern "C" {
    pub fn wake_up_klogd();
}
extern "C" {
    pub fn log_buf_addr_get() -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn log_buf_len_get() -> u32_;
}
extern "C" {
    pub fn log_buf_vmcoreinfo_setup();
}
extern "C" {
    pub fn setup_log_buf(early: core::ffi::c_int);
}
extern "C" {
    pub fn dump_stack_set_arch_desc(fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn dump_stack_print_info(log_lvl: *const core::ffi::c_char);
}
extern "C" {
    pub fn show_regs_print_info(log_lvl: *const core::ffi::c_char);
}
extern "C" {
    pub fn dump_stack_lvl(log_lvl: *const core::ffi::c_char);
}
extern "C" {
    pub fn dump_stack();
}
extern "C" {
    pub fn printk_trigger_flush();
}
extern "C" {
    pub fn console_try_replay_all();
}
extern "C" {
    pub fn this_cpu_in_panic() -> bool_;
}
extern "C" {
    pub fn __printk_cpu_sync_try_get() -> core::ffi::c_int;
}
extern "C" {
    pub fn __printk_cpu_sync_wait();
}
extern "C" {
    pub fn __printk_cpu_sync_put();
}
extern "C" {
    pub static mut kptr_restrict: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_operations {
    pub owner: *mut module,
    pub fop_flags: fop_flags_t,
    pub llseek: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: loff_t, arg3: core::ffi::c_int) -> loff_t,
    >,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut core::ffi::c_char,
            arg3: usize,
            arg4: *mut loff_t,
        ) -> isize,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *const core::ffi::c_char,
            arg3: usize,
            arg4: *mut loff_t,
        ) -> isize,
    >,
    pub read_iter: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize,
    >,
    pub write_iter: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize,
    >,
    pub iopoll: ::core::option::Option<
        unsafe extern "C" fn(
            kiocb: *mut kiocb,
            arg1: *mut io_comp_batch,
            flags: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub iterate_shared: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int,
    >,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut poll_table_struct) -> __poll_t,
    >,
    pub unlocked_ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_uint,
            arg3: core::ffi::c_ulong,
        ) -> core::ffi::c_long,
    >,
    pub compat_ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_uint,
            arg3: core::ffi::c_ulong,
        ) -> core::ffi::c_long,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut vm_area_struct) -> core::ffi::c_int,
    >,
    pub open: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int,
    >,
    pub flush: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, id: fl_owner_t) -> core::ffi::c_int,
    >,
    pub release: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int,
    >,
    pub fsync: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: loff_t,
            datasync: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub fasync: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: core::ffi::c_int,
            arg2: *mut file,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub lock: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_int,
            arg3: *mut file_lock,
        ) -> core::ffi::c_int,
    >,
    pub get_unmapped_area: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_ulong,
            arg3: core::ffi::c_ulong,
            arg4: core::ffi::c_ulong,
            arg5: core::ffi::c_ulong,
        ) -> core::ffi::c_ulong,
    >,
    pub check_flags:
        ::core::option::Option<unsafe extern "C" fn(arg1: core::ffi::c_int) -> core::ffi::c_int>,
    pub flock: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_int,
            arg3: *mut file_lock,
        ) -> core::ffi::c_int,
    >,
    pub splice_write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pipe_inode_info,
            arg2: *mut file,
            arg3: *mut loff_t,
            arg4: usize,
            arg5: core::ffi::c_uint,
        ) -> isize,
    >,
    pub splice_read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut loff_t,
            arg3: *mut pipe_inode_info,
            arg4: usize,
            arg5: core::ffi::c_uint,
        ) -> isize,
    >,
    pub splice_eof: ::core::option::Option<unsafe extern "C" fn(file: *mut file)>,
    pub setlease: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_int,
            arg3: *mut *mut file_lease,
            arg4: *mut *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub fallocate: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file,
            mode: core::ffi::c_int,
            offset: loff_t,
            len: loff_t,
        ) -> core::ffi::c_long,
    >,
    pub show_fdinfo: ::core::option::Option<unsafe extern "C" fn(m: *mut seq_file, f: *mut file)>,
    pub copy_file_range: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: *mut file,
            arg4: loff_t,
            arg5: usize,
            arg6: core::ffi::c_uint,
        ) -> isize,
    >,
    pub remap_file_range: ::core::option::Option<
        unsafe extern "C" fn(
            file_in: *mut file,
            pos_in: loff_t,
            file_out: *mut file,
            pos_out: loff_t,
            len: loff_t,
            remap_flags: core::ffi::c_uint,
        ) -> loff_t,
    >,
    pub fadvise: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: loff_t,
            arg4: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub uring_cmd: ::core::option::Option<
        unsafe extern "C" fn(
            ioucmd: *mut io_uring_cmd,
            issue_flags: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub uring_cmd_iopoll: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut io_uring_cmd,
            arg2: *mut io_comp_batch,
            poll_flags: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
}
impl Default for file_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static kmsg_fops: file_operations;
}
pub const DUMP_PREFIX_NONE: _bindgen_ty_6 = 0;
pub const DUMP_PREFIX_ADDRESS: _bindgen_ty_6 = 1;
pub const DUMP_PREFIX_OFFSET: _bindgen_ty_6 = 2;
pub type _bindgen_ty_6 = core::ffi::c_uint;
extern "C" {
    pub fn hex_dump_to_buffer(
        buf: *const core::ffi::c_void,
        len: usize,
        rowsize: core::ffi::c_int,
        groupsize: core::ffi::c_int,
        linebuf: *mut core::ffi::c_char,
        linebuflen: usize,
        ascii: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn print_hex_dump(
        level: *const core::ffi::c_char,
        prefix_str: *const core::ffi::c_char,
        prefix_type: core::ffi::c_int,
        rowsize: core::ffi::c_int,
        groupsize: core::ffi::c_int,
        buf: *const core::ffi::c_void,
        len: usize,
        ascii: bool_,
    );
}
extern "C" {
    pub fn num_to_str(
        buf: *mut core::ffi::c_char,
        size: core::ffi::c_int,
        num: core::ffi::c_ulonglong,
        width: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sprintf(
        buf: *mut core::ffi::c_char,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vsprintf(
        buf: *mut core::ffi::c_char,
        arg1: *const core::ffi::c_char,
        arg2: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn snprintf(
        buf: *mut core::ffi::c_char,
        size: core::ffi::c_ulong,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vsnprintf(
        buf: *mut core::ffi::c_char,
        size: core::ffi::c_ulong,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn scnprintf(
        buf: *mut core::ffi::c_char,
        size: usize,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vscnprintf(
        buf: *mut core::ffi::c_char,
        size: usize,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kasprintf(gfp: gfp_t, fmt: *const core::ffi::c_char, ...) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kvasprintf(
        gfp: gfp_t,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kvasprintf_const(
        gfp: gfp_t,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn sscanf(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vsscanf(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut no_hash_pointers: bool_;
}
extern "C" {
    pub fn no_hash_pointers_enable(str_: *mut core::ffi::c_char) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct static_call_site {
    pub addr: s32,
    pub key: s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_call_key {
    pub func: *mut core::ffi::c_void,
    pub __bindgen_anon_1: static_call_key__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union static_call_key__bindgen_ty_1 {
    pub type_: core::ffi::c_ulong,
    pub mods: *mut static_call_mod,
    pub sites: *mut static_call_site,
}
impl Default for static_call_key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for static_call_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __cond_resched() -> core::ffi::c_int;
}
extern "C" {
    pub static mut __SCK__might_resched: static_call_key;
}
extern "C" {
    pub fn __SCT__might_resched() -> core::ffi::c_int;
}
extern "C" {
    pub fn do_exit(error_code: core::ffi::c_long) -> !;
}
extern "C" {
    pub fn core_kernel_text(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn __kernel_text_address(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_text_address(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn func_ptr_is_kernel_text(ptr: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn bust_spinlocks(yes: core::ffi::c_int);
}
extern "C" {
    pub static mut root_mountflags: core::ffi::c_int;
}
extern "C" {
    pub static mut early_boot_irqs_disabled: bool_;
}
pub const system_states_SYSTEM_BOOTING: system_states = 0;
pub const system_states_SYSTEM_SCHEDULING: system_states = 1;
pub const system_states_SYSTEM_FREEING_INITMEM: system_states = 2;
pub const system_states_SYSTEM_RUNNING: system_states = 3;
pub const system_states_SYSTEM_HALT: system_states = 4;
pub const system_states_SYSTEM_POWER_OFF: system_states = 5;
pub const system_states_SYSTEM_RESTART: system_states = 6;
pub const system_states_SYSTEM_SUSPEND: system_states = 7;
pub type system_states = core::ffi::c_uint;
extern "C" {
    pub static mut system_state: system_states;
}
pub const ftrace_dump_mode_DUMP_NONE: ftrace_dump_mode = 0;
pub const ftrace_dump_mode_DUMP_ALL: ftrace_dump_mode = 1;
pub const ftrace_dump_mode_DUMP_ORIG: ftrace_dump_mode = 2;
pub const ftrace_dump_mode_DUMP_PARAM: ftrace_dump_mode = 3;
pub type ftrace_dump_mode = core::ffi::c_uint;
extern "C" {
    pub fn tracing_on();
}
extern "C" {
    pub fn tracing_off();
}
extern "C" {
    pub fn tracing_is_on() -> core::ffi::c_int;
}
extern "C" {
    pub fn tracing_snapshot();
}
extern "C" {
    pub fn tracing_snapshot_alloc();
}
extern "C" {
    pub fn tracing_start();
}
extern "C" {
    pub fn tracing_stop();
}
extern "C" {
    pub fn __trace_bprintk(
        ip: core::ffi::c_ulong,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __trace_printk(
        ip: core::ffi::c_ulong,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __trace_bputs(
        ip: core::ffi::c_ulong,
        str_: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __trace_puts(
        ip: core::ffi::c_ulong,
        str_: *const core::ffi::c_char,
        size: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn trace_dump_stack(skip: core::ffi::c_int);
}
extern "C" {
    pub fn __ftrace_vbprintk(
        ip: core::ffi::c_ulong,
        fmt: *const core::ffi::c_char,
        ap: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __ftrace_vprintk(
        ip: core::ffi::c_ulong,
        fmt: *const core::ffi::c_char,
        ap: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ftrace_dump(oops_dump_mode: ftrace_dump_mode);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpumask {
    pub bits: [core::ffi::c_ulong; 1usize],
}
pub type cpumask_t = cpumask;
pub type cpumask_var_t = [cpumask; 1usize];
extern "C" {
    pub fn __xchg_wrong_size();
}
extern "C" {
    pub fn __cmpxchg_wrong_size();
}
extern "C" {
    pub fn __xadd_wrong_size();
}
extern "C" {
    pub fn __add_wrong_size();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __u128_halves {
    pub full: u128_,
    pub __bindgen_anon_1: __u128_halves__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __u128_halves__bindgen_ty_1 {
    pub low: u64_,
    pub high: u64_,
}
impl Default for __u128_halves {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type atomic_long_t = atomic64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct warn_args {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __warn(
        file: *const core::ffi::c_char,
        line: core::ffi::c_int,
        caller: *mut core::ffi::c_void,
        taint: core::ffi::c_uint,
        regs: *mut pt_regs,
        args: *mut warn_args,
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bug_entry {
    pub bug_addr_disp: core::ffi::c_int,
    pub file_disp: core::ffi::c_int,
    pub line: core::ffi::c_ushort,
    pub flags: core::ffi::c_ushort,
}
extern "C" {
    pub fn warn_slowpath_fmt(
        file: *const core::ffi::c_char,
        line: core::ffi::c_int,
        taint: core::ffi::c_uint,
        fmt: *const core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn __warn_printk(fmt: *const core::ffi::c_char, ...);
}
pub const bug_trap_type_BUG_TRAP_TYPE_NONE: bug_trap_type = 0;
pub const bug_trap_type_BUG_TRAP_TYPE_WARN: bug_trap_type = 1;
pub const bug_trap_type_BUG_TRAP_TYPE_BUG: bug_trap_type = 2;
pub type bug_trap_type = core::ffi::c_uint;
extern "C" {
    pub fn bug_get_file_line(
        bug: *mut bug_entry,
        file: *mut *const core::ffi::c_char,
        line: *mut core::ffi::c_uint,
    );
}
extern "C" {
    pub fn find_bug(bugaddr: core::ffi::c_ulong) -> *mut bug_entry;
}
extern "C" {
    pub fn report_bug(bug_addr: core::ffi::c_ulong, regs: *mut pt_regs) -> bug_trap_type;
}
extern "C" {
    pub fn is_valid_bugaddr(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_bug_clear_once();
}
pub const ___GFP_DMA_BIT: _bindgen_ty_7 = 0;
pub const ___GFP_HIGHMEM_BIT: _bindgen_ty_7 = 1;
pub const ___GFP_DMA32_BIT: _bindgen_ty_7 = 2;
pub const ___GFP_MOVABLE_BIT: _bindgen_ty_7 = 3;
pub const ___GFP_RECLAIMABLE_BIT: _bindgen_ty_7 = 4;
pub const ___GFP_HIGH_BIT: _bindgen_ty_7 = 5;
pub const ___GFP_IO_BIT: _bindgen_ty_7 = 6;
pub const ___GFP_FS_BIT: _bindgen_ty_7 = 7;
pub const ___GFP_ZERO_BIT: _bindgen_ty_7 = 8;
pub const ___GFP_UNUSED_BIT: _bindgen_ty_7 = 9;
pub const ___GFP_DIRECT_RECLAIM_BIT: _bindgen_ty_7 = 10;
pub const ___GFP_KSWAPD_RECLAIM_BIT: _bindgen_ty_7 = 11;
pub const ___GFP_WRITE_BIT: _bindgen_ty_7 = 12;
pub const ___GFP_NOWARN_BIT: _bindgen_ty_7 = 13;
pub const ___GFP_RETRY_MAYFAIL_BIT: _bindgen_ty_7 = 14;
pub const ___GFP_NOFAIL_BIT: _bindgen_ty_7 = 15;
pub const ___GFP_NORETRY_BIT: _bindgen_ty_7 = 16;
pub const ___GFP_MEMALLOC_BIT: _bindgen_ty_7 = 17;
pub const ___GFP_COMP_BIT: _bindgen_ty_7 = 18;
pub const ___GFP_NOMEMALLOC_BIT: _bindgen_ty_7 = 19;
pub const ___GFP_HARDWALL_BIT: _bindgen_ty_7 = 20;
pub const ___GFP_THISNODE_BIT: _bindgen_ty_7 = 21;
pub const ___GFP_ACCOUNT_BIT: _bindgen_ty_7 = 22;
pub const ___GFP_ZEROTAGS_BIT: _bindgen_ty_7 = 23;
pub const ___GFP_LAST_BIT: _bindgen_ty_7 = 24;
pub type _bindgen_ty_7 = core::ffi::c_uint;
extern "C" {
    pub fn numa_nearest_node(node: core::ffi::c_int, state: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn memory_add_physaddr_to_nid(start: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn phys_to_target_node(start: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn numa_fill_memblks(start: u64_, end: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub static mut nr_cpu_ids: core::ffi::c_uint;
}
extern "C" {
    pub static mut __cpu_possible_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_online_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_enabled_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_present_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_active_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_dying_mask: cpumask;
}
extern "C" {
    pub static mut __num_online_cpus: atomic_t;
}
extern "C" {
    pub static mut cpus_booted_once_mask: cpumask_t;
}
extern "C" {
    pub fn cpumask_local_spread(i: core::ffi::c_uint, node: core::ffi::c_int) -> core::ffi::c_uint;
}
extern "C" {
    pub fn cpumask_any_and_distribute(
        src1p: *const cpumask,
        src2p: *const cpumask,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn cpumask_any_distribute(srcp: *const cpumask) -> core::ffi::c_uint;
}
extern "C" {
    pub fn cpumask_next_wrap(
        n: core::ffi::c_int,
        mask: *const cpumask,
        start: core::ffi::c_int,
        wrap: bool_,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub static cpu_all_bits: [core::ffi::c_ulong; 1usize];
}
extern "C" {
    pub fn init_cpu_present(src: *const cpumask);
}
extern "C" {
    pub fn init_cpu_possible(src: *const cpumask);
}
extern "C" {
    pub fn init_cpu_online(src: *const cpumask);
}
extern "C" {
    pub fn set_cpu_online(cpu: core::ffi::c_uint, online: bool_);
}
extern "C" {
    pub static mut cpu_bit_bitmap: [[core::ffi::c_ulong; 1usize]; 65usize];
}
extern "C" {
    pub fn setup_cpu_local_masks();
}
extern "C" {
    pub static mut __invalid_size_argument_for_IOC: core::ffi::c_uint;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msr {
    pub __bindgen_anon_1: msr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union msr__bindgen_ty_1 {
    pub __bindgen_anon_1: msr__bindgen_ty_1__bindgen_ty_1,
    pub q: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct msr__bindgen_ty_1__bindgen_ty_1 {
    pub l: u32_,
    pub h: u32_,
}
impl Default for msr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for msr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag_module {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seq_buf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag {
    pub flags: core::ffi::c_uint,
    pub lineno: core::ffi::c_uint,
    pub modname: *const core::ffi::c_char,
    pub function: *const core::ffi::c_char,
    pub filename: *const core::ffi::c_char,
}
impl Default for codetag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union codetag_ref {
    pub ct: *mut codetag,
}
impl Default for codetag_ref {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag_type_desc {
    pub section: *const core::ffi::c_char,
    pub tag_size: usize,
    pub module_load: ::core::option::Option<
        unsafe extern "C" fn(cttype: *mut codetag_type, cmod: *mut codetag_module),
    >,
    pub module_unload: ::core::option::Option<
        unsafe extern "C" fn(cttype: *mut codetag_type, cmod: *mut codetag_module) -> bool_,
    >,
}
impl Default for codetag_type_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag_iterator {
    pub cttype: *mut codetag_type,
    pub cmod: *mut codetag_module,
    pub mod_id: core::ffi::c_ulong,
    pub ct: *mut codetag,
}
impl Default for codetag_iterator {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn codetag_lock_module_list(cttype: *mut codetag_type, lock: bool_);
}
extern "C" {
    pub fn codetag_trylock_module_list(cttype: *mut codetag_type) -> bool_;
}
extern "C" {
    pub fn codetag_get_ct_iter(cttype: *mut codetag_type) -> codetag_iterator;
}
extern "C" {
    pub fn codetag_next_ct(iter: *mut codetag_iterator) -> *mut codetag;
}
extern "C" {
    pub fn codetag_to_text(out: *mut seq_buf, ct: *mut codetag);
}
extern "C" {
    pub fn codetag_register_type(desc: *const codetag_type_desc) -> *mut codetag_type;
}
extern "C" {
    pub fn preempt_schedule();
}
extern "C" {
    pub fn preempt_schedule_thunk();
}
extern "C" {
    pub fn preempt_schedule_notrace();
}
extern "C" {
    pub fn preempt_schedule_notrace_thunk();
}
extern "C" {
    pub static mut __SCK__preempt_schedule: static_call_key;
}
extern "C" {
    pub fn __SCT__preempt_schedule();
}
extern "C" {
    pub static mut __SCK__preempt_schedule_notrace: static_call_key;
}
extern "C" {
    pub fn __SCT__preempt_schedule_notrace();
}
extern "C" {
    pub fn migrate_disable();
}
extern "C" {
    pub fn migrate_enable();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_preempt_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_preempt_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_preempt_notrace_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_preempt_notrace_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_migrate_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_migrate_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn preempt_model_none() -> bool_;
}
extern "C" {
    pub fn preempt_model_voluntary() -> bool_;
}
extern "C" {
    pub fn preempt_model_full() -> bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct llist_head {
    pub first: *mut llist_node,
}
impl Default for llist_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct llist_node {
    pub next: *mut llist_node,
}
impl Default for llist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn llist_add_batch(
        new_first: *mut llist_node,
        new_last: *mut llist_node,
        head: *mut llist_head,
    ) -> bool_;
}
extern "C" {
    pub fn llist_del_first(head: *mut llist_head) -> *mut llist_node;
}
extern "C" {
    pub fn llist_del_first_this(head: *mut llist_head, this: *mut llist_node) -> bool_;
}
extern "C" {
    pub fn llist_reverse_order(head: *mut llist_node) -> *mut llist_node;
}
pub const CSD_FLAG_LOCK: _bindgen_ty_8 = 1;
pub const IRQ_WORK_PENDING: _bindgen_ty_8 = 1;
pub const IRQ_WORK_BUSY: _bindgen_ty_8 = 2;
pub const IRQ_WORK_LAZY: _bindgen_ty_8 = 4;
pub const IRQ_WORK_HARD_IRQ: _bindgen_ty_8 = 8;
pub const IRQ_WORK_CLAIMED: _bindgen_ty_8 = 3;
pub const CSD_TYPE_ASYNC: _bindgen_ty_8 = 0;
pub const CSD_TYPE_SYNC: _bindgen_ty_8 = 16;
pub const CSD_TYPE_IRQ_WORK: _bindgen_ty_8 = 32;
pub const CSD_TYPE_TTWU: _bindgen_ty_8 = 48;
pub const CSD_FLAG_TYPE_MASK: _bindgen_ty_8 = 240;
pub type _bindgen_ty_8 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __call_single_node {
    pub llist: llist_node,
    pub __bindgen_anon_1: __call_single_node__bindgen_ty_1,
    pub src: u16_,
    pub dst: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __call_single_node__bindgen_ty_1 {
    pub u_flags: core::ffi::c_uint,
    pub a_flags: atomic_t,
}
impl Default for __call_single_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for __call_single_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type smp_call_func_t =
    ::core::option::Option<unsafe extern "C" fn(info: *mut core::ffi::c_void)>;
pub type smp_cond_func_t = ::core::option::Option<
    unsafe extern "C" fn(cpu: core::ffi::c_int, info: *mut core::ffi::c_void) -> bool_,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __call_single_data {
    pub node: __call_single_node,
    pub func: smp_call_func_t,
    pub info: *mut core::ffi::c_void,
}
impl Default for __call_single_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type call_single_data_t = __call_single_data;
extern "C" {
    pub fn __smp_call_single_queue(cpu: core::ffi::c_int, node: *mut llist_node);
}
extern "C" {
    pub static mut total_cpus: core::ffi::c_uint;
}
extern "C" {
    pub fn smp_call_function_single(
        cpuid: core::ffi::c_int,
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn on_each_cpu_cond_mask(
        cond_func: smp_cond_func_t,
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: bool_,
        mask: *const cpumask,
    );
}
extern "C" {
    pub fn smp_call_function_single_async(
        cpu: core::ffi::c_int,
        csd: *mut call_single_data_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn panic_smp_self_stop() -> !;
}
extern "C" {
    pub fn nmi_panic_self_stop(regs: *mut pt_regs) -> !;
}
extern "C" {
    pub fn crash_smp_send_stop();
}
extern "C" {
    pub fn smp_prepare_boot_cpu();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timespec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pollfd {
    _unused: [u8; 0],
}
pub const timespec_type_TT_NONE: timespec_type = 0;
pub const timespec_type_TT_NATIVE: timespec_type = 1;
pub const timespec_type_TT_COMPAT: timespec_type = 2;
pub type timespec_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block {
    pub arch_data: core::ffi::c_ulong,
    pub fn_:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut restart_block) -> core::ffi::c_long>,
    pub __bindgen_anon_1: restart_block__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union restart_block__bindgen_ty_1 {
    pub futex: restart_block__bindgen_ty_1__bindgen_ty_1,
    pub nanosleep: restart_block__bindgen_ty_1__bindgen_ty_2,
    pub poll: restart_block__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_1 {
    pub uaddr: *mut u32_,
    pub val: u32_,
    pub flags: u32_,
    pub bitset: u32_,
    pub time: u64_,
    pub uaddr2: *mut u32_,
}
impl Default for restart_block__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_2 {
    pub clockid: clockid_t,
    pub type_: timespec_type,
    pub __bindgen_anon_1: restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub expires: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub rmtp: *mut __kernel_timespec,
    pub compat_rmtp: *mut old_timespec32,
}
impl Default for restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for restart_block__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_3 {
    pub ufds: *mut pollfd,
    pub nfds: core::ffi::c_int,
    pub has_timeout: core::ffi::c_int,
    pub tv_sec: core::ffi::c_ulong,
    pub tv_nsec: core::ffi::c_ulong,
}
impl Default for restart_block__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for restart_block__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for restart_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn do_no_restart_syscall(parm: *mut restart_block) -> core::ffi::c_long;
}
pub const BAD_STACK: _bindgen_ty_9 = -1;
pub const NOT_STACK: _bindgen_ty_9 = 0;
pub const GOOD_FRAME: _bindgen_ty_9 = 1;
pub const GOOD_STACK: _bindgen_ty_9 = 2;
pub type _bindgen_ty_9 = core::ffi::c_int;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SECCOMP: syscall_work_bit = 0;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_TRACEPOINT: syscall_work_bit = 1;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_TRACE: syscall_work_bit = 2;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_EMU: syscall_work_bit = 3;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_AUDIT: syscall_work_bit = 4;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_USER_DISPATCH: syscall_work_bit = 5;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_EXIT_TRAP: syscall_work_bit = 6;
pub type syscall_work_bit = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct thread_info {
    pub flags: core::ffi::c_ulong,
    pub syscall_work: core::ffi::c_ulong,
    pub status: u32_,
    pub cpu: u32_,
}
extern "C" {
    pub fn arch_setup_new_exec();
}
extern "C" {
    pub fn __bad_copy_from();
}
extern "C" {
    pub fn __bad_copy_to();
}
extern "C" {
    pub fn __copy_overflow(size: core::ffi::c_int, count: core::ffi::c_ulong);
}
extern "C" {
    pub fn arch_task_cache_init();
}
extern "C" {
    pub fn arch_release_task_struct(tsk: *mut task_struct);
}
extern "C" {
    pub fn arch_dup_task_struct(dst: *mut task_struct, src: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub static mut cpu_sibling_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut cpu_core_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut cpu_die_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut cpu_llc_shared_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut cpu_l2c_shared_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut x86_cpu_to_apicid: core::ffi::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_apicid_early_ptr: *mut core::ffi::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_apicid_early_map: [core::ffi::c_uint; 0usize];
}
extern "C" {
    pub static mut x86_cpu_to_acpiid: core::ffi::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_acpiid_early_ptr: *mut core::ffi::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_acpiid_early_map: [core::ffi::c_uint; 0usize];
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct smp_ops {
    pub smp_prepare_boot_cpu: ::core::option::Option<unsafe extern "C" fn()>,
    pub smp_prepare_cpus: ::core::option::Option<unsafe extern "C" fn(max_cpus: core::ffi::c_uint)>,
    pub smp_cpus_done: ::core::option::Option<unsafe extern "C" fn(max_cpus: core::ffi::c_uint)>,
    pub stop_other_cpus: ::core::option::Option<unsafe extern "C" fn(wait: core::ffi::c_int)>,
    pub crash_stop_other_cpus: ::core::option::Option<unsafe extern "C" fn()>,
    pub smp_send_reschedule: ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int)>,
    pub cleanup_dead_cpu: ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_uint)>,
    pub poll_sync_state: ::core::option::Option<unsafe extern "C" fn()>,
    pub kick_ap_alive: ::core::option::Option<
        unsafe extern "C" fn(cpu: core::ffi::c_uint, tidle: *mut task_struct) -> core::ffi::c_int,
    >,
    pub cpu_disable: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub cpu_die: ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_uint)>,
    pub play_dead: ::core::option::Option<unsafe extern "C" fn()>,
    pub stop_this_cpu: ::core::option::Option<unsafe extern "C" fn()>,
    pub send_call_func_ipi: ::core::option::Option<unsafe extern "C" fn(mask: *const cpumask)>,
    pub send_call_func_single_ipi:
        ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int)>,
}
extern "C" {
    pub fn set_cpu_sibling_map(cpu: core::ffi::c_int);
}
extern "C" {
    pub static mut smp_ops: smp_ops;
}
extern "C" {
    pub fn cpu_disable_common();
}
extern "C" {
    pub fn native_smp_prepare_boot_cpu();
}
extern "C" {
    pub fn smp_prepare_cpus_common();
}
extern "C" {
    pub fn native_smp_prepare_cpus(max_cpus: core::ffi::c_uint);
}
extern "C" {
    pub fn native_smp_cpus_done(max_cpus: core::ffi::c_uint);
}
extern "C" {
    pub fn common_cpu_up(cpunum: core::ffi::c_uint, tidle: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn native_kick_ap(cpu: core::ffi::c_uint, tidle: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn native_cpu_disable() -> core::ffi::c_int;
}
extern "C" {
    pub fn hlt_play_dead() -> !;
}
extern "C" {
    pub fn native_play_dead();
}
extern "C" {
    pub fn play_dead_common();
}
extern "C" {
    pub fn wbinvd_on_cpu(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn wbinvd_on_all_cpus() -> core::ffi::c_int;
}
extern "C" {
    pub fn smp_kick_mwait_play_dead();
}
extern "C" {
    pub fn native_smp_send_reschedule(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn native_send_call_func_ipi(mask: *const cpumask);
}
extern "C" {
    pub fn native_send_call_func_single_ipi(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn smp_store_cpu_info(id: core::ffi::c_int);
}
extern "C" {
    pub fn smp_reboot_interrupt();
}
extern "C" {
    pub fn smp_reschedule_interrupt(regs: *mut pt_regs);
}
extern "C" {
    pub fn smp_call_function_interrupt(regs: *mut pt_regs);
}
extern "C" {
    pub fn smp_call_function_single_interrupt(r: *mut pt_regs);
}
extern "C" {
    pub static mut smpboot_control: core::ffi::c_uint;
}
extern "C" {
    pub static mut apic_mmio_base: core::ffi::c_ulong;
}
extern "C" {
    pub fn __cpu_up(cpunum: core::ffi::c_uint, tidle: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn smp_call_function(
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: core::ffi::c_int,
    );
}
extern "C" {
    pub fn smp_call_function_many(
        mask: *const cpumask,
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: bool_,
    );
}
extern "C" {
    pub fn smp_call_function_any(
        mask: *const cpumask,
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kick_all_cpus_sync();
}
extern "C" {
    pub fn wake_up_all_idle_cpus();
}
extern "C" {
    pub fn call_function_init();
}
extern "C" {
    pub fn generic_smp_call_function_single_interrupt();
}
extern "C" {
    pub static mut setup_max_cpus: core::ffi::c_uint;
}
extern "C" {
    pub fn setup_nr_cpu_ids();
}
extern "C" {
    pub fn smp_init();
}
extern "C" {
    pub static mut __boot_cpu_id: core::ffi::c_int;
}
extern "C" {
    pub fn arch_disable_smp_support();
}
extern "C" {
    pub fn arch_thaw_secondary_cpus_begin();
}
extern "C" {
    pub fn arch_thaw_secondary_cpus_end();
}
extern "C" {
    pub fn smp_setup_processor_id();
}
extern "C" {
    pub fn smp_call_on_cpu(
        cpu: core::ffi::c_uint,
        func: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        par: *mut core::ffi::c_void,
        phys: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn smpcfd_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn smpcfd_dead_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn smpcfd_dying_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct alloc_tag_counters {
    pub bytes: u64_,
    pub calls: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct alloc_tag {
    pub ct: codetag,
    pub counters: *mut alloc_tag_counters,
}
impl Default for alloc_tag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn dump_page(page: *const page, reason: *const core::ffi::c_char);
}
extern "C" {
    pub fn dump_vma(vma: *const vm_area_struct);
}
extern "C" {
    pub fn dump_mm(mm: *const mm_struct);
}
extern "C" {
    pub fn vma_iter_dump_tree(vmi: *const vma_iterator);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct clone_args {
    pub flags: __u64,
    pub pidfd: __u64,
    pub child_tid: __u64,
    pub parent_tid: __u64,
    pub exit_signal: __u64,
    pub stack: __u64,
    pub stack_size: __u64,
    pub tls: __u64,
    pub set_tid: __u64,
    pub set_tid_size: __u64,
    pub cgroup: __u64,
}
pub const pid_type_PIDTYPE_PID: pid_type = 0;
pub const pid_type_PIDTYPE_TGID: pid_type = 1;
pub const pid_type_PIDTYPE_PGID: pid_type = 2;
pub const pid_type_PIDTYPE_SID: pid_type = 3;
pub const pid_type_PIDTYPE_MAX: pid_type = 4;
pub type pid_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pid_namespace {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut init_pid_ns: pid_namespace;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sem_undo_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sysv_sem {
    pub undo_list: *mut sem_undo_list,
}
impl Default for sysv_sem {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sysv_shm {
    pub shm_clist: list_head,
}
impl Default for sysv_shm {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn do_shmat(
        shmid: core::ffi::c_int,
        shmaddr: *mut core::ffi::c_char,
        shmflg: core::ffi::c_int,
        addr: *mut core::ffi::c_ulong,
        shmlba: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn exit_shm(task: *mut task_struct);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kmsan_context_state {
    pub param_tls: [core::ffi::c_char; 800usize],
    pub retval_tls: [core::ffi::c_char; 800usize],
    pub va_arg_tls: [core::ffi::c_char; 800usize],
    pub va_arg_origin_tls: [core::ffi::c_char; 800usize],
    pub va_arg_overflow_size_tls: u64_,
    pub param_origin_tls: [core::ffi::c_char; 800usize],
    pub retval_origin_tls: u32_,
}
impl Default for kmsan_context_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kmsan_ctx {
    pub cstate: kmsan_context_state,
    pub kmsan_in_runtime: core::ffi::c_int,
    pub depth: core::ffi::c_uint,
}
impl Default for kmsan_ctx {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct optimistic_spin_queue {
    pub tail: atomic_t,
}
extern "C" {
    pub fn osq_lock(lock: *mut optimistic_spin_queue) -> bool_;
}
extern "C" {
    pub fn osq_unlock(lock: *mut optimistic_spin_queue);
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct spinlock {
    pub _bindgen_opaque_blob: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spinlock__bindgen_ty_1 {
    pub rlock: raw_spinlock,
}
impl Default for spinlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type spinlock_t = spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rwlock_t {
    pub raw_lock: arch_rwlock_t,
}
impl Default for rwlock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mutex {
    pub owner: atomic_long_t,
    pub wait_lock: raw_spinlock_t,
    pub osq: optimistic_spin_queue,
    pub wait_list: list_head,
}
impl Default for mutex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct plist_head {
    pub node_list: list_head,
}
impl Default for plist_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct plist_node {
    pub prio: core::ffi::c_int,
    pub prio_list: list_head,
    pub node_list: list_head,
}
impl Default for plist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_node {
    pub __rb_parent_color: core::ffi::c_ulong,
    pub rb_right: *mut rb_node,
    pub rb_left: *mut rb_node,
}
impl Default for rb_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_root {
    pub rb_node: *mut rb_node,
}
impl Default for rb_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_root_cached {
    pub rb_root: rb_root,
    pub rb_leftmost: *mut rb_node,
}
impl Default for rb_root_cached {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timerqueue_node {
    pub node: rb_node,
    pub expires: ktime_t,
}
impl Default for timerqueue_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timerqueue_head {
    pub rb_root: rb_root_cached,
}
impl Default for timerqueue_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const hrtimer_restart_HRTIMER_NORESTART: hrtimer_restart = 0;
pub const hrtimer_restart_HRTIMER_RESTART: hrtimer_restart = 1;
pub type hrtimer_restart = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hrtimer {
    pub node: timerqueue_node,
    pub _softexpires: ktime_t,
    pub function:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut hrtimer) -> hrtimer_restart>,
    pub base: *mut hrtimer_clock_base,
    pub state: u8_,
    pub is_rel: u8_,
    pub is_soft: u8_,
    pub is_hard: u8_,
}
impl Default for hrtimer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timer_list {
    pub entry: hlist_node,
    pub expires: core::ffi::c_ulong,
    pub function: ::core::option::Option<unsafe extern "C" fn(arg1: *mut timer_list)>,
    pub flags: u32_,
}
impl Default for timer_list {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seccomp_filter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seccomp {
    pub mode: core::ffi::c_int,
    pub filter_count: atomic_t,
    pub filter: *mut seccomp_filter,
}
impl Default for seccomp {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nodemask_t {
    pub bits: [core::ffi::c_ulong; 1usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct refcount_struct {
    pub refs: atomic_t,
}
pub type refcount_t = refcount_struct;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rusage {
    pub ru_utime: __kernel_old_timeval,
    pub ru_stime: __kernel_old_timeval,
    pub ru_maxrss: __kernel_long_t,
    pub ru_ixrss: __kernel_long_t,
    pub ru_idrss: __kernel_long_t,
    pub ru_isrss: __kernel_long_t,
    pub ru_minflt: __kernel_long_t,
    pub ru_majflt: __kernel_long_t,
    pub ru_nswap: __kernel_long_t,
    pub ru_inblock: __kernel_long_t,
    pub ru_oublock: __kernel_long_t,
    pub ru_msgsnd: __kernel_long_t,
    pub ru_msgrcv: __kernel_long_t,
    pub ru_nsignals: __kernel_long_t,
    pub ru_nvcsw: __kernel_long_t,
    pub ru_nivcsw: __kernel_long_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: __kernel_ulong_t,
    pub rlim_max: __kernel_ulong_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rlimit64 {
    pub rlim_cur: __u64,
    pub rlim_max: __u64,
}
extern "C" {
    pub fn getrusage(p: *mut task_struct, who: core::ffi::c_int, ru: *mut rusage);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct task_cputime {
    pub stime: u64_,
    pub utime: u64_,
    pub sum_exec_runtime: core::ffi::c_ulonglong,
}
pub type old_sigset_t = core::ffi::c_ulong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sigset_t {
    pub sig: [core::ffi::c_ulong; 1usize],
}
pub type __signalfn_t = ::core::option::Option<unsafe extern "C" fn(arg1: core::ffi::c_int)>;
pub type __sighandler_t = __signalfn_t;
pub type __restorefn_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type __sigrestore_t = __restorefn_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaltstack {
    pub ss_sp: *mut core::ffi::c_void,
    pub ss_flags: core::ffi::c_int,
    pub ss_size: __kernel_size_t,
}
impl Default for sigaltstack {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type stack_t = sigaltstack;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: core::ffi::c_int,
    pub sival_ptr: *mut core::ffi::c_void,
}
impl Default for sigval {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields {
    pub _kill: __sifields__bindgen_ty_1,
    pub _timer: __sifields__bindgen_ty_2,
    pub _rt: __sifields__bindgen_ty_3,
    pub _sigchld: __sifields__bindgen_ty_4,
    pub _sigfault: __sifields__bindgen_ty_5,
    pub _sigpoll: __sifields__bindgen_ty_6,
    pub _sigsys: __sifields__bindgen_ty_7,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_1 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_2 {
    pub _tid: __kernel_timer_t,
    pub _overrun: core::ffi::c_int,
    pub _sigval: sigval_t,
    pub _sys_private: core::ffi::c_int,
}
impl Default for __sifields__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_3 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _sigval: sigval_t,
}
impl Default for __sifields__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_4 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _status: core::ffi::c_int,
    pub _utime: __kernel_clock_t,
    pub _stime: __kernel_clock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_5 {
    pub _addr: *mut core::ffi::c_void,
    pub __bindgen_anon_1: __sifields__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields__bindgen_ty_5__bindgen_ty_1 {
    pub _trapno: core::ffi::c_int,
    pub _addr_lsb: core::ffi::c_short,
    pub _addr_bnd: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _addr_pkey: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub _perf: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _dummy_bnd: [core::ffi::c_char; 8usize],
    pub _lower: *mut core::ffi::c_void,
    pub _upper: *mut core::ffi::c_void,
}
impl Default for __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub _dummy_pkey: [core::ffi::c_char; 8usize],
    pub _pkey: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub _data: core::ffi::c_ulong,
    pub _type: __u32,
    pub _flags: __u32,
}
impl Default for __sifields__bindgen_ty_5__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for __sifields__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_6 {
    pub _band: core::ffi::c_long,
    pub _fd: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_7 {
    pub _call_addr: *mut core::ffi::c_void,
    pub _syscall: core::ffi::c_int,
    pub _arch: core::ffi::c_uint,
}
impl Default for __sifields__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for __sifields {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo {
    pub __bindgen_anon_1: siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo__bindgen_ty_1 {
    pub __bindgen_anon_1: siginfo__bindgen_ty_1__bindgen_ty_1,
    pub _si_pad: [core::ffi::c_int; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub si_signo: core::ffi::c_int,
    pub si_errno: core::ffi::c_int,
    pub si_code: core::ffi::c_int,
    pub _sifields: __sifields,
}
impl Default for siginfo__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for siginfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for siginfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type siginfo_t = siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: core::ffi::c_int,
    pub sigev_notify: core::ffi::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [core::ffi::c_int; 12usize],
    pub _tid: core::ffi::c_int,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::core::option::Option<unsafe extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut core::ffi::c_void,
}
impl Default for sigevent__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sigevent__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sigevent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sigevent_t = sigevent;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_siginfo {
    pub __bindgen_anon_1: kernel_siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_siginfo__bindgen_ty_1 {
    pub si_signo: core::ffi::c_int,
    pub si_errno: core::ffi::c_int,
    pub si_code: core::ffi::c_int,
    pub _sifields: __sifields,
}
impl Default for kernel_siginfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kernel_siginfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type kernel_siginfo_t = kernel_siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigqueue {
    pub list: list_head,
    pub flags: core::ffi::c_int,
    pub info: kernel_siginfo_t,
    pub ucounts: *mut ucounts,
}
impl Default for sigqueue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigpending {
    pub list: list_head,
    pub signal: sigset_t,
}
impl Default for sigpending {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sigaction {
    pub sa_handler: __sighandler_t,
    pub sa_flags: core::ffi::c_ulong,
    pub sa_restorer: __sigrestore_t,
    pub sa_mask: sigset_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct k_sigaction {
    pub sa: sigaction,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ksignal {
    pub ka: k_sigaction,
    pub info: kernel_siginfo_t,
    pub sig: core::ffi::c_int,
}
impl Default for ksignal {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct syscall_user_dispatch {
    pub selector: *mut core::ffi::c_char,
    pub offset: core::ffi::c_ulong,
    pub len: core::ffi::c_ulong,
    pub on_dispatch: bool_,
}
impl Default for syscall_user_dispatch {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct arch_tlbflush_unmap_batch {
    pub cpumask: cpumask,
}
pub const MM_FILEPAGES: _bindgen_ty_10 = 0;
pub const MM_ANONPAGES: _bindgen_ty_10 = 1;
pub const MM_SWAPENTS: _bindgen_ty_10 = 2;
pub const MM_SHMEMPAGES: _bindgen_ty_10 = 3;
pub const NR_MM_COUNTERS: _bindgen_ty_10 = 4;
pub type _bindgen_ty_10 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page_frag {
    pub page: *mut page,
    pub offset: __u32,
    pub size: __u32,
}
impl Default for page_frag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tlbflush_unmap_batch {
    pub arch: arch_tlbflush_unmap_batch,
    pub flush_required: bool_,
    pub writable: bool_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct netdev_xmit {
    pub recursion: u16_,
    pub more: u8_,
    pub skip_txqueue: u8_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct task_io_accounting {
    pub rchar: u64_,
    pub wchar: u64_,
    pub syscr: u64_,
    pub syscw: u64_,
    pub read_bytes: u64_,
    pub write_bytes: u64_,
    pub cancelled_write_bytes: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct posix_cputimer_base {
    pub nextevt: u64_,
    pub tqhead: timerqueue_head,
}
impl Default for posix_cputimer_base {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct posix_cputimers {
    pub bases: [posix_cputimer_base; 3usize],
    pub timers_active: core::ffi::c_uint,
    pub expiry_active: core::ffi::c_uint,
}
impl Default for posix_cputimers {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct posix_cputimers_work {
    pub work: callback_head,
    pub mutex: mutex,
    pub scheduled: core::ffi::c_uint,
}
impl Default for posix_cputimers_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const rseq_cpu_id_state_RSEQ_CPU_ID_UNINITIALIZED: rseq_cpu_id_state = -1;
pub const rseq_cpu_id_state_RSEQ_CPU_ID_REGISTRATION_FAILED: rseq_cpu_id_state = -2;
pub type rseq_cpu_id_state = core::ffi::c_int;
pub const rseq_flags_RSEQ_FLAG_UNREGISTER: rseq_flags = 1;
pub type rseq_flags = core::ffi::c_uint;
pub const rseq_cs_flags_bit_RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT: rseq_cs_flags_bit = 0;
pub const rseq_cs_flags_bit_RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT: rseq_cs_flags_bit = 1;
pub const rseq_cs_flags_bit_RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT: rseq_cs_flags_bit = 2;
pub type rseq_cs_flags_bit = core::ffi::c_uint;
pub const rseq_cs_flags_RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT: rseq_cs_flags = 1;
pub const rseq_cs_flags_RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL: rseq_cs_flags = 2;
pub const rseq_cs_flags_RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE: rseq_cs_flags = 4;
pub type rseq_cs_flags = core::ffi::c_uint;
#[repr(C)]
#[repr(align(32))]
#[derive(Default, Copy, Clone)]
pub struct rseq_cs {
    pub version: __u32,
    pub flags: __u32,
    pub start_ip: __u64,
    pub post_commit_offset: __u64,
    pub abort_ip: __u64,
}
#[repr(C)]
#[repr(align(32))]
#[derive(Default)]
pub struct rseq {
    pub cpu_id_start: __u32,
    pub cpu_id: __u32,
    pub rseq_cs: __u64,
    pub flags: __u32,
    pub node_id: __u32,
    pub mm_cid: __u32,
    pub end: __IncompleteArrayField<core::ffi::c_char>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount {
    pub sequence: core::ffi::c_uint,
}
pub type seqcount_t = seqcount;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_raw_spinlock {
    pub seqcount: seqcount_t,
}
pub type seqcount_raw_spinlock_t = seqcount_raw_spinlock;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_spinlock {
    pub seqcount: seqcount_t,
}
pub type seqcount_spinlock_t = seqcount_spinlock;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_rwlock {
    pub seqcount: seqcount_t,
}
pub type seqcount_rwlock_t = seqcount_rwlock;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_mutex {
    pub seqcount: seqcount_t,
}
pub type seqcount_mutex_t = seqcount_mutex;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqlock_t {
    pub seqcount: seqcount_spinlock_t,
    pub lock: spinlock_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kuid_t {
    pub val: uid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kgid_t {
    pub val: gid_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct audit_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bio_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blk_plug {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_local_storage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_net_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct capture_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cfs_rq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fs_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct futex_pi_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_uring_task {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mempolicy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nameidata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct perf_event_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pipe_inode_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct reclaim_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct robust_list_head {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct root_domain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct task_delay_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct task_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_event_mm {
    _unused: [u8; 0],
}
pub const TASK_COMM_LEN: _bindgen_ty_11 = 16;
pub type _bindgen_ty_11 = core::ffi::c_uint;
extern "C" {
    pub fn sched_tick();
}
extern "C" {
    pub fn schedule_timeout(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_timeout_interruptible(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_timeout_killable(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_timeout_uninterruptible(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_timeout_idle(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule();
}
extern "C" {
    pub fn schedule_preempt_disabled();
}
extern "C" {
    pub fn preempt_schedule_irq();
}
extern "C" {
    pub fn io_schedule_prepare() -> core::ffi::c_int;
}
extern "C" {
    pub fn io_schedule_finish(token: core::ffi::c_int);
}
extern "C" {
    pub fn io_schedule_timeout(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn io_schedule();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct prev_cputime {
    pub utime: u64_,
    pub stime: u64_,
    pub lock: raw_spinlock_t,
}
impl Default for prev_cputime {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const vtime_state_VTIME_INACTIVE: vtime_state = 0;
pub const vtime_state_VTIME_IDLE: vtime_state = 1;
pub const vtime_state_VTIME_SYS: vtime_state = 2;
pub const vtime_state_VTIME_USER: vtime_state = 3;
pub const vtime_state_VTIME_GUEST: vtime_state = 4;
pub type vtime_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vtime {
    pub seqcount: seqcount_t,
    pub starttime: core::ffi::c_ulonglong,
    pub state: vtime_state,
    pub cpu: core::ffi::c_uint,
    pub utime: u64_,
    pub stime: u64_,
    pub gtime: u64_,
}
impl Default for vtime {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const uclamp_id_UCLAMP_MIN: uclamp_id = 0;
pub const uclamp_id_UCLAMP_MAX: uclamp_id = 1;
pub const uclamp_id_UCLAMP_CNT: uclamp_id = 2;
pub type uclamp_id = core::ffi::c_uint;
extern "C" {
    pub static mut def_root_domain: root_domain;
}
extern "C" {
    pub static mut sched_domains_mutex: mutex;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sched_info {
    pub pcount: core::ffi::c_ulong,
    pub run_delay: core::ffi::c_ulonglong,
    pub last_arrival: core::ffi::c_ulonglong,
    pub last_queued: core::ffi::c_ulonglong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct load_weight {
    pub weight: core::ffi::c_ulong,
    pub inv_weight: u32_,
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct sched_avg {
    pub last_update_time: u64_,
    pub load_sum: u64_,
    pub runnable_sum: u64_,
    pub util_sum: u32_,
    pub period_contrib: u32_,
    pub load_avg: core::ffi::c_ulong,
    pub runnable_avg: core::ffi::c_ulong,
    pub util_avg: core::ffi::c_ulong,
    pub util_est: core::ffi::c_uint,
}
impl Default for sched_avg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct sched_statistics {
    pub wait_start: u64_,
    pub wait_max: u64_,
    pub wait_count: u64_,
    pub wait_sum: u64_,
    pub iowait_count: u64_,
    pub iowait_sum: u64_,
    pub sleep_start: u64_,
    pub sleep_max: u64_,
    pub sum_sleep_runtime: s64,
    pub block_start: u64_,
    pub block_max: u64_,
    pub sum_block_runtime: s64,
    pub exec_max: s64,
    pub slice_max: u64_,
    pub nr_migrations_cold: u64_,
    pub nr_failed_migrations_affine: u64_,
    pub nr_failed_migrations_running: u64_,
    pub nr_failed_migrations_hot: u64_,
    pub nr_forced_migrations: u64_,
    pub nr_wakeups: u64_,
    pub nr_wakeups_sync: u64_,
    pub nr_wakeups_migrate: u64_,
    pub nr_wakeups_local: u64_,
    pub nr_wakeups_remote: u64_,
    pub nr_wakeups_affine: u64_,
    pub nr_wakeups_affine_attempts: u64_,
    pub nr_wakeups_passive: u64_,
    pub nr_wakeups_idle: u64_,
}
impl Default for sched_statistics {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct sched_entity {
    pub load: load_weight,
    pub run_node: rb_node,
    pub deadline: u64_,
    pub min_vruntime: u64_,
    pub group_node: list_head,
    pub on_rq: core::ffi::c_uint,
    pub exec_start: u64_,
    pub sum_exec_runtime: u64_,
    pub prev_sum_exec_runtime: u64_,
    pub vruntime: u64_,
    pub vlag: s64,
    pub slice: u64_,
    pub nr_migrations: u64_,
    pub depth: core::ffi::c_int,
    pub parent: *mut sched_entity,
    pub cfs_rq: *mut cfs_rq,
    pub my_q: *mut cfs_rq,
    pub runnable_weight: core::ffi::c_ulong,
    pub __bindgen_padding_0: [u64; 2usize],
    pub avg: sched_avg,
}
impl Default for sched_entity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_rt_entity {
    pub run_list: list_head,
    pub timeout: core::ffi::c_ulong,
    pub watchdog_stamp: core::ffi::c_ulong,
    pub time_slice: core::ffi::c_uint,
    pub on_rq: core::ffi::c_ushort,
    pub on_list: core::ffi::c_ushort,
    pub back: *mut sched_rt_entity,
}
impl Default for sched_rt_entity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dl_server_has_tasks_f =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut sched_dl_entity) -> bool_>;
pub type dl_server_pick_f =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut sched_dl_entity) -> *mut task_struct>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_dl_entity {
    pub rb_node: rb_node,
    pub dl_runtime: u64_,
    pub dl_deadline: u64_,
    pub dl_period: u64_,
    pub dl_bw: u64_,
    pub dl_density: u64_,
    pub runtime: s64,
    pub deadline: u64_,
    pub flags: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub dl_timer: hrtimer,
    pub inactive_timer: hrtimer,
    pub rq: *mut rq,
    pub server_has_tasks: dl_server_has_tasks_f,
    pub server_pick: dl_server_pick_f,
    pub pi_se: *mut sched_dl_entity,
}
impl Default for sched_dl_entity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sched_dl_entity {
    #[inline]
    pub fn dl_throttled(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_throttled(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_yielded(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_yielded(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_non_contending(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_non_contending(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_overrun(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_overrun(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_server(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_server(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dl_throttled: core::ffi::c_uint,
        dl_yielded: core::ffi::c_uint,
        dl_non_contending: core::ffi::c_uint,
        dl_overrun: core::ffi::c_uint,
        dl_server: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dl_throttled: u32 = unsafe { ::core::mem::transmute(dl_throttled) };
            dl_throttled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dl_yielded: u32 = unsafe { ::core::mem::transmute(dl_yielded) };
            dl_yielded as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let dl_non_contending: u32 = unsafe { ::core::mem::transmute(dl_non_contending) };
            dl_non_contending as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dl_overrun: u32 = unsafe { ::core::mem::transmute(dl_overrun) };
            dl_overrun as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dl_server: u32 = unsafe { ::core::mem::transmute(dl_server) };
            dl_server as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rcu_special {
    pub b: rcu_special__bindgen_ty_1,
    pub s: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rcu_special__bindgen_ty_1 {
    pub blocked: u8_,
    pub need_qs: u8_,
    pub exp_hint: u8_,
    pub need_mb: u8_,
}
impl Default for rcu_special {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const perf_event_task_context_perf_invalid_context: perf_event_task_context = -1;
pub const perf_event_task_context_perf_hw_context: perf_event_task_context = 0;
pub const perf_event_task_context_perf_sw_context: perf_event_task_context = 1;
pub const perf_event_task_context_perf_nr_task_contexts: perf_event_task_context = 2;
pub type perf_event_task_context = core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wake_q_node {
    pub next: *mut wake_q_node,
}
impl Default for wake_q_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kmap_ctrl {}
#[repr(C)]
#[repr(align(64))]
pub struct task_struct {
    pub thread_info: thread_info,
    pub __state: core::ffi::c_uint,
    pub saved_state: core::ffi::c_uint,
    pub stack: *mut core::ffi::c_void,
    pub usage: refcount_t,
    pub flags: core::ffi::c_uint,
    pub ptrace: core::ffi::c_uint,
    pub on_cpu: core::ffi::c_int,
    pub wake_entry: __call_single_node,
    pub wakee_flips: core::ffi::c_uint,
    pub wakee_flip_decay_ts: core::ffi::c_ulong,
    pub last_wakee: *mut task_struct,
    pub recent_used_cpu: core::ffi::c_int,
    pub wake_cpu: core::ffi::c_int,
    pub on_rq: core::ffi::c_int,
    pub prio: core::ffi::c_int,
    pub static_prio: core::ffi::c_int,
    pub normal_prio: core::ffi::c_int,
    pub rt_priority: core::ffi::c_uint,
    pub __bindgen_padding_0: [u64; 0usize],
    pub se: sched_entity,
    pub rt: sched_rt_entity,
    pub dl: sched_dl_entity,
    pub dl_server: *mut sched_dl_entity,
    pub sched_class: *mut sched_class,
    pub sched_task_group: *mut task_group,
    pub stats: sched_statistics,
    pub btrace_seq: core::ffi::c_uint,
    pub policy: core::ffi::c_uint,
    pub max_allowed_capacity: core::ffi::c_ulong,
    pub nr_cpus_allowed: core::ffi::c_int,
    pub cpus_ptr: *const cpumask_t,
    pub user_cpus_ptr: *mut cpumask_t,
    pub cpus_mask: cpumask_t,
    pub migration_pending: *mut core::ffi::c_void,
    pub migration_disabled: core::ffi::c_ushort,
    pub migration_flags: core::ffi::c_ushort,
    pub rcu_read_lock_nesting: core::ffi::c_int,
    pub rcu_read_unlock_special: rcu_special,
    pub rcu_node_entry: list_head,
    pub rcu_blocked_node: *mut rcu_node,
    pub rcu_tasks_nvcsw: core::ffi::c_ulong,
    pub rcu_tasks_holdout: u8_,
    pub rcu_tasks_idx: u8_,
    pub rcu_tasks_idle_cpu: core::ffi::c_int,
    pub rcu_tasks_holdout_list: list_head,
    pub rcu_tasks_exit_cpu: core::ffi::c_int,
    pub rcu_tasks_exit_list: list_head,
    pub sched_info: sched_info,
    pub tasks: list_head,
    pub pushable_tasks: plist_node,
    pub pushable_dl_tasks: rb_node,
    pub mm: *mut mm_struct,
    pub active_mm: *mut mm_struct,
    pub faults_disabled_mapping: *mut address_space,
    pub exit_state: core::ffi::c_int,
    pub exit_code: core::ffi::c_int,
    pub exit_signal: core::ffi::c_int,
    pub pdeath_signal: core::ffi::c_int,
    pub jobctl: core::ffi::c_ulong,
    pub personality: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize]>,
    pub atomic_flags: core::ffi::c_ulong,
    pub restart_block: restart_block,
    pub pid: pid_t,
    pub tgid: pid_t,
    pub stack_canary: core::ffi::c_ulong,
    pub real_parent: *mut task_struct,
    pub parent: *mut task_struct,
    pub children: list_head,
    pub sibling: list_head,
    pub group_leader: *mut task_struct,
    pub ptraced: list_head,
    pub ptrace_entry: list_head,
    pub thread_pid: *mut pid,
    pub pid_links: [hlist_node; 4usize],
    pub thread_node: list_head,
    pub vfork_done: *mut completion,
    pub set_child_tid: *mut core::ffi::c_int,
    pub clear_child_tid: *mut core::ffi::c_int,
    pub worker_private: *mut core::ffi::c_void,
    pub utime: u64_,
    pub stime: u64_,
    pub gtime: u64_,
    pub prev_cputime: prev_cputime,
    pub nvcsw: core::ffi::c_ulong,
    pub nivcsw: core::ffi::c_ulong,
    pub start_time: u64_,
    pub start_boottime: u64_,
    pub min_flt: core::ffi::c_ulong,
    pub maj_flt: core::ffi::c_ulong,
    pub posix_cputimers: posix_cputimers,
    pub posix_cputimers_work: posix_cputimers_work,
    pub ptracer_cred: *const cred,
    pub real_cred: *const cred,
    pub cred: *const cred,
    pub cached_requested_key: *mut key,
    pub comm: [core::ffi::c_char; 16usize],
    pub nameidata: *mut nameidata,
    pub sysvsem: sysv_sem,
    pub sysvshm: sysv_shm,
    pub fs: *mut fs_struct,
    pub files: *mut files_struct,
    pub io_uring: *mut io_uring_task,
    pub nsproxy: *mut nsproxy,
    pub signal: *mut signal_struct,
    pub sighand: *mut sighand_struct,
    pub blocked: sigset_t,
    pub real_blocked: sigset_t,
    pub saved_sigmask: sigset_t,
    pub pending: sigpending,
    pub sas_ss_sp: core::ffi::c_ulong,
    pub sas_ss_size: usize,
    pub sas_ss_flags: core::ffi::c_uint,
    pub task_works: *mut callback_head,
    pub audit_context: *mut audit_context,
    pub loginuid: kuid_t,
    pub sessionid: core::ffi::c_uint,
    pub seccomp: seccomp,
    pub syscall_dispatch: syscall_user_dispatch,
    pub parent_exec_id: u64_,
    pub self_exec_id: u64_,
    pub alloc_lock: spinlock_t,
    pub pi_lock: raw_spinlock_t,
    pub wake_q: wake_q_node,
    pub pi_waiters: rb_root_cached,
    pub pi_top_task: *mut task_struct,
    pub pi_blocked_on: *mut rt_mutex_waiter,
    pub journal_info: *mut core::ffi::c_void,
    pub bio_list: *mut bio_list,
    pub plug: *mut blk_plug,
    pub reclaim_state: *mut reclaim_state,
    pub io_context: *mut io_context,
    pub capture_control: *mut capture_control,
    pub ptrace_message: core::ffi::c_ulong,
    pub last_siginfo: *mut kernel_siginfo_t,
    pub ioac: task_io_accounting,
    pub acct_rss_mem1: u64_,
    pub acct_vm_mem1: u64_,
    pub acct_timexpd: u64_,
    pub mems_allowed: nodemask_t,
    pub mems_allowed_seq: seqcount_spinlock_t,
    pub cpuset_mem_spread_rotor: core::ffi::c_int,
    pub cpuset_slab_spread_rotor: core::ffi::c_int,
    pub cgroups: *mut css_set,
    pub cg_list: list_head,
    pub robust_list: *mut robust_list_head,
    pub compat_robust_list: *mut compat_robust_list_head,
    pub pi_state_list: list_head,
    pub pi_state_cache: *mut futex_pi_state,
    pub futex_exit_mutex: mutex,
    pub futex_state: core::ffi::c_uint,
    pub perf_recursion: [u8_; 4usize],
    pub perf_event_ctxp: *mut perf_event_context,
    pub perf_event_mutex: mutex,
    pub perf_event_list: list_head,
    pub mempolicy: *mut mempolicy,
    pub il_prev: core::ffi::c_short,
    pub il_weight: u8_,
    pub pref_node_fork: core::ffi::c_short,
    pub rseq: *mut rseq,
    pub rseq_len: u32_,
    pub rseq_sig: u32_,
    pub rseq_event_mask: core::ffi::c_ulong,
    pub mm_cid: core::ffi::c_int,
    pub last_mm_cid: core::ffi::c_int,
    pub migrate_from_cpu: core::ffi::c_int,
    pub mm_cid_active: core::ffi::c_int,
    pub cid_work: callback_head,
    pub tlb_ubc: tlbflush_unmap_batch,
    pub splice_pipe: *mut pipe_inode_info,
    pub task_frag: page_frag,
    pub delays: *mut task_delay_info,
    pub nr_dirtied: core::ffi::c_int,
    pub nr_dirtied_pause: core::ffi::c_int,
    pub dirty_paused_when: core::ffi::c_ulong,
    pub timer_slack_ns: u64_,
    pub default_timer_slack_ns: u64_,
    pub trace_recursion: core::ffi::c_ulong,
    pub throttle_disk: *mut gendisk,
    pub utask: *mut uprobe_task,
    pub kmap_ctrl: kmap_ctrl,
    pub rcu: callback_head,
    pub rcu_users: refcount_t,
    pub pagefault_disabled: core::ffi::c_int,
    pub oom_reaper_list: *mut task_struct,
    pub oom_reaper_timer: timer_list,
    pub stack_vm_area: *mut vm_struct,
    pub stack_refcount: refcount_t,
    pub security: *mut core::ffi::c_void,
    pub bpf_net_context: *mut bpf_net_context,
    pub mce_vaddr: *mut core::ffi::c_void,
    pub mce_kflags: __u64,
    pub mce_addr: u64_,
    pub _bitfield_align_2: [u64; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub mce_kill_me: callback_head,
    pub mce_count: core::ffi::c_int,
    pub kretprobe_instances: llist_head,
    pub rethooks: llist_head,
    pub l1d_flush_kill: callback_head,
    pub __bindgen_padding_1: [u64; 5usize],
    pub thread: thread_struct,
}
impl Default for task_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl task_struct {
    #[inline]
    pub fn sched_reset_on_fork(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_reset_on_fork(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_contributes_to_load(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_contributes_to_load(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_migrated(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_migrated(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_remote_wakeup(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_remote_wakeup(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_rt_mutex(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_rt_mutex(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_execve(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_execve(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_iowait(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_iowait(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn restore_sigmask(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restore_sigmask(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_cgroup_migration(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_cgroup_migration(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frozen(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(38usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frozen(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_memdelay(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_memdelay(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_eventfd(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(40usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_eventfd(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pasid_activated(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pasid_activated(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reported_split_lock(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(42usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reported_split_lock(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_thrashing(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(43usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_thrashing(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(43usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sched_reset_on_fork: core::ffi::c_uint,
        sched_contributes_to_load: core::ffi::c_uint,
        sched_migrated: core::ffi::c_uint,
        sched_remote_wakeup: core::ffi::c_uint,
        sched_rt_mutex: core::ffi::c_uint,
        in_execve: core::ffi::c_uint,
        in_iowait: core::ffi::c_uint,
        restore_sigmask: core::ffi::c_uint,
        no_cgroup_migration: core::ffi::c_uint,
        frozen: core::ffi::c_uint,
        use_memdelay: core::ffi::c_uint,
        in_eventfd: core::ffi::c_uint,
        pasid_activated: core::ffi::c_uint,
        reported_split_lock: core::ffi::c_uint,
        in_thrashing: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sched_reset_on_fork: u32 = unsafe { ::core::mem::transmute(sched_reset_on_fork) };
            sched_reset_on_fork as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sched_contributes_to_load: u32 =
                unsafe { ::core::mem::transmute(sched_contributes_to_load) };
            sched_contributes_to_load as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sched_migrated: u32 = unsafe { ::core::mem::transmute(sched_migrated) };
            sched_migrated as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let sched_remote_wakeup: u32 = unsafe { ::core::mem::transmute(sched_remote_wakeup) };
            sched_remote_wakeup as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let sched_rt_mutex: u32 = unsafe { ::core::mem::transmute(sched_rt_mutex) };
            sched_rt_mutex as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let in_execve: u32 = unsafe { ::core::mem::transmute(in_execve) };
            in_execve as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let in_iowait: u32 = unsafe { ::core::mem::transmute(in_iowait) };
            in_iowait as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let restore_sigmask: u32 = unsafe { ::core::mem::transmute(restore_sigmask) };
            restore_sigmask as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let no_cgroup_migration: u32 = unsafe { ::core::mem::transmute(no_cgroup_migration) };
            no_cgroup_migration as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let frozen: u32 = unsafe { ::core::mem::transmute(frozen) };
            frozen as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let use_memdelay: u32 = unsafe { ::core::mem::transmute(use_memdelay) };
            use_memdelay as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let in_eventfd: u32 = unsafe { ::core::mem::transmute(in_eventfd) };
            in_eventfd as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let pasid_activated: u32 = unsafe { ::core::mem::transmute(pasid_activated) };
            pasid_activated as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let reported_split_lock: u32 = unsafe { ::core::mem::transmute(reported_split_lock) };
            reported_split_lock as u64
        });
        __bindgen_bitfield_unit.set(43usize, 1u8, {
            let in_thrashing: u32 = unsafe { ::core::mem::transmute(in_thrashing) };
            in_thrashing as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn mce_ripv(&self) -> __u64 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_mce_ripv(&mut self, val: __u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mce_whole_page(&self) -> __u64 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_mce_whole_page(&mut self, val: __u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __mce_reserved(&self) -> __u64 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(2usize, 62u8) as u64) }
    }
    #[inline]
    pub fn set___mce_reserved(&mut self, val: __u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_2.set(2usize, 62u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        mce_ripv: __u64,
        mce_whole_page: __u64,
        __mce_reserved: __u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mce_ripv: u64 = unsafe { ::core::mem::transmute(mce_ripv) };
            mce_ripv as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mce_whole_page: u64 = unsafe { ::core::mem::transmute(mce_whole_page) };
            mce_whole_page as u64
        });
        __bindgen_bitfield_unit.set(2usize, 62u8, {
            let __mce_reserved: u64 = unsafe { ::core::mem::transmute(__mce_reserved) };
            __mce_reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut cad_pid: *mut pid;
}
extern "C" {
    pub fn cpuset_cpumask_can_shrink(
        cur: *const cpumask,
        trial: *const cpumask,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn task_can_attach(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn dl_bw_alloc(cpu: core::ffi::c_int, dl_bw: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn dl_bw_free(cpu: core::ffi::c_int, dl_bw: u64_);
}
extern "C" {
    pub fn do_set_cpus_allowed(p: *mut task_struct, new_mask: *const cpumask);
}
extern "C" {
    pub fn set_cpus_allowed_ptr(p: *mut task_struct, new_mask: *const cpumask) -> core::ffi::c_int;
}
extern "C" {
    pub fn dup_user_cpus_ptr(
        dst: *mut task_struct,
        src: *mut task_struct,
        node: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn release_user_cpus_ptr(p: *mut task_struct);
}
extern "C" {
    pub fn dl_task_check_affinity(p: *mut task_struct, mask: *const cpumask) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_compatible_cpus_allowed_ptr(p: *mut task_struct);
}
extern "C" {
    pub fn relax_compatible_cpus_allowed_ptr(p: *mut task_struct);
}
extern "C" {
    pub fn yield_to(p: *mut task_struct, preempt: bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_user_nice(p: *mut task_struct, nice: core::ffi::c_long);
}
extern "C" {
    pub fn task_prio(p: *const task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn can_nice(p: *const task_struct, nice: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn task_curr(p: *const task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn idle_cpu(cpu: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn available_idle_cpu(cpu: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        arg1: *mut task_struct,
        arg2: core::ffi::c_int,
        arg3: *const sched_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_setscheduler_nocheck(
        arg1: *mut task_struct,
        arg2: core::ffi::c_int,
        arg3: *const sched_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_set_fifo(p: *mut task_struct);
}
extern "C" {
    pub fn sched_set_fifo_low(p: *mut task_struct);
}
extern "C" {
    pub fn sched_set_normal(p: *mut task_struct, nice: core::ffi::c_int);
}
extern "C" {
    pub fn sched_setattr(arg1: *mut task_struct, arg2: *const sched_attr) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_setattr_nocheck(
        arg1: *mut task_struct,
        arg2: *const sched_attr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idle_task(cpu: core::ffi::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn curr_task(cpu: core::ffi::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn ia64_set_curr_task(cpu: core::ffi::c_int, p: *mut task_struct);
}
extern "C" {
    #[link_name = "\u{1}yield"]
    pub fn yield_();
}
#[repr(C)]
#[repr(align(64))]
pub struct thread_union {
    pub task: __BindgenUnionField<task_struct>,
    pub stack: __BindgenUnionField<[core::ffi::c_ulong; 2048usize]>,
    pub bindgen_union_field: [u8; 16384usize],
}
impl Default for thread_union {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_stack: [core::ffi::c_ulong; 2048usize];
}
extern "C" {
    pub fn find_task_by_vpid(nr: pid_t) -> *mut task_struct;
}
extern "C" {
    pub fn find_task_by_pid_ns(nr: pid_t, ns: *mut pid_namespace) -> *mut task_struct;
}
extern "C" {
    pub fn find_get_task_by_vpid(nr: pid_t) -> *mut task_struct;
}
extern "C" {
    pub fn wake_up_state(tsk: *mut task_struct, state: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn wake_up_process(tsk: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn wake_up_new_task(tsk: *mut task_struct);
}
extern "C" {
    pub fn kick_process(tsk: *mut task_struct);
}
extern "C" {
    pub fn __set_task_comm(tsk: *mut task_struct, from: *const core::ffi::c_char, exec: bool_);
}
extern "C" {
    pub fn __get_task_comm(
        to: *mut core::ffi::c_char,
        len: usize,
        tsk: *mut task_struct,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn wait_task_inactive(
        arg1: *mut task_struct,
        match_state: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn sched_dynamic_klp_enable();
}
extern "C" {
    pub fn sched_dynamic_klp_disable();
}
extern "C" {
    pub static mut __SCK__cond_resched: static_call_key;
}
extern "C" {
    pub fn __SCT__cond_resched() -> core::ffi::c_int;
}
extern "C" {
    pub fn __cond_resched_lock(lock: *mut spinlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cond_resched_rwlock_read(lock: *mut rwlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cond_resched_rwlock_write(lock: *mut rwlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_task_cpu(p: *mut task_struct, cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn sched_task_on_rq(p: *mut task_struct) -> bool_;
}
extern "C" {
    pub fn get_wchan(p: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn cpu_curr_snapshot(cpu: core::ffi::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn _local_bh_enable();
}
extern "C" {
    pub fn __local_bh_enable_ip(ip: core::ffi::c_ulong, cnt: core::ffi::c_uint);
}
extern "C" {
    pub fn lock_is_held(arg1: *const core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockdep_is_held(arg1: *const core::ffi::c_void) -> core::ffi::c_int;
}
pub const xhlock_context_t_XHLOCK_HARD: xhlock_context_t = 0;
pub const xhlock_context_t_XHLOCK_SOFT: xhlock_context_t = 1;
pub const xhlock_context_t_XHLOCK_CTX_NR: xhlock_context_t = 2;
pub type xhlock_context_t = core::ffi::c_uint;
extern "C" {
    pub fn dummy_steal_clock(cpu: core::ffi::c_int) -> u64_;
}
extern "C" {
    pub fn dummy_sched_clock() -> u64_;
}
extern "C" {
    pub static mut __SCK__pv_steal_clock: static_call_key;
}
extern "C" {
    pub fn __SCT__pv_steal_clock(arg1: core::ffi::c_int) -> u64_;
}
extern "C" {
    pub static mut __SCK__pv_sched_clock: static_call_key;
}
extern "C" {
    pub fn __SCT__pv_sched_clock() -> u64_;
}
extern "C" {
    pub fn paravirt_set_sched_clock(func: ::core::option::Option<unsafe extern "C" fn() -> u64_>);
}
extern "C" {
    pub static mut paravirt_steal_enabled: static_key;
}
extern "C" {
    pub static mut paravirt_steal_rq_enabled: static_key;
}
extern "C" {
    pub fn __native_queued_spin_unlock(lock: *mut qspinlock);
}
extern "C" {
    pub fn pv_is_native_spin_unlock() -> bool_;
}
extern "C" {
    pub fn __native_vcpu_is_preempted(cpu: core::ffi::c_long) -> bool_;
}
extern "C" {
    pub fn pv_is_native_vcpu_is_preempted() -> bool_;
}
extern "C" {
    pub fn native_flush_tlb_local();
}
extern "C" {
    pub fn native_flush_tlb_global();
}
extern "C" {
    pub fn native_flush_tlb_one_user(addr: core::ffi::c_ulong);
}
extern "C" {
    pub fn native_flush_tlb_multi(cpumask: *const cpumask, info: *const flush_tlb_info);
}
extern "C" {
    pub fn default_banner();
}
extern "C" {
    pub fn native_pv_lock_init();
}
extern "C" {
    pub static mut virt_spin_lock_key: static_key_true;
}
extern "C" {
    pub fn queued_spin_lock_slowpath(lock: *mut qspinlock, val: u32_);
}
extern "C" {
    pub fn queued_read_lock_slowpath(lock: *mut qrwlock);
}
extern "C" {
    pub fn queued_write_lock_slowpath(lock: *mut qrwlock);
}
extern "C" {
    pub fn in_lock_functions(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_spin_lock(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_lock_nested(lock: *mut raw_spinlock_t, subclass: core::ffi::c_int);
}
extern "C" {
    pub fn _raw_spin_lock_nest_lock(lock: *mut raw_spinlock_t, map: *mut lockdep_map);
}
extern "C" {
    pub fn _raw_spin_lock_bh(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_lock_irq(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_lock_irqsave(lock: *mut raw_spinlock_t) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _raw_spin_lock_irqsave_nested(
        lock: *mut raw_spinlock_t,
        subclass: core::ffi::c_int,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _raw_spin_trylock(lock: *mut raw_spinlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_spin_trylock_bh(lock: *mut raw_spinlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_spin_unlock(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_unlock_bh(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_unlock_irq(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_unlock_irqrestore(lock: *mut raw_spinlock_t, flags: core::ffi::c_ulong);
}
extern "C" {
    pub fn _raw_read_lock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock_nested(lock: *mut rwlock_t, subclass: core::ffi::c_int);
}
extern "C" {
    pub fn _raw_read_lock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_lock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_lock_irqsave(lock: *mut rwlock_t) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _raw_write_lock_irqsave(lock: *mut rwlock_t) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _raw_read_trylock(lock: *mut rwlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_write_trylock(lock: *mut rwlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_read_unlock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_unlock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_unlock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_unlock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_unlock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_unlock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_unlock_irqrestore(lock: *mut rwlock_t, flags: core::ffi::c_ulong);
}
extern "C" {
    pub fn _raw_write_unlock_irqrestore(lock: *mut rwlock_t, flags: core::ffi::c_ulong);
}
extern "C" {
    pub fn _atomic_dec_and_lock(atomic: *mut atomic_t, lock: *mut spinlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _atomic_dec_and_lock_irqsave(
        atomic: *mut atomic_t,
        lock: *mut spinlock_t,
        flags: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn _atomic_dec_and_raw_lock(
        atomic: *mut atomic_t,
        lock: *mut raw_spinlock_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn _atomic_dec_and_raw_lock_irqsave(
        atomic: *mut atomic_t,
        lock: *mut raw_spinlock_t,
        flags: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __alloc_bucket_spinlocks(
        locks: *mut *mut spinlock_t,
        lock_mask: *mut core::ffi::c_uint,
        max_size: usize,
        cpu_mult: core::ffi::c_uint,
        gfp: gfp_t,
        name: *const core::ffi::c_char,
        key: *mut lock_class_key,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn free_bucket_spinlocks(locks: *mut spinlock_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_raw_spinlock_t {
    pub lock: *mut raw_spinlock_t,
}
impl Default for class_raw_spinlock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_raw_spinlock_try_t = class_raw_spinlock_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_raw_spinlock_nested_t {
    pub lock: *mut raw_spinlock_t,
}
impl Default for class_raw_spinlock_nested_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_raw_spinlock_irq_t {
    pub lock: *mut raw_spinlock_t,
}
impl Default for class_raw_spinlock_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_raw_spinlock_irq_try_t = class_raw_spinlock_irq_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_raw_spinlock_irqsave_t {
    pub lock: *mut raw_spinlock_t,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_raw_spinlock_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_raw_spinlock_irqsave_try_t = class_raw_spinlock_irqsave_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_spinlock_t {
    pub lock: *mut spinlock_t,
}
impl Default for class_spinlock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_spinlock_try_t = class_spinlock_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_spinlock_irq_t {
    pub lock: *mut spinlock_t,
}
impl Default for class_spinlock_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_spinlock_irq_try_t = class_spinlock_irq_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_spinlock_irqsave_t {
    pub lock: *mut spinlock_t,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_spinlock_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_spinlock_irqsave_try_t = class_spinlock_irqsave_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_read_lock_t {
    pub lock: *mut rwlock_t,
}
impl Default for class_read_lock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_read_lock_irq_t {
    pub lock: *mut rwlock_t,
}
impl Default for class_read_lock_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_read_lock_irqsave_t {
    pub lock: *mut rwlock_t,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_read_lock_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_write_lock_t {
    pub lock: *mut rwlock_t,
}
impl Default for class_write_lock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_write_lock_irq_t {
    pub lock: *mut rwlock_t,
}
impl Default for class_write_lock_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_write_lock_irqsave_t {
    pub lock: *mut rwlock_t,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_write_lock_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn sched_setaffinity(pid: pid_t, new_mask: *const cpumask) -> core::ffi::c_long;
}
extern "C" {
    pub fn sched_getaffinity(pid: pid_t, mask: *mut cpumask) -> core::ffi::c_long;
}
extern "C" {
    pub fn sched_cpu_util(cpu: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn sched_set_stop_task(cpu: core::ffi::c_int, stop: *mut task_struct);
}
extern "C" {
    pub static mut pcpu_base_addr: *mut core::ffi::c_void;
}
extern "C" {
    pub static mut pcpu_unit_offsets: *const core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pcpu_group_info {
    pub nr_units: core::ffi::c_int,
    pub base_offset: core::ffi::c_ulong,
    pub cpu_map: *mut core::ffi::c_uint,
}
impl Default for pcpu_group_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct pcpu_alloc_info {
    pub static_size: usize,
    pub reserved_size: usize,
    pub dyn_size: usize,
    pub unit_size: usize,
    pub atom_size: usize,
    pub alloc_size: usize,
    pub __ai_size: usize,
    pub nr_groups: core::ffi::c_int,
    pub groups: __IncompleteArrayField<pcpu_group_info>,
}
impl Default for pcpu_alloc_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const pcpu_fc_PCPU_FC_AUTO: pcpu_fc = 0;
pub const pcpu_fc_PCPU_FC_EMBED: pcpu_fc = 1;
pub const pcpu_fc_PCPU_FC_PAGE: pcpu_fc = 2;
pub const pcpu_fc_PCPU_FC_NR: pcpu_fc = 3;
pub type pcpu_fc = core::ffi::c_uint;
extern "C" {
    pub static pcpu_fc_names: [*const core::ffi::c_char; 3usize];
}
extern "C" {
    pub static mut pcpu_chosen_fc: pcpu_fc;
}
pub type pcpu_fc_cpu_to_node_fn_t =
    ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int) -> core::ffi::c_int>;
pub type pcpu_fc_cpu_distance_fn_t = ::core::option::Option<
    unsafe extern "C" fn(from: core::ffi::c_uint, to: core::ffi::c_uint) -> core::ffi::c_int,
>;
extern "C" {
    pub fn pcpu_alloc_alloc_info(
        nr_groups: core::ffi::c_int,
        nr_units: core::ffi::c_int,
    ) -> *mut pcpu_alloc_info;
}
extern "C" {
    pub fn pcpu_free_alloc_info(ai: *mut pcpu_alloc_info);
}
extern "C" {
    pub fn pcpu_setup_first_chunk(ai: *const pcpu_alloc_info, base_addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn pcpu_embed_first_chunk(
        reserved_size: usize,
        dyn_size: usize,
        atom_size: usize,
        cpu_distance_fn: pcpu_fc_cpu_distance_fn_t,
        cpu_to_nd_fn: pcpu_fc_cpu_to_node_fn_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pcpu_populate_pte(addr: core::ffi::c_ulong);
}
extern "C" {
    pub fn pcpu_page_first_chunk(
        reserved_size: usize,
        cpu_to_nd_fn: pcpu_fc_cpu_to_node_fn_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __is_kernel_percpu_address(
        addr: core::ffi::c_ulong,
        can_addr: *mut core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn is_kernel_percpu_address(addr: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn pcpu_alloc_noprof(
        size: usize,
        align: usize,
        reserved: bool_,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn pcpu_alloc_size(__pdata: *mut core::ffi::c_void) -> usize;
}
extern "C" {
    pub fn free_percpu(__pdata: *mut core::ffi::c_void);
}
extern "C" {
    pub fn per_cpu_ptr_to_phys(addr: *mut core::ffi::c_void) -> phys_addr_t;
}
extern "C" {
    pub fn pcpu_nr_pages() -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msr_info {
    pub msr_no: u32_,
    pub reg: msr,
    pub msrs: *mut msr,
    pub err: core::ffi::c_int,
}
impl Default for msr_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msr_regs_info {
    pub regs: *mut u32_,
    pub err: core::ffi::c_int,
}
impl Default for msr_regs_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct saved_msr {
    pub valid: bool_,
    pub info: msr_info,
}
impl Default for saved_msr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct saved_msrs {
    pub num: core::ffi::c_uint,
    pub array: *mut saved_msr,
}
impl Default for saved_msrs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct trace_print_flags {
    pub mask: core::ffi::c_ulong,
    pub name: *const core::ffi::c_char,
}
impl Default for trace_print_flags {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct trace_print_flags_u64 {
    pub mask: core::ffi::c_ulonglong,
    pub name: *const core::ffi::c_char,
}
impl Default for trace_print_flags_u64 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tracepoint_func {
    pub func: *mut core::ffi::c_void,
    pub data: *mut core::ffi::c_void,
    pub prio: core::ffi::c_int,
}
impl Default for tracepoint_func {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tracepoint {
    pub name: *const core::ffi::c_char,
    pub key: static_key,
    pub static_call_key: *mut static_call_key,
    pub static_call_tramp: *mut core::ffi::c_void,
    pub iterator: *mut core::ffi::c_void,
    pub probestub: *mut core::ffi::c_void,
    pub regfunc: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub unregfunc: ::core::option::Option<unsafe extern "C" fn()>,
    pub funcs: *mut tracepoint_func,
}
impl Default for tracepoint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type tracepoint_ptr_t = core::ffi::c_int;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct bpf_raw_event_map {
    pub tp: *mut tracepoint,
    pub bpf_func: *mut core::ffi::c_void,
    pub num_args: u32_,
    pub writable_size: u32_,
}
impl Default for bpf_raw_event_map {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut __tracepoint_read_msr: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_write_msr: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_rdpmc: tracepoint;
}
extern "C" {
    pub fn do_trace_write_msr(msr: core::ffi::c_uint, val: u64_, failed: core::ffi::c_int);
}
extern "C" {
    pub fn do_trace_read_msr(msr: core::ffi::c_uint, val: u64_, failed: core::ffi::c_int);
}
extern "C" {
    pub fn do_trace_rdpmc(msr: core::ffi::c_uint, val: u64_, failed: core::ffi::c_int);
}
extern "C" {
    pub fn rdmsr_safe_regs(regs: *mut u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsr_safe_regs(regs: *mut u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn msrs_alloc() -> *mut msr;
}
extern "C" {
    pub fn msrs_free(msrs: *mut msr);
}
extern "C" {
    pub fn msr_set_bit(msr: u32_, bit: u8_) -> core::ffi::c_int;
}
extern "C" {
    pub fn msr_clear_bit(msr: u32_, bit: u8_) -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsr_on_cpu(
        cpu: core::ffi::c_uint,
        msr_no: u32_,
        l: *mut u32_,
        h: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsr_on_cpu(cpu: core::ffi::c_uint, msr_no: u32_, l: u32_, h: u32_)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsrl_on_cpu(cpu: core::ffi::c_uint, msr_no: u32_, q: *mut u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsrl_on_cpu(cpu: core::ffi::c_uint, msr_no: u32_, q: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsr_on_cpus(mask: *const cpumask, msr_no: u32_, msrs: *mut msr);
}
extern "C" {
    pub fn wrmsr_on_cpus(mask: *const cpumask, msr_no: u32_, msrs: *mut msr);
}
extern "C" {
    pub fn rdmsr_safe_on_cpu(
        cpu: core::ffi::c_uint,
        msr_no: u32_,
        l: *mut u32_,
        h: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsr_safe_on_cpu(
        cpu: core::ffi::c_uint,
        msr_no: u32_,
        l: u32_,
        h: u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsrl_safe_on_cpu(
        cpu: core::ffi::c_uint,
        msr_no: u32_,
        q: *mut u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsrl_safe_on_cpu(cpu: core::ffi::c_uint, msr_no: u32_, q: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsr_safe_regs_on_cpu(cpu: core::ffi::c_uint, regs: *mut u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsr_safe_regs_on_cpu(cpu: core::ffi::c_uint, regs: *mut u32_) -> core::ffi::c_int;
}
pub type cycles_t = core::ffi::c_ulonglong;
extern "C" {
    pub static mut cpu_khz: core::ffi::c_uint;
}
extern "C" {
    pub static mut tsc_khz: core::ffi::c_uint;
}
extern "C" {
    pub fn disable_TSC();
}
extern "C" {
    pub fn tsc_early_init();
}
extern "C" {
    pub fn tsc_init();
}
extern "C" {
    pub fn mark_tsc_unstable(reason: *mut core::ffi::c_char);
}
extern "C" {
    pub fn unsynchronized_tsc() -> core::ffi::c_int;
}
extern "C" {
    pub fn check_tsc_unstable() -> core::ffi::c_int;
}
extern "C" {
    pub fn mark_tsc_async_resets(reason: *mut core::ffi::c_char);
}
extern "C" {
    pub fn native_calibrate_cpu_early() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn native_calibrate_tsc() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn native_sched_clock_from_tsc(tsc: u64_) -> core::ffi::c_ulonglong;
}
extern "C" {
    pub static mut tsc_clocksource_reliable: core::ffi::c_int;
}
extern "C" {
    pub static mut tsc_async_resets: bool_;
}
extern "C" {
    pub fn tsc_store_and_check_tsc_adjust(bootcpu: bool_) -> bool_;
}
extern "C" {
    pub fn tsc_verify_tsc_adjust(resume: bool_);
}
extern "C" {
    pub fn check_tsc_sync_target();
}
extern "C" {
    pub fn notsc_setup(arg1: *mut core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn tsc_save_sched_clock_state();
}
extern "C" {
    pub fn tsc_restore_sched_clock_state();
}
extern "C" {
    pub fn cpu_khz_from_msr() -> core::ffi::c_ulong;
}
extern "C" {
    pub static mut tick_usec: core::ffi::c_ulong;
}
extern "C" {
    pub static mut tick_nsec: core::ffi::c_ulong;
}
extern "C" {
    pub fn do_adjtimex(arg1: *mut __kernel_timex) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_clock_adjtime(which_clock: clockid_t, ktx: *mut __kernel_timex) -> core::ffi::c_int;
}
extern "C" {
    pub fn hardpps(arg1: *const timespec64, arg2: *const timespec64);
}
extern "C" {
    pub fn read_current_timer(timer_val: *mut core::ffi::c_ulong) -> core::ffi::c_int;
}
pub type old_time32_t = s32;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct old_timespec32 {
    pub tv_sec: old_time32_t,
    pub tv_nsec: s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct old_timeval32 {
    pub tv_sec: old_time32_t,
    pub tv_usec: s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct old_itimerspec32 {
    pub it_interval: old_timespec32,
    pub it_value: old_timespec32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct old_utimbuf32 {
    pub actime: old_time32_t,
    pub modtime: old_time32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct old_timex32 {
    pub modes: u32_,
    pub offset: s32,
    pub freq: s32,
    pub maxerror: s32,
    pub esterror: s32,
    pub status: s32,
    pub constant: s32,
    pub precision: s32,
    pub tolerance: s32,
    pub time: old_timeval32,
    pub tick: s32,
    pub ppsfreq: s32,
    pub jitter: s32,
    pub shift: s32,
    pub stabil: s32,
    pub jitcnt: s32,
    pub calcnt: s32,
    pub errcnt: s32,
    pub stbcnt: s32,
    pub tai: s32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
impl Default for old_timex32 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn get_old_timespec32(
        arg1: *mut timespec64,
        arg2: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_old_timespec32(
        arg1: *const timespec64,
        arg2: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_old_itimerspec32(
        its: *mut itimerspec64,
        uits: *const old_itimerspec32,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_old_itimerspec32(
        its: *const itimerspec64,
        uits: *mut old_itimerspec32,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_old_timex32(arg1: *mut __kernel_timex, arg2: *const old_timex32)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn put_old_timex32(arg1: *mut old_timex32, arg2: *const __kernel_timex)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn ns_to_kernel_old_timeval(nsec: s64) -> __kernel_old_timeval;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timens_offset {
    pub sec: s64,
    pub nsec: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct stat {
    pub st_dev: __kernel_ulong_t,
    pub st_ino: __kernel_ulong_t,
    pub st_nlink: __kernel_ulong_t,
    pub st_mode: core::ffi::c_uint,
    pub st_uid: core::ffi::c_uint,
    pub st_gid: core::ffi::c_uint,
    pub __pad0: core::ffi::c_uint,
    pub st_rdev: __kernel_ulong_t,
    pub st_size: __kernel_long_t,
    pub st_blksize: __kernel_long_t,
    pub st_blocks: __kernel_long_t,
    pub st_atime: __kernel_ulong_t,
    pub st_atime_nsec: __kernel_ulong_t,
    pub st_mtime: __kernel_ulong_t,
    pub st_mtime_nsec: __kernel_ulong_t,
    pub st_ctime: __kernel_ulong_t,
    pub st_ctime_nsec: __kernel_ulong_t,
    pub __unused: [__kernel_long_t; 3usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __old_kernel_stat {
    pub st_dev: core::ffi::c_ushort,
    pub st_ino: core::ffi::c_ushort,
    pub st_mode: core::ffi::c_ushort,
    pub st_nlink: core::ffi::c_ushort,
    pub st_uid: core::ffi::c_ushort,
    pub st_gid: core::ffi::c_ushort,
    pub st_rdev: core::ffi::c_ushort,
    pub st_size: core::ffi::c_uint,
    pub st_atime: core::ffi::c_uint,
    pub st_mtime: core::ffi::c_uint,
    pub st_ctime: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct statx_timestamp {
    pub tv_sec: __s64,
    pub tv_nsec: __u32,
    pub __reserved: __s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct statx {
    pub stx_mask: __u32,
    pub stx_blksize: __u32,
    pub stx_attributes: __u64,
    pub stx_nlink: __u32,
    pub stx_uid: __u32,
    pub stx_gid: __u32,
    pub stx_mode: __u16,
    pub __spare0: [__u16; 1usize],
    pub stx_ino: __u64,
    pub stx_size: __u64,
    pub stx_blocks: __u64,
    pub stx_attributes_mask: __u64,
    pub stx_atime: statx_timestamp,
    pub stx_btime: statx_timestamp,
    pub stx_ctime: statx_timestamp,
    pub stx_mtime: statx_timestamp,
    pub stx_rdev_major: __u32,
    pub stx_rdev_minor: __u32,
    pub stx_dev_major: __u32,
    pub stx_dev_minor: __u32,
    pub stx_mnt_id: __u64,
    pub stx_dio_mem_align: __u32,
    pub stx_dio_offset_align: __u32,
    pub stx_subvol: __u64,
    pub stx_atomic_write_unit_min: __u32,
    pub stx_atomic_write_unit_max: __u32,
    pub stx_atomic_write_segments_max: __u32,
    pub __spare1: [__u32; 1usize],
    pub __spare3: [__u64; 9usize],
}
extern "C" {
    pub static mut overflowuid: core::ffi::c_int;
}
extern "C" {
    pub static mut overflowgid: core::ffi::c_int;
}
extern "C" {
    pub fn __bad_uid();
}
extern "C" {
    pub fn __bad_gid();
}
extern "C" {
    pub static mut fs_overflowuid: core::ffi::c_int;
}
extern "C" {
    pub static mut fs_overflowgid: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_namespace {
    pub uid_map: uid_gid_map,
    pub gid_map: uid_gid_map,
    pub projid_map: uid_gid_map,
    pub parent: *mut user_namespace,
    pub level: core::ffi::c_int,
    pub owner: kuid_t,
    pub group: kgid_t,
    pub ns: ns_common,
    pub flags: core::ffi::c_ulong,
    pub parent_could_setfcap: bool_,
    pub keyring_name_list: list_head,
    pub user_keyring_register: *mut key,
    pub keyring_sem: rw_semaphore,
    pub work: work_struct,
    pub set: ctl_table_set,
    pub sysctls: *mut ctl_table_header,
    pub ucounts: *mut ucounts,
    pub ucount_max: [core::ffi::c_long; 10usize],
    pub rlimit_max: [core::ffi::c_long; 4usize],
    pub binfmt_misc: *mut binfmt_misc,
}
impl Default for user_namespace {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_user_ns: user_namespace;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kstat {
    pub result_mask: u32_,
    pub mode: umode_t,
    pub nlink: core::ffi::c_uint,
    pub blksize: u32,
    pub attributes: u64_,
    pub attributes_mask: u64_,
    pub ino: u64_,
    pub dev: dev_t,
    pub rdev: dev_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub size: loff_t,
    pub atime: timespec64,
    pub mtime: timespec64,
    pub ctime: timespec64,
    pub btime: timespec64,
    pub blocks: u64_,
    pub mnt_id: u64_,
    pub dio_mem_align: u32_,
    pub dio_offset_align: u32_,
    pub change_cookie: u64_,
    pub subvol: u64_,
    pub atomic_write_unit_min: u32_,
    pub atomic_write_unit_max: u32_,
    pub atomic_write_segments_max: u32_,
}
extern "C" {
    pub static mut debug_locks: core::ffi::c_int;
}
extern "C" {
    pub static mut debug_locks_silent: core::ffi::c_int;
}
extern "C" {
    pub fn debug_locks_off() -> core::ffi::c_int;
}
extern "C" {
    pub fn __mutex_init(lock: *mut mutex, name: *const core::ffi::c_char, key: *mut lock_class_key);
}
extern "C" {
    pub fn mutex_is_locked(lock: *mut mutex) -> bool_;
}
extern "C" {
    pub fn mutex_lock(lock: *mut mutex);
}
extern "C" {
    pub fn mutex_lock_interruptible(lock: *mut mutex) -> core::ffi::c_int;
}
extern "C" {
    pub fn mutex_lock_killable(lock: *mut mutex) -> core::ffi::c_int;
}
extern "C" {
    pub fn mutex_lock_io(lock: *mut mutex);
}
extern "C" {
    pub fn mutex_trylock(lock: *mut mutex) -> core::ffi::c_int;
}
extern "C" {
    pub fn mutex_unlock(lock: *mut mutex);
}
extern "C" {
    pub fn atomic_dec_and_mutex_lock(cnt: *mut atomic_t, lock: *mut mutex) -> core::ffi::c_int;
}
pub type class_mutex_t = *mut mutex;
pub type class_mutex_try_t = class_mutex_t;
pub type class_mutex_intr_t = class_mutex_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct workqueue_struct {
    _unused: [u8; 0],
}
pub type work_func_t = ::core::option::Option<unsafe extern "C" fn(work: *mut work_struct)>;
extern "C" {
    pub fn delayed_work_timer_fn(t: *mut timer_list);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct work_struct {
    pub data: atomic_long_t,
    pub entry: list_head,
    pub func: work_func_t,
}
impl Default for work_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rhash_head {
    pub next: *mut rhash_head,
}
impl Default for rhash_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rhlist_head {
    pub rhead: rhash_head,
    pub next: *mut rhlist_head,
}
impl Default for rhlist_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bucket_table {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rhashtable_compare_arg {
    pub ht: *mut rhashtable,
    pub key: *const core::ffi::c_void,
}
impl Default for rhashtable_compare_arg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rht_hashfn_t = ::core::option::Option<
    unsafe extern "C" fn(data: *const core::ffi::c_void, len: u32_, seed: u32_) -> u32_,
>;
pub type rht_obj_hashfn_t = ::core::option::Option<
    unsafe extern "C" fn(data: *const core::ffi::c_void, len: u32_, seed: u32_) -> u32_,
>;
pub type rht_obj_cmpfn_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg: *mut rhashtable_compare_arg,
        obj: *const core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rhashtable_params {
    pub nelem_hint: u16_,
    pub key_len: u16_,
    pub key_offset: u16_,
    pub head_offset: u16_,
    pub max_size: core::ffi::c_uint,
    pub min_size: u16_,
    pub automatic_shrinking: bool_,
    pub hashfn: rht_hashfn_t,
    pub obj_hashfn: rht_obj_hashfn_t,
    pub obj_cmpfn: rht_obj_cmpfn_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rhashtable {
    pub tbl: *mut bucket_table,
    pub key_len: core::ffi::c_uint,
    pub max_elems: core::ffi::c_uint,
    pub p: rhashtable_params,
    pub rhlist: bool_,
    pub run_work: work_struct,
    pub mutex: mutex,
    pub lock: spinlock_t,
    pub nelems: atomic_t,
}
impl Default for rhashtable {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rhltable {
    pub ht: rhashtable,
}
impl Default for rhltable {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rhashtable_walker {
    pub list: list_head,
    pub tbl: *mut bucket_table,
}
impl Default for rhashtable_walker {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rhashtable_iter {
    pub ht: *mut rhashtable,
    pub p: *mut rhash_head,
    pub list: *mut rhlist_head,
    pub walker: rhashtable_walker,
    pub slot: core::ffi::c_uint,
    pub skip: core::ffi::c_uint,
    pub end_of_table: bool_,
}
impl Default for rhashtable_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rhashtable_init_noprof(
        ht: *mut rhashtable,
        params: *const rhashtable_params,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn rhltable_init_noprof(
        hlt: *mut rhltable,
        params: *const rhashtable_params,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ipc_perm {
    pub key: __kernel_key_t,
    pub uid: __kernel_uid_t,
    pub gid: __kernel_gid_t,
    pub cuid: __kernel_uid_t,
    pub cgid: __kernel_gid_t,
    pub mode: __kernel_mode_t,
    pub seq: core::ffi::c_ushort,
}
#[repr(C)]
#[derive(Default)]
pub struct ipc64_perm {
    pub key: __kernel_key_t,
    pub uid: __kernel_uid32_t,
    pub gid: __kernel_gid32_t,
    pub cuid: __kernel_uid32_t,
    pub cgid: __kernel_gid32_t,
    pub mode: __kernel_mode_t,
    pub __pad1: __IncompleteArrayField<core::ffi::c_uchar>,
    pub seq: core::ffi::c_ushort,
    pub __pad2: core::ffi::c_ushort,
    pub __unused1: __kernel_ulong_t,
    pub __unused2: __kernel_ulong_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipc_kludge {
    pub msgp: *mut msgbuf,
    pub msgtyp: core::ffi::c_long,
}
impl Default for ipc_kludge {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const refcount_saturation_type_REFCOUNT_ADD_NOT_ZERO_OVF: refcount_saturation_type = 0;
pub const refcount_saturation_type_REFCOUNT_ADD_OVF: refcount_saturation_type = 1;
pub const refcount_saturation_type_REFCOUNT_ADD_UAF: refcount_saturation_type = 2;
pub const refcount_saturation_type_REFCOUNT_SUB_UAF: refcount_saturation_type = 3;
pub const refcount_saturation_type_REFCOUNT_DEC_LEAK: refcount_saturation_type = 4;
pub type refcount_saturation_type = core::ffi::c_uint;
extern "C" {
    pub fn refcount_warn_saturate(r: *mut refcount_t, t: refcount_saturation_type);
}
extern "C" {
    pub fn refcount_dec_if_one(r: *mut refcount_t) -> bool_;
}
extern "C" {
    pub fn refcount_dec_not_one(r: *mut refcount_t) -> bool_;
}
extern "C" {
    pub fn refcount_dec_and_mutex_lock(r: *mut refcount_t, lock: *mut mutex) -> bool_;
}
extern "C" {
    pub fn refcount_dec_and_lock(r: *mut refcount_t, lock: *mut spinlock_t) -> bool_;
}
extern "C" {
    pub fn refcount_dec_and_lock_irqsave(
        r: *mut refcount_t,
        lock: *mut spinlock_t,
        flags: *mut core::ffi::c_ulong,
    ) -> bool_;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct kern_ipc_perm {
    pub lock: spinlock_t,
    pub deleted: bool_,
    pub id: core::ffi::c_int,
    pub key: key_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub cuid: kuid_t,
    pub cgid: kgid_t,
    pub mode: umode_t,
    pub seq: core::ffi::c_ulong,
    pub security: *mut core::ffi::c_void,
    pub khtnode: rhash_head,
    pub rcu: callback_head,
    pub refcount: refcount_t,
}
impl Default for kern_ipc_perm {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct semid_ds {
    pub sem_perm: ipc_perm,
    pub sem_otime: __kernel_old_time_t,
    pub sem_ctime: __kernel_old_time_t,
    pub sem_base: *mut sem,
    pub sem_pending: *mut sem_queue,
    pub sem_pending_last: *mut *mut sem_queue,
    pub undo: *mut sem_undo,
    pub sem_nsems: core::ffi::c_ushort,
}
impl Default for semid_ds {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct semid64_ds {
    pub sem_perm: ipc64_perm,
    pub sem_otime: __kernel_long_t,
    pub __unused1: __kernel_ulong_t,
    pub sem_ctime: __kernel_long_t,
    pub __unused2: __kernel_ulong_t,
    pub sem_nsems: __kernel_ulong_t,
    pub __unused3: __kernel_ulong_t,
    pub __unused4: __kernel_ulong_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sembuf {
    pub sem_num: core::ffi::c_ushort,
    pub sem_op: core::ffi::c_short,
    pub sem_flg: core::ffi::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union semun {
    pub val: core::ffi::c_int,
    pub buf: *mut semid_ds,
    pub array: *mut core::ffi::c_ushort,
    pub __buf: *mut seminfo,
    pub __pad: *mut core::ffi::c_void,
}
impl Default for semun {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seminfo {
    pub semmap: core::ffi::c_int,
    pub semmni: core::ffi::c_int,
    pub semmns: core::ffi::c_int,
    pub semmnu: core::ffi::c_int,
    pub semmsl: core::ffi::c_int,
    pub semopm: core::ffi::c_int,
    pub semume: core::ffi::c_int,
    pub semusz: core::ffi::c_int,
    pub semvmx: core::ffi::c_int,
    pub semaem: core::ffi::c_int,
}
extern "C" {
    pub fn copy_semundo(clone_flags: core::ffi::c_ulong, tsk: *mut task_struct)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn exit_sem(tsk: *mut task_struct);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kref {
    pub refcount: refcount_t,
}
extern "C" {
    pub fn ct_irq_enter();
}
extern "C" {
    pub fn ct_irq_exit();
}
extern "C" {
    pub fn ct_irq_enter_irqson();
}
extern "C" {
    pub fn ct_irq_exit_irqson();
}
extern "C" {
    pub fn ct_nmi_enter();
}
extern "C" {
    pub fn ct_nmi_exit();
}
extern "C" {
    pub fn call_rcu(head: *mut callback_head, func: rcu_callback_t);
}
extern "C" {
    pub fn rcu_barrier_tasks();
}
extern "C" {
    pub fn rcu_barrier_tasks_rude();
}
extern "C" {
    pub fn synchronize_rcu();
}
extern "C" {
    pub fn get_completed_synchronize_rcu() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_completed_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn __rcu_read_lock();
}
extern "C" {
    pub fn __rcu_read_unlock();
}
extern "C" {
    pub fn rcu_init();
}
extern "C" {
    pub static mut rcu_scheduler_active: core::ffi::c_int;
}
extern "C" {
    pub fn rcu_sched_clock_irq(user: core::ffi::c_int);
}
extern "C" {
    pub fn rcu_init_tasks_generic();
}
extern "C" {
    pub fn rcu_sysrq_start();
}
extern "C" {
    pub fn rcu_sysrq_end();
}
extern "C" {
    pub fn call_rcu_tasks(head: *mut callback_head, func: rcu_callback_t);
}
extern "C" {
    pub fn synchronize_rcu_tasks();
}
extern "C" {
    pub fn exit_tasks_rcu_start();
}
extern "C" {
    pub fn exit_tasks_rcu_finish();
}
extern "C" {
    pub fn rcu_softirq_qs();
}
extern "C" {
    pub fn rcu_note_context_switch(preempt: bool_);
}
extern "C" {
    pub fn rcu_needs_cpu() -> core::ffi::c_int;
}
extern "C" {
    pub fn rcu_cpu_stall_reset();
}
extern "C" {
    pub fn rcu_request_urgent_qs_task(t: *mut task_struct);
}
extern "C" {
    pub fn synchronize_rcu_expedited();
}
extern "C" {
    pub fn kvfree_call_rcu(head: *mut callback_head, ptr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn rcu_barrier();
}
extern "C" {
    pub fn rcu_momentary_dyntick_idle();
}
extern "C" {
    pub fn kfree_rcu_scheduler_running();
}
extern "C" {
    pub fn rcu_gp_might_be_stalled() -> bool_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rcu_gp_oldstate {
    pub rgos_norm: core::ffi::c_ulong,
    pub rgos_exp: core::ffi::c_ulong,
}
extern "C" {
    pub fn start_poll_synchronize_rcu_expedited() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn start_poll_synchronize_rcu_expedited_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn cond_synchronize_rcu_expedited(oldstate: core::ffi::c_ulong);
}
extern "C" {
    pub fn cond_synchronize_rcu_expedited_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn get_state_synchronize_rcu() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_state_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn start_poll_synchronize_rcu() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn start_poll_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn poll_state_synchronize_rcu(oldstate: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn poll_state_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate) -> bool_;
}
extern "C" {
    pub fn cond_synchronize_rcu(oldstate: core::ffi::c_ulong);
}
extern "C" {
    pub fn cond_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn rcu_preempt_deferred_qs(t: *mut task_struct);
}
extern "C" {
    pub fn exit_rcu();
}
extern "C" {
    pub fn rcu_scheduler_starting();
}
extern "C" {
    pub fn rcu_end_inkernel_boot();
}
extern "C" {
    pub fn rcu_inkernel_boot_has_ended() -> bool_;
}
extern "C" {
    pub fn rcu_is_watching() -> bool_;
}
extern "C" {
    pub fn rcutree_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_online_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_report_cpu_starting(cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn rcutree_dead_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_dying_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_offline_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_migrate_callbacks(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn rcutree_report_cpu_dead();
}
extern "C" {
    pub static mut rcu_lock_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_bh_lock_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_sched_lock_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_callback_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_expedited: core::ffi::c_int;
}
extern "C" {
    pub static mut rcu_normal: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_rcu_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_rcu_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rb_insert_color(arg1: *mut rb_node, arg2: *mut rb_root);
}
extern "C" {
    pub fn rb_erase(arg1: *mut rb_node, arg2: *mut rb_root);
}
extern "C" {
    pub fn rb_next(arg1: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_prev(arg1: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_first(arg1: *const rb_root) -> *mut rb_node;
}
extern "C" {
    pub fn rb_last(arg1: *const rb_root) -> *mut rb_node;
}
extern "C" {
    pub fn rb_first_postorder(arg1: *const rb_root) -> *mut rb_node;
}
extern "C" {
    pub fn rb_next_postorder(arg1: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_replace_node(victim: *mut rb_node, new: *mut rb_node, root: *mut rb_root);
}
extern "C" {
    pub fn rb_replace_node_rcu(victim: *mut rb_node, new: *mut rb_node, root: *mut rb_root);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct maple_metadata {
    pub end: core::ffi::c_uchar,
    pub gap: core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_range_64 {
    pub parent: *mut maple_pnode,
    pub pivot: [core::ffi::c_ulong; 15usize],
    pub __bindgen_anon_1: maple_range_64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_range_64__bindgen_ty_1 {
    pub slot: [*mut core::ffi::c_void; 16usize],
    pub __bindgen_anon_1: maple_range_64__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_range_64__bindgen_ty_1__bindgen_ty_1 {
    pub pad: [*mut core::ffi::c_void; 15usize],
    pub meta: maple_metadata,
}
impl Default for maple_range_64__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_range_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_range_64 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_arange_64 {
    pub parent: *mut maple_pnode,
    pub pivot: [core::ffi::c_ulong; 9usize],
    pub slot: [*mut core::ffi::c_void; 10usize],
    pub gap: [core::ffi::c_ulong; 10usize],
    pub meta: maple_metadata,
}
impl Default for maple_arange_64 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_alloc {
    pub total: core::ffi::c_ulong,
    pub node_count: core::ffi::c_uchar,
    pub request_count: core::ffi::c_uint,
    pub slot: [*mut maple_alloc; 30usize],
}
impl Default for maple_alloc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_topiary {
    pub parent: *mut maple_pnode,
    pub next: *mut maple_enode,
}
impl Default for maple_topiary {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const maple_type_maple_dense: maple_type = 0;
pub const maple_type_maple_leaf_64: maple_type = 1;
pub const maple_type_maple_range_64: maple_type = 2;
pub const maple_type_maple_arange_64: maple_type = 3;
pub type maple_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lockdep_map_p {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_tree {
    pub __bindgen_anon_1: maple_tree__bindgen_ty_1,
    pub ma_flags: core::ffi::c_uint,
    pub ma_root: *mut core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_tree__bindgen_ty_1 {
    pub ma_lock: spinlock_t,
    pub ma_external_lock: lockdep_map_p,
}
impl Default for maple_tree__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_tree {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_node {
    pub __bindgen_anon_1: maple_node__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_node__bindgen_ty_1 {
    pub __bindgen_anon_1: maple_node__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: maple_node__bindgen_ty_1__bindgen_ty_2,
    pub mr64: maple_range_64,
    pub ma64: maple_arange_64,
    pub alloc: maple_alloc,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_node__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut maple_pnode,
    pub slot: [*mut core::ffi::c_void; 31usize],
}
impl Default for maple_node__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_node__bindgen_ty_1__bindgen_ty_2 {
    pub pad: *mut core::ffi::c_void,
    pub rcu: callback_head,
    pub piv_parent: *mut maple_enode,
    pub parent_slot: core::ffi::c_uchar,
    pub type_: maple_type,
    pub slot_len: core::ffi::c_uchar,
    pub ma_flags: core::ffi::c_uint,
}
impl Default for maple_node__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_topiary {
    pub head: *mut maple_enode,
    pub tail: *mut maple_enode,
    pub mtree: *mut maple_tree,
}
impl Default for ma_topiary {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mtree_load(mt: *mut maple_tree, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mtree_insert(
        mt: *mut maple_tree,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_insert_range(
        mt: *mut maple_tree,
        first: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_alloc_range(
        mt: *mut maple_tree,
        startp: *mut core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        size: core::ffi::c_ulong,
        min: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_alloc_cyclic(
        mt: *mut maple_tree,
        startp: *mut core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        range_lo: core::ffi::c_ulong,
        range_hi: core::ffi::c_ulong,
        next: *mut core::ffi::c_ulong,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_alloc_rrange(
        mt: *mut maple_tree,
        startp: *mut core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        size: core::ffi::c_ulong,
        min: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_store_range(
        mt: *mut maple_tree,
        first: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_store(
        mt: *mut maple_tree,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_erase(mt: *mut maple_tree, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mtree_dup(mt: *mut maple_tree, new: *mut maple_tree, gfp: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __mt_dup(mt: *mut maple_tree, new: *mut maple_tree, gfp: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_destroy(mt: *mut maple_tree);
}
extern "C" {
    pub fn __mt_destroy(mt: *mut maple_tree);
}
pub const maple_status_ma_active: maple_status = 0;
pub const maple_status_ma_start: maple_status = 1;
pub const maple_status_ma_root: maple_status = 2;
pub const maple_status_ma_none: maple_status = 3;
pub const maple_status_ma_pause: maple_status = 4;
pub const maple_status_ma_overflow: maple_status = 5;
pub const maple_status_ma_underflow: maple_status = 6;
pub const maple_status_ma_error: maple_status = 7;
pub type maple_status = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_state {
    pub tree: *mut maple_tree,
    pub index: core::ffi::c_ulong,
    pub last: core::ffi::c_ulong,
    pub node: *mut maple_enode,
    pub min: core::ffi::c_ulong,
    pub max: core::ffi::c_ulong,
    pub alloc: *mut maple_alloc,
    pub status: maple_status,
    pub depth: core::ffi::c_uchar,
    pub offset: core::ffi::c_uchar,
    pub mas_flags: core::ffi::c_uchar,
    pub end: core::ffi::c_uchar,
}
impl Default for ma_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_wr_state {
    pub mas: *mut ma_state,
    pub node: *mut maple_node,
    pub r_min: core::ffi::c_ulong,
    pub r_max: core::ffi::c_ulong,
    pub type_: maple_type,
    pub offset_end: core::ffi::c_uchar,
    pub pivots: *mut core::ffi::c_ulong,
    pub end_piv: core::ffi::c_ulong,
    pub slots: *mut *mut core::ffi::c_void,
    pub entry: *mut core::ffi::c_void,
    pub content: *mut core::ffi::c_void,
}
impl Default for ma_wr_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mas_walk(mas: *mut ma_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_store(mas: *mut ma_state, entry: *mut core::ffi::c_void) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_erase(mas: *mut ma_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_store_gfp(
        mas: *mut ma_state,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_store_prealloc(mas: *mut ma_state, entry: *mut core::ffi::c_void);
}
extern "C" {
    pub fn mas_find(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_find_range(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_find_rev(mas: *mut ma_state, min: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_find_range_rev(
        mas: *mut ma_state,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_preallocate(
        mas: *mut ma_state,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_alloc_cyclic(
        mas: *mut ma_state,
        startp: *mut core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        range_lo: core::ffi::c_ulong,
        range_hi: core::ffi::c_ulong,
        next: *mut core::ffi::c_ulong,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_nomem(mas: *mut ma_state, gfp: gfp_t) -> bool_;
}
extern "C" {
    pub fn mas_pause(mas: *mut ma_state);
}
extern "C" {
    pub fn maple_tree_init();
}
extern "C" {
    pub fn mas_destroy(mas: *mut ma_state);
}
extern "C" {
    pub fn mas_expected_entries(
        mas: *mut ma_state,
        nr_entries: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_prev(mas: *mut ma_state, min: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_prev_range(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_next(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_next_range(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_empty_area(
        mas: *mut ma_state,
        min: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_empty_area_rev(
        mas: *mut ma_state,
        min: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mt_find(
        mt: *mut maple_tree,
        index: *mut core::ffi::c_ulong,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mt_find_after(
        mt: *mut maple_tree,
        index: *mut core::ffi::c_ulong,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mt_prev(
        mt: *mut maple_tree,
        index: core::ffi::c_ulong,
        min: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mt_next(
        mt: *mut maple_tree,
        index: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rw_semaphore {
    pub count: atomic_long_t,
    pub owner: atomic_long_t,
    pub osq: optimistic_spin_queue,
    pub wait_lock: raw_spinlock_t,
    pub wait_list: list_head,
}
impl Default for rw_semaphore {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __init_rwsem(
        sem: *mut rw_semaphore,
        name: *const core::ffi::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn down_read(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn down_read_interruptible(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_read_killable(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_read_trylock(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_write(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn down_write_killable(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_write_trylock(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn up_read(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn up_write(sem: *mut rw_semaphore);
}
pub type class_rwsem_read_t = *mut rw_semaphore;
pub type class_rwsem_read_try_t = class_rwsem_read_t;
pub type class_rwsem_read_intr_t = class_rwsem_read_t;
pub type class_rwsem_write_t = *mut rw_semaphore;
pub type class_rwsem_write_try_t = class_rwsem_write_t;
extern "C" {
    pub fn downgrade_write(sem: *mut rw_semaphore);
}
pub type wait_queue_entry_t = wait_queue_entry;
pub type wait_queue_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        flags: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn default_wake_function(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        flags: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_queue_entry {
    pub flags: core::ffi::c_uint,
    pub private: *mut core::ffi::c_void,
    pub func: wait_queue_func_t,
    pub entry: list_head,
}
impl Default for wait_queue_entry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_queue_head {
    pub lock: spinlock_t,
    pub head: list_head,
}
impl Default for wait_queue_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wait_queue_head_t = wait_queue_head;
extern "C" {
    pub fn __init_waitqueue_head(
        wq_head: *mut wait_queue_head,
        name: *const core::ffi::c_char,
        arg1: *mut lock_class_key,
    );
}
extern "C" {
    pub fn add_wait_queue(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn add_wait_queue_exclusive(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn add_wait_queue_priority(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn remove_wait_queue(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn __wake_up(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        nr: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __wake_up_on_current_cpu(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        key: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __wake_up_locked_key(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        key: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __wake_up_sync_key(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        key: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __wake_up_locked_sync_key(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        key: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __wake_up_locked(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        nr: core::ffi::c_int,
    );
}
extern "C" {
    pub fn __wake_up_sync(wq_head: *mut wait_queue_head, mode: core::ffi::c_uint);
}
extern "C" {
    pub fn __wake_up_pollfree(wq_head: *mut wait_queue_head);
}
extern "C" {
    pub fn init_wait_entry(wq_entry: *mut wait_queue_entry, flags: core::ffi::c_int);
}
extern "C" {
    pub fn do_wait_intr(
        arg1: *mut wait_queue_head_t,
        arg2: *mut wait_queue_entry_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_wait_intr_irq(
        arg1: *mut wait_queue_head_t,
        arg2: *mut wait_queue_entry_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn prepare_to_wait(
        wq_head: *mut wait_queue_head,
        wq_entry: *mut wait_queue_entry,
        state: core::ffi::c_int,
    );
}
extern "C" {
    pub fn prepare_to_wait_exclusive(
        wq_head: *mut wait_queue_head,
        wq_entry: *mut wait_queue_entry,
        state: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn prepare_to_wait_event(
        wq_head: *mut wait_queue_head,
        wq_entry: *mut wait_queue_entry,
        state: core::ffi::c_int,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn finish_wait(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn wait_woken(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        timeout: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn woken_wake_function(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        sync: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn autoremove_wake_function(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        sync: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
pub type task_call_f = ::core::option::Option<
    unsafe extern "C" fn(p: *mut task_struct, arg: *mut core::ffi::c_void) -> core::ffi::c_int,
>;
extern "C" {
    pub fn task_call_func(
        p: *mut task_struct,
        func: task_call_f,
        arg: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swait_queue_head {
    pub lock: raw_spinlock_t,
    pub task_list: list_head,
}
impl Default for swait_queue_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swait_queue {
    pub task: *mut task_struct,
    pub task_list: list_head,
}
impl Default for swait_queue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __init_swait_queue_head(
        q: *mut swait_queue_head,
        name: *const core::ffi::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn swake_up_one(q: *mut swait_queue_head);
}
extern "C" {
    pub fn swake_up_all(q: *mut swait_queue_head);
}
extern "C" {
    pub fn swake_up_locked(q: *mut swait_queue_head, wake_flags: core::ffi::c_int);
}
extern "C" {
    pub fn prepare_to_swait_exclusive(
        q: *mut swait_queue_head,
        wait: *mut swait_queue,
        state: core::ffi::c_int,
    );
}
extern "C" {
    pub fn prepare_to_swait_event(
        q: *mut swait_queue_head,
        wait: *mut swait_queue,
        state: core::ffi::c_int,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn __finish_swait(q: *mut swait_queue_head, wait: *mut swait_queue);
}
extern "C" {
    pub fn finish_swait(q: *mut swait_queue_head, wait: *mut swait_queue);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct completion {
    pub done: core::ffi::c_uint,
    pub wait: swait_queue_head,
}
impl Default for completion {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn wait_for_completion(arg1: *mut completion);
}
extern "C" {
    pub fn wait_for_completion_io(arg1: *mut completion);
}
extern "C" {
    pub fn wait_for_completion_interruptible(x: *mut completion) -> core::ffi::c_int;
}
extern "C" {
    pub fn wait_for_completion_killable(x: *mut completion) -> core::ffi::c_int;
}
extern "C" {
    pub fn wait_for_completion_state(
        x: *mut completion,
        state: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wait_for_completion_timeout(
        x: *mut completion,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn wait_for_completion_io_timeout(
        x: *mut completion,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn wait_for_completion_interruptible_timeout(
        x: *mut completion,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn wait_for_completion_killable_timeout(
        x: *mut completion,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn try_wait_for_completion(x: *mut completion) -> bool_;
}
extern "C" {
    pub fn completion_done(x: *mut completion) -> bool_;
}
extern "C" {
    pub fn complete(arg1: *mut completion);
}
extern "C" {
    pub fn complete_on_current_cpu(x: *mut completion);
}
extern "C" {
    pub fn complete_all(arg1: *mut completion);
}
pub const uprobe_filter_ctx_UPROBE_FILTER_REGISTER: uprobe_filter_ctx = 0;
pub const uprobe_filter_ctx_UPROBE_FILTER_UNREGISTER: uprobe_filter_ctx = 1;
pub const uprobe_filter_ctx_UPROBE_FILTER_MMAP: uprobe_filter_ctx = 2;
pub type uprobe_filter_ctx = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uprobe_consumer {
    pub handler: ::core::option::Option<
        unsafe extern "C" fn(self_: *mut uprobe_consumer, regs: *mut pt_regs) -> core::ffi::c_int,
    >,
    pub ret_handler: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut uprobe_consumer,
            func: core::ffi::c_ulong,
            regs: *mut pt_regs,
        ) -> core::ffi::c_int,
    >,
    pub filter: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut uprobe_consumer,
            ctx: uprobe_filter_ctx,
            mm: *mut mm_struct,
        ) -> bool_,
    >,
    pub next: *mut uprobe_consumer,
}
impl Default for uprobe_consumer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn register_refined_jiffies(clock_tick_rate: core::ffi::c_long) -> core::ffi::c_int;
}
extern "C" {
    pub static mut jiffies_64: u64_;
}
extern "C" {
    pub static mut jiffies: core::ffi::c_ulong;
}
extern "C" {
    pub static mut preset_lpj: core::ffi::c_ulong;
}
extern "C" {
    pub fn jiffies_to_msecs(j: core::ffi::c_ulong) -> core::ffi::c_uint;
}
extern "C" {
    pub fn jiffies_to_usecs(j: core::ffi::c_ulong) -> core::ffi::c_uint;
}
extern "C" {
    pub fn jiffies64_to_nsecs(j: u64_) -> u64_;
}
extern "C" {
    pub fn jiffies64_to_msecs(j: u64_) -> u64_;
}
extern "C" {
    pub fn __msecs_to_jiffies(m: core::ffi::c_uint) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __usecs_to_jiffies(u: core::ffi::c_uint) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn timespec64_to_jiffies(value: *const timespec64) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn jiffies_to_timespec64(jiffies: core::ffi::c_ulong, value: *mut timespec64);
}
extern "C" {
    pub fn jiffies_to_clock_t(x: core::ffi::c_ulong) -> clock_t;
}
extern "C" {
    pub fn clock_t_to_jiffies(x: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn jiffies_64_to_clock_t(x: u64_) -> u64_;
}
extern "C" {
    pub fn nsec_to_clock_t(x: u64_) -> u64_;
}
extern "C" {
    pub fn nsecs_to_jiffies64(n: u64_) -> u64_;
}
extern "C" {
    pub fn nsecs_to_jiffies(n: u64_) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn ktime_add_safe(lhs: ktime_t, rhs: ktime_t) -> ktime_t;
}
pub const clocksource_ids_CSID_GENERIC: clocksource_ids = 0;
pub const clocksource_ids_CSID_ARM_ARCH_COUNTER: clocksource_ids = 1;
pub const clocksource_ids_CSID_X86_TSC_EARLY: clocksource_ids = 2;
pub const clocksource_ids_CSID_X86_TSC: clocksource_ids = 3;
pub const clocksource_ids_CSID_X86_KVM_CLK: clocksource_ids = 4;
pub const clocksource_ids_CSID_X86_ART: clocksource_ids = 5;
pub const clocksource_ids_CSID_MAX: clocksource_ids = 6;
pub type clocksource_ids = core::ffi::c_uint;
extern "C" {
    pub fn timekeeping_init();
}
extern "C" {
    pub static mut timekeeping_suspended: core::ffi::c_int;
}
extern "C" {
    pub fn legacy_timer_tick(ticks: core::ffi::c_ulong);
}
extern "C" {
    pub fn do_settimeofday64(ts: *const timespec64) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_sys_settimeofday64(tv: *const timespec64, tz: *const timezone) -> core::ffi::c_int;
}
extern "C" {
    pub fn ktime_get_raw_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_real_ts64(tv: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_coarse_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_coarse_real_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn getboottime64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_seconds() -> time64_t;
}
extern "C" {
    pub fn __ktime_get_real_seconds() -> time64_t;
}
extern "C" {
    pub fn ktime_get_real_seconds() -> time64_t;
}
pub const tk_offsets_TK_OFFS_REAL: tk_offsets = 0;
pub const tk_offsets_TK_OFFS_BOOT: tk_offsets = 1;
pub const tk_offsets_TK_OFFS_TAI: tk_offsets = 2;
pub const tk_offsets_TK_OFFS_MAX: tk_offsets = 3;
pub type tk_offsets = core::ffi::c_uint;
extern "C" {
    pub fn ktime_get() -> ktime_t;
}
extern "C" {
    pub fn ktime_get_with_offset(offs: tk_offsets) -> ktime_t;
}
extern "C" {
    pub fn ktime_get_coarse_with_offset(offs: tk_offsets) -> ktime_t;
}
extern "C" {
    pub fn ktime_mono_to_any(tmono: ktime_t, offs: tk_offsets) -> ktime_t;
}
extern "C" {
    pub fn ktime_get_raw() -> ktime_t;
}
extern "C" {
    pub fn ktime_get_resolution_ns() -> u32_;
}
extern "C" {
    pub fn ktime_get_mono_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_raw_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_boot_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_tai_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_real_fast_ns() -> u64_;
}
extern "C" {
    pub fn timekeeping_rtc_skipsuspend() -> bool_;
}
extern "C" {
    pub fn timekeeping_rtc_skipresume() -> bool_;
}
extern "C" {
    pub fn timekeeping_inject_sleeptime64(delta: *const timespec64);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ktime_timestamps {
    pub mono: u64_,
    pub boot: u64_,
    pub real: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct system_time_snapshot {
    pub cycles: u64_,
    pub real: ktime_t,
    pub raw: ktime_t,
    pub cs_id: clocksource_ids,
    pub clock_was_set_seq: core::ffi::c_uint,
    pub cs_was_changed_seq: u8_,
}
impl Default for system_time_snapshot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct system_device_crosststamp {
    pub device: ktime_t,
    pub sys_realtime: ktime_t,
    pub sys_monoraw: ktime_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct system_counterval_t {
    pub cycles: u64_,
    pub cs_id: clocksource_ids,
    pub use_nsecs: bool_,
}
impl Default for system_counterval_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ktime_real_to_base_clock(
        treal: ktime_t,
        base_id: clocksource_ids,
        cycles: *mut u64_,
    ) -> bool_;
}
extern "C" {
    pub fn timekeeping_clocksource_has_base(id: clocksource_ids) -> bool_;
}
extern "C" {
    pub fn get_device_system_crosststamp(
        get_time_fn: ::core::option::Option<
            unsafe extern "C" fn(
                device_time: *mut ktime_t,
                system_counterval: *mut system_counterval_t,
                ctx: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        ctx: *mut core::ffi::c_void,
        history: *mut system_time_snapshot,
        xtstamp: *mut system_device_crosststamp,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ktime_get_snapshot(systime_snapshot: *mut system_time_snapshot);
}
extern "C" {
    pub fn ktime_get_fast_timestamps(snap: *mut ktime_timestamps);
}
extern "C" {
    pub static mut persistent_clock_is_local: core::ffi::c_int;
}
extern "C" {
    pub fn read_persistent_clock64(ts: *mut timespec64);
}
extern "C" {
    pub fn read_persistent_wall_and_boot_offset(
        wall_clock: *mut timespec64,
        boot_offset: *mut timespec64,
    );
}
extern "C" {
    pub fn update_persistent_clock64(now: timespec64) -> core::ffi::c_int;
}
pub const debug_obj_state_ODEBUG_STATE_NONE: debug_obj_state = 0;
pub const debug_obj_state_ODEBUG_STATE_INIT: debug_obj_state = 1;
pub const debug_obj_state_ODEBUG_STATE_INACTIVE: debug_obj_state = 2;
pub const debug_obj_state_ODEBUG_STATE_ACTIVE: debug_obj_state = 3;
pub const debug_obj_state_ODEBUG_STATE_DESTROYED: debug_obj_state = 4;
pub const debug_obj_state_ODEBUG_STATE_NOTAVAILABLE: debug_obj_state = 5;
pub const debug_obj_state_ODEBUG_STATE_MAX: debug_obj_state = 6;
pub type debug_obj_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct debug_obj {
    pub node: hlist_node,
    pub state: debug_obj_state,
    pub astate: core::ffi::c_uint,
    pub object: *mut core::ffi::c_void,
    pub descr: *const debug_obj_descr,
}
impl Default for debug_obj {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct debug_obj_descr {
    pub name: *const core::ffi::c_char,
    pub debug_hint: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void) -> *mut core::ffi::c_void,
    >,
    pub is_static_object:
        ::core::option::Option<unsafe extern "C" fn(addr: *mut core::ffi::c_void) -> bool_>,
    pub fixup_init: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_activate: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_destroy: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_free: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_assert_init: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
}
impl Default for debug_obj_descr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn init_timer_key(
        timer: *mut timer_list,
        func: ::core::option::Option<unsafe extern "C" fn(arg1: *mut timer_list)>,
        flags: core::ffi::c_uint,
        name: *const core::ffi::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn add_timer_on(timer: *mut timer_list, cpu: core::ffi::c_int);
}
extern "C" {
    pub fn mod_timer(timer: *mut timer_list, expires: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn mod_timer_pending(
        timer: *mut timer_list,
        expires: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_reduce(timer: *mut timer_list, expires: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn add_timer(timer: *mut timer_list);
}
extern "C" {
    pub fn add_timer_local(timer: *mut timer_list);
}
extern "C" {
    pub fn add_timer_global(timer: *mut timer_list);
}
extern "C" {
    pub fn try_to_del_timer_sync(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_delete_sync(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_delete(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_shutdown_sync(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_shutdown(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn init_timers();
}
extern "C" {
    pub fn it_real_fn(arg1: *mut hrtimer) -> hrtimer_restart;
}
extern "C" {
    pub fn __round_jiffies(j: core::ffi::c_ulong, cpu: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __round_jiffies_relative(
        j: core::ffi::c_ulong,
        cpu: core::ffi::c_int,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn round_jiffies(j: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn round_jiffies_relative(j: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __round_jiffies_up(j: core::ffi::c_ulong, cpu: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __round_jiffies_up_relative(
        j: core::ffi::c_ulong,
        cpu: core::ffi::c_int,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn round_jiffies_up(j: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn round_jiffies_up_relative(j: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn timers_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn timers_dead_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
pub const work_bits_WORK_STRUCT_PENDING_BIT: work_bits = 0;
pub const work_bits_WORK_STRUCT_INACTIVE_BIT: work_bits = 1;
pub const work_bits_WORK_STRUCT_PWQ_BIT: work_bits = 2;
pub const work_bits_WORK_STRUCT_LINKED_BIT: work_bits = 3;
pub const work_bits_WORK_STRUCT_FLAG_BITS: work_bits = 4;
pub const work_bits_WORK_STRUCT_COLOR_SHIFT: work_bits = 4;
pub const work_bits_WORK_STRUCT_COLOR_BITS: work_bits = 4;
pub const work_bits_WORK_STRUCT_PWQ_SHIFT: work_bits = 8;
pub const work_bits_WORK_OFFQ_FLAG_SHIFT: work_bits = 4;
pub const work_bits_WORK_OFFQ_BH_BIT: work_bits = 4;
pub const work_bits_WORK_OFFQ_FLAG_END: work_bits = 5;
pub const work_bits_WORK_OFFQ_FLAG_BITS: work_bits = 1;
pub const work_bits_WORK_OFFQ_DISABLE_SHIFT: work_bits = 5;
pub const work_bits_WORK_OFFQ_DISABLE_BITS: work_bits = 16;
pub const work_bits_WORK_OFFQ_POOL_SHIFT: work_bits = 21;
pub const work_bits_WORK_OFFQ_LEFT: work_bits = 43;
pub const work_bits_WORK_OFFQ_POOL_BITS: work_bits = 31;
pub type work_bits = core::ffi::c_uint;
pub const work_flags_WORK_STRUCT_PENDING: work_flags = 1;
pub const work_flags_WORK_STRUCT_INACTIVE: work_flags = 2;
pub const work_flags_WORK_STRUCT_PWQ: work_flags = 4;
pub const work_flags_WORK_STRUCT_LINKED: work_flags = 8;
pub const work_flags_WORK_STRUCT_STATIC: work_flags = 0;
pub type work_flags = core::ffi::c_uint;
pub const wq_misc_consts_WORK_NR_COLORS: wq_misc_consts = 16;
pub const wq_misc_consts_WORK_CPU_UNBOUND: wq_misc_consts = 64;
pub const wq_misc_consts_WORK_BUSY_PENDING: wq_misc_consts = 1;
pub const wq_misc_consts_WORK_BUSY_RUNNING: wq_misc_consts = 2;
pub const wq_misc_consts_WORKER_DESC_LEN: wq_misc_consts = 32;
pub type wq_misc_consts = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct delayed_work {
    pub work: work_struct,
    pub timer: timer_list,
    pub wq: *mut workqueue_struct,
    pub cpu: core::ffi::c_int,
}
impl Default for delayed_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_work {
    pub work: work_struct,
    pub rcu: callback_head,
    pub wq: *mut workqueue_struct,
}
impl Default for rcu_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const wq_affn_scope_WQ_AFFN_DFL: wq_affn_scope = 0;
pub const wq_affn_scope_WQ_AFFN_CPU: wq_affn_scope = 1;
pub const wq_affn_scope_WQ_AFFN_SMT: wq_affn_scope = 2;
pub const wq_affn_scope_WQ_AFFN_CACHE: wq_affn_scope = 3;
pub const wq_affn_scope_WQ_AFFN_NUMA: wq_affn_scope = 4;
pub const wq_affn_scope_WQ_AFFN_SYSTEM: wq_affn_scope = 5;
pub const wq_affn_scope_WQ_AFFN_NR_TYPES: wq_affn_scope = 6;
pub type wq_affn_scope = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct workqueue_attrs {
    pub nice: core::ffi::c_int,
    pub cpumask: cpumask_var_t,
    pub __pod_cpumask: cpumask_var_t,
    pub affn_strict: bool_,
    pub affn_scope: wq_affn_scope,
    pub ordered: bool_,
}
impl Default for workqueue_attrs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct execute_work {
    pub work: work_struct,
}
impl Default for execute_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const wq_flags_WQ_BH: wq_flags = 1;
pub const wq_flags_WQ_UNBOUND: wq_flags = 2;
pub const wq_flags_WQ_FREEZABLE: wq_flags = 4;
pub const wq_flags_WQ_MEM_RECLAIM: wq_flags = 8;
pub const wq_flags_WQ_HIGHPRI: wq_flags = 16;
pub const wq_flags_WQ_CPU_INTENSIVE: wq_flags = 32;
pub const wq_flags_WQ_SYSFS: wq_flags = 64;
pub const wq_flags_WQ_POWER_EFFICIENT: wq_flags = 128;
pub const wq_flags___WQ_DESTROYING: wq_flags = 32768;
pub const wq_flags___WQ_DRAINING: wq_flags = 65536;
pub const wq_flags___WQ_ORDERED: wq_flags = 131072;
pub const wq_flags___WQ_LEGACY: wq_flags = 262144;
pub const wq_flags___WQ_BH_ALLOWS: wq_flags = 17;
pub type wq_flags = core::ffi::c_uint;
pub const wq_consts_WQ_MAX_ACTIVE: wq_consts = 512;
pub const wq_consts_WQ_UNBOUND_MAX_ACTIVE: wq_consts = 512;
pub const wq_consts_WQ_DFL_ACTIVE: wq_consts = 256;
pub const wq_consts_WQ_DFL_MIN_ACTIVE: wq_consts = 8;
pub type wq_consts = core::ffi::c_uint;
extern "C" {
    pub static mut system_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_highpri_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_long_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_unbound_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_freezable_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_power_efficient_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_freezable_power_efficient_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_bh_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_bh_highpri_wq: *mut workqueue_struct;
}
extern "C" {
    pub fn workqueue_softirq_action(highpri: bool_);
}
extern "C" {
    pub fn workqueue_softirq_dead(cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn alloc_workqueue(
        fmt: *const core::ffi::c_char,
        flags: core::ffi::c_uint,
        max_active: core::ffi::c_int,
        ...
    ) -> *mut workqueue_struct;
}
extern "C" {
    pub fn destroy_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn alloc_workqueue_attrs() -> *mut workqueue_attrs;
}
extern "C" {
    pub fn free_workqueue_attrs(attrs: *mut workqueue_attrs);
}
extern "C" {
    pub fn apply_workqueue_attrs(
        wq: *mut workqueue_struct,
        attrs: *const workqueue_attrs,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_unbound_exclude_cpumask(cpumask: *mut cpumask) -> core::ffi::c_int;
}
extern "C" {
    pub fn queue_work_on(
        cpu: core::ffi::c_int,
        wq: *mut workqueue_struct,
        work: *mut work_struct,
    ) -> bool_;
}
extern "C" {
    pub fn queue_work_node(
        node: core::ffi::c_int,
        wq: *mut workqueue_struct,
        work: *mut work_struct,
    ) -> bool_;
}
extern "C" {
    pub fn queue_delayed_work_on(
        cpu: core::ffi::c_int,
        wq: *mut workqueue_struct,
        work: *mut delayed_work,
        delay: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn mod_delayed_work_on(
        cpu: core::ffi::c_int,
        wq: *mut workqueue_struct,
        dwork: *mut delayed_work,
        delay: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn queue_rcu_work(wq: *mut workqueue_struct, rwork: *mut rcu_work) -> bool_;
}
extern "C" {
    pub fn __flush_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn drain_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn schedule_on_each_cpu(func: work_func_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn execute_in_process_context(
        fn_: work_func_t,
        arg1: *mut execute_work,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn flush_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn cancel_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn cancel_work_sync(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn flush_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn cancel_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn cancel_delayed_work_sync(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn disable_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn disable_work_sync(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn enable_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn disable_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn disable_delayed_work_sync(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn enable_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn flush_rcu_work(rwork: *mut rcu_work) -> bool_;
}
extern "C" {
    pub fn workqueue_set_max_active(wq: *mut workqueue_struct, max_active: core::ffi::c_int);
}
extern "C" {
    pub fn workqueue_set_min_active(wq: *mut workqueue_struct, min_active: core::ffi::c_int);
}
extern "C" {
    pub fn current_work() -> *mut work_struct;
}
extern "C" {
    pub fn current_is_workqueue_rescuer() -> bool_;
}
extern "C" {
    pub fn workqueue_congested(cpu: core::ffi::c_int, wq: *mut workqueue_struct) -> bool_;
}
extern "C" {
    pub fn work_busy(work: *mut work_struct) -> core::ffi::c_uint;
}
extern "C" {
    pub fn set_worker_desc(fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn print_worker_info(log_lvl: *const core::ffi::c_char, task: *mut task_struct);
}
extern "C" {
    pub fn show_all_workqueues();
}
extern "C" {
    pub fn show_freezable_workqueues();
}
extern "C" {
    pub fn show_one_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn wq_worker_comm(buf: *mut core::ffi::c_char, size: usize, task: *mut task_struct);
}
extern "C" {
    pub fn __warn_flushing_systemwide_wq();
}
extern "C" {
    pub fn work_on_cpu_key(
        cpu: core::ffi::c_int,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_long,
        >,
        arg: *mut core::ffi::c_void,
        key: *mut lock_class_key,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn work_on_cpu_safe_key(
        cpu: core::ffi::c_int,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_long,
        >,
        arg: *mut core::ffi::c_void,
        key: *mut lock_class_key,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn freeze_workqueues_begin();
}
extern "C" {
    pub fn freeze_workqueues_busy() -> bool_;
}
extern "C" {
    pub fn thaw_workqueues();
}
extern "C" {
    pub fn workqueue_sysfs_register(wq: *mut workqueue_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_online_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_offline_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_init_early();
}
extern "C" {
    pub fn workqueue_init();
}
extern "C" {
    pub fn workqueue_init_topology();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_cblist {
    pub head: *mut callback_head,
    pub tail: *mut *mut callback_head,
    pub len: core::ffi::c_long,
}
impl Default for rcu_cblist {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_segcblist {
    pub head: *mut callback_head,
    pub tails: [*mut *mut callback_head; 4usize],
    pub gp_seq: [core::ffi::c_ulong; 4usize],
    pub len: core::ffi::c_long,
    pub seglen: [core::ffi::c_long; 4usize],
    pub flags: u8_,
}
impl Default for rcu_segcblist {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn init_srcu_struct(ssp: *mut srcu_struct) -> core::ffi::c_int;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct srcu_data {
    pub srcu_lock_count: [atomic_long_t; 2usize],
    pub srcu_unlock_count: [atomic_long_t; 2usize],
    pub srcu_nmi_safety: core::ffi::c_int,
    pub __bindgen_padding_0: [u32; 7usize],
    pub lock: spinlock_t,
    pub srcu_cblist: rcu_segcblist,
    pub srcu_gp_seq_needed: core::ffi::c_ulong,
    pub srcu_gp_seq_needed_exp: core::ffi::c_ulong,
    pub srcu_cblist_invoking: bool_,
    pub delay_work: timer_list,
    pub work: work_struct,
    pub srcu_barrier_head: callback_head,
    pub mynode: *mut srcu_node,
    pub grpmask: core::ffi::c_ulong,
    pub cpu: core::ffi::c_int,
    pub ssp: *mut srcu_struct,
}
impl Default for srcu_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_node {
    pub lock: spinlock_t,
    pub srcu_have_cbs: [core::ffi::c_ulong; 4usize],
    pub srcu_data_have_cbs: [core::ffi::c_ulong; 4usize],
    pub srcu_gp_seq_needed_exp: core::ffi::c_ulong,
    pub srcu_parent: *mut srcu_node,
    pub grplo: core::ffi::c_int,
    pub grphi: core::ffi::c_int,
}
impl Default for srcu_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_usage {
    pub node: *mut srcu_node,
    pub level: [*mut srcu_node; 3usize],
    pub srcu_size_state: core::ffi::c_int,
    pub srcu_cb_mutex: mutex,
    pub lock: spinlock_t,
    pub srcu_gp_mutex: mutex,
    pub srcu_gp_seq: core::ffi::c_ulong,
    pub srcu_gp_seq_needed: core::ffi::c_ulong,
    pub srcu_gp_seq_needed_exp: core::ffi::c_ulong,
    pub srcu_gp_start: core::ffi::c_ulong,
    pub srcu_last_gp_end: core::ffi::c_ulong,
    pub srcu_size_jiffies: core::ffi::c_ulong,
    pub srcu_n_lock_retries: core::ffi::c_ulong,
    pub srcu_n_exp_nodelay: core::ffi::c_ulong,
    pub sda_is_static: bool_,
    pub srcu_barrier_seq: core::ffi::c_ulong,
    pub srcu_barrier_mutex: mutex,
    pub srcu_barrier_completion: completion,
    pub srcu_barrier_cpu_cnt: atomic_t,
    pub reschedule_jiffies: core::ffi::c_ulong,
    pub reschedule_count: core::ffi::c_ulong,
    pub work: delayed_work,
    pub srcu_ssp: *mut srcu_struct,
}
impl Default for srcu_usage {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_struct {
    pub srcu_idx: core::ffi::c_uint,
    pub sda: *mut srcu_data,
    pub dep_map: lockdep_map,
    pub srcu_sup: *mut srcu_usage,
}
impl Default for srcu_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn synchronize_srcu_expedited(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn srcu_barrier(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn srcu_torture_stats_print(
        ssp: *mut srcu_struct,
        tt: *mut core::ffi::c_char,
        tf: *mut core::ffi::c_char,
    );
}
extern "C" {
    pub fn call_srcu(
        ssp: *mut srcu_struct,
        head: *mut callback_head,
        func: ::core::option::Option<unsafe extern "C" fn(head: *mut callback_head)>,
    );
}
extern "C" {
    pub fn cleanup_srcu_struct(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn __srcu_read_lock(ssp: *mut srcu_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn __srcu_read_unlock(ssp: *mut srcu_struct, idx: core::ffi::c_int);
}
extern "C" {
    pub fn synchronize_srcu(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn get_state_synchronize_srcu(ssp: *mut srcu_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn start_poll_synchronize_srcu(ssp: *mut srcu_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn poll_state_synchronize_srcu(ssp: *mut srcu_struct, cookie: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn srcu_init();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_srcu_t {
    pub lock: *mut srcu_struct,
    pub idx: core::ffi::c_int,
}
impl Default for class_srcu_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type notifier_fn_t = ::core::option::Option<
    unsafe extern "C" fn(
        nb: *mut notifier_block,
        action: core::ffi::c_ulong,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct notifier_block {
    pub notifier_call: notifier_fn_t,
    pub next: *mut notifier_block,
    pub priority: core::ffi::c_int,
}
impl Default for notifier_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct atomic_notifier_head {
    pub lock: spinlock_t,
    pub head: *mut notifier_block,
}
impl Default for atomic_notifier_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blocking_notifier_head {
    pub rwsem: rw_semaphore,
    pub head: *mut notifier_block,
}
impl Default for blocking_notifier_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct raw_notifier_head {
    pub head: *mut notifier_block,
}
impl Default for raw_notifier_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_notifier_head {
    pub mutex: mutex,
    pub srcuu: srcu_usage,
    pub srcu: srcu_struct,
    pub head: *mut notifier_block,
}
impl Default for srcu_notifier_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn srcu_init_notifier_head(nh: *mut srcu_notifier_head);
}
extern "C" {
    pub fn atomic_notifier_chain_register(
        nh: *mut atomic_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_chain_register(
        nh: *mut blocking_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn raw_notifier_chain_register(
        nh: *mut raw_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn srcu_notifier_chain_register(
        nh: *mut srcu_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn atomic_notifier_chain_register_unique_prio(
        nh: *mut atomic_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_chain_register_unique_prio(
        nh: *mut blocking_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn atomic_notifier_chain_unregister(
        nh: *mut atomic_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_chain_unregister(
        nh: *mut blocking_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn raw_notifier_chain_unregister(
        nh: *mut raw_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn srcu_notifier_chain_unregister(
        nh: *mut srcu_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn atomic_notifier_call_chain(
        nh: *mut atomic_notifier_head,
        val: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_call_chain(
        nh: *mut blocking_notifier_head,
        val: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn raw_notifier_call_chain(
        nh: *mut raw_notifier_head,
        val: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn srcu_notifier_call_chain(
        nh: *mut srcu_notifier_head,
        val: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_call_chain_robust(
        nh: *mut blocking_notifier_head,
        val_up: core::ffi::c_ulong,
        val_down: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn raw_notifier_call_chain_robust(
        nh: *mut raw_notifier_head,
        val_up: core::ffi::c_ulong,
        val_down: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn atomic_notifier_call_chain_is_empty(nh: *mut atomic_notifier_head) -> bool_;
}
extern "C" {
    pub static mut reboot_notifier_list: blocking_notifier_head;
}
pub type uprobe_opcode_t = u8_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uprobe_xol_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arch_uprobe {
    pub __bindgen_anon_1: arch_uprobe__bindgen_ty_1,
    pub ops: *const uprobe_xol_ops,
    pub __bindgen_anon_2: arch_uprobe__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arch_uprobe__bindgen_ty_1 {
    pub insn: [u8_; 16usize],
    pub ixol: [u8_; 16usize],
}
impl Default for arch_uprobe__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arch_uprobe__bindgen_ty_2 {
    pub branch: arch_uprobe__bindgen_ty_2__bindgen_ty_1,
    pub defparam: arch_uprobe__bindgen_ty_2__bindgen_ty_2,
    pub push: arch_uprobe__bindgen_ty_2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct arch_uprobe__bindgen_ty_2__bindgen_ty_1 {
    pub offs: s32,
    pub ilen: u8_,
    pub opc1: u8_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct arch_uprobe__bindgen_ty_2__bindgen_ty_2 {
    pub fixups: u8_,
    pub ilen: u8_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct arch_uprobe__bindgen_ty_2__bindgen_ty_3 {
    pub reg_offset: u8_,
    pub ilen: u8_,
}
impl Default for arch_uprobe__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for arch_uprobe {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct arch_uprobe_task {
    pub saved_scratch_register: core::ffi::c_ulong,
    pub saved_trap_nr: core::ffi::c_uint,
    pub saved_tf: core::ffi::c_uint,
}
pub const uprobe_task_state_UTASK_RUNNING: uprobe_task_state = 0;
pub const uprobe_task_state_UTASK_SSTEP: uprobe_task_state = 1;
pub const uprobe_task_state_UTASK_SSTEP_ACK: uprobe_task_state = 2;
pub const uprobe_task_state_UTASK_SSTEP_TRAPPED: uprobe_task_state = 3;
pub type uprobe_task_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uprobe_task {
    pub state: uprobe_task_state,
    pub __bindgen_anon_1: uprobe_task__bindgen_ty_1,
    pub active_uprobe: *mut uprobe,
    pub xol_vaddr: core::ffi::c_ulong,
    pub return_instances: *mut return_instance,
    pub depth: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uprobe_task__bindgen_ty_1 {
    pub __bindgen_anon_1: uprobe_task__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: uprobe_task__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct uprobe_task__bindgen_ty_1__bindgen_ty_1 {
    pub autask: arch_uprobe_task,
    pub vaddr: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uprobe_task__bindgen_ty_1__bindgen_ty_2 {
    pub dup_xol_work: callback_head,
    pub dup_xol_addr: core::ffi::c_ulong,
}
impl Default for uprobe_task__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for uprobe_task__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for uprobe_task {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct return_instance {
    pub uprobe: *mut uprobe,
    pub func: core::ffi::c_ulong,
    pub stack: core::ffi::c_ulong,
    pub orig_ret_vaddr: core::ffi::c_ulong,
    pub chained: bool_,
    pub next: *mut return_instance,
}
impl Default for return_instance {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const rp_check_RP_CHECK_CALL: rp_check = 0;
pub const rp_check_RP_CHECK_CHAIN_CALL: rp_check = 1;
pub const rp_check_RP_CHECK_RET: rp_check = 2;
pub type rp_check = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xol_area {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uprobes_state {
    pub xol_area: *mut xol_area,
}
impl Default for uprobes_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn uprobes_init();
}
extern "C" {
    pub fn set_swbp(
        aup: *mut arch_uprobe,
        mm: *mut mm_struct,
        vaddr: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_orig_insn(
        aup: *mut arch_uprobe,
        mm: *mut mm_struct,
        vaddr: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn is_swbp_insn(insn: *mut uprobe_opcode_t) -> bool_;
}
extern "C" {
    pub fn is_trap_insn(insn: *mut uprobe_opcode_t) -> bool_;
}
extern "C" {
    pub fn uprobe_get_swbp_addr(regs: *mut pt_regs) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn uprobe_get_trap_addr(regs: *mut pt_regs) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn uprobe_write_opcode(
        auprobe: *mut arch_uprobe,
        mm: *mut mm_struct,
        vaddr: core::ffi::c_ulong,
        arg1: uprobe_opcode_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn uprobe_register(
        inode: *mut inode,
        offset: loff_t,
        uc: *mut uprobe_consumer,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn uprobe_register_refctr(
        inode: *mut inode,
        offset: loff_t,
        ref_ctr_offset: loff_t,
        uc: *mut uprobe_consumer,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn uprobe_apply(
        inode: *mut inode,
        offset: loff_t,
        uc: *mut uprobe_consumer,
        arg1: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn uprobe_unregister(inode: *mut inode, offset: loff_t, uc: *mut uprobe_consumer);
}
extern "C" {
    pub fn uprobe_mmap(vma: *mut vm_area_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn uprobe_munmap(
        vma: *mut vm_area_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn uprobe_start_dup_mmap();
}
extern "C" {
    pub fn uprobe_end_dup_mmap();
}
extern "C" {
    pub fn uprobe_dup_mmap(oldmm: *mut mm_struct, newmm: *mut mm_struct);
}
extern "C" {
    pub fn uprobe_free_utask(t: *mut task_struct);
}
extern "C" {
    pub fn uprobe_copy_process(t: *mut task_struct, flags: core::ffi::c_ulong);
}
extern "C" {
    pub fn uprobe_post_sstep_notifier(regs: *mut pt_regs) -> core::ffi::c_int;
}
extern "C" {
    pub fn uprobe_pre_sstep_notifier(regs: *mut pt_regs) -> core::ffi::c_int;
}
extern "C" {
    pub fn uprobe_notify_resume(regs: *mut pt_regs);
}
extern "C" {
    pub fn uprobe_deny_signal() -> bool_;
}
extern "C" {
    pub fn arch_uprobe_skip_sstep(aup: *mut arch_uprobe, regs: *mut pt_regs) -> bool_;
}
extern "C" {
    pub fn uprobe_clear_state(mm: *mut mm_struct);
}
extern "C" {
    pub fn arch_uprobe_analyze_insn(
        aup: *mut arch_uprobe,
        mm: *mut mm_struct,
        addr: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_uprobe_pre_xol(aup: *mut arch_uprobe, regs: *mut pt_regs) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_uprobe_post_xol(aup: *mut arch_uprobe, regs: *mut pt_regs) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_uprobe_xol_was_trapped(tsk: *mut task_struct) -> bool_;
}
extern "C" {
    pub fn arch_uprobe_exception_notify(
        self_: *mut notifier_block,
        val: core::ffi::c_ulong,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_uprobe_abort_xol(aup: *mut arch_uprobe, regs: *mut pt_regs);
}
extern "C" {
    pub fn arch_uretprobe_hijack_return_addr(
        trampoline_vaddr: core::ffi::c_ulong,
        regs: *mut pt_regs,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn arch_uretprobe_is_alive(
        ret: *mut return_instance,
        ctx: rp_check,
        regs: *mut pt_regs,
    ) -> bool_;
}
extern "C" {
    pub fn arch_uprobe_ignore(aup: *mut arch_uprobe, regs: *mut pt_regs) -> bool_;
}
extern "C" {
    pub fn arch_uprobe_copy_ixol(
        page: *mut page,
        vaddr: core::ffi::c_ulong,
        src: *mut core::ffi::c_void,
        len: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn uprobe_handle_trampoline(regs: *mut pt_regs);
}
extern "C" {
    pub fn arch_uprobe_trampoline(psize: *mut core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn uprobe_get_trampoline_vaddr() -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_latch_t {
    pub seqcount: seqcount_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_counter {
    pub lock: raw_spinlock_t,
    pub count: s64,
    pub list: list_head,
    pub counters: *mut s32,
}
impl Default for percpu_counter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut percpu_counter_batch: core::ffi::c_int;
}
extern "C" {
    pub fn __percpu_counter_init_many(
        fbc: *mut percpu_counter,
        amount: s64,
        gfp: gfp_t,
        nr_counters: u32_,
        key: *mut lock_class_key,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn percpu_counter_destroy_many(fbc: *mut percpu_counter, nr_counters: u32_);
}
extern "C" {
    pub fn percpu_counter_set(fbc: *mut percpu_counter, amount: s64);
}
extern "C" {
    pub fn percpu_counter_add_batch(fbc: *mut percpu_counter, amount: s64, batch: s32);
}
extern "C" {
    pub fn __percpu_counter_sum(fbc: *mut percpu_counter) -> s64;
}
extern "C" {
    pub fn __percpu_counter_compare(
        fbc: *mut percpu_counter,
        rhs: s64,
        batch: s32,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __percpu_counter_limited_add(
        fbc: *mut percpu_counter,
        limit: s64,
        amount: s64,
        batch: s32,
    ) -> bool_;
}
extern "C" {
    pub fn percpu_counter_sync(fbc: *mut percpu_counter);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mm_context_t {
    pub ctx_id: u64_,
    pub tlb_gen: atomic64_t,
    pub ldt_usr_sem: rw_semaphore,
    pub ldt: *mut ldt_struct,
    pub flags: core::ffi::c_ulong,
    pub lock: mutex,
    pub vdso: *mut core::ffi::c_void,
    pub vdso_image: *const vdso_image,
    pub perf_rdpmc_allowed: atomic_t,
    pub pkey_allocation_map: u16_,
    pub execute_only_pkey: s16,
}
impl Default for mm_context_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn leave_mm();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mem_cgroup {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct page {
    pub flags: core::ffi::c_ulong,
    pub __bindgen_anon_1: page__bindgen_ty_1,
    pub __bindgen_anon_2: page__bindgen_ty_2,
    pub _refcount: atomic_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1 {
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: page__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: page__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: page__bindgen_ty_1__bindgen_ty_4,
    pub callback_head: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub mapping: *mut address_space,
    pub __bindgen_anon_2: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    pub private: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub lru: list_head,
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub buddy_list: list_head,
    pub pcp_list: list_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __filler: *mut core::ffi::c_void,
    pub mlock_count: core::ffi::c_uint,
}
impl Default for page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub index: core::ffi::c_ulong,
    pub share: core::ffi::c_ulong,
}
impl Default for page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for page__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_2 {
    pub pp_magic: core::ffi::c_ulong,
    pub pp: *mut page_pool,
    pub _pp_mapping_pad: core::ffi::c_ulong,
    pub dma_addr: core::ffi::c_ulong,
    pub pp_ref_count: atomic_long_t,
}
impl Default for page__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_3 {
    pub compound_head: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_4 {
    pub pgmap: *mut dev_pagemap,
    pub zone_device_data: *mut core::ffi::c_void,
}
impl Default for page__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for page__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_2 {
    pub page_type: core::ffi::c_uint,
    pub _mapcount: atomic_t,
}
impl Default for page__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for page {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct encoded_page {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct swp_entry_t {
    pub val: core::ffi::c_ulong,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct folio {
    pub __bindgen_anon_1: folio__bindgen_ty_1,
    pub __bindgen_anon_2: folio__bindgen_ty_2,
    pub __bindgen_anon_3: folio__bindgen_ty_3,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1 {
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1,
    pub page: page,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_1__bindgen_ty_1 {
    pub flags: core::ffi::c_ulong,
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub mapping: *mut address_space,
    pub index: core::ffi::c_ulong,
    pub __bindgen_anon_2: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    pub _mapcount: atomic_t,
    pub _refcount: atomic_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub lru: list_head,
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __filler: *mut core::ffi::c_void,
    pub mlock_count: core::ffi::c_uint,
}
impl Default for folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub private: *mut core::ffi::c_void,
    pub swap: swp_entry_t,
}
impl Default for folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_2 {
    pub __bindgen_anon_1: folio__bindgen_ty_2__bindgen_ty_1,
    pub __page_1: page,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct folio__bindgen_ty_2__bindgen_ty_1 {
    pub _flags_1: core::ffi::c_ulong,
    pub _head_1: core::ffi::c_ulong,
    pub _large_mapcount: atomic_t,
    pub _entire_mapcount: atomic_t,
    pub _nr_pages_mapped: atomic_t,
    pub _pincount: atomic_t,
    pub _folio_nr_pages: core::ffi::c_uint,
}
impl Default for folio__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_3 {
    pub __bindgen_anon_1: folio__bindgen_ty_3__bindgen_ty_1,
    pub __bindgen_anon_2: folio__bindgen_ty_3__bindgen_ty_2,
    pub __page_2: page,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_3__bindgen_ty_1 {
    pub _flags_2: core::ffi::c_ulong,
    pub _head_2: core::ffi::c_ulong,
    pub _hugetlb_subpool: *mut core::ffi::c_void,
    pub _hugetlb_cgroup: *mut core::ffi::c_void,
    pub _hugetlb_cgroup_rsvd: *mut core::ffi::c_void,
    pub _hugetlb_hwpoison: *mut core::ffi::c_void,
}
impl Default for folio__bindgen_ty_3__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_3__bindgen_ty_2 {
    pub _flags_2a: core::ffi::c_ulong,
    pub _head_2a: core::ffi::c_ulong,
    pub _deferred_list: list_head,
}
impl Default for folio__bindgen_ty_3__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ptdesc {
    pub __page_flags: core::ffi::c_ulong,
    pub __bindgen_anon_1: ptdesc__bindgen_ty_1,
    pub __page_mapping: core::ffi::c_ulong,
    pub __bindgen_anon_2: ptdesc__bindgen_ty_2,
    pub __bindgen_anon_3: ptdesc__bindgen_ty_3,
    pub __page_type: core::ffi::c_uint,
    pub __page_refcount: atomic_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptdesc__bindgen_ty_1 {
    pub pt_rcu_head: callback_head,
    pub pt_list: list_head,
    pub __bindgen_anon_1: ptdesc__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ptdesc__bindgen_ty_1__bindgen_ty_1 {
    pub _pt_pad_1: core::ffi::c_ulong,
    pub pmd_huge_pte: pgtable_t,
}
impl Default for ptdesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ptdesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptdesc__bindgen_ty_2 {
    pub pt_index: core::ffi::c_ulong,
    pub pt_mm: *mut mm_struct,
    pub pt_frag_refcount: atomic_t,
}
impl Default for ptdesc__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptdesc__bindgen_ty_3 {
    pub _pt_pad_2: core::ffi::c_ulong,
    pub ptl: spinlock_t,
}
impl Default for ptdesc__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ptdesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page_frag_cache {
    pub va: *mut core::ffi::c_void,
    pub offset: __u16,
    pub size: __u16,
    pub pagecnt_bias: core::ffi::c_uint,
    pub pfmemalloc: bool_,
}
impl Default for page_frag_cache {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type vm_flags_t = core::ffi::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_region {
    pub vm_rb: rb_node,
    pub vm_flags: vm_flags_t,
    pub vm_start: core::ffi::c_ulong,
    pub vm_end: core::ffi::c_ulong,
    pub vm_top: core::ffi::c_ulong,
    pub vm_pgoff: core::ffi::c_ulong,
    pub vm_file: *mut file,
    pub vm_usage: core::ffi::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl Default for vm_region {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl vm_region {
    #[inline]
    pub fn vm_icache_flushed(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_vm_icache_flushed(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(vm_icache_flushed: bool_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let vm_icache_flushed: u8 = unsafe { ::core::mem::transmute(vm_icache_flushed) };
            vm_icache_flushed as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vm_userfaultfd_ctx {}
#[repr(C)]
#[derive(Default)]
pub struct anon_vma_name {
    pub kref: kref,
    pub name: __IncompleteArrayField<core::ffi::c_char>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vma_lock {
    pub lock: rw_semaphore,
}
impl Default for vma_lock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vma_numab_state {
    pub next_scan: core::ffi::c_ulong,
    pub pids_active_reset: core::ffi::c_ulong,
    pub pids_active: [core::ffi::c_ulong; 2usize],
    pub start_scan_seq: core::ffi::c_int,
    pub prev_scan_seq: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_area_struct {
    pub __bindgen_anon_1: vm_area_struct__bindgen_ty_1,
    pub vm_mm: *mut mm_struct,
    pub vm_page_prot: pgprot_t,
    pub __bindgen_anon_2: vm_area_struct__bindgen_ty_2,
    pub detached: bool_,
    pub vm_lock_seq: core::ffi::c_int,
    pub vm_lock: *mut vma_lock,
    pub shared: vm_area_struct__bindgen_ty_3,
    pub anon_vma_chain: list_head,
    pub anon_vma: *mut anon_vma,
    pub vm_ops: *const vm_operations_struct,
    pub vm_pgoff: core::ffi::c_ulong,
    pub vm_file: *mut file,
    pub vm_private_data: *mut core::ffi::c_void,
    pub swap_readahead_info: atomic_long_t,
    pub vm_policy: *mut mempolicy,
    pub vm_userfaultfd_ctx: vm_userfaultfd_ctx,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_area_struct__bindgen_ty_1 {
    pub __bindgen_anon_1: vm_area_struct__bindgen_ty_1__bindgen_ty_1,
    pub vm_rcu: callback_head,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vm_area_struct__bindgen_ty_1__bindgen_ty_1 {
    pub vm_start: core::ffi::c_ulong,
    pub vm_end: core::ffi::c_ulong,
}
impl Default for vm_area_struct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_area_struct__bindgen_ty_2 {
    pub vm_flags: vm_flags_t,
    pub __vm_flags: vm_flags_t,
}
impl Default for vm_area_struct__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_area_struct__bindgen_ty_3 {
    pub rb: rb_node,
    pub rb_subtree_last: core::ffi::c_ulong,
}
impl Default for vm_area_struct__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for vm_area_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mm_cid {
    pub time: u64_,
    pub cid: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kioctx_table {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iommu_mm_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(64))]
pub struct mm_struct {
    pub __bindgen_anon_1: mm_struct__bindgen_ty_1,
    pub cpu_bitmap: __IncompleteArrayField<core::ffi::c_ulong>,
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct mm_struct__bindgen_ty_1 {
    pub __bindgen_anon_1: mm_struct__bindgen_ty_1__bindgen_ty_1,
    pub mm_mt: maple_tree,
    pub mmap_base: core::ffi::c_ulong,
    pub mmap_legacy_base: core::ffi::c_ulong,
    pub mmap_compat_base: core::ffi::c_ulong,
    pub mmap_compat_legacy_base: core::ffi::c_ulong,
    pub task_size: core::ffi::c_ulong,
    pub pgd: *mut pgd_t,
    pub membarrier_state: atomic_t,
    pub mm_users: atomic_t,
    pub pcpu_cid: *mut mm_cid,
    pub mm_cid_next_scan: core::ffi::c_ulong,
    pub pgtables_bytes: atomic_long_t,
    pub map_count: core::ffi::c_int,
    pub page_table_lock: spinlock_t,
    pub mmap_lock: rw_semaphore,
    pub mmlist: list_head,
    pub mm_lock_seq: core::ffi::c_int,
    pub hiwater_rss: core::ffi::c_ulong,
    pub hiwater_vm: core::ffi::c_ulong,
    pub total_vm: core::ffi::c_ulong,
    pub locked_vm: core::ffi::c_ulong,
    pub pinned_vm: atomic64_t,
    pub data_vm: core::ffi::c_ulong,
    pub exec_vm: core::ffi::c_ulong,
    pub stack_vm: core::ffi::c_ulong,
    pub def_flags: core::ffi::c_ulong,
    pub write_protect_seq: seqcount_t,
    pub arg_lock: spinlock_t,
    pub start_code: core::ffi::c_ulong,
    pub end_code: core::ffi::c_ulong,
    pub start_data: core::ffi::c_ulong,
    pub end_data: core::ffi::c_ulong,
    pub start_brk: core::ffi::c_ulong,
    pub brk: core::ffi::c_ulong,
    pub start_stack: core::ffi::c_ulong,
    pub arg_start: core::ffi::c_ulong,
    pub arg_end: core::ffi::c_ulong,
    pub env_start: core::ffi::c_ulong,
    pub env_end: core::ffi::c_ulong,
    pub saved_auxv: [core::ffi::c_ulong; 52usize],
    pub rss_stat: [percpu_counter; 4usize],
    pub binfmt: *mut linux_binfmt,
    pub context: mm_context_t,
    pub flags: core::ffi::c_ulong,
    pub ioctx_lock: spinlock_t,
    pub ioctx_table: *mut kioctx_table,
    pub user_ns: *mut user_namespace,
    pub exe_file: *mut file,
    pub notifier_subscriptions: *mut mmu_notifier_subscriptions,
    pub tlb_flush_pending: atomic_t,
    pub tlb_flush_batched: atomic_t,
    pub uprobes_state: uprobes_state,
    pub hugetlb_usage: atomic_long_t,
    pub async_put_work: work_struct,
    pub iommu_mm: *mut iommu_mm_data,
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct mm_struct__bindgen_ty_1__bindgen_ty_1 {
    pub mm_count: atomic_t,
}
impl Default for mm_struct__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for mm_struct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for mm_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_mm: mm_struct;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vma_iterator {
    pub mas: ma_state,
}
impl Default for vma_iterator {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const mm_cid_state_MM_CID_UNSET: mm_cid_state = 4294967295;
pub const mm_cid_state_MM_CID_LAZY_PUT: mm_cid_state = 2147483648;
pub type mm_cid_state = core::ffi::c_uint;
extern "C" {
    pub fn tlb_gather_mmu(tlb: *mut mmu_gather, mm: *mut mm_struct);
}
extern "C" {
    pub fn tlb_gather_mmu_fullmm(tlb: *mut mmu_gather, mm: *mut mm_struct);
}
extern "C" {
    pub fn tlb_finish_mmu(tlb: *mut mmu_gather);
}
pub type vm_fault_t = core::ffi::c_uint;
pub const vm_fault_reason_VM_FAULT_OOM: vm_fault_reason = 1;
pub const vm_fault_reason_VM_FAULT_SIGBUS: vm_fault_reason = 2;
pub const vm_fault_reason_VM_FAULT_MAJOR: vm_fault_reason = 4;
pub const vm_fault_reason_VM_FAULT_HWPOISON: vm_fault_reason = 16;
pub const vm_fault_reason_VM_FAULT_HWPOISON_LARGE: vm_fault_reason = 32;
pub const vm_fault_reason_VM_FAULT_SIGSEGV: vm_fault_reason = 64;
pub const vm_fault_reason_VM_FAULT_NOPAGE: vm_fault_reason = 256;
pub const vm_fault_reason_VM_FAULT_LOCKED: vm_fault_reason = 512;
pub const vm_fault_reason_VM_FAULT_RETRY: vm_fault_reason = 1024;
pub const vm_fault_reason_VM_FAULT_FALLBACK: vm_fault_reason = 2048;
pub const vm_fault_reason_VM_FAULT_DONE_COW: vm_fault_reason = 4096;
pub const vm_fault_reason_VM_FAULT_NEEDDSYNC: vm_fault_reason = 8192;
pub const vm_fault_reason_VM_FAULT_COMPLETED: vm_fault_reason = 16384;
pub const vm_fault_reason_VM_FAULT_HINDEX_MASK: vm_fault_reason = 983040;
pub type vm_fault_reason = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_special_mapping {
    pub name: *const core::ffi::c_char,
    pub pages: *mut *mut page,
    pub fault: ::core::option::Option<
        unsafe extern "C" fn(
            sm: *const vm_special_mapping,
            vma: *mut vm_area_struct,
            vmf: *mut vm_fault,
        ) -> vm_fault_t,
    >,
    pub mremap: ::core::option::Option<
        unsafe extern "C" fn(
            sm: *const vm_special_mapping,
            new_vma: *mut vm_area_struct,
        ) -> core::ffi::c_int,
    >,
}
impl Default for vm_special_mapping {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const tlb_flush_reason_TLB_FLUSH_ON_TASK_SWITCH: tlb_flush_reason = 0;
pub const tlb_flush_reason_TLB_REMOTE_SHOOTDOWN: tlb_flush_reason = 1;
pub const tlb_flush_reason_TLB_LOCAL_SHOOTDOWN: tlb_flush_reason = 2;
pub const tlb_flush_reason_TLB_LOCAL_MM_SHOOTDOWN: tlb_flush_reason = 3;
pub const tlb_flush_reason_TLB_REMOTE_SEND_IPI: tlb_flush_reason = 4;
pub const tlb_flush_reason_NR_TLB_FLUSH_REASONS: tlb_flush_reason = 5;
pub type tlb_flush_reason = core::ffi::c_uint;
pub const fault_flag_FAULT_FLAG_WRITE: fault_flag = 1;
pub const fault_flag_FAULT_FLAG_MKWRITE: fault_flag = 2;
pub const fault_flag_FAULT_FLAG_ALLOW_RETRY: fault_flag = 4;
pub const fault_flag_FAULT_FLAG_RETRY_NOWAIT: fault_flag = 8;
pub const fault_flag_FAULT_FLAG_KILLABLE: fault_flag = 16;
pub const fault_flag_FAULT_FLAG_TRIED: fault_flag = 32;
pub const fault_flag_FAULT_FLAG_USER: fault_flag = 64;
pub const fault_flag_FAULT_FLAG_REMOTE: fault_flag = 128;
pub const fault_flag_FAULT_FLAG_INSTRUCTION: fault_flag = 256;
pub const fault_flag_FAULT_FLAG_INTERRUPTIBLE: fault_flag = 512;
pub const fault_flag_FAULT_FLAG_UNSHARE: fault_flag = 1024;
pub const fault_flag_FAULT_FLAG_ORIG_PTE_VALID: fault_flag = 2048;
pub const fault_flag_FAULT_FLAG_VMA_LOCK: fault_flag = 4096;
pub type fault_flag = core::ffi::c_uint;
pub type zap_flags_t = core::ffi::c_uint;
pub type cydp_t = core::ffi::c_int;
pub const FOLL_WRITE: _bindgen_ty_12 = 1;
pub const FOLL_GET: _bindgen_ty_12 = 2;
pub const FOLL_DUMP: _bindgen_ty_12 = 4;
pub const FOLL_FORCE: _bindgen_ty_12 = 8;
pub const FOLL_NOWAIT: _bindgen_ty_12 = 16;
pub const FOLL_NOFAULT: _bindgen_ty_12 = 32;
pub const FOLL_HWPOISON: _bindgen_ty_12 = 64;
pub const FOLL_ANON: _bindgen_ty_12 = 128;
pub const FOLL_LONGTERM: _bindgen_ty_12 = 256;
pub const FOLL_SPLIT_PMD: _bindgen_ty_12 = 512;
pub const FOLL_PCI_P2PDMA: _bindgen_ty_12 = 1024;
pub const FOLL_INTERRUPTIBLE: _bindgen_ty_12 = 2048;
pub const FOLL_HONOR_NUMA_FAULT: _bindgen_ty_12 = 4096;
pub type _bindgen_ty_12 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut core::ffi::c_void,
    pub iov_len: __kernel_size_t,
}
impl Default for iovec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type iov_iter_extraction_t = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kvec {
    pub iov_base: *mut core::ffi::c_void,
    pub iov_len: usize,
}
impl Default for kvec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const iter_type_ITER_UBUF: iter_type = 0;
pub const iter_type_ITER_IOVEC: iter_type = 1;
pub const iter_type_ITER_BVEC: iter_type = 2;
pub const iter_type_ITER_KVEC: iter_type = 3;
pub const iter_type_ITER_XARRAY: iter_type = 4;
pub const iter_type_ITER_DISCARD: iter_type = 5;
pub type iter_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct iov_iter_state {
    pub iov_offset: usize,
    pub count: usize,
    pub nr_segs: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iov_iter {
    pub iter_type: u8_,
    pub nofault: bool_,
    pub data_source: bool_,
    pub iov_offset: usize,
    pub __bindgen_anon_1: iov_iter__bindgen_ty_1,
    pub __bindgen_anon_2: iov_iter__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iov_iter__bindgen_ty_1 {
    pub __ubuf_iovec: iovec,
    pub __bindgen_anon_1: iov_iter__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iov_iter__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub count: usize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __iov: *const iovec,
    pub kvec: *const kvec,
    pub bvec: *const bio_vec,
    pub xarray: *mut xarray,
    pub ubuf: *mut core::ffi::c_void,
}
impl Default for iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for iov_iter__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for iov_iter__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iov_iter__bindgen_ty_2 {
    pub nr_segs: core::ffi::c_ulong,
    pub xarray_start: loff_t,
}
impl Default for iov_iter__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for iov_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn copy_page_from_iter_atomic(
        page: *mut page,
        offset: usize,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn iov_iter_advance(i: *mut iov_iter, bytes: usize);
}
extern "C" {
    pub fn iov_iter_revert(i: *mut iov_iter, bytes: usize);
}
extern "C" {
    pub fn fault_in_iov_iter_readable(i: *const iov_iter, bytes: usize) -> usize;
}
extern "C" {
    pub fn fault_in_iov_iter_writeable(i: *const iov_iter, bytes: usize) -> usize;
}
extern "C" {
    pub fn iov_iter_single_seg_count(i: *const iov_iter) -> usize;
}
extern "C" {
    pub fn copy_page_to_iter(
        page: *mut page,
        offset: usize,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn copy_page_from_iter(
        page: *mut page,
        offset: usize,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn _copy_to_iter(addr: *const core::ffi::c_void, bytes: usize, i: *mut iov_iter) -> usize;
}
extern "C" {
    pub fn _copy_from_iter(addr: *mut core::ffi::c_void, bytes: usize, i: *mut iov_iter) -> usize;
}
extern "C" {
    pub fn _copy_from_iter_nocache(
        addr: *mut core::ffi::c_void,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn copy_page_to_iter_nofault(
        page: *mut page,
        offset: core::ffi::c_uint,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn _copy_from_iter_flushcache(
        addr: *mut core::ffi::c_void,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn _copy_mc_to_iter(
        addr: *const core::ffi::c_void,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn iov_iter_zero(bytes: usize, arg1: *mut iov_iter) -> usize;
}
extern "C" {
    pub fn iov_iter_is_aligned(
        i: *const iov_iter,
        addr_mask: core::ffi::c_uint,
        len_mask: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn iov_iter_alignment(i: *const iov_iter) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn iov_iter_gap_alignment(i: *const iov_iter) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn iov_iter_init(
        i: *mut iov_iter,
        direction: core::ffi::c_uint,
        iov: *const iovec,
        nr_segs: core::ffi::c_ulong,
        count: usize,
    );
}
extern "C" {
    pub fn iov_iter_kvec(
        i: *mut iov_iter,
        direction: core::ffi::c_uint,
        kvec: *const kvec,
        nr_segs: core::ffi::c_ulong,
        count: usize,
    );
}
extern "C" {
    pub fn iov_iter_bvec(
        i: *mut iov_iter,
        direction: core::ffi::c_uint,
        bvec: *const bio_vec,
        nr_segs: core::ffi::c_ulong,
        count: usize,
    );
}
extern "C" {
    pub fn iov_iter_discard(i: *mut iov_iter, direction: core::ffi::c_uint, count: usize);
}
extern "C" {
    pub fn iov_iter_xarray(
        i: *mut iov_iter,
        direction: core::ffi::c_uint,
        xarray: *mut xarray,
        start: loff_t,
        count: usize,
    );
}
extern "C" {
    pub fn iov_iter_get_pages2(
        i: *mut iov_iter,
        pages: *mut *mut page,
        maxsize: usize,
        maxpages: core::ffi::c_uint,
        start: *mut usize,
    ) -> isize;
}
extern "C" {
    pub fn iov_iter_get_pages_alloc2(
        i: *mut iov_iter,
        pages: *mut *mut *mut page,
        maxsize: usize,
        start: *mut usize,
    ) -> isize;
}
extern "C" {
    pub fn iov_iter_npages(i: *const iov_iter, maxpages: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn iov_iter_restore(i: *mut iov_iter, state: *mut iov_iter_state);
}
extern "C" {
    pub fn dup_iter(
        new: *mut iov_iter,
        old: *mut iov_iter,
        flags: gfp_t,
    ) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn iovec_from_user(
        uvector: *const iovec,
        nr_segs: core::ffi::c_ulong,
        fast_segs: core::ffi::c_ulong,
        fast_iov: *mut iovec,
        compat: bool_,
    ) -> *mut iovec;
}
extern "C" {
    pub fn import_iovec(
        type_: core::ffi::c_int,
        uvec: *const iovec,
        nr_segs: core::ffi::c_uint,
        fast_segs: core::ffi::c_uint,
        iovp: *mut *mut iovec,
        i: *mut iov_iter,
    ) -> isize;
}
extern "C" {
    pub fn __import_iovec(
        type_: core::ffi::c_int,
        uvec: *const iovec,
        nr_segs: core::ffi::c_uint,
        fast_segs: core::ffi::c_uint,
        iovp: *mut *mut iovec,
        i: *mut iov_iter,
        compat: bool_,
    ) -> isize;
}
extern "C" {
    pub fn import_ubuf(
        type_: core::ffi::c_int,
        buf: *mut core::ffi::c_void,
        len: usize,
        i: *mut iov_iter,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn iov_iter_extract_pages(
        i: *mut iov_iter,
        pages: *mut *mut *mut page,
        maxsize: usize,
        maxpages: core::ffi::c_uint,
        extraction_flags: iov_iter_extraction_t,
        offset0: *mut usize,
    ) -> isize;
}
extern "C" {
    pub fn extract_iter_to_sg(
        iter: *mut iov_iter,
        len: usize,
        sgtable: *mut sg_table,
        sg_max: core::ffi::c_uint,
        extraction_flags: iov_iter_extraction_t,
    ) -> isize;
}
pub type __kernel_sa_family_t = core::ffi::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __kernel_sockaddr_storage__bindgen_ty_1 {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
    pub __align: *mut core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [core::ffi::c_char; 126usize],
}
impl Default for __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for __kernel_sockaddr_storage__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for __kernel_sockaddr_storage {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct proto_accept_arg {
    _unused: [u8; 0],
}
extern "C" {
    pub fn socket_seq_show(seq: *mut seq_file);
}
pub type sa_family_t = __kernel_sa_family_t;
#[repr(C)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub __bindgen_anon_1: sockaddr__bindgen_ty_1,
}
#[repr(C)]
pub struct sockaddr__bindgen_ty_1 {
    pub sa_data_min: __BindgenUnionField<[core::ffi::c_char; 14usize]>,
    pub __bindgen_anon_1: __BindgenUnionField<sockaddr__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u8; 14usize],
}
#[repr(C)]
#[derive(Default)]
pub struct sockaddr__bindgen_ty_1__bindgen_ty_1 {
    pub __empty_sa_data: sockaddr__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub sa_data: __IncompleteArrayField<core::ffi::c_char>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sockaddr__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
impl Default for sockaddr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sockaddr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct linger {
    pub l_onoff: core::ffi::c_int,
    pub l_linger: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut core::ffi::c_void,
    pub msg_namelen: core::ffi::c_int,
    pub msg_inq: core::ffi::c_int,
    pub msg_iter: iov_iter,
    pub __bindgen_anon_1: msghdr__bindgen_ty_1,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub msg_flags: core::ffi::c_uint,
    pub msg_controllen: __kernel_size_t,
    pub msg_iocb: *mut kiocb,
    pub msg_ubuf: *mut ubuf_info,
    pub sg_from_iter: ::core::option::Option<
        unsafe extern "C" fn(
            skb: *mut sk_buff,
            from: *mut iov_iter,
            length: usize,
        ) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union msghdr__bindgen_ty_1 {
    pub msg_control: *mut core::ffi::c_void,
    pub msg_control_user: *mut core::ffi::c_void,
}
impl Default for msghdr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for msghdr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl msghdr {
    #[inline]
    pub fn msg_control_is_user(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_msg_control_is_user(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn msg_get_inq(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_msg_get_inq(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        msg_control_is_user: bool_,
        msg_get_inq: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let msg_control_is_user: u8 = unsafe { ::core::mem::transmute(msg_control_is_user) };
            msg_control_is_user as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let msg_get_inq: u8 = unsafe { ::core::mem::transmute(msg_get_inq) };
            msg_get_inq as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_msghdr {
    pub msg_name: *mut core::ffi::c_void,
    pub msg_namelen: core::ffi::c_int,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: __kernel_size_t,
    pub msg_control: *mut core::ffi::c_void,
    pub msg_controllen: __kernel_size_t,
    pub msg_flags: core::ffi::c_uint,
}
impl Default for user_msghdr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmsghdr {
    pub msg_hdr: user_msghdr,
    pub msg_len: core::ffi::c_uint,
}
impl Default for mmsghdr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: __kernel_size_t,
    pub cmsg_level: core::ffi::c_int,
    pub cmsg_type: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ucred {
    pub pid: __u32,
    pub uid: __u32,
    pub gid: __u32,
}
extern "C" {
    pub fn move_addr_to_kernel(
        uaddr: *mut core::ffi::c_void,
        ulen: core::ffi::c_int,
        kaddr: *mut __kernel_sockaddr_storage,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_cmsg(
        arg1: *mut msghdr,
        level: core::ffi::c_int,
        type_: core::ffi::c_int,
        len: core::ffi::c_int,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct scm_timestamping_internal {
    pub ts: [timespec64; 3usize],
}
extern "C" {
    pub fn put_cmsg_scm_timestamping64(msg: *mut msghdr, tss: *mut scm_timestamping_internal);
}
extern "C" {
    pub fn put_cmsg_scm_timestamping(msg: *mut msghdr, tss: *mut scm_timestamping_internal);
}
extern "C" {
    pub fn __sys_recvmsg(
        fd: core::ffi::c_int,
        msg: *mut user_msghdr,
        flags: core::ffi::c_uint,
        forbid_cmsg_compat: bool_,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn __sys_sendmsg(
        fd: core::ffi::c_int,
        msg: *mut user_msghdr,
        flags: core::ffi::c_uint,
        forbid_cmsg_compat: bool_,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn __sys_recvmmsg(
        fd: core::ffi::c_int,
        mmsg: *mut mmsghdr,
        vlen: core::ffi::c_uint,
        flags: core::ffi::c_uint,
        timeout: *mut __kernel_timespec,
        timeout32: *mut old_timespec32,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_sendmmsg(
        fd: core::ffi::c_int,
        mmsg: *mut mmsghdr,
        vlen: core::ffi::c_uint,
        flags: core::ffi::c_uint,
        forbid_cmsg_compat: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_sendmsg_sock(
        sock: *mut socket,
        msg: *mut msghdr,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn __sys_recvmsg_sock(
        sock: *mut socket,
        msg: *mut msghdr,
        umsg: *mut user_msghdr,
        uaddr: *mut sockaddr,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn __copy_msghdr(
        kmsg: *mut msghdr,
        umsg: *mut user_msghdr,
        save_addr: *mut *mut sockaddr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_recvfrom(
        fd: core::ffi::c_int,
        ubuf: *mut core::ffi::c_void,
        size: usize,
        flags: core::ffi::c_uint,
        addr: *mut sockaddr,
        addr_len: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_sendto(
        fd: core::ffi::c_int,
        buff: *mut core::ffi::c_void,
        len: usize,
        flags: core::ffi::c_uint,
        addr: *mut sockaddr,
        addr_len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_accept(
        file: *mut file,
        arg: *mut proto_accept_arg,
        upeer_sockaddr: *mut sockaddr,
        upeer_addrlen: *mut core::ffi::c_int,
        flags: core::ffi::c_int,
    ) -> *mut file;
}
extern "C" {
    pub fn __sys_accept4(
        fd: core::ffi::c_int,
        upeer_sockaddr: *mut sockaddr,
        upeer_addrlen: *mut core::ffi::c_int,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_socket(
        family: core::ffi::c_int,
        type_: core::ffi::c_int,
        protocol: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_socket_file(
        family: core::ffi::c_int,
        type_: core::ffi::c_int,
        protocol: core::ffi::c_int,
    ) -> *mut file;
}
extern "C" {
    pub fn __sys_bind(
        fd: core::ffi::c_int,
        umyaddr: *mut sockaddr,
        addrlen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_bind_socket(
        sock: *mut socket,
        address: *mut __kernel_sockaddr_storage,
        addrlen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_connect_file(
        file: *mut file,
        addr: *mut __kernel_sockaddr_storage,
        addrlen: core::ffi::c_int,
        file_flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_connect(
        fd: core::ffi::c_int,
        uservaddr: *mut sockaddr,
        addrlen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_listen(fd: core::ffi::c_int, backlog: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_listen_socket(sock: *mut socket, backlog: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_getsockname(
        fd: core::ffi::c_int,
        usockaddr: *mut sockaddr,
        usockaddr_len: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_getpeername(
        fd: core::ffi::c_int,
        usockaddr: *mut sockaddr,
        usockaddr_len: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_socketpair(
        family: core::ffi::c_int,
        type_: core::ffi::c_int,
        protocol: core::ffi::c_int,
        usockvec: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_shutdown_sock(sock: *mut socket, how: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sys_shutdown(fd: core::ffi::c_int, how: core::ffi::c_int) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sync_serial_settings {
    pub clock_rate: core::ffi::c_uint,
    pub clock_type: core::ffi::c_uint,
    pub loopback: core::ffi::c_ushort,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct te1_settings {
    pub clock_rate: core::ffi::c_uint,
    pub clock_type: core::ffi::c_uint,
    pub loopback: core::ffi::c_ushort,
    pub slot_map: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct raw_hdlc_proto {
    pub encoding: core::ffi::c_ushort,
    pub parity: core::ffi::c_ushort,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fr_proto {
    pub t391: core::ffi::c_uint,
    pub t392: core::ffi::c_uint,
    pub n391: core::ffi::c_uint,
    pub n392: core::ffi::c_uint,
    pub n393: core::ffi::c_uint,
    pub lmi: core::ffi::c_ushort,
    pub dce: core::ffi::c_ushort,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fr_proto_pvc {
    pub dlci: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fr_proto_pvc_info {
    pub dlci: core::ffi::c_uint,
    pub master: [core::ffi::c_char; 16usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cisco_proto {
    pub interval: core::ffi::c_uint,
    pub timeout: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x25_hdlc_proto {
    pub dce: core::ffi::c_ushort,
    pub modulo: core::ffi::c_uint,
    pub window: core::ffi::c_uint,
    pub t1: core::ffi::c_uint,
    pub t2: core::ffi::c_uint,
    pub n2: core::ffi::c_uint,
}
pub const net_device_flags_IFF_UP: net_device_flags = 1;
pub const net_device_flags_IFF_BROADCAST: net_device_flags = 2;
pub const net_device_flags_IFF_DEBUG: net_device_flags = 4;
pub const net_device_flags_IFF_LOOPBACK: net_device_flags = 8;
pub const net_device_flags_IFF_POINTOPOINT: net_device_flags = 16;
pub const net_device_flags_IFF_NOTRAILERS: net_device_flags = 32;
pub const net_device_flags_IFF_RUNNING: net_device_flags = 64;
pub const net_device_flags_IFF_NOARP: net_device_flags = 128;
pub const net_device_flags_IFF_PROMISC: net_device_flags = 256;
pub const net_device_flags_IFF_ALLMULTI: net_device_flags = 512;
pub const net_device_flags_IFF_MASTER: net_device_flags = 1024;
pub const net_device_flags_IFF_SLAVE: net_device_flags = 2048;
pub const net_device_flags_IFF_MULTICAST: net_device_flags = 4096;
pub const net_device_flags_IFF_PORTSEL: net_device_flags = 8192;
pub const net_device_flags_IFF_AUTOMEDIA: net_device_flags = 16384;
pub const net_device_flags_IFF_DYNAMIC: net_device_flags = 32768;
pub const net_device_flags_IFF_LOWER_UP: net_device_flags = 65536;
pub const net_device_flags_IFF_DORMANT: net_device_flags = 131072;
pub const net_device_flags_IFF_ECHO: net_device_flags = 262144;
pub type net_device_flags = core::ffi::c_uint;
pub const IF_OPER_UNKNOWN: _bindgen_ty_13 = 0;
pub const IF_OPER_NOTPRESENT: _bindgen_ty_13 = 1;
pub const IF_OPER_DOWN: _bindgen_ty_13 = 2;
pub const IF_OPER_LOWERLAYERDOWN: _bindgen_ty_13 = 3;
pub const IF_OPER_TESTING: _bindgen_ty_13 = 4;
pub const IF_OPER_DORMANT: _bindgen_ty_13 = 5;
pub const IF_OPER_UP: _bindgen_ty_13 = 6;
pub type _bindgen_ty_13 = core::ffi::c_uint;
pub const IF_LINK_MODE_DEFAULT: _bindgen_ty_14 = 0;
pub const IF_LINK_MODE_DORMANT: _bindgen_ty_14 = 1;
pub const IF_LINK_MODE_TESTING: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ifmap {
    pub mem_start: core::ffi::c_ulong,
    pub mem_end: core::ffi::c_ulong,
    pub base_addr: core::ffi::c_ushort,
    pub irq: core::ffi::c_uchar,
    pub dma: core::ffi::c_uchar,
    pub port: core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_settings {
    pub type_: core::ffi::c_uint,
    pub size: core::ffi::c_uint,
    pub ifs_ifsu: if_settings__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_settings__bindgen_ty_1 {
    pub raw_hdlc: *mut raw_hdlc_proto,
    pub cisco: *mut cisco_proto,
    pub fr: *mut fr_proto,
    pub fr_pvc: *mut fr_proto_pvc,
    pub fr_pvc_info: *mut fr_proto_pvc_info,
    pub x25: *mut x25_hdlc_proto,
    pub sync: *mut sync_serial_settings,
    pub te1: *mut te1_settings,
}
impl Default for if_settings__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for if_settings {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ifreq {
    pub ifr_ifrn: ifreq__bindgen_ty_1,
    pub ifr_ifru: ifreq__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifrn_name: [core::ffi::c_char; 16usize],
}
impl Default for ifreq__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ifreq__bindgen_ty_2 {
    pub ifru_addr: __BindgenUnionField<sockaddr>,
    pub ifru_dstaddr: __BindgenUnionField<sockaddr>,
    pub ifru_broadaddr: __BindgenUnionField<sockaddr>,
    pub ifru_netmask: __BindgenUnionField<sockaddr>,
    pub ifru_hwaddr: __BindgenUnionField<sockaddr>,
    pub ifru_flags: __BindgenUnionField<core::ffi::c_short>,
    pub ifru_ivalue: __BindgenUnionField<core::ffi::c_int>,
    pub ifru_mtu: __BindgenUnionField<core::ffi::c_int>,
    pub ifru_map: __BindgenUnionField<ifmap>,
    pub ifru_slave: __BindgenUnionField<[core::ffi::c_char; 16usize]>,
    pub ifru_newname: __BindgenUnionField<[core::ffi::c_char; 16usize]>,
    pub ifru_data: __BindgenUnionField<*mut core::ffi::c_void>,
    pub ifru_settings: __BindgenUnionField<if_settings>,
    pub bindgen_union_field: [u64; 3usize],
}
impl Default for ifreq__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ifreq {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub ifc_len: core::ffi::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: *mut core::ffi::c_char,
    pub ifcu_req: *mut ifreq,
}
impl Default for ifconf__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ifconf {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_bit_key {
    pub flags: *mut core::ffi::c_void,
    pub bit_nr: core::ffi::c_int,
    pub timeout: core::ffi::c_ulong,
}
impl Default for wait_bit_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_bit_queue_entry {
    pub key: wait_bit_key,
    pub wq_entry: wait_queue_entry,
}
impl Default for wait_bit_queue_entry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wait_bit_action_f = ::core::option::Option<
    unsafe extern "C" fn(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int,
>;
extern "C" {
    pub fn __wake_up_bit(
        wq_head: *mut wait_queue_head,
        word: *mut core::ffi::c_void,
        bit: core::ffi::c_int,
    );
}
extern "C" {
    pub fn __wait_on_bit(
        wq_head: *mut wait_queue_head,
        wbq_entry: *mut wait_bit_queue_entry,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __wait_on_bit_lock(
        wq_head: *mut wait_queue_head,
        wbq_entry: *mut wait_bit_queue_entry,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wake_up_bit(word: *mut core::ffi::c_void, bit: core::ffi::c_int);
}
extern "C" {
    pub fn out_of_line_wait_on_bit(
        word: *mut core::ffi::c_void,
        arg1: core::ffi::c_int,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn out_of_line_wait_on_bit_timeout(
        word: *mut core::ffi::c_void,
        arg1: core::ffi::c_int,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn out_of_line_wait_on_bit_lock(
        word: *mut core::ffi::c_void,
        arg1: core::ffi::c_int,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_waitqueue(
        word: *mut core::ffi::c_void,
        bit: core::ffi::c_int,
    ) -> *mut wait_queue_head;
}
extern "C" {
    pub fn wait_bit_init();
}
extern "C" {
    pub fn wake_bit_function(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        sync: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_wait(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_wait_io(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_wait_timeout(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_wait_io_timeout(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn init_wait_var_entry(
        wbq_entry: *mut wait_bit_queue_entry,
        var: *mut core::ffi::c_void,
        flags: core::ffi::c_int,
    );
}
extern "C" {
    pub fn wake_up_var(var: *mut core::ffi::c_void);
}
extern "C" {
    pub fn __var_waitqueue(p: *mut core::ffi::c_void) -> *mut wait_queue_head_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_bl_head {
    pub first: *mut hlist_bl_node,
}
impl Default for hlist_bl_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_bl_node {
    pub next: *mut hlist_bl_node,
    pub pprev: *mut *mut hlist_bl_node,
}
impl Default for hlist_bl_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lockref {
    pub __bindgen_anon_1: lockref__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lockref__bindgen_ty_1 {
    pub lock_count: __u64,
    pub __bindgen_anon_1: lockref__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lockref__bindgen_ty_1__bindgen_ty_1 {
    pub lock: spinlock_t,
    pub count: core::ffi::c_int,
}
impl Default for lockref__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for lockref {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn lockref_get(arg1: *mut lockref);
}
extern "C" {
    pub fn lockref_put_return(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockref_get_not_zero(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockref_put_not_zero(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockref_put_or_lock(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockref_mark_dead(arg1: *mut lockref);
}
extern "C" {
    pub fn lockref_get_not_dead(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn full_name_hash(
        salt: *const core::ffi::c_void,
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn hashlen_string(salt: *const core::ffi::c_void, name: *const core::ffi::c_char) -> u64_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qstr {
    pub __bindgen_anon_1: qstr__bindgen_ty_1,
    pub name: *const core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qstr__bindgen_ty_1 {
    pub __bindgen_anon_1: qstr__bindgen_ty_1__bindgen_ty_1,
    pub hash_len: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qstr__bindgen_ty_1__bindgen_ty_1 {
    pub hash: u32_,
    pub len: u32_,
}
impl Default for qstr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for qstr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static empty_name: qstr;
}
extern "C" {
    pub static slash_name: qstr;
}
extern "C" {
    pub static dotdot_name: qstr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dentry {
    pub d_flags: core::ffi::c_uint,
    pub d_seq: seqcount_spinlock_t,
    pub d_hash: hlist_bl_node,
    pub d_parent: *mut dentry,
    pub d_name: qstr,
    pub d_inode: *mut inode,
    pub d_iname: [core::ffi::c_uchar; 40usize],
    pub d_op: *const dentry_operations,
    pub d_sb: *mut super_block,
    pub d_time: core::ffi::c_ulong,
    pub d_fsdata: *mut core::ffi::c_void,
    pub d_lockref: lockref,
    pub __bindgen_anon_1: dentry__bindgen_ty_1,
    pub d_sib: hlist_node,
    pub d_children: hlist_head,
    pub d_u: dentry__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dentry__bindgen_ty_1 {
    pub d_lru: list_head,
    pub d_wait: *mut wait_queue_head_t,
}
impl Default for dentry__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dentry__bindgen_ty_2 {
    pub d_alias: hlist_node,
    pub d_in_lookup_hash: hlist_bl_node,
    pub d_rcu: callback_head,
}
impl Default for dentry__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for dentry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const dentry_d_lock_class_DENTRY_D_LOCK_NORMAL: dentry_d_lock_class = 0;
pub const dentry_d_lock_class_DENTRY_D_LOCK_NESTED: dentry_d_lock_class = 1;
pub type dentry_d_lock_class = core::ffi::c_uint;
pub const d_real_type_D_REAL_DATA: d_real_type = 0;
pub const d_real_type_D_REAL_METADATA: d_real_type = 1;
pub type d_real_type = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct dentry_operations {
    pub d_revalidate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub d_weak_revalidate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub d_hash: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const dentry, arg2: *mut qstr) -> core::ffi::c_int,
    >,
    pub d_compare: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const dentry,
            arg2: core::ffi::c_uint,
            arg3: *const core::ffi::c_char,
            arg4: *const qstr,
        ) -> core::ffi::c_int,
    >,
    pub d_delete:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const dentry) -> core::ffi::c_int>,
    pub d_init: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry) -> core::ffi::c_int>,
    pub d_release: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    pub d_prune: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    pub d_iput: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut inode)>,
    pub d_dname: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut core::ffi::c_char,
            arg3: core::ffi::c_int,
        ) -> *mut core::ffi::c_char,
    >,
    pub d_automount: ::core::option::Option<unsafe extern "C" fn(arg1: *mut path) -> *mut vfsmount>,
    pub d_manage: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const path, arg2: bool_) -> core::ffi::c_int,
    >,
    pub d_real: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, type_: d_real_type) -> *mut dentry,
    >,
}
impl Default for dentry_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut rename_lock: seqlock_t;
}
extern "C" {
    pub fn d_instantiate(arg1: *mut dentry, arg2: *mut inode);
}
extern "C" {
    pub fn d_instantiate_new(arg1: *mut dentry, arg2: *mut inode);
}
extern "C" {
    pub fn __d_drop(dentry: *mut dentry);
}
extern "C" {
    pub fn d_drop(dentry: *mut dentry);
}
extern "C" {
    pub fn d_delete(arg1: *mut dentry);
}
extern "C" {
    pub fn d_set_d_op(dentry: *mut dentry, op: *const dentry_operations);
}
extern "C" {
    pub fn d_alloc(arg1: *mut dentry, arg2: *const qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_alloc_anon(arg1: *mut super_block) -> *mut dentry;
}
extern "C" {
    pub fn d_alloc_parallel(
        arg1: *mut dentry,
        arg2: *const qstr,
        arg3: *mut wait_queue_head_t,
    ) -> *mut dentry;
}
extern "C" {
    pub fn d_splice_alias(arg1: *mut inode, arg2: *mut dentry) -> *mut dentry;
}
extern "C" {
    pub fn d_add_ci(arg1: *mut dentry, arg2: *mut inode, arg3: *mut qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_same_name(dentry: *const dentry, parent: *const dentry, name: *const qstr) -> bool_;
}
extern "C" {
    pub fn d_exact_alias(arg1: *mut dentry, arg2: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_find_any_alias(inode: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_obtain_alias(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_obtain_root(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn shrink_dcache_sb(arg1: *mut super_block);
}
extern "C" {
    pub fn shrink_dcache_parent(arg1: *mut dentry);
}
extern "C" {
    pub fn d_invalidate(arg1: *mut dentry);
}
extern "C" {
    pub fn d_make_root(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_mark_tmpfile(arg1: *mut file, arg2: *mut inode);
}
extern "C" {
    pub fn d_tmpfile(arg1: *mut file, arg2: *mut inode);
}
extern "C" {
    pub fn d_find_alias(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_prune_aliases(arg1: *mut inode);
}
extern "C" {
    pub fn d_find_alias_rcu(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn path_has_submounts(arg1: *const path) -> core::ffi::c_int;
}
extern "C" {
    pub fn d_rehash(arg1: *mut dentry);
}
extern "C" {
    pub fn d_add(arg1: *mut dentry, arg2: *mut inode);
}
extern "C" {
    pub fn d_move(arg1: *mut dentry, arg2: *mut dentry);
}
extern "C" {
    pub fn d_exchange(arg1: *mut dentry, arg2: *mut dentry);
}
extern "C" {
    pub fn d_ancestor(arg1: *mut dentry, arg2: *mut dentry) -> *mut dentry;
}
extern "C" {
    pub fn d_lookup(arg1: *const dentry, arg2: *const qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_hash_and_lookup(arg1: *mut dentry, arg2: *mut qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_parent_ino(dentry: *mut dentry) -> ino_t;
}
extern "C" {
    pub fn dynamic_dname(
        arg1: *mut core::ffi::c_char,
        arg2: core::ffi::c_int,
        arg3: *const core::ffi::c_char,
        ...
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn __d_path(
        arg1: *const path,
        arg2: *const path,
        arg3: *mut core::ffi::c_char,
        arg4: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn d_absolute_path(
        arg1: *const path,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn d_path(
        arg1: *const path,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn dentry_path_raw(
        arg1: *const dentry,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn dentry_path(
        arg1: *const dentry,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn dget_parent(dentry: *mut dentry) -> *mut dentry;
}
extern "C" {
    pub fn __d_lookup_unhash_wake(dentry: *mut dentry);
}
extern "C" {
    pub fn dput(arg1: *mut dentry);
}
extern "C" {
    pub static mut sysctl_vfs_cache_pressure: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct name_snapshot {
    pub name: qstr,
    pub inline_name: [core::ffi::c_uchar; 40usize],
}
impl Default for name_snapshot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn take_dentry_name_snapshot(arg1: *mut name_snapshot, arg2: *mut dentry);
}
extern "C" {
    pub fn release_dentry_name_snapshot(arg1: *mut name_snapshot);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct path {
    pub mnt: *mut vfsmount,
    pub dentry: *mut dentry,
}
impl Default for path {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn path_get(arg1: *const path);
}
extern "C" {
    pub fn path_put(arg1: *const path);
}
extern "C" {
    pub static mut nr_irqs: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irq_desc {
    _unused: [u8; 0],
}
extern "C" {
    pub fn irq_to_desc(irq: core::ffi::c_uint) -> *mut irq_desc;
}
extern "C" {
    pub fn irq_get_next_irq(offset: core::ffi::c_uint) -> core::ffi::c_uint;
}
#[repr(C)]
#[derive(Default)]
pub struct rand_pool_info {
    pub entropy_count: core::ffi::c_int,
    pub buf_size: core::ffi::c_int,
    pub buf: __IncompleteArrayField<__u32>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vgetrandom_opaque_params {
    pub size_of_opaque_state: __u32,
    pub mmap_prot: __u32,
    pub mmap_flags: __u32,
    pub reserved: [__u32; 13usize],
}
extern "C" {
    pub fn add_device_randomness(buf: *const core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn add_bootloader_randomness(buf: *const core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn add_input_randomness(
        type_: core::ffi::c_uint,
        code: core::ffi::c_uint,
        value: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn add_interrupt_randomness(irq: core::ffi::c_int);
}
extern "C" {
    pub fn add_hwgenerator_randomness(
        buf: *const core::ffi::c_void,
        len: usize,
        entropy: usize,
        sleep_after: bool_,
    );
}
extern "C" {
    pub fn get_random_bytes(buf: *mut core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn get_random_u8() -> u8_;
}
extern "C" {
    pub fn get_random_u16() -> u16_;
}
extern "C" {
    pub fn get_random_u32() -> u32_;
}
extern "C" {
    pub fn get_random_u64() -> u64_;
}
extern "C" {
    pub fn __get_random_u32_below(ceil: u32_) -> u32_;
}
extern "C" {
    pub fn random_init_early(command_line: *const core::ffi::c_char);
}
extern "C" {
    pub fn random_init();
}
extern "C" {
    pub fn rng_is_initialized() -> bool_;
}
extern "C" {
    pub fn wait_for_random_bytes() -> core::ffi::c_int;
}
extern "C" {
    pub fn execute_with_initialized_rng(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn __do_once_start(done: *mut bool_, flags: *mut core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn __do_once_done(
        done: *mut bool_,
        once_key: *mut static_key_true,
        flags: *mut core::ffi::c_ulong,
        mod_: *mut module,
    );
}
extern "C" {
    pub fn __do_once_sleepable_start(done: *mut bool_) -> bool_;
}
extern "C" {
    pub fn __do_once_sleepable_done(
        done: *mut bool_,
        once_key: *mut static_key_true,
        mod_: *mut module,
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rnd_state {
    pub s1: __u32,
    pub s2: __u32,
    pub s3: __u32,
    pub s4: __u32,
}
extern "C" {
    pub fn prandom_u32_state(state: *mut rnd_state) -> u32_;
}
extern "C" {
    pub fn prandom_bytes_state(state: *mut rnd_state, buf: *mut core::ffi::c_void, nbytes: usize);
}
extern "C" {
    pub fn prandom_seed_full_state(pcpu_state: *mut rnd_state);
}
extern "C" {
    pub fn random_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn random_online_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub static mut _unused_nodemask_arg_: nodemask_t;
}
pub const node_states_N_POSSIBLE: node_states = 0;
pub const node_states_N_ONLINE: node_states = 1;
pub const node_states_N_NORMAL_MEMORY: node_states = 2;
pub const node_states_N_HIGH_MEMORY: node_states = 2;
pub const node_states_N_MEMORY: node_states = 3;
pub const node_states_N_CPU: node_states = 4;
pub const node_states_N_GENERIC_INITIATOR: node_states = 5;
pub const node_states_NR_NODE_STATES: node_states = 6;
pub type node_states = core::ffi::c_uint;
extern "C" {
    pub static mut node_states: [nodemask_t; 6usize];
}
extern "C" {
    pub static mut nr_node_ids: core::ffi::c_uint;
}
extern "C" {
    pub static mut nr_online_nodes: core::ffi::c_uint;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nodemask_scratch {
    pub mask1: nodemask_t,
    pub mask2: nodemask_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shrinker_info_unit {
    pub nr_deferred: [atomic_long_t; 64usize],
    pub map: [core::ffi::c_ulong; 1usize],
}
impl Default for shrinker_info_unit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct shrinker_info {
    pub rcu: callback_head,
    pub map_nr_max: core::ffi::c_int,
    pub unit: __IncompleteArrayField<*mut shrinker_info_unit>,
}
impl Default for shrinker_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shrink_control {
    pub gfp_mask: gfp_t,
    pub nid: core::ffi::c_int,
    pub nr_to_scan: core::ffi::c_ulong,
    pub nr_scanned: core::ffi::c_ulong,
    pub memcg: *mut mem_cgroup,
}
impl Default for shrink_control {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shrinker {
    pub count_objects: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut shrinker, sc: *mut shrink_control) -> core::ffi::c_ulong,
    >,
    pub scan_objects: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut shrinker, sc: *mut shrink_control) -> core::ffi::c_ulong,
    >,
    pub batch: core::ffi::c_long,
    pub seeks: core::ffi::c_int,
    pub flags: core::ffi::c_uint,
    pub refcount: refcount_t,
    pub done: completion,
    pub rcu: callback_head,
    pub private_data: *mut core::ffi::c_void,
    pub list: list_head,
    pub nr_deferred: *mut atomic_long_t,
}
impl Default for shrinker {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn shrinker_alloc(
        flags: core::ffi::c_uint,
        fmt: *const core::ffi::c_char,
        ...
    ) -> *mut shrinker;
}
extern "C" {
    pub fn shrinker_register(shrinker: *mut shrinker);
}
extern "C" {
    pub fn shrinker_free(shrinker: *mut shrinker);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_nulls_head {
    pub first: *mut hlist_nulls_node,
}
impl Default for hlist_nulls_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_nulls_node {
    pub next: *mut hlist_nulls_node,
    pub pprev: *mut *mut hlist_nulls_node,
}
impl Default for hlist_nulls_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const pageblock_bits_PB_migrate: pageblock_bits = 0;
pub const pageblock_bits_PB_migrate_end: pageblock_bits = 2;
pub const pageblock_bits_PB_migrate_skip: pageblock_bits = 3;
pub const pageblock_bits_NR_PAGEBLOCK_BITS: pageblock_bits = 4;
pub type pageblock_bits = core::ffi::c_uint;
extern "C" {
    pub fn get_pfnblock_flags_mask(
        page: *const page,
        pfn: core::ffi::c_ulong,
        mask: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn set_pfnblock_flags_mask(
        page: *mut page,
        flags: core::ffi::c_ulong,
        pfn: core::ffi::c_ulong,
        mask: core::ffi::c_ulong,
    );
}
pub const pageflags_PG_locked: pageflags = 0;
pub const pageflags_PG_writeback: pageflags = 1;
pub const pageflags_PG_referenced: pageflags = 2;
pub const pageflags_PG_uptodate: pageflags = 3;
pub const pageflags_PG_dirty: pageflags = 4;
pub const pageflags_PG_lru: pageflags = 5;
pub const pageflags_PG_head: pageflags = 6;
pub const pageflags_PG_waiters: pageflags = 7;
pub const pageflags_PG_active: pageflags = 8;
pub const pageflags_PG_workingset: pageflags = 9;
pub const pageflags_PG_error: pageflags = 10;
pub const pageflags_PG_owner_priv_1: pageflags = 11;
pub const pageflags_PG_arch_1: pageflags = 12;
pub const pageflags_PG_reserved: pageflags = 13;
pub const pageflags_PG_private: pageflags = 14;
pub const pageflags_PG_private_2: pageflags = 15;
pub const pageflags_PG_mappedtodisk: pageflags = 16;
pub const pageflags_PG_reclaim: pageflags = 17;
pub const pageflags_PG_swapbacked: pageflags = 18;
pub const pageflags_PG_unevictable: pageflags = 19;
pub const pageflags_PG_mlocked: pageflags = 20;
pub const pageflags_PG_uncached: pageflags = 21;
pub const pageflags___NR_PAGEFLAGS: pageflags = 22;
pub const pageflags_PG_readahead: pageflags = 17;
pub const pageflags_PG_anon_exclusive: pageflags = 16;
pub const pageflags_PG_checked: pageflags = 11;
pub const pageflags_PG_swapcache: pageflags = 11;
pub const pageflags_PG_fscache: pageflags = 15;
pub const pageflags_PG_pinned: pageflags = 11;
pub const pageflags_PG_savepinned: pageflags = 4;
pub const pageflags_PG_foreign: pageflags = 11;
pub const pageflags_PG_xen_remapped: pageflags = 11;
pub const pageflags_PG_isolated: pageflags = 17;
pub const pageflags_PG_reported: pageflags = 3;
pub const pageflags_PG_has_hwpoisoned: pageflags = 10;
pub const pageflags_PG_large_rmappable: pageflags = 9;
pub type pageflags = core::ffi::c_uint;
extern "C" {
    pub static mut hugetlb_optimize_vmemmap_key: static_key_false;
}
extern "C" {
    pub fn stable_page_flags(page: *const page) -> u64_;
}
extern "C" {
    pub fn __folio_start_writeback(folio: *mut folio, keep_write: bool_);
}
extern "C" {
    pub fn set_page_writeback(page: *mut page);
}
pub const pagetype_PG_buddy: pagetype = 1073741824;
pub const pagetype_PG_offline: pagetype = 536870912;
pub const pagetype_PG_table: pagetype = 268435456;
pub const pagetype_PG_guard: pagetype = 134217728;
pub const pagetype_PG_hugetlb: pagetype = 67108864;
pub const pagetype_PG_slab: pagetype = 33554432;
pub const pagetype_PG_zsmalloc: pagetype = 16777216;
pub const pagetype_PAGE_TYPE_BASE: pagetype = 2147483648;
pub const pagetype_PAGE_MAPCOUNT_RESERVE: pagetype = -65536;
pub type pagetype = core::ffi::c_long;
extern "C" {
    pub fn page_offline_freeze();
}
extern "C" {
    pub fn page_offline_thaw();
}
extern "C" {
    pub fn page_offline_begin();
}
extern "C" {
    pub fn page_offline_end();
}
extern "C" {
    pub fn is_free_buddy_page(page: *const page) -> bool_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct local_lock_t {}
pub type class_local_lock_t = *mut local_lock_t;
pub type class_local_lock_irq_t = *mut local_lock_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_local_lock_irqsave_t {
    pub lock: *mut local_lock_t,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_local_lock_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_local_lock_nested_bh_t = *mut local_lock_t;
extern "C" {
    pub static mut zswap_stored_pages: atomic_t;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct zswap_lruvec_state {}
pub const migratetype_MIGRATE_UNMOVABLE: migratetype = 0;
pub const migratetype_MIGRATE_MOVABLE: migratetype = 1;
pub const migratetype_MIGRATE_RECLAIMABLE: migratetype = 2;
pub const migratetype_MIGRATE_PCPTYPES: migratetype = 3;
pub const migratetype_MIGRATE_HIGHATOMIC: migratetype = 3;
pub const migratetype_MIGRATE_TYPES: migratetype = 4;
pub type migratetype = core::ffi::c_uint;
extern "C" {
    pub static migratetype_names: [*const core::ffi::c_char; 4usize];
}
extern "C" {
    pub static mut page_group_by_mobility_disabled: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct free_area {
    pub free_list: [list_head; 4usize],
    pub nr_free: core::ffi::c_ulong,
}
impl Default for free_area {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const numa_stat_item_NUMA_HIT: numa_stat_item = 0;
pub const numa_stat_item_NUMA_MISS: numa_stat_item = 1;
pub const numa_stat_item_NUMA_FOREIGN: numa_stat_item = 2;
pub const numa_stat_item_NUMA_INTERLEAVE_HIT: numa_stat_item = 3;
pub const numa_stat_item_NUMA_LOCAL: numa_stat_item = 4;
pub const numa_stat_item_NUMA_OTHER: numa_stat_item = 5;
pub const numa_stat_item_NR_VM_NUMA_EVENT_ITEMS: numa_stat_item = 6;
pub type numa_stat_item = core::ffi::c_uint;
pub const zone_stat_item_NR_FREE_PAGES: zone_stat_item = 0;
pub const zone_stat_item_NR_ZONE_LRU_BASE: zone_stat_item = 1;
pub const zone_stat_item_NR_ZONE_INACTIVE_ANON: zone_stat_item = 1;
pub const zone_stat_item_NR_ZONE_ACTIVE_ANON: zone_stat_item = 2;
pub const zone_stat_item_NR_ZONE_INACTIVE_FILE: zone_stat_item = 3;
pub const zone_stat_item_NR_ZONE_ACTIVE_FILE: zone_stat_item = 4;
pub const zone_stat_item_NR_ZONE_UNEVICTABLE: zone_stat_item = 5;
pub const zone_stat_item_NR_ZONE_WRITE_PENDING: zone_stat_item = 6;
pub const zone_stat_item_NR_MLOCK: zone_stat_item = 7;
pub const zone_stat_item_NR_BOUNCE: zone_stat_item = 8;
pub const zone_stat_item_NR_FREE_CMA_PAGES: zone_stat_item = 9;
pub const zone_stat_item_NR_VM_ZONE_STAT_ITEMS: zone_stat_item = 10;
pub type zone_stat_item = core::ffi::c_uint;
pub const node_stat_item_NR_LRU_BASE: node_stat_item = 0;
pub const node_stat_item_NR_INACTIVE_ANON: node_stat_item = 0;
pub const node_stat_item_NR_ACTIVE_ANON: node_stat_item = 1;
pub const node_stat_item_NR_INACTIVE_FILE: node_stat_item = 2;
pub const node_stat_item_NR_ACTIVE_FILE: node_stat_item = 3;
pub const node_stat_item_NR_UNEVICTABLE: node_stat_item = 4;
pub const node_stat_item_NR_SLAB_RECLAIMABLE_B: node_stat_item = 5;
pub const node_stat_item_NR_SLAB_UNRECLAIMABLE_B: node_stat_item = 6;
pub const node_stat_item_NR_ISOLATED_ANON: node_stat_item = 7;
pub const node_stat_item_NR_ISOLATED_FILE: node_stat_item = 8;
pub const node_stat_item_WORKINGSET_NODES: node_stat_item = 9;
pub const node_stat_item_WORKINGSET_REFAULT_BASE: node_stat_item = 10;
pub const node_stat_item_WORKINGSET_REFAULT_ANON: node_stat_item = 10;
pub const node_stat_item_WORKINGSET_REFAULT_FILE: node_stat_item = 11;
pub const node_stat_item_WORKINGSET_ACTIVATE_BASE: node_stat_item = 12;
pub const node_stat_item_WORKINGSET_ACTIVATE_ANON: node_stat_item = 12;
pub const node_stat_item_WORKINGSET_ACTIVATE_FILE: node_stat_item = 13;
pub const node_stat_item_WORKINGSET_RESTORE_BASE: node_stat_item = 14;
pub const node_stat_item_WORKINGSET_RESTORE_ANON: node_stat_item = 14;
pub const node_stat_item_WORKINGSET_RESTORE_FILE: node_stat_item = 15;
pub const node_stat_item_WORKINGSET_NODERECLAIM: node_stat_item = 16;
pub const node_stat_item_NR_ANON_MAPPED: node_stat_item = 17;
pub const node_stat_item_NR_FILE_MAPPED: node_stat_item = 18;
pub const node_stat_item_NR_FILE_PAGES: node_stat_item = 19;
pub const node_stat_item_NR_FILE_DIRTY: node_stat_item = 20;
pub const node_stat_item_NR_WRITEBACK: node_stat_item = 21;
pub const node_stat_item_NR_WRITEBACK_TEMP: node_stat_item = 22;
pub const node_stat_item_NR_SHMEM: node_stat_item = 23;
pub const node_stat_item_NR_SHMEM_THPS: node_stat_item = 24;
pub const node_stat_item_NR_SHMEM_PMDMAPPED: node_stat_item = 25;
pub const node_stat_item_NR_FILE_THPS: node_stat_item = 26;
pub const node_stat_item_NR_FILE_PMDMAPPED: node_stat_item = 27;
pub const node_stat_item_NR_ANON_THPS: node_stat_item = 28;
pub const node_stat_item_NR_VMSCAN_WRITE: node_stat_item = 29;
pub const node_stat_item_NR_VMSCAN_IMMEDIATE: node_stat_item = 30;
pub const node_stat_item_NR_DIRTIED: node_stat_item = 31;
pub const node_stat_item_NR_WRITTEN: node_stat_item = 32;
pub const node_stat_item_NR_THROTTLED_WRITTEN: node_stat_item = 33;
pub const node_stat_item_NR_KERNEL_MISC_RECLAIMABLE: node_stat_item = 34;
pub const node_stat_item_NR_FOLL_PIN_ACQUIRED: node_stat_item = 35;
pub const node_stat_item_NR_FOLL_PIN_RELEASED: node_stat_item = 36;
pub const node_stat_item_NR_KERNEL_STACK_KB: node_stat_item = 37;
pub const node_stat_item_NR_PAGETABLE: node_stat_item = 38;
pub const node_stat_item_NR_SECONDARY_PAGETABLE: node_stat_item = 39;
pub const node_stat_item_NR_IOMMU_PAGES: node_stat_item = 40;
pub const node_stat_item_NR_SWAPCACHE: node_stat_item = 41;
pub const node_stat_item_PGDEMOTE_KSWAPD: node_stat_item = 42;
pub const node_stat_item_PGDEMOTE_DIRECT: node_stat_item = 43;
pub const node_stat_item_PGDEMOTE_KHUGEPAGED: node_stat_item = 44;
pub const node_stat_item_NR_MEMMAP: node_stat_item = 45;
pub const node_stat_item_NR_MEMMAP_BOOT: node_stat_item = 46;
pub const node_stat_item_NR_VM_NODE_STAT_ITEMS: node_stat_item = 47;
pub type node_stat_item = core::ffi::c_uint;
pub const lru_list_LRU_INACTIVE_ANON: lru_list = 0;
pub const lru_list_LRU_ACTIVE_ANON: lru_list = 1;
pub const lru_list_LRU_INACTIVE_FILE: lru_list = 2;
pub const lru_list_LRU_ACTIVE_FILE: lru_list = 3;
pub const lru_list_LRU_UNEVICTABLE: lru_list = 4;
pub const lru_list_NR_LRU_LISTS: lru_list = 5;
pub type lru_list = core::ffi::c_uint;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_WRITEBACK: vmscan_throttle_state = 0;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_ISOLATED: vmscan_throttle_state = 1;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_NOPROGRESS: vmscan_throttle_state = 2;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_CONGESTED: vmscan_throttle_state = 3;
pub const vmscan_throttle_state_NR_VMSCAN_THROTTLE: vmscan_throttle_state = 4;
pub type vmscan_throttle_state = core::ffi::c_uint;
pub const lruvec_flags_LRUVEC_CGROUP_CONGESTED: lruvec_flags = 0;
pub const lruvec_flags_LRUVEC_NODE_CONGESTED: lruvec_flags = 1;
pub type lruvec_flags = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page_vma_mapped_walk {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lruvec {
    pub lists: [list_head; 5usize],
    pub lru_lock: spinlock_t,
    pub anon_cost: core::ffi::c_ulong,
    pub file_cost: core::ffi::c_ulong,
    pub nonresident_age: atomic_long_t,
    pub refaults: [core::ffi::c_ulong; 2usize],
    pub flags: core::ffi::c_ulong,
    pub zswap_lruvec_state: zswap_lruvec_state,
}
impl Default for lruvec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type isolate_mode_t = core::ffi::c_uint;
pub const zone_watermarks_WMARK_MIN: zone_watermarks = 0;
pub const zone_watermarks_WMARK_LOW: zone_watermarks = 1;
pub const zone_watermarks_WMARK_HIGH: zone_watermarks = 2;
pub const zone_watermarks_WMARK_PROMO: zone_watermarks = 3;
pub const zone_watermarks_NR_WMARK: zone_watermarks = 4;
pub type zone_watermarks = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct per_cpu_pages {
    pub lock: spinlock_t,
    pub count: core::ffi::c_int,
    pub high: core::ffi::c_int,
    pub high_min: core::ffi::c_int,
    pub high_max: core::ffi::c_int,
    pub batch: core::ffi::c_int,
    pub flags: u8_,
    pub alloc_factor: u8_,
    pub expire: u8_,
    pub free_count: core::ffi::c_short,
    pub lists: [list_head; 12usize],
}
impl Default for per_cpu_pages {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct per_cpu_zonestat {
    pub vm_stat_diff: [s8; 10usize],
    pub stat_threshold: s8,
    pub vm_numa_event: [core::ffi::c_ulong; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct per_cpu_nodestat {
    pub stat_threshold: s8,
    pub vm_node_stat_diff: [s8; 47usize],
}
impl Default for per_cpu_nodestat {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const zone_type_ZONE_DMA: zone_type = 0;
pub const zone_type_ZONE_DMA32: zone_type = 1;
pub const zone_type_ZONE_NORMAL: zone_type = 2;
pub const zone_type_ZONE_MOVABLE: zone_type = 3;
pub const zone_type___MAX_NR_ZONES: zone_type = 4;
pub type zone_type = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
pub struct zone {
    pub _watermark: [core::ffi::c_ulong; 4usize],
    pub watermark_boost: core::ffi::c_ulong,
    pub nr_reserved_highatomic: core::ffi::c_ulong,
    pub lowmem_reserve: [core::ffi::c_long; 4usize],
    pub node: core::ffi::c_int,
    pub zone_pgdat: *mut pglist_data,
    pub per_cpu_pageset: *mut per_cpu_pages,
    pub per_cpu_zonestats: *mut per_cpu_zonestat,
    pub pageset_high_min: core::ffi::c_int,
    pub pageset_high_max: core::ffi::c_int,
    pub pageset_batch: core::ffi::c_int,
    pub zone_start_pfn: core::ffi::c_ulong,
    pub managed_pages: atomic_long_t,
    pub spanned_pages: core::ffi::c_ulong,
    pub present_pages: core::ffi::c_ulong,
    pub name: *const core::ffi::c_char,
    pub initialized: core::ffi::c_int,
    pub __bindgen_padding_0: [u64; 2usize],
    pub _pad1_: cacheline_padding,
    pub free_area: [free_area; 11usize],
    pub flags: core::ffi::c_ulong,
    pub lock: spinlock_t,
    pub __bindgen_padding_1: [u64; 3usize],
    pub _pad2_: cacheline_padding,
    pub percpu_drift_mark: core::ffi::c_ulong,
    pub compact_cached_free_pfn: core::ffi::c_ulong,
    pub compact_cached_migrate_pfn: [core::ffi::c_ulong; 2usize],
    pub compact_init_migrate_pfn: core::ffi::c_ulong,
    pub compact_init_free_pfn: core::ffi::c_ulong,
    pub compact_considered: core::ffi::c_uint,
    pub compact_defer_shift: core::ffi::c_uint,
    pub compact_order_failed: core::ffi::c_int,
    pub compact_blockskip_flush: bool_,
    pub contiguous: bool_,
    pub __bindgen_padding_2: [u64; 0usize],
    pub _pad3_: cacheline_padding,
    pub vm_stat: [atomic_long_t; 10usize],
    pub vm_numa_event: [atomic_long_t; 6usize],
}
impl Default for zone {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const pgdat_flags_PGDAT_DIRTY: pgdat_flags = 0;
pub const pgdat_flags_PGDAT_WRITEBACK: pgdat_flags = 1;
pub const pgdat_flags_PGDAT_RECLAIM_LOCKED: pgdat_flags = 2;
pub type pgdat_flags = core::ffi::c_uint;
pub const zone_flags_ZONE_BOOSTED_WATERMARK: zone_flags = 0;
pub const zone_flags_ZONE_RECLAIM_ACTIVE: zone_flags = 1;
pub const zone_flags_ZONE_BELOW_HIGH: zone_flags = 2;
pub type zone_flags = core::ffi::c_uint;
pub const ZONELIST_FALLBACK: _bindgen_ty_15 = 0;
pub const ZONELIST_NOFALLBACK: _bindgen_ty_15 = 1;
pub const MAX_ZONELISTS: _bindgen_ty_15 = 2;
pub type _bindgen_ty_15 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zoneref {
    pub zone: *mut zone,
    pub zone_idx: core::ffi::c_int,
}
impl Default for zoneref {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zonelist {
    pub _zonerefs: [zoneref; 257usize],
}
impl Default for zonelist {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut mem_map: *mut page;
}
#[repr(C)]
#[repr(align(64))]
pub struct pglist_data {
    pub node_zones: [zone; 4usize],
    pub node_zonelists: [zonelist; 2usize],
    pub nr_zones: core::ffi::c_int,
    pub node_start_pfn: core::ffi::c_ulong,
    pub node_present_pages: core::ffi::c_ulong,
    pub node_spanned_pages: core::ffi::c_ulong,
    pub node_id: core::ffi::c_int,
    pub kswapd_wait: wait_queue_head_t,
    pub pfmemalloc_wait: wait_queue_head_t,
    pub reclaim_wait: [wait_queue_head_t; 4usize],
    pub nr_writeback_throttled: atomic_t,
    pub nr_reclaim_start: core::ffi::c_ulong,
    pub kswapd: *mut task_struct,
    pub kswapd_order: core::ffi::c_int,
    pub kswapd_highest_zoneidx: zone_type,
    pub kswapd_failures: core::ffi::c_int,
    pub kcompactd_max_order: core::ffi::c_int,
    pub kcompactd_highest_zoneidx: zone_type,
    pub kcompactd_wait: wait_queue_head_t,
    pub kcompactd: *mut task_struct,
    pub proactive_compact_trigger: bool_,
    pub totalreserve_pages: core::ffi::c_ulong,
    pub min_unmapped_pages: core::ffi::c_ulong,
    pub min_slab_pages: core::ffi::c_ulong,
    pub __bindgen_padding_0: [u64; 7usize],
    pub _pad1_: cacheline_padding,
    pub __lruvec: lruvec,
    pub flags: core::ffi::c_ulong,
    pub __bindgen_padding_1: [u64; 6usize],
    pub _pad2_: cacheline_padding,
    pub per_cpu_nodestats: *mut per_cpu_nodestat,
    pub vm_stat: [atomic_long_t; 47usize],
    pub memtier: *mut memory_tier,
}
impl Default for pglist_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pg_data_t = pglist_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct memory_group {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut node_data: [*mut pg_data_t; 0usize];
}
extern "C" {
    pub fn arch_get_mappable_range() -> range;
}
extern "C" {
    pub fn build_all_zonelists(pgdat: *mut pg_data_t);
}
extern "C" {
    pub fn wakeup_kswapd(
        zone: *mut zone,
        gfp_mask: gfp_t,
        order: core::ffi::c_int,
        highest_zoneidx: zone_type,
    );
}
extern "C" {
    pub fn __zone_watermark_ok(
        z: *mut zone,
        order: core::ffi::c_uint,
        mark: core::ffi::c_ulong,
        highest_zoneidx: core::ffi::c_int,
        alloc_flags: core::ffi::c_uint,
        free_pages: core::ffi::c_long,
    ) -> bool_;
}
extern "C" {
    pub fn zone_watermark_ok(
        z: *mut zone,
        order: core::ffi::c_uint,
        mark: core::ffi::c_ulong,
        highest_zoneidx: core::ffi::c_int,
        alloc_flags: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn zone_watermark_ok_safe(
        z: *mut zone,
        order: core::ffi::c_uint,
        mark: core::ffi::c_ulong,
        highest_zoneidx: core::ffi::c_int,
    ) -> bool_;
}
pub const meminit_context_MEMINIT_EARLY: meminit_context = 0;
pub const meminit_context_MEMINIT_HOTPLUG: meminit_context = 1;
pub type meminit_context = core::ffi::c_uint;
extern "C" {
    pub fn init_currently_empty_zone(
        zone: *mut zone,
        start_pfn: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn lruvec_init(lruvec: *mut lruvec);
}
extern "C" {
    pub static mut movable_zone: core::ffi::c_int;
}
extern "C" {
    pub fn has_managed_dma() -> bool_;
}
extern "C" {
    pub fn first_online_pgdat() -> *mut pglist_data;
}
extern "C" {
    pub fn next_online_pgdat(pgdat: *mut pglist_data) -> *mut pglist_data;
}
extern "C" {
    pub fn next_zone(zone: *mut zone) -> *mut zone;
}
extern "C" {
    pub fn __next_zones_zonelist(
        z: *mut zoneref,
        highest_zoneidx: zone_type,
        nodes: *mut nodemask_t,
    ) -> *mut zoneref;
}
#[repr(C)]
pub struct mem_section_usage {
    pub rcu: callback_head,
    pub subsection_map: [core::ffi::c_ulong; 1usize],
    pub pageblock_flags: __IncompleteArrayField<core::ffi::c_ulong>,
}
impl Default for mem_section_usage {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn subsection_map_init(pfn: core::ffi::c_ulong, nr_pages: core::ffi::c_ulong);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page_ext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mem_section {
    pub section_mem_map: core::ffi::c_ulong,
    pub usage: *mut mem_section_usage,
}
impl Default for mem_section {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut mem_section: *mut *mut mem_section;
}
extern "C" {
    pub fn mem_section_usage_size() -> usize;
}
pub const SECTION_MARKED_PRESENT_BIT: _bindgen_ty_16 = 0;
pub const SECTION_HAS_MEM_MAP_BIT: _bindgen_ty_16 = 1;
pub const SECTION_IS_ONLINE_BIT: _bindgen_ty_16 = 2;
pub const SECTION_IS_EARLY_BIT: _bindgen_ty_16 = 3;
pub const SECTION_MAP_LAST_BIT: _bindgen_ty_16 = 4;
pub type _bindgen_ty_16 = core::ffi::c_uint;
extern "C" {
    pub static mut __highest_present_section_nr: core::ffi::c_ulong;
}
extern "C" {
    pub fn sparse_init();
}
extern "C" {
    pub fn topology_normalize_cpu_scale();
}
extern "C" {
    pub fn topology_update_cpu_topology() -> core::ffi::c_int;
}
extern "C" {
    pub fn topology_init_cpu_capacity_cppc();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_node {
    _unused: [u8; 0],
}
extern "C" {
    pub fn topology_parse_cpu_capacity(cpu_node: *mut device_node, cpu: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub static mut cpu_scale: core::ffi::c_ulong;
}
extern "C" {
    pub fn topology_set_cpu_scale(cpu: core::ffi::c_uint, capacity: core::ffi::c_ulong);
}
extern "C" {
    pub static mut capacity_freq_ref: core::ffi::c_ulong;
}
extern "C" {
    pub static mut arch_freq_scale: core::ffi::c_ulong;
}
extern "C" {
    pub fn topology_set_freq_scale(
        cpus: *const cpumask,
        cur_freq: core::ffi::c_ulong,
        max_freq: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn topology_scale_freq_invariant() -> bool_;
}
pub const scale_freq_source_SCALE_FREQ_SOURCE_CPUFREQ: scale_freq_source = 0;
pub const scale_freq_source_SCALE_FREQ_SOURCE_ARCH: scale_freq_source = 1;
pub const scale_freq_source_SCALE_FREQ_SOURCE_CPPC: scale_freq_source = 2;
pub type scale_freq_source = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct scale_freq_data {
    pub source: scale_freq_source,
    pub set_freq_scale: ::core::option::Option<unsafe extern "C" fn()>,
}
impl Default for scale_freq_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn topology_scale_freq_tick();
}
extern "C" {
    pub fn topology_set_scale_freq_source(data: *mut scale_freq_data, cpus: *const cpumask);
}
extern "C" {
    pub fn topology_clear_scale_freq_source(source: scale_freq_source, cpus: *const cpumask);
}
extern "C" {
    pub static mut hw_pressure: core::ffi::c_ulong;
}
extern "C" {
    pub fn topology_update_hw_pressure(cpus: *const cpumask, capped_freq: core::ffi::c_ulong);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpu_topology {
    pub thread_id: core::ffi::c_int,
    pub core_id: core::ffi::c_int,
    pub cluster_id: core::ffi::c_int,
    pub package_id: core::ffi::c_int,
    pub thread_sibling: cpumask_t,
    pub core_sibling: cpumask_t,
    pub cluster_sibling: cpumask_t,
    pub llc_sibling: cpumask_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mpf_intel {
    pub signature: [core::ffi::c_char; 4usize],
    pub physptr: core::ffi::c_uint,
    pub length: core::ffi::c_uchar,
    pub specification: core::ffi::c_uchar,
    pub checksum: core::ffi::c_uchar,
    pub feature1: core::ffi::c_uchar,
    pub feature2: core::ffi::c_uchar,
    pub feature3: core::ffi::c_uchar,
    pub feature4: core::ffi::c_uchar,
    pub feature5: core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mpc_table {
    pub signature: [core::ffi::c_char; 4usize],
    pub length: core::ffi::c_ushort,
    pub spec: core::ffi::c_char,
    pub checksum: core::ffi::c_char,
    pub oem: [core::ffi::c_char; 8usize],
    pub productid: [core::ffi::c_char; 12usize],
    pub oemptr: core::ffi::c_uint,
    pub oemsize: core::ffi::c_ushort,
    pub oemcount: core::ffi::c_ushort,
    pub lapic: core::ffi::c_uint,
    pub reserved: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mpc_cpu {
    pub type_: core::ffi::c_uchar,
    pub apicid: core::ffi::c_uchar,
    pub apicver: core::ffi::c_uchar,
    pub cpuflag: core::ffi::c_uchar,
    pub cpufeature: core::ffi::c_uint,
    pub featureflag: core::ffi::c_uint,
    pub reserved: [core::ffi::c_uint; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mpc_bus {
    pub type_: core::ffi::c_uchar,
    pub busid: core::ffi::c_uchar,
    pub bustype: [core::ffi::c_uchar; 6usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mpc_ioapic {
    pub type_: core::ffi::c_uchar,
    pub apicid: core::ffi::c_uchar,
    pub apicver: core::ffi::c_uchar,
    pub flags: core::ffi::c_uchar,
    pub apicaddr: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mpc_intsrc {
    pub type_: core::ffi::c_uchar,
    pub irqtype: core::ffi::c_uchar,
    pub irqflag: core::ffi::c_ushort,
    pub srcbus: core::ffi::c_uchar,
    pub srcbusirq: core::ffi::c_uchar,
    pub dstapic: core::ffi::c_uchar,
    pub dstirq: core::ffi::c_uchar,
}
pub const mp_irq_source_types_mp_INT: mp_irq_source_types = 0;
pub const mp_irq_source_types_mp_NMI: mp_irq_source_types = 1;
pub const mp_irq_source_types_mp_SMI: mp_irq_source_types = 2;
pub const mp_irq_source_types_mp_ExtINT: mp_irq_source_types = 3;
pub type mp_irq_source_types = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mpc_lintsrc {
    pub type_: core::ffi::c_uchar,
    pub irqtype: core::ffi::c_uchar,
    pub irqflag: core::ffi::c_ushort,
    pub srcbusid: core::ffi::c_uchar,
    pub srcbusirq: core::ffi::c_uchar,
    pub destapic: core::ffi::c_uchar,
    pub destapiclint: core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mpc_oemtable {
    pub signature: [core::ffi::c_char; 4usize],
    pub length: core::ffi::c_ushort,
    pub rev: core::ffi::c_char,
    pub checksum: core::ffi::c_char,
    pub mpc: [core::ffi::c_char; 8usize],
}
pub const mp_bustype_MP_BUS_ISA: mp_bustype = 1;
pub const mp_bustype_MP_BUS_EISA: mp_bustype = 2;
pub const mp_bustype_MP_BUS_PCI: mp_bustype = 3;
pub type mp_bustype = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ghcb {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irq_domain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_mpparse {
    pub setup_ioapic_ids: ::core::option::Option<unsafe extern "C" fn()>,
    pub find_mptable: ::core::option::Option<unsafe extern "C" fn()>,
    pub early_parse_smp_cfg: ::core::option::Option<unsafe extern "C" fn()>,
    pub parse_smp_cfg: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_resources {
    pub probe_roms: ::core::option::Option<unsafe extern "C" fn()>,
    pub reserve_resources: ::core::option::Option<unsafe extern "C" fn()>,
    pub memory_setup: ::core::option::Option<unsafe extern "C" fn() -> *mut core::ffi::c_char>,
    pub dmi_setup: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_irqs {
    pub pre_vector_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub intr_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub intr_mode_select: ::core::option::Option<unsafe extern "C" fn()>,
    pub intr_mode_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub create_pci_msi_domain: ::core::option::Option<unsafe extern "C" fn() -> *mut irq_domain>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_oem {
    pub arch_setup: ::core::option::Option<unsafe extern "C" fn()>,
    pub banner: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_paging {
    pub pagetable_init: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_timers {
    pub setup_percpu_clockev: ::core::option::Option<unsafe extern "C" fn()>,
    pub timer_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub wallclock_init: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_iommu {
    pub iommu_init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_pci {
    pub arch_init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub init_irq: ::core::option::Option<unsafe extern "C" fn()>,
    pub fixup_irqs: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_hyper_init {
    pub init_platform: ::core::option::Option<unsafe extern "C" fn()>,
    pub guest_late_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub x2apic_available: ::core::option::Option<unsafe extern "C" fn() -> bool_>,
    pub msi_ext_dest_id: ::core::option::Option<unsafe extern "C" fn() -> bool_>,
    pub init_mem_mapping: ::core::option::Option<unsafe extern "C" fn()>,
    pub init_after_bootmem: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_acpi {
    pub set_root_pointer: ::core::option::Option<unsafe extern "C" fn(addr: u64_)>,
    pub get_root_pointer: ::core::option::Option<unsafe extern "C" fn() -> u64_>,
    pub reduced_hw_early_init: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_guest {
    pub enc_status_change_prepare: ::core::option::Option<
        unsafe extern "C" fn(
            vaddr: core::ffi::c_ulong,
            npages: core::ffi::c_int,
            enc: bool_,
        ) -> core::ffi::c_int,
    >,
    pub enc_status_change_finish: ::core::option::Option<
        unsafe extern "C" fn(
            vaddr: core::ffi::c_ulong,
            npages: core::ffi::c_int,
            enc: bool_,
        ) -> core::ffi::c_int,
    >,
    pub enc_tlb_flush_required: ::core::option::Option<unsafe extern "C" fn(enc: bool_) -> bool_>,
    pub enc_cache_flush_required: ::core::option::Option<unsafe extern "C" fn() -> bool_>,
    pub enc_kexec_begin: ::core::option::Option<unsafe extern "C" fn()>,
    pub enc_kexec_finish: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_ops {
    pub resources: x86_init_resources,
    pub mpparse: x86_init_mpparse,
    pub irqs: x86_init_irqs,
    pub oem: x86_init_oem,
    pub paging: x86_init_paging,
    pub timers: x86_init_timers,
    pub iommu: x86_init_iommu,
    pub pci: x86_init_pci,
    pub hyper: x86_hyper_init,
    pub acpi: x86_init_acpi,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_cpuinit_ops {
    pub setup_percpu_clockev: ::core::option::Option<unsafe extern "C" fn()>,
    pub early_percpu_clock_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub fixup_cpu_id:
        ::core::option::Option<unsafe extern "C" fn(c: *mut cpuinfo_x86, node: core::ffi::c_int)>,
    pub parallel_bringup: bool_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_legacy_devices {
    pub pnpbios: core::ffi::c_int,
}
pub const x86_legacy_i8042_state_X86_LEGACY_I8042_PLATFORM_ABSENT: x86_legacy_i8042_state = 0;
pub const x86_legacy_i8042_state_X86_LEGACY_I8042_FIRMWARE_ABSENT: x86_legacy_i8042_state = 1;
pub const x86_legacy_i8042_state_X86_LEGACY_I8042_EXPECTED_PRESENT: x86_legacy_i8042_state = 2;
pub type x86_legacy_i8042_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_legacy_features {
    pub i8042: x86_legacy_i8042_state,
    pub rtc: core::ffi::c_int,
    pub warm_reset: core::ffi::c_int,
    pub no_vga: core::ffi::c_int,
    pub reserve_bios_regions: core::ffi::c_int,
    pub devices: x86_legacy_devices,
}
impl Default for x86_legacy_features {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_hyper_runtime {
    pub pin_vcpu: ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int)>,
    pub sev_es_hcall_prepare:
        ::core::option::Option<unsafe extern "C" fn(ghcb: *mut ghcb, regs: *mut pt_regs)>,
    pub sev_es_hcall_finish:
        ::core::option::Option<unsafe extern "C" fn(ghcb: *mut ghcb, regs: *mut pt_regs) -> bool_>,
    pub is_private_mmio: ::core::option::Option<unsafe extern "C" fn(addr: u64_) -> bool_>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_platform_ops {
    pub calibrate_cpu: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_ulong>,
    pub calibrate_tsc: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_ulong>,
    pub get_wallclock: ::core::option::Option<unsafe extern "C" fn(ts: *mut timespec64)>,
    pub set_wallclock:
        ::core::option::Option<unsafe extern "C" fn(ts: *const timespec64) -> core::ffi::c_int>,
    pub iommu_shutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub is_untracked_pat_range:
        ::core::option::Option<unsafe extern "C" fn(start: u64_, end: u64_) -> bool_>,
    pub nmi_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub get_nmi_reason: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_uchar>,
    pub save_sched_clock_state: ::core::option::Option<unsafe extern "C" fn()>,
    pub restore_sched_clock_state: ::core::option::Option<unsafe extern "C" fn()>,
    pub apic_post_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub legacy: x86_legacy_features,
    pub set_legacy_features: ::core::option::Option<unsafe extern "C" fn()>,
    pub realmode_reserve: ::core::option::Option<unsafe extern "C" fn()>,
    pub realmode_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub hyper: x86_hyper_runtime,
    pub guest: x86_guest,
}
impl Default for x86_platform_ops {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_apic_ops {
    pub io_apic_read: ::core::option::Option<
        unsafe extern "C" fn(apic: core::ffi::c_uint, reg: core::ffi::c_uint) -> core::ffi::c_uint,
    >,
    pub restore: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub static mut x86_init: x86_init_ops;
}
extern "C" {
    pub static mut x86_cpuinit: x86_cpuinit_ops;
}
extern "C" {
    pub static mut x86_platform: x86_platform_ops;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_msi_ops {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut x86_msi: x86_msi_ops;
}
extern "C" {
    pub static mut x86_apic_ops: x86_apic_ops;
}
extern "C" {
    pub fn x86_early_init_platform_quirks();
}
extern "C" {
    pub fn x86_init_noop();
}
extern "C" {
    pub fn x86_init_uint_noop(unused: core::ffi::c_uint);
}
extern "C" {
    pub fn bool_x86_init_noop() -> bool_;
}
extern "C" {
    pub fn x86_op_int_noop(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn x86_pnpbios_disabled() -> bool_;
}
extern "C" {
    pub fn set_rtc_noop(now: *const timespec64) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_rtc_noop(now: *mut timespec64);
}
extern "C" {
    pub static mut pic_mode: core::ffi::c_int;
}
extern "C" {
    pub static mut mp_bus_not_pci: [core::ffi::c_ulong; 4usize];
}
extern "C" {
    pub static mut boot_cpu_physical_apicid: u32_;
}
extern "C" {
    pub static mut boot_cpu_apic_version: u8_;
}
extern "C" {
    pub static mut smp_found_config: core::ffi::c_int;
}
extern "C" {
    pub fn e820__memblock_alloc_reserved_mpc_new();
}
extern "C" {
    pub static mut enable_update_mptable: core::ffi::c_int;
}
extern "C" {
    pub fn mpparse_find_mptable();
}
extern "C" {
    pub fn mpparse_parse_early_smp_config();
}
extern "C" {
    pub fn mpparse_parse_smp_config();
}
extern "C" {
    pub static mut phys_cpu_present_map: [core::ffi::c_ulong; 512usize];
}
extern "C" {
    pub static mut x86_cpu_to_node_map: core::ffi::c_int;
}
extern "C" {
    pub static mut x86_cpu_to_node_map_early_ptr: *mut core::ffi::c_int;
}
extern "C" {
    pub static mut x86_cpu_to_node_map_early_map: [core::ffi::c_int; 0usize];
}
extern "C" {
    pub static mut node_to_cpumask_map: [cpumask_var_t; 64usize];
}
extern "C" {
    pub fn setup_node_to_cpumask_map();
}
extern "C" {
    pub fn __node_distance(arg1: core::ffi::c_int, arg2: core::ffi::c_int) -> core::ffi::c_int;
}
pub const x86_topology_domains_TOPO_SMT_DOMAIN: x86_topology_domains = 0;
pub const x86_topology_domains_TOPO_CORE_DOMAIN: x86_topology_domains = 1;
pub const x86_topology_domains_TOPO_MODULE_DOMAIN: x86_topology_domains = 2;
pub const x86_topology_domains_TOPO_TILE_DOMAIN: x86_topology_domains = 3;
pub const x86_topology_domains_TOPO_DIE_DOMAIN: x86_topology_domains = 4;
pub const x86_topology_domains_TOPO_DIEGRP_DOMAIN: x86_topology_domains = 5;
pub const x86_topology_domains_TOPO_PKG_DOMAIN: x86_topology_domains = 6;
pub const x86_topology_domains_TOPO_MAX_DOMAIN: x86_topology_domains = 7;
pub type x86_topology_domains = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_topology_system {
    pub dom_shifts: [core::ffi::c_uint; 7usize],
    pub dom_size: [core::ffi::c_uint; 7usize],
}
extern "C" {
    pub static mut x86_topo_system: x86_topology_system;
}
extern "C" {
    pub fn cpu_coregroup_mask(cpu: core::ffi::c_int) -> *const cpumask;
}
extern "C" {
    pub fn cpu_clustergroup_mask(cpu: core::ffi::c_int) -> *const cpumask;
}
extern "C" {
    pub static mut __max_dies_per_package: core::ffi::c_uint;
}
extern "C" {
    pub static mut __max_logical_packages: core::ffi::c_uint;
}
extern "C" {
    pub static mut __max_threads_per_core: core::ffi::c_uint;
}
extern "C" {
    pub static mut __num_threads_per_package: core::ffi::c_uint;
}
extern "C" {
    pub static mut __num_cores_per_package: core::ffi::c_uint;
}
extern "C" {
    pub fn topology_get_logical_id(
        apicid: u32_,
        at_level: x86_topology_domains,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut __max_smt_threads: core::ffi::c_int;
}
pub const cpuhp_smt_control_CPU_SMT_ENABLED: cpuhp_smt_control = 0;
pub const cpuhp_smt_control_CPU_SMT_DISABLED: cpuhp_smt_control = 1;
pub const cpuhp_smt_control_CPU_SMT_FORCE_DISABLED: cpuhp_smt_control = 2;
pub const cpuhp_smt_control_CPU_SMT_NOT_SUPPORTED: cpuhp_smt_control = 3;
pub const cpuhp_smt_control_CPU_SMT_NOT_IMPLEMENTED: cpuhp_smt_control = 4;
pub type cpuhp_smt_control = core::ffi::c_uint;
extern "C" {
    pub static mut cpu_smt_control: cpuhp_smt_control;
}
extern "C" {
    pub static mut cpu_smt_num_threads: core::ffi::c_uint;
}
extern "C" {
    pub fn cpu_smt_disable(force: bool_);
}
extern "C" {
    pub fn cpu_smt_set_num_threads(num_threads: core::ffi::c_uint, max_threads: core::ffi::c_uint);
}
extern "C" {
    pub fn cpu_smt_possible() -> bool_;
}
extern "C" {
    pub fn cpuhp_smt_enable() -> core::ffi::c_int;
}
extern "C" {
    pub fn cpuhp_smt_disable(ctrlval: cpuhp_smt_control) -> core::ffi::c_int;
}
extern "C" {
    pub static mut __amd_nodes_per_pkg: core::ffi::c_uint;
}
extern "C" {
    pub static mut __cpu_primary_thread_mask: cpumask;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pci_bus {
    _unused: [u8; 0],
}
extern "C" {
    pub fn x86_pci_root_bus_node(bus: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn x86_pci_root_bus_resources(bus: core::ffi::c_int, resources: *mut list_head);
}
extern "C" {
    pub static mut x86_topology_update: bool_;
}
extern "C" {
    pub static mut sched_core_priority: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_sched_itmt_enabled: core::ffi::c_uint;
}
extern "C" {
    pub fn sched_set_itmt_core_prio(prio: core::ffi::c_int, core_cpu: core::ffi::c_int);
}
extern "C" {
    pub fn sched_set_itmt_support() -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_clear_itmt_support();
}
extern "C" {
    pub static mut arch_scale_freq_key: static_key_false;
}
extern "C" {
    pub fn arch_set_max_freq_ratio(turbo_disabled: bool_);
}
extern "C" {
    pub fn freq_invariance_set_perf_ratio(ratio: u64_, turbo_disabled: bool_);
}
extern "C" {
    pub fn arch_scale_freq_tick();
}
extern "C" {
    pub fn init_freq_invariance_cppc();
}
extern "C" {
    pub fn arch_update_cpu_topology() -> core::ffi::c_int;
}
extern "C" {
    pub static mut node_reclaim_distance: core::ffi::c_int;
}
extern "C" {
    pub static mut numa_node: core::ffi::c_int;
}
extern "C" {
    pub fn sched_numa_find_nth_cpu(
        cpus: *const cpumask,
        cpu: core::ffi::c_int,
        node: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_numa_hop_mask(node: core::ffi::c_uint, hops: core::ffi::c_uint) -> *const cpumask;
}
extern "C" {
    pub fn __alloc_pages_noprof(
        gfp: gfp_t,
        order: core::ffi::c_uint,
        preferred_nid: core::ffi::c_int,
        nodemask: *mut nodemask_t,
    ) -> *mut page;
}
extern "C" {
    pub fn __folio_alloc_noprof(
        gfp: gfp_t,
        order: core::ffi::c_uint,
        preferred_nid: core::ffi::c_int,
        nodemask: *mut nodemask_t,
    ) -> *mut folio;
}
extern "C" {
    pub fn alloc_pages_bulk_noprof(
        gfp: gfp_t,
        preferred_nid: core::ffi::c_int,
        nodemask: *mut nodemask_t,
        nr_pages: core::ffi::c_int,
        page_list: *mut list_head,
        page_array: *mut *mut page,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn alloc_pages_bulk_array_mempolicy_noprof(
        gfp: gfp_t,
        nr_pages: core::ffi::c_ulong,
        page_array: *mut *mut page,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn alloc_pages_noprof(gfp: gfp_t, order: core::ffi::c_uint) -> *mut page;
}
extern "C" {
    pub fn alloc_pages_mpol_noprof(
        gfp: gfp_t,
        order: core::ffi::c_uint,
        mpol: *mut mempolicy,
        ilx: core::ffi::c_ulong,
        nid: core::ffi::c_int,
    ) -> *mut page;
}
extern "C" {
    pub fn folio_alloc_noprof(gfp: gfp_t, order: core::ffi::c_uint) -> *mut folio;
}
extern "C" {
    pub fn folio_alloc_mpol_noprof(
        gfp: gfp_t,
        order: core::ffi::c_uint,
        mpol: *mut mempolicy,
        ilx: core::ffi::c_ulong,
        nid: core::ffi::c_int,
    ) -> *mut folio;
}
extern "C" {
    pub fn vma_alloc_folio_noprof(
        gfp: gfp_t,
        order: core::ffi::c_int,
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        hugepage: bool_,
    ) -> *mut folio;
}
extern "C" {
    pub fn get_free_pages_noprof(gfp_mask: gfp_t, order: core::ffi::c_uint) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_zeroed_page_noprof(gfp_mask: gfp_t) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn alloc_pages_exact_noprof(size: usize, gfp_mask: gfp_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn free_pages_exact(virt: *mut core::ffi::c_void, size: usize);
}
extern "C" {
    pub fn alloc_pages_exact_nid_noprof(
        nid: core::ffi::c_int,
        size: usize,
        gfp_mask: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __free_pages(page: *mut page, order: core::ffi::c_uint);
}
extern "C" {
    pub fn free_pages(addr: core::ffi::c_ulong, order: core::ffi::c_uint);
}
extern "C" {
    pub fn page_frag_cache_drain(nc: *mut page_frag_cache);
}
extern "C" {
    pub fn __page_frag_cache_drain(page: *mut page, count: core::ffi::c_uint);
}
extern "C" {
    pub fn __page_frag_alloc_align(
        nc: *mut page_frag_cache,
        fragsz: core::ffi::c_uint,
        gfp_mask: gfp_t,
        align_mask: core::ffi::c_uint,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn page_frag_free(addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn page_alloc_init_cpuhp();
}
extern "C" {
    pub fn decay_pcp_high(zone: *mut zone, pcp: *mut per_cpu_pages) -> core::ffi::c_int;
}
extern "C" {
    pub fn drain_zone_pages(zone: *mut zone, pcp: *mut per_cpu_pages);
}
extern "C" {
    pub fn drain_all_pages(zone: *mut zone);
}
extern "C" {
    pub fn drain_local_pages(zone: *mut zone);
}
extern "C" {
    pub fn page_alloc_init_late();
}
extern "C" {
    pub fn setup_pcp_cacheinfo(cpu: core::ffi::c_uint);
}
extern "C" {
    pub static mut gfp_allowed_mask: gfp_t;
}
extern "C" {
    pub fn gfp_pfmemalloc_allowed(gfp_mask: gfp_t) -> bool_;
}
extern "C" {
    pub fn vma_thp_gfp_mask(vma: *mut vm_area_struct) -> gfp_t;
}
extern "C" {
    pub fn free_contig_range(pfn: core::ffi::c_ulong, nr_pages: core::ffi::c_ulong);
}
extern "C" {
    pub fn set_dumpable(mm: *mut mm_struct, value: core::ffi::c_int);
}
extern "C" {
    pub fn mm_alloc() -> *mut mm_struct;
}
extern "C" {
    pub fn __mmdrop(mm: *mut mm_struct);
}
extern "C" {
    pub fn mmput(arg1: *mut mm_struct);
}
extern "C" {
    pub fn mmput_async(arg1: *mut mm_struct);
}
extern "C" {
    pub fn get_task_mm(task: *mut task_struct) -> *mut mm_struct;
}
extern "C" {
    pub fn mm_access(task: *mut task_struct, mode: core::ffi::c_uint) -> *mut mm_struct;
}
extern "C" {
    pub fn exit_mm_release(arg1: *mut task_struct, arg2: *mut mm_struct);
}
extern "C" {
    pub fn exec_mm_release(arg1: *mut task_struct, arg2: *mut mm_struct);
}
extern "C" {
    pub fn arch_pick_mmap_layout(mm: *mut mm_struct, rlim_stack: *mut rlimit);
}
extern "C" {
    pub fn arch_get_unmapped_area(
        arg1: *mut file,
        arg2: core::ffi::c_ulong,
        arg3: core::ffi::c_ulong,
        arg4: core::ffi::c_ulong,
        arg5: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn arch_get_unmapped_area_topdown(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn mm_get_unmapped_area(
        mm: *mut mm_struct,
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn arch_get_unmapped_area_vmflags(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        vm_flags: vm_flags_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn arch_get_unmapped_area_topdown_vmflags(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        arg1: vm_flags_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn mm_get_unmapped_area_vmflags(
        mm: *mut mm_struct,
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        vm_flags: vm_flags_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn generic_get_unmapped_area(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn generic_get_unmapped_area_topdown(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_READY: _bindgen_ty_17 = 1;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED: _bindgen_ty_17 = 2;
pub const MEMBARRIER_STATE_GLOBAL_EXPEDITED_READY: _bindgen_ty_17 = 4;
pub const MEMBARRIER_STATE_GLOBAL_EXPEDITED: _bindgen_ty_17 = 8;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE_READY: _bindgen_ty_17 = 16;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE: _bindgen_ty_17 = 32;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ_READY: _bindgen_ty_17 = 64;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ: _bindgen_ty_17 = 128;
pub type _bindgen_ty_17 = core::ffi::c_uint;
pub const MEMBARRIER_FLAG_SYNC_CORE: _bindgen_ty_18 = 1;
pub const MEMBARRIER_FLAG_RSEQ: _bindgen_ty_18 = 2;
pub type _bindgen_ty_18 = core::ffi::c_uint;
extern "C" {
    pub fn membarrier_exec_mmap(mm: *mut mm_struct);
}
extern "C" {
    pub fn membarrier_update_current_mm(next_mm: *mut mm_struct);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct xa_limit {
    pub max: u32_,
    pub min: u32_,
}
pub type xa_mark_t = core::ffi::c_uint;
pub const xa_lock_type_XA_LOCK_IRQ: xa_lock_type = 1;
pub const xa_lock_type_XA_LOCK_BH: xa_lock_type = 2;
pub type xa_lock_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xarray {
    pub xa_lock: spinlock_t,
    pub xa_flags: gfp_t,
    pub xa_head: *mut core::ffi::c_void,
}
impl Default for xarray {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xa_load(arg1: *mut xarray, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_store(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_erase(arg1: *mut xarray, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_store_range(
        arg1: *mut xarray,
        first: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_get_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t) -> bool_;
}
extern "C" {
    pub fn xa_set_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t);
}
extern "C" {
    pub fn xa_clear_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t);
}
extern "C" {
    pub fn xa_find(
        xa: *mut xarray,
        index: *mut core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        arg1: xa_mark_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_find_after(
        xa: *mut xarray,
        index: *mut core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        arg1: xa_mark_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_extract(
        arg1: *mut xarray,
        dst: *mut *mut core::ffi::c_void,
        start: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        n: core::ffi::c_uint,
        arg2: xa_mark_t,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn xa_destroy(arg1: *mut xarray);
}
extern "C" {
    pub fn __xa_erase(arg1: *mut xarray, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __xa_store(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __xa_cmpxchg(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        old: *mut core::ffi::c_void,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __xa_insert(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __xa_alloc(
        arg1: *mut xarray,
        id: *mut u32_,
        entry: *mut core::ffi::c_void,
        arg2: xa_limit,
        arg3: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __xa_alloc_cyclic(
        arg1: *mut xarray,
        id: *mut u32_,
        entry: *mut core::ffi::c_void,
        arg2: xa_limit,
        next: *mut u32_,
        arg3: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __xa_set_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t);
}
extern "C" {
    pub fn __xa_clear_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xa_node {
    pub shift: core::ffi::c_uchar,
    pub offset: core::ffi::c_uchar,
    pub count: core::ffi::c_uchar,
    pub nr_values: core::ffi::c_uchar,
    pub parent: *mut xa_node,
    pub array: *mut xarray,
    pub __bindgen_anon_1: xa_node__bindgen_ty_1,
    pub slots: [*mut core::ffi::c_void; 64usize],
    pub __bindgen_anon_2: xa_node__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xa_node__bindgen_ty_1 {
    pub private_list: list_head,
    pub callback_head: callback_head,
}
impl Default for xa_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xa_node__bindgen_ty_2 {
    pub tags: [[core::ffi::c_ulong; 1usize]; 3usize],
    pub marks: [[core::ffi::c_ulong; 1usize]; 3usize],
}
impl Default for xa_node__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for xa_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xa_dump(arg1: *const xarray);
}
extern "C" {
    pub fn xa_dump_node(arg1: *const xa_node);
}
pub type xa_update_node_t = ::core::option::Option<unsafe extern "C" fn(node: *mut xa_node)>;
extern "C" {
    pub fn xa_delete_node(arg1: *mut xa_node, arg2: xa_update_node_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xa_state {
    pub xa: *mut xarray,
    pub xa_index: core::ffi::c_ulong,
    pub xa_shift: core::ffi::c_uchar,
    pub xa_sibs: core::ffi::c_uchar,
    pub xa_offset: core::ffi::c_uchar,
    pub xa_pad: core::ffi::c_uchar,
    pub xa_node: *mut xa_node,
    pub xa_alloc: *mut xa_node,
    pub xa_update: xa_update_node_t,
    pub xa_lru: *mut list_lru,
}
impl Default for xa_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xas_load(arg1: *mut xa_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_store(arg1: *mut xa_state, entry: *mut core::ffi::c_void) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_find(arg1: *mut xa_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_find_conflict(arg1: *mut xa_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_get_mark(arg1: *const xa_state, arg2: xa_mark_t) -> bool_;
}
extern "C" {
    pub fn xas_set_mark(arg1: *const xa_state, arg2: xa_mark_t);
}
extern "C" {
    pub fn xas_clear_mark(arg1: *const xa_state, arg2: xa_mark_t);
}
extern "C" {
    pub fn xas_find_marked(
        arg1: *mut xa_state,
        max: core::ffi::c_ulong,
        arg2: xa_mark_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_init_marks(arg1: *const xa_state);
}
extern "C" {
    pub fn xas_nomem(arg1: *mut xa_state, arg2: gfp_t) -> bool_;
}
extern "C" {
    pub fn xas_destroy(arg1: *mut xa_state);
}
extern "C" {
    pub fn xas_pause(arg1: *mut xa_state);
}
extern "C" {
    pub fn xas_create_range(arg1: *mut xa_state);
}
extern "C" {
    pub fn xa_get_order(arg1: *mut xarray, index: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn xas_get_order(xas: *mut xa_state) -> core::ffi::c_int;
}
extern "C" {
    pub fn xas_split(arg1: *mut xa_state, entry: *mut core::ffi::c_void, order: core::ffi::c_uint);
}
extern "C" {
    pub fn xas_split_alloc(
        arg1: *mut xa_state,
        entry: *mut core::ffi::c_void,
        order: core::ffi::c_uint,
        arg2: gfp_t,
    );
}
pub const XA_CHECK_SCHED: _bindgen_ty_19 = 4096;
pub type _bindgen_ty_19 = core::ffi::c_uint;
extern "C" {
    pub fn __xas_next(arg1: *mut xa_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __xas_prev(arg1: *mut xa_state) -> *mut core::ffi::c_void;
}
pub const lru_status_LRU_REMOVED: lru_status = 0;
pub const lru_status_LRU_REMOVED_RETRY: lru_status = 1;
pub const lru_status_LRU_ROTATE: lru_status = 2;
pub const lru_status_LRU_SKIP: lru_status = 3;
pub const lru_status_LRU_RETRY: lru_status = 4;
pub const lru_status_LRU_STOP: lru_status = 5;
pub type lru_status = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct list_lru_one {
    pub list: list_head,
    pub nr_items: core::ffi::c_long,
}
impl Default for list_lru_one {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct list_lru_memcg {
    pub rcu: callback_head,
    pub node: __IncompleteArrayField<list_lru_one>,
}
impl Default for list_lru_memcg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct list_lru_node {
    pub lock: spinlock_t,
    pub lru: list_lru_one,
    pub nr_items: core::ffi::c_long,
}
impl Default for list_lru_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct list_lru {
    pub node: *mut list_lru_node,
}
impl Default for list_lru {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn list_lru_destroy(lru: *mut list_lru);
}
extern "C" {
    pub fn __list_lru_init(
        lru: *mut list_lru,
        memcg_aware: bool_,
        key: *mut lock_class_key,
        shrinker: *mut shrinker,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memcg_list_lru_alloc(
        memcg: *mut mem_cgroup,
        lru: *mut list_lru,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memcg_reparent_list_lrus(memcg: *mut mem_cgroup, parent: *mut mem_cgroup);
}
extern "C" {
    pub fn list_lru_add(
        lru: *mut list_lru,
        item: *mut list_head,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
    ) -> bool_;
}
extern "C" {
    pub fn list_lru_add_obj(lru: *mut list_lru, item: *mut list_head) -> bool_;
}
extern "C" {
    pub fn list_lru_del(
        lru: *mut list_lru,
        item: *mut list_head,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
    ) -> bool_;
}
extern "C" {
    pub fn list_lru_del_obj(lru: *mut list_lru, item: *mut list_head) -> bool_;
}
extern "C" {
    pub fn list_lru_count_one(
        lru: *mut list_lru,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn list_lru_count_node(lru: *mut list_lru, nid: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn list_lru_isolate(list: *mut list_lru_one, item: *mut list_head);
}
extern "C" {
    pub fn list_lru_isolate_move(
        list: *mut list_lru_one,
        item: *mut list_head,
        head: *mut list_head,
    );
}
pub type list_lru_walk_cb = ::core::option::Option<
    unsafe extern "C" fn(
        item: *mut list_head,
        list: *mut list_lru_one,
        lock: *mut spinlock_t,
        cb_arg: *mut core::ffi::c_void,
    ) -> lru_status,
>;
extern "C" {
    pub fn list_lru_walk_one(
        lru: *mut list_lru,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
        isolate: list_lru_walk_cb,
        cb_arg: *mut core::ffi::c_void,
        nr_to_walk: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn list_lru_walk_one_irq(
        lru: *mut list_lru,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
        isolate: list_lru_walk_cb,
        cb_arg: *mut core::ffi::c_void,
        nr_to_walk: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn list_lru_walk_node(
        lru: *mut list_lru,
        nid: core::ffi::c_int,
        isolate: list_lru_walk_cb,
        cb_arg: *mut core::ffi::c_void,
        nr_to_walk: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct radix_tree_preload {
    pub lock: local_lock_t,
    pub nr: core::ffi::c_uint,
    pub nodes: *mut xa_node,
}
impl Default for radix_tree_preload {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut radix_tree_preloads: radix_tree_preload;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct radix_tree_iter {
    pub index: core::ffi::c_ulong,
    pub next_index: core::ffi::c_ulong,
    pub tags: core::ffi::c_ulong,
    pub node: *mut xa_node,
}
impl Default for radix_tree_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn radix_tree_insert(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        arg2: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __radix_tree_lookup(
        arg1: *const xarray,
        index: core::ffi::c_ulong,
        nodep: *mut *mut xa_node,
        slotp: *mut *mut *mut core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_lookup(
        arg1: *const xarray,
        arg2: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_lookup_slot(
        arg1: *const xarray,
        index: core::ffi::c_ulong,
    ) -> *mut *mut core::ffi::c_void;
}
extern "C" {
    pub fn __radix_tree_replace(
        arg1: *mut xarray,
        arg2: *mut xa_node,
        slot: *mut *mut core::ffi::c_void,
        entry: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn radix_tree_iter_replace(
        arg1: *mut xarray,
        arg2: *const radix_tree_iter,
        slot: *mut *mut core::ffi::c_void,
        entry: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn radix_tree_replace_slot(
        arg1: *mut xarray,
        slot: *mut *mut core::ffi::c_void,
        entry: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn radix_tree_iter_delete(
        arg1: *mut xarray,
        iter: *mut radix_tree_iter,
        slot: *mut *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn radix_tree_delete_item(
        arg1: *mut xarray,
        arg2: core::ffi::c_ulong,
        arg3: *mut core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_delete(arg1: *mut xarray, arg2: core::ffi::c_ulong)
        -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_gang_lookup(
        arg1: *const xarray,
        results: *mut *mut core::ffi::c_void,
        first_index: core::ffi::c_ulong,
        max_items: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn radix_tree_preload(gfp_mask: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn radix_tree_maybe_preload(gfp_mask: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn radix_tree_init();
}
extern "C" {
    pub fn radix_tree_tag_set(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        tag: core::ffi::c_uint,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_tag_clear(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        tag: core::ffi::c_uint,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_tag_get(
        arg1: *const xarray,
        index: core::ffi::c_ulong,
        tag: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn radix_tree_iter_tag_clear(
        arg1: *mut xarray,
        iter: *const radix_tree_iter,
        tag: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn radix_tree_gang_lookup_tag(
        arg1: *const xarray,
        results: *mut *mut core::ffi::c_void,
        first_index: core::ffi::c_ulong,
        max_items: core::ffi::c_uint,
        tag: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn radix_tree_gang_lookup_tag_slot(
        arg1: *const xarray,
        results: *mut *mut *mut core::ffi::c_void,
        first_index: core::ffi::c_ulong,
        max_items: core::ffi::c_uint,
        tag: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn radix_tree_tagged(arg1: *const xarray, tag: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_get_free(
        root: *mut xarray,
        iter: *mut radix_tree_iter,
        gfp: gfp_t,
        max: core::ffi::c_ulong,
    ) -> *mut *mut core::ffi::c_void;
}
pub const RADIX_TREE_ITER_TAG_MASK: _bindgen_ty_20 = 15;
pub const RADIX_TREE_ITER_TAGGED: _bindgen_ty_20 = 16;
pub const RADIX_TREE_ITER_CONTIG: _bindgen_ty_20 = 32;
pub type _bindgen_ty_20 = core::ffi::c_uint;
extern "C" {
    pub fn radix_tree_next_chunk(
        arg1: *const xarray,
        iter: *mut radix_tree_iter,
        flags: core::ffi::c_uint,
    ) -> *mut *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_iter_resume(
        slot: *mut *mut core::ffi::c_void,
        iter: *mut radix_tree_iter,
    ) -> *mut *mut core::ffi::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct upid {
    pub nr: core::ffi::c_int,
    pub ns: *mut pid_namespace,
}
impl Default for upid {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct pid {
    pub count: refcount_t,
    pub level: core::ffi::c_uint,
    pub lock: spinlock_t,
    pub stashed: *mut dentry,
    pub ino: u64_,
    pub tasks: [hlist_head; 4usize],
    pub inodes: hlist_head,
    pub wait_pidfd: wait_queue_head_t,
    pub rcu: callback_head,
    pub numbers: __IncompleteArrayField<upid>,
}
impl Default for pid {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_struct_pid: pid;
}
extern "C" {
    pub fn pidfd_pid(file: *const file) -> *mut pid;
}
extern "C" {
    pub fn pidfd_get_pid(fd: core::ffi::c_uint, flags: *mut core::ffi::c_uint) -> *mut pid;
}
extern "C" {
    pub fn pidfd_get_task(
        pidfd: core::ffi::c_int,
        flags: *mut core::ffi::c_uint,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn pidfd_prepare(
        pid: *mut pid,
        flags: core::ffi::c_uint,
        ret: *mut *mut file,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_notify_pidfd(task: *mut task_struct);
}
extern "C" {
    pub fn put_pid(pid: *mut pid);
}
extern "C" {
    pub fn pid_task(pid: *mut pid, arg1: pid_type) -> *mut task_struct;
}
extern "C" {
    pub fn get_pid_task(pid: *mut pid, arg1: pid_type) -> *mut task_struct;
}
extern "C" {
    pub fn get_task_pid(task: *mut task_struct, type_: pid_type) -> *mut pid;
}
extern "C" {
    pub fn attach_pid(task: *mut task_struct, arg1: pid_type);
}
extern "C" {
    pub fn detach_pid(task: *mut task_struct, arg1: pid_type);
}
extern "C" {
    pub fn change_pid(task: *mut task_struct, arg1: pid_type, pid: *mut pid);
}
extern "C" {
    pub fn exchange_tids(task: *mut task_struct, old: *mut task_struct);
}
extern "C" {
    pub fn transfer_pid(old: *mut task_struct, new: *mut task_struct, arg1: pid_type);
}
extern "C" {
    pub static mut pid_max: core::ffi::c_int;
}
extern "C" {
    pub static mut pid_max_min: core::ffi::c_int;
}
extern "C" {
    pub static mut pid_max_max: core::ffi::c_int;
}
extern "C" {
    pub fn find_pid_ns(nr: core::ffi::c_int, ns: *mut pid_namespace) -> *mut pid;
}
extern "C" {
    pub fn find_vpid(nr: core::ffi::c_int) -> *mut pid;
}
extern "C" {
    pub fn find_get_pid(nr: core::ffi::c_int) -> *mut pid;
}
extern "C" {
    pub fn find_ge_pid(nr: core::ffi::c_int, arg1: *mut pid_namespace) -> *mut pid;
}
extern "C" {
    pub fn alloc_pid(ns: *mut pid_namespace, set_tid: *mut pid_t, set_tid_size: usize) -> *mut pid;
}
extern "C" {
    pub fn free_pid(pid: *mut pid);
}
extern "C" {
    pub fn disable_pid_allocation(ns: *mut pid_namespace);
}
extern "C" {
    pub fn pid_nr_ns(pid: *mut pid, ns: *mut pid_namespace) -> pid_t;
}
extern "C" {
    pub fn pid_vnr(pid: *mut pid) -> pid_t;
}
extern "C" {
    pub fn __task_pid_nr_ns(
        task: *mut task_struct,
        type_: pid_type,
        ns: *mut pid_namespace,
    ) -> pid_t;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __user_cap_header_struct {
    pub version: __u32,
    pub pid: core::ffi::c_int,
}
pub type cap_user_header_t = *mut __user_cap_header_struct;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __user_cap_data_struct {
    pub effective: __u32,
    pub permitted: __u32,
    pub inheritable: __u32,
}
pub type cap_user_data_t = *mut __user_cap_data_struct;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfs_cap_data {
    pub magic_etc: __le32,
    pub data: [vfs_cap_data__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfs_cap_data__bindgen_ty_1 {
    pub permitted: __le32,
    pub inheritable: __le32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfs_ns_cap_data {
    pub magic_etc: __le32,
    pub data: [vfs_ns_cap_data__bindgen_ty_1; 2usize],
    pub rootid: __le32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfs_ns_cap_data__bindgen_ty_1 {
    pub permitted: __le32,
    pub inheritable: __le32,
}
extern "C" {
    pub static mut file_caps_enabled: core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_cap_t {
    pub val: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpu_vfs_cap_data {
    pub magic_etc: __u32,
    pub rootid: kuid_t,
    pub permitted: kernel_cap_t,
    pub inheritable: kernel_cap_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mnt_idmap {
    _unused: [u8; 0],
}
extern "C" {
    pub fn has_capability(t: *mut task_struct, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn has_ns_capability(
        t: *mut task_struct,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn has_capability_noaudit(t: *mut task_struct, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn has_ns_capability_noaudit(
        t: *mut task_struct,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn capable(cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn ns_capable(ns: *mut user_namespace, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn ns_capable_noaudit(ns: *mut user_namespace, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn ns_capable_setid(ns: *mut user_namespace, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn privileged_wrt_inode_uidgid(
        ns: *mut user_namespace,
        idmap: *mut mnt_idmap,
        inode: *const inode,
    ) -> bool_;
}
extern "C" {
    pub fn capable_wrt_inode_uidgid(
        idmap: *mut mnt_idmap,
        inode: *const inode,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn file_ns_capable(
        file: *const file,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn ptracer_capable(tsk: *mut task_struct, ns: *mut user_namespace) -> bool_;
}
extern "C" {
    pub fn get_vfs_caps_from_disk(
        idmap: *mut mnt_idmap,
        dentry: *const dentry,
        cpu_caps: *mut cpu_vfs_cap_data,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_convert_nscap(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        ivalue: *mut *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct semaphore {
    pub lock: raw_spinlock_t,
    pub count: core::ffi::c_uint,
    pub wait_list: list_head,
}
impl Default for semaphore {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn down(sem: *mut semaphore);
}
extern "C" {
    pub fn down_interruptible(sem: *mut semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_killable(sem: *mut semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_trylock(sem: *mut semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_timeout(sem: *mut semaphore, jiffies: core::ffi::c_long) -> core::ffi::c_int;
}
extern "C" {
    pub fn up(sem: *mut semaphore);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct f_owner_ex {
    pub type_: core::ffi::c_int,
    pub pid: __kernel_pid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flock {
    pub l_type: core::ffi::c_short,
    pub l_whence: core::ffi::c_short,
    pub l_start: __kernel_off_t,
    pub l_len: __kernel_off_t,
    pub l_pid: __kernel_pid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flock64 {
    pub l_type: core::ffi::c_short,
    pub l_whence: core::ffi::c_short,
    pub l_start: __kernel_loff_t,
    pub l_len: __kernel_loff_t,
    pub l_pid: __kernel_pid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct open_how {
    pub flags: __u64,
    pub mode: __u64,
    pub resolve: __u64,
}
pub const migrate_mode_MIGRATE_ASYNC: migrate_mode = 0;
pub const migrate_mode_MIGRATE_SYNC_LIGHT: migrate_mode = 1;
pub const migrate_mode_MIGRATE_SYNC: migrate_mode = 2;
pub type migrate_mode = core::ffi::c_uint;
pub const migrate_reason_MR_COMPACTION: migrate_reason = 0;
pub const migrate_reason_MR_MEMORY_FAILURE: migrate_reason = 1;
pub const migrate_reason_MR_MEMORY_HOTPLUG: migrate_reason = 2;
pub const migrate_reason_MR_SYSCALL: migrate_reason = 3;
pub const migrate_reason_MR_MEMPOLICY_MBIND: migrate_reason = 4;
pub const migrate_reason_MR_NUMA_MISPLACED: migrate_reason = 5;
pub const migrate_reason_MR_CONTIG_RANGE: migrate_reason = 6;
pub const migrate_reason_MR_LONGTERM_PIN: migrate_reason = 7;
pub const migrate_reason_MR_DEMOTION: migrate_reason = 8;
pub const migrate_reason_MR_DAMON: migrate_reason = 9;
pub const migrate_reason_MR_TYPES: migrate_reason = 10;
pub type migrate_reason = core::ffi::c_uint;
extern "C" {
    pub static mut print_fatal_signals: core::ffi::c_int;
}
extern "C" {
    pub fn copy_siginfo_to_user(
        to: *mut siginfo_t,
        from: *const kernel_siginfo_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn copy_siginfo_from_user(
        to: *mut kernel_siginfo_t,
        from: *const siginfo_t,
    ) -> core::ffi::c_int;
}
pub const siginfo_layout_SIL_KILL: siginfo_layout = 0;
pub const siginfo_layout_SIL_TIMER: siginfo_layout = 1;
pub const siginfo_layout_SIL_POLL: siginfo_layout = 2;
pub const siginfo_layout_SIL_FAULT: siginfo_layout = 3;
pub const siginfo_layout_SIL_FAULT_TRAPNO: siginfo_layout = 4;
pub const siginfo_layout_SIL_FAULT_MCEERR: siginfo_layout = 5;
pub const siginfo_layout_SIL_FAULT_BNDERR: siginfo_layout = 6;
pub const siginfo_layout_SIL_FAULT_PKUERR: siginfo_layout = 7;
pub const siginfo_layout_SIL_FAULT_PERF_EVENT: siginfo_layout = 8;
pub const siginfo_layout_SIL_CHLD: siginfo_layout = 9;
pub const siginfo_layout_SIL_RT: siginfo_layout = 10;
pub const siginfo_layout_SIL_SYS: siginfo_layout = 11;
pub type siginfo_layout = core::ffi::c_uint;
extern "C" {
    pub fn siginfo_layout(sig: core::ffi::c_uint, si_code: core::ffi::c_int) -> siginfo_layout;
}
extern "C" {
    pub fn flush_sigqueue(queue: *mut sigpending);
}
extern "C" {
    pub fn next_signal(pending: *mut sigpending, mask: *mut sigset_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_send_sig_info(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        p: *mut task_struct,
        type_: pid_type,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn group_send_sig_info(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        p: *mut task_struct,
        type_: pid_type,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_signal_locked(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        p: *mut task_struct,
        type_: pid_type,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: core::ffi::c_int,
        arg2: *mut sigset_t,
        arg3: *mut sigset_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_current_blocked(arg1: *mut sigset_t);
}
extern "C" {
    pub fn __set_current_blocked(arg1: *const sigset_t);
}
extern "C" {
    pub static mut show_unhandled_signals: core::ffi::c_int;
}
extern "C" {
    pub fn get_signal(ksig: *mut ksignal) -> bool_;
}
extern "C" {
    pub fn signal_setup_done(
        failed: core::ffi::c_int,
        ksig: *mut ksignal,
        stepping: core::ffi::c_int,
    );
}
extern "C" {
    pub fn exit_signals(tsk: *mut task_struct);
}
extern "C" {
    pub fn kernel_sigaction(arg1: core::ffi::c_int, arg2: __sighandler_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kmem_cache {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut sighand_cachep: *mut kmem_cache;
}
extern "C" {
    pub fn unhandled_signal(tsk: *mut task_struct, sig: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn signals_init();
}
extern "C" {
    pub fn restore_altstack(arg1: *const stack_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __save_altstack(arg1: *mut stack_t, arg2: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn sigaltstack_size_valid(ss_size: usize) -> bool_;
}
extern "C" {
    pub fn render_sigset_t(
        arg1: *mut seq_file,
        arg2: *const core::ffi::c_char,
        arg3: *mut sigset_t,
    );
}
extern "C" {
    pub fn task_set_jobctl_pending(task: *mut task_struct, mask: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn task_clear_jobctl_trapping(task: *mut task_struct);
}
extern "C" {
    pub fn task_clear_jobctl_pending(task: *mut task_struct, mask: core::ffi::c_ulong);
}
extern "C" {
    pub fn arch_prctl_spec_ctrl_get(
        task: *mut task_struct,
        which: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_prctl_spec_ctrl_set(
        task: *mut task_struct,
        which: core::ffi::c_ulong,
        ctrl: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_seccomp_spec_mitigate(task: *mut task_struct);
}
extern "C" {
    pub static mut __tracepoint_mmap_lock_start_locking: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_mmap_lock_acquire_returned: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_mmap_lock_released: tracepoint;
}
extern "C" {
    pub fn __mmap_lock_do_trace_start_locking(mm: *mut mm_struct, write: bool_);
}
extern "C" {
    pub fn __mmap_lock_do_trace_acquire_returned(mm: *mut mm_struct, write: bool_, success: bool_);
}
extern "C" {
    pub fn __mmap_lock_do_trace_released(mm: *mut mm_struct, write: bool_);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct exception_table_entry {
    pub insn: core::ffi::c_int,
    pub fixup: core::ffi::c_int,
    pub data: core::ffi::c_int,
}
extern "C" {
    pub fn fixup_exception(
        regs: *mut pt_regs,
        trapnr: core::ffi::c_int,
        error_code: core::ffi::c_ulong,
        fault_addr: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fixup_bug(regs: *mut pt_regs, trapnr: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn ex_get_fixup_type(ip: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn early_fixup_exception(regs: *mut pt_regs, trapnr: core::ffi::c_int);
}
extern "C" {
    pub fn ex_handler_msr_mce(regs: *mut pt_regs, wrmsr: bool_) -> !;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct interval_tree_node {
    pub rb: rb_node,
    pub start: core::ffi::c_ulong,
    pub last: core::ffi::c_ulong,
    pub __subtree_last: core::ffi::c_ulong,
}
impl Default for interval_tree_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn interval_tree_insert(node: *mut interval_tree_node, root: *mut rb_root_cached);
}
extern "C" {
    pub fn interval_tree_remove(node: *mut interval_tree_node, root: *mut rb_root_cached);
}
extern "C" {
    pub fn interval_tree_iter_first(
        root: *mut rb_root_cached,
        start: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
    ) -> *mut interval_tree_node;
}
extern "C" {
    pub fn interval_tree_iter_next(
        node: *mut interval_tree_node,
        start: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
    ) -> *mut interval_tree_node;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct interval_tree_span_iter {
    pub nodes: [*mut interval_tree_node; 2usize],
    pub first_index: core::ffi::c_ulong,
    pub last_index: core::ffi::c_ulong,
    pub __bindgen_anon_1: interval_tree_span_iter__bindgen_ty_1,
    pub __bindgen_anon_2: interval_tree_span_iter__bindgen_ty_2,
    pub is_hole: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union interval_tree_span_iter__bindgen_ty_1 {
    pub start_hole: core::ffi::c_ulong,
    pub start_used: core::ffi::c_ulong,
}
impl Default for interval_tree_span_iter__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union interval_tree_span_iter__bindgen_ty_2 {
    pub last_hole: core::ffi::c_ulong,
    pub last_used: core::ffi::c_ulong,
}
impl Default for interval_tree_span_iter__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for interval_tree_span_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn interval_tree_span_iter_first(
        state: *mut interval_tree_span_iter,
        itree: *mut rb_root_cached,
        first_index: core::ffi::c_ulong,
        last_index: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn interval_tree_span_iter_advance(
        iter: *mut interval_tree_span_iter,
        itree: *mut rb_root_cached,
        new_index: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn interval_tree_span_iter_next(state: *mut interval_tree_span_iter);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmu_notifier_subscriptions {
    _unused: [u8; 0],
}
pub const mmu_notifier_event_MMU_NOTIFY_UNMAP: mmu_notifier_event = 0;
pub const mmu_notifier_event_MMU_NOTIFY_CLEAR: mmu_notifier_event = 1;
pub const mmu_notifier_event_MMU_NOTIFY_PROTECTION_VMA: mmu_notifier_event = 2;
pub const mmu_notifier_event_MMU_NOTIFY_PROTECTION_PAGE: mmu_notifier_event = 3;
pub const mmu_notifier_event_MMU_NOTIFY_SOFT_DIRTY: mmu_notifier_event = 4;
pub const mmu_notifier_event_MMU_NOTIFY_RELEASE: mmu_notifier_event = 5;
pub const mmu_notifier_event_MMU_NOTIFY_MIGRATE: mmu_notifier_event = 6;
pub const mmu_notifier_event_MMU_NOTIFY_EXCLUSIVE: mmu_notifier_event = 7;
pub type mmu_notifier_event = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mmu_notifier_ops {
    pub release: ::core::option::Option<
        unsafe extern "C" fn(subscription: *mut mmu_notifier, mm: *mut mm_struct),
    >,
    pub clear_flush_young: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            start: core::ffi::c_ulong,
            end: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub clear_young: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            start: core::ffi::c_ulong,
            end: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub test_young: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            address: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub invalidate_range_start: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            range: *const mmu_notifier_range,
        ) -> core::ffi::c_int,
    >,
    pub invalidate_range_end: ::core::option::Option<
        unsafe extern "C" fn(subscription: *mut mmu_notifier, range: *const mmu_notifier_range),
    >,
    pub arch_invalidate_secondary_tlbs: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            start: core::ffi::c_ulong,
            end: core::ffi::c_ulong,
        ),
    >,
    pub alloc_notifier:
        ::core::option::Option<unsafe extern "C" fn(mm: *mut mm_struct) -> *mut mmu_notifier>,
    pub free_notifier:
        ::core::option::Option<unsafe extern "C" fn(subscription: *mut mmu_notifier)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmu_notifier {
    pub hlist: hlist_node,
    pub ops: *const mmu_notifier_ops,
    pub mm: *mut mm_struct,
    pub rcu: callback_head,
    pub users: core::ffi::c_uint,
}
impl Default for mmu_notifier {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mmu_interval_notifier_ops {
    pub invalidate: ::core::option::Option<
        unsafe extern "C" fn(
            interval_sub: *mut mmu_interval_notifier,
            range: *const mmu_notifier_range,
            cur_seq: core::ffi::c_ulong,
        ) -> bool_,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmu_interval_notifier {
    pub interval_tree: interval_tree_node,
    pub ops: *const mmu_interval_notifier_ops,
    pub mm: *mut mm_struct,
    pub deferred_item: hlist_node,
    pub invalidate_seq: core::ffi::c_ulong,
}
impl Default for mmu_interval_notifier {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmu_notifier_range {
    pub mm: *mut mm_struct,
    pub start: core::ffi::c_ulong,
    pub end: core::ffi::c_ulong,
    pub flags: core::ffi::c_uint,
    pub event: mmu_notifier_event,
    pub owner: *mut core::ffi::c_void,
}
impl Default for mmu_notifier_range {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mmu_notifier_get_locked(
        ops: *const mmu_notifier_ops,
        mm: *mut mm_struct,
    ) -> *mut mmu_notifier;
}
extern "C" {
    pub fn mmu_notifier_put(subscription: *mut mmu_notifier);
}
extern "C" {
    pub fn mmu_notifier_synchronize();
}
extern "C" {
    pub fn mmu_notifier_register(
        subscription: *mut mmu_notifier,
        mm: *mut mm_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __mmu_notifier_register(
        subscription: *mut mmu_notifier,
        mm: *mut mm_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mmu_notifier_unregister(subscription: *mut mmu_notifier, mm: *mut mm_struct);
}
extern "C" {
    pub fn mmu_interval_read_begin(interval_sub: *mut mmu_interval_notifier) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn mmu_interval_notifier_insert(
        interval_sub: *mut mmu_interval_notifier,
        mm: *mut mm_struct,
        start: core::ffi::c_ulong,
        length: core::ffi::c_ulong,
        ops: *const mmu_interval_notifier_ops,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mmu_interval_notifier_insert_locked(
        interval_sub: *mut mmu_interval_notifier,
        mm: *mut mm_struct,
        start: core::ffi::c_ulong,
        length: core::ffi::c_ulong,
        ops: *const mmu_interval_notifier_ops,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mmu_interval_notifier_remove(interval_sub: *mut mmu_interval_notifier);
}
extern "C" {
    pub fn __mmu_notifier_subscriptions_destroy(mm: *mut mm_struct);
}
extern "C" {
    pub fn __mmu_notifier_release(mm: *mut mm_struct);
}
extern "C" {
    pub fn __mmu_notifier_clear_flush_young(
        mm: *mut mm_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __mmu_notifier_clear_young(
        mm: *mut mm_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __mmu_notifier_test_young(
        mm: *mut mm_struct,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __mmu_notifier_invalidate_range_start(r: *mut mmu_notifier_range) -> core::ffi::c_int;
}
extern "C" {
    pub fn __mmu_notifier_invalidate_range_end(r: *mut mmu_notifier_range);
}
extern "C" {
    pub fn __mmu_notifier_arch_invalidate_secondary_tlbs(
        mm: *mut mm_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn mmu_notifier_range_update_to_read_only(range: *const mmu_notifier_range) -> bool_;
}
extern "C" {
    pub fn pti_init();
}
extern "C" {
    pub fn pti_check_boottime_disable();
}
extern "C" {
    pub fn pti_finalize();
}
extern "C" {
    pub static mut init_pkru_value: u32_;
}
extern "C" {
    pub fn kernel_fpu_begin_mask(kfpu_mask: core::ffi::c_uint);
}
extern "C" {
    pub fn kernel_fpu_end();
}
extern "C" {
    pub fn irq_fpu_usable() -> bool_;
}
extern "C" {
    pub fn fpregs_mark_activate();
}
extern "C" {
    pub fn fpregs_lock_and_load();
}
extern "C" {
    pub fn fpregs_assert_state_consistent();
}
extern "C" {
    pub fn switch_fpu_return();
}
extern "C" {
    pub fn cpu_has_xfeatures(
        xfeatures_mask: u64_,
        feature_name: *mut *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu__exception_code(fpu: *mut fpu, trap_nr: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu_sync_fpstate(fpu: *mut fpu);
}
extern "C" {
    pub fn fpu_reset_from_exception_fixup();
}
extern "C" {
    pub fn fpu__init_cpu();
}
extern "C" {
    pub fn fpu__init_system();
}
extern "C" {
    pub fn fpu__init_check_bugs();
}
extern "C" {
    pub fn fpu__resume_cpu();
}
extern "C" {
    pub static mut fpu_fpregs_owner_ctx: *mut fpu;
}
extern "C" {
    pub fn fpstate_free(fpu: *mut fpu);
}
extern "C" {
    pub fn fpstate_clear_xstate_component(fps: *mut fpstate, xfeature: core::ffi::c_uint);
}
extern "C" {
    pub fn xstate_get_guest_group_perm() -> u64_;
}
extern "C" {
    pub fn get_xsave_addr(
        xsave: *mut xregs_state,
        xfeature_nr: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn fpu_alloc_guest_fpstate(gfpu: *mut fpu_guest) -> bool_;
}
extern "C" {
    pub fn fpu_free_guest_fpstate(gfpu: *mut fpu_guest);
}
extern "C" {
    pub fn fpu_swap_kvm_fpstate(gfpu: *mut fpu_guest, enter_guest: bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu_enable_guest_xfd_features(
        guest_fpu: *mut fpu_guest,
        xfeatures: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu_update_guest_xfd(guest_fpu: *mut fpu_guest, xfd: u64_);
}
extern "C" {
    pub fn fpu_sync_guest_vmexit_xfd_state();
}
extern "C" {
    pub fn fpu_copy_guest_fpstate_to_uabi(
        gfpu: *mut fpu_guest,
        buf: *mut core::ffi::c_void,
        size: core::ffi::c_uint,
        xfeatures: u64_,
        pkru: u32_,
    );
}
extern "C" {
    pub fn fpu_copy_uabi_to_guest_fpstate(
        gfpu: *mut fpu_guest,
        buf: *const core::ffi::c_void,
        xcr0: u64_,
        vpkru: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu_xstate_prctl(
        option: core::ffi::c_int,
        arg2: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn fpu_idle_fpregs();
}
pub const cc_vendor_CC_VENDOR_NONE: cc_vendor = 0;
pub const cc_vendor_CC_VENDOR_AMD: cc_vendor = 1;
pub const cc_vendor_CC_VENDOR_INTEL: cc_vendor = 2;
pub type cc_vendor = core::ffi::c_uint;
pub const cc_mask: u64_ = 0;
extern "C" {
    pub static mut early_top_pgt: [pgd_t; 512usize];
}
extern "C" {
    pub fn __early_make_pgtable(address: core::ffi::c_ulong, pmd: pmdval_t) -> bool_;
}
extern "C" {
    pub fn ptdump_walk_pgd_level(m: *mut seq_file, mm: *mut mm_struct);
}
extern "C" {
    pub fn ptdump_walk_pgd_level_debugfs(m: *mut seq_file, mm: *mut mm_struct, user: bool_);
}
extern "C" {
    pub fn ptdump_walk_pgd_level_checkwx() -> bool_;
}
extern "C" {
    pub fn ptdump_walk_user_pgd_level_checkwx();
}
extern "C" {
    pub static mut empty_zero_page: [core::ffi::c_ulong; 512usize];
}
extern "C" {
    pub static mut pgd_lock: spinlock_t;
}
extern "C" {
    pub static mut pgd_list: list_head;
}
extern "C" {
    pub fn pgd_page_get_mm(page: *mut page) -> *mut mm_struct;
}
extern "C" {
    pub static mut early_pmd_flags: pmdval_t;
}
extern "C" {
    pub fn pte_mkwrite(pte: pte_t, vma: *mut vm_area_struct) -> pte_t;
}
extern "C" {
    pub fn pmd_mkwrite(pmd: pmd_t, vma: *mut vm_area_struct) -> pmd_t;
}
extern "C" {
    pub fn populate_extra_pmd(vaddr: core::ffi::c_ulong) -> *mut pmd_t;
}
extern "C" {
    pub fn populate_extra_pte(vaddr: core::ffi::c_ulong) -> *mut pte_t;
}
extern "C" {
    pub fn __pti_set_user_pgtbl(pgdp: *mut pgd_t, pgd: pgd_t) -> pgd_t;
}
pub const vsyscall_num___NR_vgettimeofday: vsyscall_num = 0;
pub const vsyscall_num___NR_vtime: vsyscall_num = 1;
pub const vsyscall_num___NR_vgetcpu: vsyscall_num = 2;
pub type vsyscall_num = core::ffi::c_uint;
pub const fixed_addresses_VSYSCALL_PAGE: fixed_addresses = 511;
pub const fixed_addresses_FIX_DBGP_BASE: fixed_addresses = 512;
pub const fixed_addresses_FIX_EARLYCON_MEM_BASE: fixed_addresses = 513;
pub const fixed_addresses_FIX_OHCI1394_BASE: fixed_addresses = 514;
pub const fixed_addresses_FIX_APIC_BASE: fixed_addresses = 515;
pub const fixed_addresses_FIX_IO_APIC_BASE_0: fixed_addresses = 516;
pub const fixed_addresses_FIX_IO_APIC_BASE_END: fixed_addresses = 643;
pub const fixed_addresses___end_of_permanent_fixed_addresses: fixed_addresses = 644;
pub const fixed_addresses_FIX_BTMAP_END: fixed_addresses = 1024;
pub const fixed_addresses_FIX_BTMAP_BEGIN: fixed_addresses = 1535;
pub const fixed_addresses___end_of_fixed_addresses: fixed_addresses = 1536;
pub type fixed_addresses = core::ffi::c_uint;
extern "C" {
    pub fn reserve_top_address(reserve: core::ffi::c_ulong);
}
extern "C" {
    pub static mut fixmaps_set: core::ffi::c_int;
}
extern "C" {
    pub static mut pkmap_page_table: *mut pte_t;
}
extern "C" {
    pub fn __native_set_fixmap(idx: fixed_addresses, pte: pte_t);
}
extern "C" {
    pub fn native_set_fixmap(idx: core::ffi::c_uint, phys: phys_addr_t, flags: pgprot_t);
}
extern "C" {
    pub fn early_memremap_encrypted(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_memremap_encrypted_wp(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_memremap_decrypted(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_memremap_decrypted_wp(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __early_set_fixmap(idx: fixed_addresses, phys: phys_addr_t, flags: pgprot_t);
}
extern "C" {
    pub static mut level4_kernel_pgt: [p4d_t; 512usize];
}
extern "C" {
    pub static mut level4_ident_pgt: [p4d_t; 512usize];
}
extern "C" {
    pub static mut level3_kernel_pgt: [pud_t; 512usize];
}
extern "C" {
    pub static mut level3_ident_pgt: [pud_t; 512usize];
}
extern "C" {
    pub static mut level2_kernel_pgt: [pmd_t; 512usize];
}
extern "C" {
    pub static mut level2_fixmap_pgt: [pmd_t; 512usize];
}
extern "C" {
    pub static mut level2_ident_pgt: [pmd_t; 512usize];
}
extern "C" {
    pub static mut level1_fixmap_pgt: [pte_t; 1024usize];
}
extern "C" {
    pub static mut init_top_pgt: [pgd_t; 0usize];
}
extern "C" {
    pub fn paging_init();
}
extern "C" {
    pub fn set_pte_vaddr_p4d(p4d_page: *mut p4d_t, vaddr: core::ffi::c_ulong, new_pte: pte_t);
}
extern "C" {
    pub fn set_pte_vaddr_pud(pud_page: *mut pud_t, vaddr: core::ffi::c_ulong, new_pte: pte_t);
}
extern "C" {
    pub fn cleanup_highmap();
}
extern "C" {
    pub fn init_extra_mapping_uc(phys: core::ffi::c_ulong, size: core::ffi::c_ulong);
}
extern "C" {
    pub fn init_extra_mapping_wb(phys: core::ffi::c_ulong, size: core::ffi::c_ulong);
}
extern "C" {
    pub static mut direct_gbpages: core::ffi::c_int;
}
extern "C" {
    pub fn init_mem_mapping();
}
extern "C" {
    pub fn early_alloc_pgt_buf();
}
extern "C" {
    pub fn init_memory_mapping(
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        prot: pgprot_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub static mut trampoline_pgd_entry: pgd_t;
}
extern "C" {
    pub fn ptep_set_access_flags(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        ptep: *mut pte_t,
        entry: pte_t,
        dirty: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ptep_test_and_clear_young(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        ptep: *mut pte_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ptep_clear_flush_young(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        ptep: *mut pte_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmdp_set_access_flags(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
        entry: pmd_t,
        dirty: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pudp_set_access_flags(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pudp: *mut pud_t,
        entry: pud_t,
        dirty: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmdp_test_and_clear_young(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pudp_test_and_clear_young(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pudp: *mut pud_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmdp_clear_flush_young(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmdp_invalidate_ad(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
    ) -> pmd_t;
}
extern "C" {
    pub fn pfn_modify_allowed(pfn: core::ffi::c_ulong, prot: pgprot_t) -> bool_;
}
extern "C" {
    pub fn arch_check_zapped_pte(vma: *mut vm_area_struct, pte: pte_t);
}
extern "C" {
    pub fn arch_check_zapped_pmd(vma: *mut vm_area_struct, pmd: pmd_t);
}
extern "C" {
    pub static mut tlbstate_untag_mask: core::ffi::c_ulonglong;
}
extern "C" {
    pub fn __flush_tlb_all();
}
extern "C" {
    pub fn cr4_update_irqsoff(set: core::ffi::c_ulong, clear: core::ffi::c_ulong);
}
extern "C" {
    pub fn cr4_read_shadow() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn rep_movs_alternative(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __copy_user_nocache(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn __copy_user_flushcache(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn rep_stos_alternative(
        addr: *mut core::ffi::c_void,
        len: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __get_user_1() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_2() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_4() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_8() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_1() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_2() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_4() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_8() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_bad() -> core::ffi::c_int;
}
extern "C" {
    pub fn __put_user_bad();
}
extern "C" {
    pub fn __put_user_1();
}
extern "C" {
    pub fn __put_user_2();
}
extern "C" {
    pub fn __put_user_4();
}
extern "C" {
    pub fn __put_user_8();
}
extern "C" {
    pub fn __put_user_nocheck_1();
}
extern "C" {
    pub fn __put_user_nocheck_2();
}
extern "C" {
    pub fn __put_user_nocheck_4();
}
extern "C" {
    pub fn __put_user_nocheck_8();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __large_struct {
    pub buf: [core::ffi::c_ulong; 100usize],
}
impl Default for __large_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn copy_from_user_nmi(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn strncpy_from_user(
        dst: *mut core::ffi::c_char,
        src: *const core::ffi::c_char,
        count: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn strnlen_user(str_: *const core::ffi::c_char, n: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn copy_mc_to_kernel(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn copy_mc_to_user(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __try_cmpxchg_user_wrong_size();
}
extern "C" {
    pub fn _copy_from_user(
        arg1: *mut core::ffi::c_void,
        arg2: *const core::ffi::c_void,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _copy_to_user(
        arg1: *mut core::ffi::c_void,
        arg2: *const core::ffi::c_void,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn check_zeroed_user(from: *const core::ffi::c_void, size: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn copy_from_kernel_nofault_allowed(
        unsafe_src: *const core::ffi::c_void,
        size: usize,
    ) -> bool_;
}
extern "C" {
    pub fn copy_to_kernel_nofault(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn copy_from_user_nofault(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn copy_to_user_nofault(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn strncpy_from_kernel_nofault(
        dst: *mut core::ffi::c_char,
        unsafe_addr: *const core::ffi::c_void,
        count: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn strncpy_from_user_nofault(
        dst: *mut core::ffi::c_char,
        unsafe_addr: *const core::ffi::c_void,
        count: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn strnlen_user_nofault(
        unsafe_addr: *const core::ffi::c_void,
        count: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_clone_args {
    pub flags: u64_,
    pub pidfd: *mut core::ffi::c_int,
    pub child_tid: *mut core::ffi::c_int,
    pub parent_tid: *mut core::ffi::c_int,
    pub name: *const core::ffi::c_char,
    pub exit_signal: core::ffi::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub stack: core::ffi::c_ulong,
    pub stack_size: core::ffi::c_ulong,
    pub tls: core::ffi::c_ulong,
    pub set_tid: *mut pid_t,
    pub set_tid_size: usize,
    pub cgroup: core::ffi::c_int,
    pub idle: core::ffi::c_int,
    pub fn_: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
    >,
    pub fn_arg: *mut core::ffi::c_void,
    pub cgrp: *mut cgroup,
    pub cset: *mut css_set,
}
impl Default for kernel_clone_args {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl kernel_clone_args {
    #[inline]
    pub fn kthread(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_kthread(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn io_thread(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_io_thread(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn user_worker(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_user_worker(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_files(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_files(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        kthread: u32_,
        io_thread: u32_,
        user_worker: u32_,
        no_files: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let kthread: u32 = unsafe { ::core::mem::transmute(kthread) };
            kthread as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let io_thread: u32 = unsafe { ::core::mem::transmute(io_thread) };
            io_thread as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let user_worker: u32 = unsafe { ::core::mem::transmute(user_worker) };
            user_worker as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let no_files: u32 = unsafe { ::core::mem::transmute(no_files) };
            no_files as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut tasklist_lock: rwlock_t;
}
extern "C" {
    pub static mut mmlist_lock: spinlock_t;
}
extern "C" {
    pub static mut init_thread_union: thread_union;
}
extern "C" {
    pub static mut init_task: task_struct;
}
extern "C" {
    pub fn lockdep_tasklist_lock_is_held() -> core::ffi::c_int;
}
extern "C" {
    pub fn schedule_tail(prev: *mut task_struct);
}
extern "C" {
    pub fn init_idle(idle: *mut task_struct, cpu: core::ffi::c_int);
}
extern "C" {
    pub fn sched_fork(clone_flags: core::ffi::c_ulong, p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_cgroup_fork(p: *mut task_struct, kargs: *mut kernel_clone_args);
}
extern "C" {
    pub fn sched_post_fork(p: *mut task_struct);
}
extern "C" {
    pub fn sched_dead(p: *mut task_struct);
}
extern "C" {
    pub fn do_task_dead() -> !;
}
extern "C" {
    pub fn make_task_dead(signr: core::ffi::c_int) -> !;
}
extern "C" {
    pub fn mm_cache_init();
}
extern "C" {
    pub fn proc_caches_init();
}
extern "C" {
    pub fn fork_init();
}
extern "C" {
    pub fn release_task(p: *mut task_struct);
}
extern "C" {
    pub fn copy_thread(arg1: *mut task_struct, arg2: *const kernel_clone_args) -> core::ffi::c_int;
}
extern "C" {
    pub fn flush_thread();
}
extern "C" {
    pub fn exit_thread(tsk: *mut task_struct);
}
extern "C" {
    pub fn do_group_exit(arg1: core::ffi::c_int) -> !;
}
extern "C" {
    pub fn exit_files(arg1: *mut task_struct);
}
extern "C" {
    pub fn exit_itimers(arg1: *mut task_struct);
}
extern "C" {
    pub fn kernel_clone(kargs: *mut kernel_clone_args) -> pid_t;
}
extern "C" {
    pub fn copy_process(
        pid: *mut pid,
        trace: core::ffi::c_int,
        node: core::ffi::c_int,
        args: *mut kernel_clone_args,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn create_io_thread(
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        arg: *mut core::ffi::c_void,
        node: core::ffi::c_int,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn fork_idle(arg1: core::ffi::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn kernel_thread(
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        arg: *mut core::ffi::c_void,
        name: *const core::ffi::c_char,
        flags: core::ffi::c_ulong,
    ) -> pid_t;
}
extern "C" {
    pub fn user_mode_thread(
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        arg: *mut core::ffi::c_void,
        flags: core::ffi::c_ulong,
    ) -> pid_t;
}
extern "C" {
    pub fn kernel_wait4(
        arg1: pid_t,
        arg2: *mut core::ffi::c_int,
        arg3: core::ffi::c_int,
        arg4: *mut rusage,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn kernel_wait(pid: pid_t, stat: *mut core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn free_task(tsk: *mut task_struct);
}
extern "C" {
    pub fn sched_exec();
}
extern "C" {
    pub fn __put_task_struct(t: *mut task_struct);
}
extern "C" {
    pub fn __put_task_struct_rcu_cb(rhp: *mut callback_head);
}
extern "C" {
    pub fn put_task_struct_rcu_user(task: *mut task_struct);
}
extern "C" {
    pub fn release_thread(dead_task: *mut task_struct);
}
extern "C" {
    pub static mut arch_task_struct_size: core::ffi::c_int;
}
pub type class_task_lock_t = *mut task_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sysctl_args {
    pub name: *mut core::ffi::c_int,
    pub nlen: core::ffi::c_int,
    pub oldval: *mut core::ffi::c_void,
    pub oldlenp: *mut usize,
    pub newval: *mut core::ffi::c_void,
    pub newlen: usize,
    pub __unused: [core::ffi::c_ulong; 4usize],
}
impl Default for __sysctl_args {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const CTL_KERN: _bindgen_ty_21 = 1;
pub const CTL_VM: _bindgen_ty_21 = 2;
pub const CTL_NET: _bindgen_ty_21 = 3;
pub const CTL_PROC: _bindgen_ty_21 = 4;
pub const CTL_FS: _bindgen_ty_21 = 5;
pub const CTL_DEBUG: _bindgen_ty_21 = 6;
pub const CTL_DEV: _bindgen_ty_21 = 7;
pub const CTL_BUS: _bindgen_ty_21 = 8;
pub const CTL_ABI: _bindgen_ty_21 = 9;
pub const CTL_CPU: _bindgen_ty_21 = 10;
pub const CTL_ARLAN: _bindgen_ty_21 = 254;
pub const CTL_S390DBF: _bindgen_ty_21 = 5677;
pub const CTL_SUNRPC: _bindgen_ty_21 = 7249;
pub const CTL_PM: _bindgen_ty_21 = 9899;
pub const CTL_FRV: _bindgen_ty_21 = 9898;
pub type _bindgen_ty_21 = core::ffi::c_uint;
pub const CTL_BUS_ISA: _bindgen_ty_22 = 1;
pub type _bindgen_ty_22 = core::ffi::c_uint;
pub const INOTIFY_MAX_USER_INSTANCES: _bindgen_ty_23 = 1;
pub const INOTIFY_MAX_USER_WATCHES: _bindgen_ty_23 = 2;
pub const INOTIFY_MAX_QUEUED_EVENTS: _bindgen_ty_23 = 3;
pub type _bindgen_ty_23 = core::ffi::c_uint;
pub const KERN_OSTYPE: _bindgen_ty_24 = 1;
pub const KERN_OSRELEASE: _bindgen_ty_24 = 2;
pub const KERN_OSREV: _bindgen_ty_24 = 3;
pub const KERN_VERSION: _bindgen_ty_24 = 4;
pub const KERN_SECUREMASK: _bindgen_ty_24 = 5;
pub const KERN_PROF: _bindgen_ty_24 = 6;
pub const KERN_NODENAME: _bindgen_ty_24 = 7;
pub const KERN_DOMAINNAME: _bindgen_ty_24 = 8;
pub const KERN_PANIC: _bindgen_ty_24 = 15;
pub const KERN_REALROOTDEV: _bindgen_ty_24 = 16;
pub const KERN_SPARC_REBOOT: _bindgen_ty_24 = 21;
pub const KERN_CTLALTDEL: _bindgen_ty_24 = 22;
pub const KERN_PRINTK: _bindgen_ty_24 = 23;
pub const KERN_NAMETRANS: _bindgen_ty_24 = 24;
pub const KERN_PPC_HTABRECLAIM: _bindgen_ty_24 = 25;
pub const KERN_PPC_ZEROPAGED: _bindgen_ty_24 = 26;
pub const KERN_PPC_POWERSAVE_NAP: _bindgen_ty_24 = 27;
pub const KERN_MODPROBE: _bindgen_ty_24 = 28;
pub const KERN_SG_BIG_BUFF: _bindgen_ty_24 = 29;
pub const KERN_ACCT: _bindgen_ty_24 = 30;
pub const KERN_PPC_L2CR: _bindgen_ty_24 = 31;
pub const KERN_RTSIGNR: _bindgen_ty_24 = 32;
pub const KERN_RTSIGMAX: _bindgen_ty_24 = 33;
pub const KERN_SHMMAX: _bindgen_ty_24 = 34;
pub const KERN_MSGMAX: _bindgen_ty_24 = 35;
pub const KERN_MSGMNB: _bindgen_ty_24 = 36;
pub const KERN_MSGPOOL: _bindgen_ty_24 = 37;
pub const KERN_SYSRQ: _bindgen_ty_24 = 38;
pub const KERN_MAX_THREADS: _bindgen_ty_24 = 39;
pub const KERN_RANDOM: _bindgen_ty_24 = 40;
pub const KERN_SHMALL: _bindgen_ty_24 = 41;
pub const KERN_MSGMNI: _bindgen_ty_24 = 42;
pub const KERN_SEM: _bindgen_ty_24 = 43;
pub const KERN_SPARC_STOP_A: _bindgen_ty_24 = 44;
pub const KERN_SHMMNI: _bindgen_ty_24 = 45;
pub const KERN_OVERFLOWUID: _bindgen_ty_24 = 46;
pub const KERN_OVERFLOWGID: _bindgen_ty_24 = 47;
pub const KERN_SHMPATH: _bindgen_ty_24 = 48;
pub const KERN_HOTPLUG: _bindgen_ty_24 = 49;
pub const KERN_IEEE_EMULATION_WARNINGS: _bindgen_ty_24 = 50;
pub const KERN_S390_USER_DEBUG_LOGGING: _bindgen_ty_24 = 51;
pub const KERN_CORE_USES_PID: _bindgen_ty_24 = 52;
pub const KERN_TAINTED: _bindgen_ty_24 = 53;
pub const KERN_CADPID: _bindgen_ty_24 = 54;
pub const KERN_PIDMAX: _bindgen_ty_24 = 55;
pub const KERN_CORE_PATTERN: _bindgen_ty_24 = 56;
pub const KERN_PANIC_ON_OOPS: _bindgen_ty_24 = 57;
pub const KERN_HPPA_PWRSW: _bindgen_ty_24 = 58;
pub const KERN_HPPA_UNALIGNED: _bindgen_ty_24 = 59;
pub const KERN_PRINTK_RATELIMIT: _bindgen_ty_24 = 60;
pub const KERN_PRINTK_RATELIMIT_BURST: _bindgen_ty_24 = 61;
pub const KERN_PTY: _bindgen_ty_24 = 62;
pub const KERN_NGROUPS_MAX: _bindgen_ty_24 = 63;
pub const KERN_SPARC_SCONS_PWROFF: _bindgen_ty_24 = 64;
pub const KERN_HZ_TIMER: _bindgen_ty_24 = 65;
pub const KERN_UNKNOWN_NMI_PANIC: _bindgen_ty_24 = 66;
pub const KERN_BOOTLOADER_TYPE: _bindgen_ty_24 = 67;
pub const KERN_RANDOMIZE: _bindgen_ty_24 = 68;
pub const KERN_SETUID_DUMPABLE: _bindgen_ty_24 = 69;
pub const KERN_SPIN_RETRY: _bindgen_ty_24 = 70;
pub const KERN_ACPI_VIDEO_FLAGS: _bindgen_ty_24 = 71;
pub const KERN_IA64_UNALIGNED: _bindgen_ty_24 = 72;
pub const KERN_COMPAT_LOG: _bindgen_ty_24 = 73;
pub const KERN_MAX_LOCK_DEPTH: _bindgen_ty_24 = 74;
pub const KERN_NMI_WATCHDOG: _bindgen_ty_24 = 75;
pub const KERN_PANIC_ON_NMI: _bindgen_ty_24 = 76;
pub const KERN_PANIC_ON_WARN: _bindgen_ty_24 = 77;
pub const KERN_PANIC_PRINT: _bindgen_ty_24 = 78;
pub type _bindgen_ty_24 = core::ffi::c_uint;
pub const VM_UNUSED1: _bindgen_ty_25 = 1;
pub const VM_UNUSED2: _bindgen_ty_25 = 2;
pub const VM_UNUSED3: _bindgen_ty_25 = 3;
pub const VM_UNUSED4: _bindgen_ty_25 = 4;
pub const VM_OVERCOMMIT_MEMORY: _bindgen_ty_25 = 5;
pub const VM_UNUSED5: _bindgen_ty_25 = 6;
pub const VM_UNUSED7: _bindgen_ty_25 = 7;
pub const VM_UNUSED8: _bindgen_ty_25 = 8;
pub const VM_UNUSED9: _bindgen_ty_25 = 9;
pub const VM_PAGE_CLUSTER: _bindgen_ty_25 = 10;
pub const VM_DIRTY_BACKGROUND: _bindgen_ty_25 = 11;
pub const VM_DIRTY_RATIO: _bindgen_ty_25 = 12;
pub const VM_DIRTY_WB_CS: _bindgen_ty_25 = 13;
pub const VM_DIRTY_EXPIRE_CS: _bindgen_ty_25 = 14;
pub const VM_NR_PDFLUSH_THREADS: _bindgen_ty_25 = 15;
pub const VM_OVERCOMMIT_RATIO: _bindgen_ty_25 = 16;
pub const VM_PAGEBUF: _bindgen_ty_25 = 17;
pub const VM_HUGETLB_PAGES: _bindgen_ty_25 = 18;
pub const VM_SWAPPINESS: _bindgen_ty_25 = 19;
pub const VM_LOWMEM_RESERVE_RATIO: _bindgen_ty_25 = 20;
pub const VM_MIN_FREE_KBYTES: _bindgen_ty_25 = 21;
pub const VM_MAX_MAP_COUNT: _bindgen_ty_25 = 22;
pub const VM_LAPTOP_MODE: _bindgen_ty_25 = 23;
pub const VM_BLOCK_DUMP: _bindgen_ty_25 = 24;
pub const VM_HUGETLB_GROUP: _bindgen_ty_25 = 25;
pub const VM_VFS_CACHE_PRESSURE: _bindgen_ty_25 = 26;
pub const VM_LEGACY_VA_LAYOUT: _bindgen_ty_25 = 27;
pub const VM_SWAP_TOKEN_TIMEOUT: _bindgen_ty_25 = 28;
pub const VM_DROP_PAGECACHE: _bindgen_ty_25 = 29;
pub const VM_PERCPU_PAGELIST_FRACTION: _bindgen_ty_25 = 30;
pub const VM_ZONE_RECLAIM_MODE: _bindgen_ty_25 = 31;
pub const VM_MIN_UNMAPPED: _bindgen_ty_25 = 32;
pub const VM_PANIC_ON_OOM: _bindgen_ty_25 = 33;
pub const VM_VDSO_ENABLED: _bindgen_ty_25 = 34;
pub const VM_MIN_SLAB: _bindgen_ty_25 = 35;
pub type _bindgen_ty_25 = core::ffi::c_uint;
pub const NET_CORE: _bindgen_ty_26 = 1;
pub const NET_ETHER: _bindgen_ty_26 = 2;
pub const NET_802: _bindgen_ty_26 = 3;
pub const NET_UNIX: _bindgen_ty_26 = 4;
pub const NET_IPV4: _bindgen_ty_26 = 5;
pub const NET_IPX: _bindgen_ty_26 = 6;
pub const NET_ATALK: _bindgen_ty_26 = 7;
pub const NET_NETROM: _bindgen_ty_26 = 8;
pub const NET_AX25: _bindgen_ty_26 = 9;
pub const NET_BRIDGE: _bindgen_ty_26 = 10;
pub const NET_ROSE: _bindgen_ty_26 = 11;
pub const NET_IPV6: _bindgen_ty_26 = 12;
pub const NET_X25: _bindgen_ty_26 = 13;
pub const NET_TR: _bindgen_ty_26 = 14;
pub const NET_DECNET: _bindgen_ty_26 = 15;
pub const NET_ECONET: _bindgen_ty_26 = 16;
pub const NET_SCTP: _bindgen_ty_26 = 17;
pub const NET_LLC: _bindgen_ty_26 = 18;
pub const NET_NETFILTER: _bindgen_ty_26 = 19;
pub const NET_DCCP: _bindgen_ty_26 = 20;
pub const NET_IRDA: _bindgen_ty_26 = 412;
pub type _bindgen_ty_26 = core::ffi::c_uint;
pub const RANDOM_POOLSIZE: _bindgen_ty_27 = 1;
pub const RANDOM_ENTROPY_COUNT: _bindgen_ty_27 = 2;
pub const RANDOM_READ_THRESH: _bindgen_ty_27 = 3;
pub const RANDOM_WRITE_THRESH: _bindgen_ty_27 = 4;
pub const RANDOM_BOOT_ID: _bindgen_ty_27 = 5;
pub const RANDOM_UUID: _bindgen_ty_27 = 6;
pub type _bindgen_ty_27 = core::ffi::c_uint;
pub const PTY_MAX: _bindgen_ty_28 = 1;
pub const PTY_NR: _bindgen_ty_28 = 2;
pub type _bindgen_ty_28 = core::ffi::c_uint;
pub const BUS_ISA_MEM_BASE: _bindgen_ty_29 = 1;
pub const BUS_ISA_PORT_BASE: _bindgen_ty_29 = 2;
pub const BUS_ISA_PORT_SHIFT: _bindgen_ty_29 = 3;
pub type _bindgen_ty_29 = core::ffi::c_uint;
pub const NET_CORE_WMEM_MAX: _bindgen_ty_30 = 1;
pub const NET_CORE_RMEM_MAX: _bindgen_ty_30 = 2;
pub const NET_CORE_WMEM_DEFAULT: _bindgen_ty_30 = 3;
pub const NET_CORE_RMEM_DEFAULT: _bindgen_ty_30 = 4;
pub const NET_CORE_MAX_BACKLOG: _bindgen_ty_30 = 6;
pub const NET_CORE_FASTROUTE: _bindgen_ty_30 = 7;
pub const NET_CORE_MSG_COST: _bindgen_ty_30 = 8;
pub const NET_CORE_MSG_BURST: _bindgen_ty_30 = 9;
pub const NET_CORE_OPTMEM_MAX: _bindgen_ty_30 = 10;
pub const NET_CORE_HOT_LIST_LENGTH: _bindgen_ty_30 = 11;
pub const NET_CORE_DIVERT_VERSION: _bindgen_ty_30 = 12;
pub const NET_CORE_NO_CONG_THRESH: _bindgen_ty_30 = 13;
pub const NET_CORE_NO_CONG: _bindgen_ty_30 = 14;
pub const NET_CORE_LO_CONG: _bindgen_ty_30 = 15;
pub const NET_CORE_MOD_CONG: _bindgen_ty_30 = 16;
pub const NET_CORE_DEV_WEIGHT: _bindgen_ty_30 = 17;
pub const NET_CORE_SOMAXCONN: _bindgen_ty_30 = 18;
pub const NET_CORE_BUDGET: _bindgen_ty_30 = 19;
pub const NET_CORE_AEVENT_ETIME: _bindgen_ty_30 = 20;
pub const NET_CORE_AEVENT_RSEQTH: _bindgen_ty_30 = 21;
pub const NET_CORE_WARNINGS: _bindgen_ty_30 = 22;
pub type _bindgen_ty_30 = core::ffi::c_uint;
pub const NET_UNIX_DESTROY_DELAY: _bindgen_ty_31 = 1;
pub const NET_UNIX_DELETE_DELAY: _bindgen_ty_31 = 2;
pub const NET_UNIX_MAX_DGRAM_QLEN: _bindgen_ty_31 = 3;
pub type _bindgen_ty_31 = core::ffi::c_uint;
pub const NET_NF_CONNTRACK_MAX: _bindgen_ty_32 = 1;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT: _bindgen_ty_32 = 2;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV: _bindgen_ty_32 = 3;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED: _bindgen_ty_32 = 4;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT: _bindgen_ty_32 = 5;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT: _bindgen_ty_32 = 6;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK: _bindgen_ty_32 = 7;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT: _bindgen_ty_32 = 8;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE: _bindgen_ty_32 = 9;
pub const NET_NF_CONNTRACK_UDP_TIMEOUT: _bindgen_ty_32 = 10;
pub const NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM: _bindgen_ty_32 = 11;
pub const NET_NF_CONNTRACK_ICMP_TIMEOUT: _bindgen_ty_32 = 12;
pub const NET_NF_CONNTRACK_GENERIC_TIMEOUT: _bindgen_ty_32 = 13;
pub const NET_NF_CONNTRACK_BUCKETS: _bindgen_ty_32 = 14;
pub const NET_NF_CONNTRACK_LOG_INVALID: _bindgen_ty_32 = 15;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS: _bindgen_ty_32 = 16;
pub const NET_NF_CONNTRACK_TCP_LOOSE: _bindgen_ty_32 = 17;
pub const NET_NF_CONNTRACK_TCP_BE_LIBERAL: _bindgen_ty_32 = 18;
pub const NET_NF_CONNTRACK_TCP_MAX_RETRANS: _bindgen_ty_32 = 19;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED: _bindgen_ty_32 = 20;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT: _bindgen_ty_32 = 21;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED: _bindgen_ty_32 = 22;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED: _bindgen_ty_32 = 23;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT: _bindgen_ty_32 = 24;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD: _bindgen_ty_32 = 25;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT: _bindgen_ty_32 = 26;
pub const NET_NF_CONNTRACK_COUNT: _bindgen_ty_32 = 27;
pub const NET_NF_CONNTRACK_ICMPV6_TIMEOUT: _bindgen_ty_32 = 28;
pub const NET_NF_CONNTRACK_FRAG6_TIMEOUT: _bindgen_ty_32 = 29;
pub const NET_NF_CONNTRACK_FRAG6_LOW_THRESH: _bindgen_ty_32 = 30;
pub const NET_NF_CONNTRACK_FRAG6_HIGH_THRESH: _bindgen_ty_32 = 31;
pub const NET_NF_CONNTRACK_CHECKSUM: _bindgen_ty_32 = 32;
pub type _bindgen_ty_32 = core::ffi::c_uint;
pub const NET_IPV4_FORWARD: _bindgen_ty_33 = 8;
pub const NET_IPV4_DYNADDR: _bindgen_ty_33 = 9;
pub const NET_IPV4_CONF: _bindgen_ty_33 = 16;
pub const NET_IPV4_NEIGH: _bindgen_ty_33 = 17;
pub const NET_IPV4_ROUTE: _bindgen_ty_33 = 18;
pub const NET_IPV4_FIB_HASH: _bindgen_ty_33 = 19;
pub const NET_IPV4_NETFILTER: _bindgen_ty_33 = 20;
pub const NET_IPV4_TCP_TIMESTAMPS: _bindgen_ty_33 = 33;
pub const NET_IPV4_TCP_WINDOW_SCALING: _bindgen_ty_33 = 34;
pub const NET_IPV4_TCP_SACK: _bindgen_ty_33 = 35;
pub const NET_IPV4_TCP_RETRANS_COLLAPSE: _bindgen_ty_33 = 36;
pub const NET_IPV4_DEFAULT_TTL: _bindgen_ty_33 = 37;
pub const NET_IPV4_AUTOCONFIG: _bindgen_ty_33 = 38;
pub const NET_IPV4_NO_PMTU_DISC: _bindgen_ty_33 = 39;
pub const NET_IPV4_TCP_SYN_RETRIES: _bindgen_ty_33 = 40;
pub const NET_IPV4_IPFRAG_HIGH_THRESH: _bindgen_ty_33 = 41;
pub const NET_IPV4_IPFRAG_LOW_THRESH: _bindgen_ty_33 = 42;
pub const NET_IPV4_IPFRAG_TIME: _bindgen_ty_33 = 43;
pub const NET_IPV4_TCP_MAX_KA_PROBES: _bindgen_ty_33 = 44;
pub const NET_IPV4_TCP_KEEPALIVE_TIME: _bindgen_ty_33 = 45;
pub const NET_IPV4_TCP_KEEPALIVE_PROBES: _bindgen_ty_33 = 46;
pub const NET_IPV4_TCP_RETRIES1: _bindgen_ty_33 = 47;
pub const NET_IPV4_TCP_RETRIES2: _bindgen_ty_33 = 48;
pub const NET_IPV4_TCP_FIN_TIMEOUT: _bindgen_ty_33 = 49;
pub const NET_IPV4_IP_MASQ_DEBUG: _bindgen_ty_33 = 50;
pub const NET_TCP_SYNCOOKIES: _bindgen_ty_33 = 51;
pub const NET_TCP_STDURG: _bindgen_ty_33 = 52;
pub const NET_TCP_RFC1337: _bindgen_ty_33 = 53;
pub const NET_TCP_SYN_TAILDROP: _bindgen_ty_33 = 54;
pub const NET_TCP_MAX_SYN_BACKLOG: _bindgen_ty_33 = 55;
pub const NET_IPV4_LOCAL_PORT_RANGE: _bindgen_ty_33 = 56;
pub const NET_IPV4_ICMP_ECHO_IGNORE_ALL: _bindgen_ty_33 = 57;
pub const NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS: _bindgen_ty_33 = 58;
pub const NET_IPV4_ICMP_SOURCEQUENCH_RATE: _bindgen_ty_33 = 59;
pub const NET_IPV4_ICMP_DESTUNREACH_RATE: _bindgen_ty_33 = 60;
pub const NET_IPV4_ICMP_TIMEEXCEED_RATE: _bindgen_ty_33 = 61;
pub const NET_IPV4_ICMP_PARAMPROB_RATE: _bindgen_ty_33 = 62;
pub const NET_IPV4_ICMP_ECHOREPLY_RATE: _bindgen_ty_33 = 63;
pub const NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES: _bindgen_ty_33 = 64;
pub const NET_IPV4_IGMP_MAX_MEMBERSHIPS: _bindgen_ty_33 = 65;
pub const NET_TCP_TW_RECYCLE: _bindgen_ty_33 = 66;
pub const NET_IPV4_ALWAYS_DEFRAG: _bindgen_ty_33 = 67;
pub const NET_IPV4_TCP_KEEPALIVE_INTVL: _bindgen_ty_33 = 68;
pub const NET_IPV4_INET_PEER_THRESHOLD: _bindgen_ty_33 = 69;
pub const NET_IPV4_INET_PEER_MINTTL: _bindgen_ty_33 = 70;
pub const NET_IPV4_INET_PEER_MAXTTL: _bindgen_ty_33 = 71;
pub const NET_IPV4_INET_PEER_GC_MINTIME: _bindgen_ty_33 = 72;
pub const NET_IPV4_INET_PEER_GC_MAXTIME: _bindgen_ty_33 = 73;
pub const NET_TCP_ORPHAN_RETRIES: _bindgen_ty_33 = 74;
pub const NET_TCP_ABORT_ON_OVERFLOW: _bindgen_ty_33 = 75;
pub const NET_TCP_SYNACK_RETRIES: _bindgen_ty_33 = 76;
pub const NET_TCP_MAX_ORPHANS: _bindgen_ty_33 = 77;
pub const NET_TCP_MAX_TW_BUCKETS: _bindgen_ty_33 = 78;
pub const NET_TCP_FACK: _bindgen_ty_33 = 79;
pub const NET_TCP_REORDERING: _bindgen_ty_33 = 80;
pub const NET_TCP_ECN: _bindgen_ty_33 = 81;
pub const NET_TCP_DSACK: _bindgen_ty_33 = 82;
pub const NET_TCP_MEM: _bindgen_ty_33 = 83;
pub const NET_TCP_WMEM: _bindgen_ty_33 = 84;
pub const NET_TCP_RMEM: _bindgen_ty_33 = 85;
pub const NET_TCP_APP_WIN: _bindgen_ty_33 = 86;
pub const NET_TCP_ADV_WIN_SCALE: _bindgen_ty_33 = 87;
pub const NET_IPV4_NONLOCAL_BIND: _bindgen_ty_33 = 88;
pub const NET_IPV4_ICMP_RATELIMIT: _bindgen_ty_33 = 89;
pub const NET_IPV4_ICMP_RATEMASK: _bindgen_ty_33 = 90;
pub const NET_TCP_TW_REUSE: _bindgen_ty_33 = 91;
pub const NET_TCP_FRTO: _bindgen_ty_33 = 92;
pub const NET_TCP_LOW_LATENCY: _bindgen_ty_33 = 93;
pub const NET_IPV4_IPFRAG_SECRET_INTERVAL: _bindgen_ty_33 = 94;
pub const NET_IPV4_IGMP_MAX_MSF: _bindgen_ty_33 = 96;
pub const NET_TCP_NO_METRICS_SAVE: _bindgen_ty_33 = 97;
pub const NET_TCP_DEFAULT_WIN_SCALE: _bindgen_ty_33 = 105;
pub const NET_TCP_MODERATE_RCVBUF: _bindgen_ty_33 = 106;
pub const NET_TCP_TSO_WIN_DIVISOR: _bindgen_ty_33 = 107;
pub const NET_TCP_BIC_BETA: _bindgen_ty_33 = 108;
pub const NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR: _bindgen_ty_33 = 109;
pub const NET_TCP_CONG_CONTROL: _bindgen_ty_33 = 110;
pub const NET_TCP_ABC: _bindgen_ty_33 = 111;
pub const NET_IPV4_IPFRAG_MAX_DIST: _bindgen_ty_33 = 112;
pub const NET_TCP_MTU_PROBING: _bindgen_ty_33 = 113;
pub const NET_TCP_BASE_MSS: _bindgen_ty_33 = 114;
pub const NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS: _bindgen_ty_33 = 115;
pub const NET_TCP_DMA_COPYBREAK: _bindgen_ty_33 = 116;
pub const NET_TCP_SLOW_START_AFTER_IDLE: _bindgen_ty_33 = 117;
pub const NET_CIPSOV4_CACHE_ENABLE: _bindgen_ty_33 = 118;
pub const NET_CIPSOV4_CACHE_BUCKET_SIZE: _bindgen_ty_33 = 119;
pub const NET_CIPSOV4_RBM_OPTFMT: _bindgen_ty_33 = 120;
pub const NET_CIPSOV4_RBM_STRICTVALID: _bindgen_ty_33 = 121;
pub const NET_TCP_AVAIL_CONG_CONTROL: _bindgen_ty_33 = 122;
pub const NET_TCP_ALLOWED_CONG_CONTROL: _bindgen_ty_33 = 123;
pub const NET_TCP_MAX_SSTHRESH: _bindgen_ty_33 = 124;
pub const NET_TCP_FRTO_RESPONSE: _bindgen_ty_33 = 125;
pub type _bindgen_ty_33 = core::ffi::c_uint;
pub const NET_IPV4_ROUTE_FLUSH: _bindgen_ty_34 = 1;
pub const NET_IPV4_ROUTE_MIN_DELAY: _bindgen_ty_34 = 2;
pub const NET_IPV4_ROUTE_MAX_DELAY: _bindgen_ty_34 = 3;
pub const NET_IPV4_ROUTE_GC_THRESH: _bindgen_ty_34 = 4;
pub const NET_IPV4_ROUTE_MAX_SIZE: _bindgen_ty_34 = 5;
pub const NET_IPV4_ROUTE_GC_MIN_INTERVAL: _bindgen_ty_34 = 6;
pub const NET_IPV4_ROUTE_GC_TIMEOUT: _bindgen_ty_34 = 7;
pub const NET_IPV4_ROUTE_GC_INTERVAL: _bindgen_ty_34 = 8;
pub const NET_IPV4_ROUTE_REDIRECT_LOAD: _bindgen_ty_34 = 9;
pub const NET_IPV4_ROUTE_REDIRECT_NUMBER: _bindgen_ty_34 = 10;
pub const NET_IPV4_ROUTE_REDIRECT_SILENCE: _bindgen_ty_34 = 11;
pub const NET_IPV4_ROUTE_ERROR_COST: _bindgen_ty_34 = 12;
pub const NET_IPV4_ROUTE_ERROR_BURST: _bindgen_ty_34 = 13;
pub const NET_IPV4_ROUTE_GC_ELASTICITY: _bindgen_ty_34 = 14;
pub const NET_IPV4_ROUTE_MTU_EXPIRES: _bindgen_ty_34 = 15;
pub const NET_IPV4_ROUTE_MIN_PMTU: _bindgen_ty_34 = 16;
pub const NET_IPV4_ROUTE_MIN_ADVMSS: _bindgen_ty_34 = 17;
pub const NET_IPV4_ROUTE_SECRET_INTERVAL: _bindgen_ty_34 = 18;
pub const NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS: _bindgen_ty_34 = 19;
pub type _bindgen_ty_34 = core::ffi::c_uint;
pub const NET_PROTO_CONF_ALL: _bindgen_ty_35 = -2;
pub const NET_PROTO_CONF_DEFAULT: _bindgen_ty_35 = -3;
pub type _bindgen_ty_35 = core::ffi::c_int;
pub const NET_IPV4_CONF_FORWARDING: _bindgen_ty_36 = 1;
pub const NET_IPV4_CONF_MC_FORWARDING: _bindgen_ty_36 = 2;
pub const NET_IPV4_CONF_PROXY_ARP: _bindgen_ty_36 = 3;
pub const NET_IPV4_CONF_ACCEPT_REDIRECTS: _bindgen_ty_36 = 4;
pub const NET_IPV4_CONF_SECURE_REDIRECTS: _bindgen_ty_36 = 5;
pub const NET_IPV4_CONF_SEND_REDIRECTS: _bindgen_ty_36 = 6;
pub const NET_IPV4_CONF_SHARED_MEDIA: _bindgen_ty_36 = 7;
pub const NET_IPV4_CONF_RP_FILTER: _bindgen_ty_36 = 8;
pub const NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE: _bindgen_ty_36 = 9;
pub const NET_IPV4_CONF_BOOTP_RELAY: _bindgen_ty_36 = 10;
pub const NET_IPV4_CONF_LOG_MARTIANS: _bindgen_ty_36 = 11;
pub const NET_IPV4_CONF_TAG: _bindgen_ty_36 = 12;
pub const NET_IPV4_CONF_ARPFILTER: _bindgen_ty_36 = 13;
pub const NET_IPV4_CONF_MEDIUM_ID: _bindgen_ty_36 = 14;
pub const NET_IPV4_CONF_NOXFRM: _bindgen_ty_36 = 15;
pub const NET_IPV4_CONF_NOPOLICY: _bindgen_ty_36 = 16;
pub const NET_IPV4_CONF_FORCE_IGMP_VERSION: _bindgen_ty_36 = 17;
pub const NET_IPV4_CONF_ARP_ANNOUNCE: _bindgen_ty_36 = 18;
pub const NET_IPV4_CONF_ARP_IGNORE: _bindgen_ty_36 = 19;
pub const NET_IPV4_CONF_PROMOTE_SECONDARIES: _bindgen_ty_36 = 20;
pub const NET_IPV4_CONF_ARP_ACCEPT: _bindgen_ty_36 = 21;
pub const NET_IPV4_CONF_ARP_NOTIFY: _bindgen_ty_36 = 22;
pub const NET_IPV4_CONF_ARP_EVICT_NOCARRIER: _bindgen_ty_36 = 23;
pub type _bindgen_ty_36 = core::ffi::c_uint;
pub const NET_IPV4_NF_CONNTRACK_MAX: _bindgen_ty_37 = 1;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT: _bindgen_ty_37 = 2;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV: _bindgen_ty_37 = 3;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED: _bindgen_ty_37 = 4;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT: _bindgen_ty_37 = 5;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT: _bindgen_ty_37 = 6;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK: _bindgen_ty_37 = 7;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT: _bindgen_ty_37 = 8;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE: _bindgen_ty_37 = 9;
pub const NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT: _bindgen_ty_37 = 10;
pub const NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM: _bindgen_ty_37 = 11;
pub const NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT: _bindgen_ty_37 = 12;
pub const NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT: _bindgen_ty_37 = 13;
pub const NET_IPV4_NF_CONNTRACK_BUCKETS: _bindgen_ty_37 = 14;
pub const NET_IPV4_NF_CONNTRACK_LOG_INVALID: _bindgen_ty_37 = 15;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS: _bindgen_ty_37 = 16;
pub const NET_IPV4_NF_CONNTRACK_TCP_LOOSE: _bindgen_ty_37 = 17;
pub const NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL: _bindgen_ty_37 = 18;
pub const NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS: _bindgen_ty_37 = 19;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED: _bindgen_ty_37 = 20;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT: _bindgen_ty_37 = 21;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED: _bindgen_ty_37 = 22;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED: _bindgen_ty_37 = 23;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT: _bindgen_ty_37 = 24;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD: _bindgen_ty_37 = 25;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT: _bindgen_ty_37 = 26;
pub const NET_IPV4_NF_CONNTRACK_COUNT: _bindgen_ty_37 = 27;
pub const NET_IPV4_NF_CONNTRACK_CHECKSUM: _bindgen_ty_37 = 28;
pub type _bindgen_ty_37 = core::ffi::c_uint;
pub const NET_IPV6_CONF: _bindgen_ty_38 = 16;
pub const NET_IPV6_NEIGH: _bindgen_ty_38 = 17;
pub const NET_IPV6_ROUTE: _bindgen_ty_38 = 18;
pub const NET_IPV6_ICMP: _bindgen_ty_38 = 19;
pub const NET_IPV6_BINDV6ONLY: _bindgen_ty_38 = 20;
pub const NET_IPV6_IP6FRAG_HIGH_THRESH: _bindgen_ty_38 = 21;
pub const NET_IPV6_IP6FRAG_LOW_THRESH: _bindgen_ty_38 = 22;
pub const NET_IPV6_IP6FRAG_TIME: _bindgen_ty_38 = 23;
pub const NET_IPV6_IP6FRAG_SECRET_INTERVAL: _bindgen_ty_38 = 24;
pub const NET_IPV6_MLD_MAX_MSF: _bindgen_ty_38 = 25;
pub type _bindgen_ty_38 = core::ffi::c_uint;
pub const NET_IPV6_ROUTE_FLUSH: _bindgen_ty_39 = 1;
pub const NET_IPV6_ROUTE_GC_THRESH: _bindgen_ty_39 = 2;
pub const NET_IPV6_ROUTE_MAX_SIZE: _bindgen_ty_39 = 3;
pub const NET_IPV6_ROUTE_GC_MIN_INTERVAL: _bindgen_ty_39 = 4;
pub const NET_IPV6_ROUTE_GC_TIMEOUT: _bindgen_ty_39 = 5;
pub const NET_IPV6_ROUTE_GC_INTERVAL: _bindgen_ty_39 = 6;
pub const NET_IPV6_ROUTE_GC_ELASTICITY: _bindgen_ty_39 = 7;
pub const NET_IPV6_ROUTE_MTU_EXPIRES: _bindgen_ty_39 = 8;
pub const NET_IPV6_ROUTE_MIN_ADVMSS: _bindgen_ty_39 = 9;
pub const NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS: _bindgen_ty_39 = 10;
pub type _bindgen_ty_39 = core::ffi::c_uint;
pub const NET_IPV6_FORWARDING: _bindgen_ty_40 = 1;
pub const NET_IPV6_HOP_LIMIT: _bindgen_ty_40 = 2;
pub const NET_IPV6_MTU: _bindgen_ty_40 = 3;
pub const NET_IPV6_ACCEPT_RA: _bindgen_ty_40 = 4;
pub const NET_IPV6_ACCEPT_REDIRECTS: _bindgen_ty_40 = 5;
pub const NET_IPV6_AUTOCONF: _bindgen_ty_40 = 6;
pub const NET_IPV6_DAD_TRANSMITS: _bindgen_ty_40 = 7;
pub const NET_IPV6_RTR_SOLICITS: _bindgen_ty_40 = 8;
pub const NET_IPV6_RTR_SOLICIT_INTERVAL: _bindgen_ty_40 = 9;
pub const NET_IPV6_RTR_SOLICIT_DELAY: _bindgen_ty_40 = 10;
pub const NET_IPV6_USE_TEMPADDR: _bindgen_ty_40 = 11;
pub const NET_IPV6_TEMP_VALID_LFT: _bindgen_ty_40 = 12;
pub const NET_IPV6_TEMP_PREFERED_LFT: _bindgen_ty_40 = 13;
pub const NET_IPV6_REGEN_MAX_RETRY: _bindgen_ty_40 = 14;
pub const NET_IPV6_MAX_DESYNC_FACTOR: _bindgen_ty_40 = 15;
pub const NET_IPV6_MAX_ADDRESSES: _bindgen_ty_40 = 16;
pub const NET_IPV6_FORCE_MLD_VERSION: _bindgen_ty_40 = 17;
pub const NET_IPV6_ACCEPT_RA_DEFRTR: _bindgen_ty_40 = 18;
pub const NET_IPV6_ACCEPT_RA_PINFO: _bindgen_ty_40 = 19;
pub const NET_IPV6_ACCEPT_RA_RTR_PREF: _bindgen_ty_40 = 20;
pub const NET_IPV6_RTR_PROBE_INTERVAL: _bindgen_ty_40 = 21;
pub const NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN: _bindgen_ty_40 = 22;
pub const NET_IPV6_PROXY_NDP: _bindgen_ty_40 = 23;
pub const NET_IPV6_ACCEPT_SOURCE_ROUTE: _bindgen_ty_40 = 25;
pub const NET_IPV6_ACCEPT_RA_FROM_LOCAL: _bindgen_ty_40 = 26;
pub const NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN: _bindgen_ty_40 = 27;
pub const NET_IPV6_RA_DEFRTR_METRIC: _bindgen_ty_40 = 28;
pub const __NET_IPV6_MAX: _bindgen_ty_40 = 29;
pub type _bindgen_ty_40 = core::ffi::c_uint;
pub const NET_IPV6_ICMP_RATELIMIT: _bindgen_ty_41 = 1;
pub const NET_IPV6_ICMP_ECHO_IGNORE_ALL: _bindgen_ty_41 = 2;
pub type _bindgen_ty_41 = core::ffi::c_uint;
pub const NET_NEIGH_MCAST_SOLICIT: _bindgen_ty_42 = 1;
pub const NET_NEIGH_UCAST_SOLICIT: _bindgen_ty_42 = 2;
pub const NET_NEIGH_APP_SOLICIT: _bindgen_ty_42 = 3;
pub const NET_NEIGH_RETRANS_TIME: _bindgen_ty_42 = 4;
pub const NET_NEIGH_REACHABLE_TIME: _bindgen_ty_42 = 5;
pub const NET_NEIGH_DELAY_PROBE_TIME: _bindgen_ty_42 = 6;
pub const NET_NEIGH_GC_STALE_TIME: _bindgen_ty_42 = 7;
pub const NET_NEIGH_UNRES_QLEN: _bindgen_ty_42 = 8;
pub const NET_NEIGH_PROXY_QLEN: _bindgen_ty_42 = 9;
pub const NET_NEIGH_ANYCAST_DELAY: _bindgen_ty_42 = 10;
pub const NET_NEIGH_PROXY_DELAY: _bindgen_ty_42 = 11;
pub const NET_NEIGH_LOCKTIME: _bindgen_ty_42 = 12;
pub const NET_NEIGH_GC_INTERVAL: _bindgen_ty_42 = 13;
pub const NET_NEIGH_GC_THRESH1: _bindgen_ty_42 = 14;
pub const NET_NEIGH_GC_THRESH2: _bindgen_ty_42 = 15;
pub const NET_NEIGH_GC_THRESH3: _bindgen_ty_42 = 16;
pub const NET_NEIGH_RETRANS_TIME_MS: _bindgen_ty_42 = 17;
pub const NET_NEIGH_REACHABLE_TIME_MS: _bindgen_ty_42 = 18;
pub const NET_NEIGH_INTERVAL_PROBE_TIME_MS: _bindgen_ty_42 = 19;
pub type _bindgen_ty_42 = core::ffi::c_uint;
pub const NET_DCCP_DEFAULT: _bindgen_ty_43 = 1;
pub type _bindgen_ty_43 = core::ffi::c_uint;
pub const NET_IPX_PPROP_BROADCASTING: _bindgen_ty_44 = 1;
pub const NET_IPX_FORWARDING: _bindgen_ty_44 = 2;
pub type _bindgen_ty_44 = core::ffi::c_uint;
pub const NET_LLC2: _bindgen_ty_45 = 1;
pub const NET_LLC_STATION: _bindgen_ty_45 = 2;
pub type _bindgen_ty_45 = core::ffi::c_uint;
pub const NET_LLC2_TIMEOUT: _bindgen_ty_46 = 1;
pub type _bindgen_ty_46 = core::ffi::c_uint;
pub const NET_LLC_STATION_ACK_TIMEOUT: _bindgen_ty_47 = 1;
pub type _bindgen_ty_47 = core::ffi::c_uint;
pub const NET_LLC2_ACK_TIMEOUT: _bindgen_ty_48 = 1;
pub const NET_LLC2_P_TIMEOUT: _bindgen_ty_48 = 2;
pub const NET_LLC2_REJ_TIMEOUT: _bindgen_ty_48 = 3;
pub const NET_LLC2_BUSY_TIMEOUT: _bindgen_ty_48 = 4;
pub type _bindgen_ty_48 = core::ffi::c_uint;
pub const NET_ATALK_AARP_EXPIRY_TIME: _bindgen_ty_49 = 1;
pub const NET_ATALK_AARP_TICK_TIME: _bindgen_ty_49 = 2;
pub const NET_ATALK_AARP_RETRANSMIT_LIMIT: _bindgen_ty_49 = 3;
pub const NET_ATALK_AARP_RESOLVE_TIME: _bindgen_ty_49 = 4;
pub type _bindgen_ty_49 = core::ffi::c_uint;
pub const NET_NETROM_DEFAULT_PATH_QUALITY: _bindgen_ty_50 = 1;
pub const NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER: _bindgen_ty_50 = 2;
pub const NET_NETROM_NETWORK_TTL_INITIALISER: _bindgen_ty_50 = 3;
pub const NET_NETROM_TRANSPORT_TIMEOUT: _bindgen_ty_50 = 4;
pub const NET_NETROM_TRANSPORT_MAXIMUM_TRIES: _bindgen_ty_50 = 5;
pub const NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY: _bindgen_ty_50 = 6;
pub const NET_NETROM_TRANSPORT_BUSY_DELAY: _bindgen_ty_50 = 7;
pub const NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE: _bindgen_ty_50 = 8;
pub const NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT: _bindgen_ty_50 = 9;
pub const NET_NETROM_ROUTING_CONTROL: _bindgen_ty_50 = 10;
pub const NET_NETROM_LINK_FAILS_COUNT: _bindgen_ty_50 = 11;
pub const NET_NETROM_RESET: _bindgen_ty_50 = 12;
pub type _bindgen_ty_50 = core::ffi::c_uint;
pub const NET_AX25_IP_DEFAULT_MODE: _bindgen_ty_51 = 1;
pub const NET_AX25_DEFAULT_MODE: _bindgen_ty_51 = 2;
pub const NET_AX25_BACKOFF_TYPE: _bindgen_ty_51 = 3;
pub const NET_AX25_CONNECT_MODE: _bindgen_ty_51 = 4;
pub const NET_AX25_STANDARD_WINDOW: _bindgen_ty_51 = 5;
pub const NET_AX25_EXTENDED_WINDOW: _bindgen_ty_51 = 6;
pub const NET_AX25_T1_TIMEOUT: _bindgen_ty_51 = 7;
pub const NET_AX25_T2_TIMEOUT: _bindgen_ty_51 = 8;
pub const NET_AX25_T3_TIMEOUT: _bindgen_ty_51 = 9;
pub const NET_AX25_IDLE_TIMEOUT: _bindgen_ty_51 = 10;
pub const NET_AX25_N2: _bindgen_ty_51 = 11;
pub const NET_AX25_PACLEN: _bindgen_ty_51 = 12;
pub const NET_AX25_PROTOCOL: _bindgen_ty_51 = 13;
pub const NET_AX25_DAMA_SLAVE_TIMEOUT: _bindgen_ty_51 = 14;
pub type _bindgen_ty_51 = core::ffi::c_uint;
pub const NET_ROSE_RESTART_REQUEST_TIMEOUT: _bindgen_ty_52 = 1;
pub const NET_ROSE_CALL_REQUEST_TIMEOUT: _bindgen_ty_52 = 2;
pub const NET_ROSE_RESET_REQUEST_TIMEOUT: _bindgen_ty_52 = 3;
pub const NET_ROSE_CLEAR_REQUEST_TIMEOUT: _bindgen_ty_52 = 4;
pub const NET_ROSE_ACK_HOLD_BACK_TIMEOUT: _bindgen_ty_52 = 5;
pub const NET_ROSE_ROUTING_CONTROL: _bindgen_ty_52 = 6;
pub const NET_ROSE_LINK_FAIL_TIMEOUT: _bindgen_ty_52 = 7;
pub const NET_ROSE_MAX_VCS: _bindgen_ty_52 = 8;
pub const NET_ROSE_WINDOW_SIZE: _bindgen_ty_52 = 9;
pub const NET_ROSE_NO_ACTIVITY_TIMEOUT: _bindgen_ty_52 = 10;
pub type _bindgen_ty_52 = core::ffi::c_uint;
pub const NET_X25_RESTART_REQUEST_TIMEOUT: _bindgen_ty_53 = 1;
pub const NET_X25_CALL_REQUEST_TIMEOUT: _bindgen_ty_53 = 2;
pub const NET_X25_RESET_REQUEST_TIMEOUT: _bindgen_ty_53 = 3;
pub const NET_X25_CLEAR_REQUEST_TIMEOUT: _bindgen_ty_53 = 4;
pub const NET_X25_ACK_HOLD_BACK_TIMEOUT: _bindgen_ty_53 = 5;
pub const NET_X25_FORWARD: _bindgen_ty_53 = 6;
pub type _bindgen_ty_53 = core::ffi::c_uint;
pub const NET_TR_RIF_TIMEOUT: _bindgen_ty_54 = 1;
pub type _bindgen_ty_54 = core::ffi::c_uint;
pub const NET_DECNET_NODE_TYPE: _bindgen_ty_55 = 1;
pub const NET_DECNET_NODE_ADDRESS: _bindgen_ty_55 = 2;
pub const NET_DECNET_NODE_NAME: _bindgen_ty_55 = 3;
pub const NET_DECNET_DEFAULT_DEVICE: _bindgen_ty_55 = 4;
pub const NET_DECNET_TIME_WAIT: _bindgen_ty_55 = 5;
pub const NET_DECNET_DN_COUNT: _bindgen_ty_55 = 6;
pub const NET_DECNET_DI_COUNT: _bindgen_ty_55 = 7;
pub const NET_DECNET_DR_COUNT: _bindgen_ty_55 = 8;
pub const NET_DECNET_DST_GC_INTERVAL: _bindgen_ty_55 = 9;
pub const NET_DECNET_CONF: _bindgen_ty_55 = 10;
pub const NET_DECNET_NO_FC_MAX_CWND: _bindgen_ty_55 = 11;
pub const NET_DECNET_MEM: _bindgen_ty_55 = 12;
pub const NET_DECNET_RMEM: _bindgen_ty_55 = 13;
pub const NET_DECNET_WMEM: _bindgen_ty_55 = 14;
pub const NET_DECNET_DEBUG_LEVEL: _bindgen_ty_55 = 255;
pub type _bindgen_ty_55 = core::ffi::c_uint;
pub const NET_DECNET_CONF_LOOPBACK: _bindgen_ty_56 = -2;
pub const NET_DECNET_CONF_DDCMP: _bindgen_ty_56 = -3;
pub const NET_DECNET_CONF_PPP: _bindgen_ty_56 = -4;
pub const NET_DECNET_CONF_X25: _bindgen_ty_56 = -5;
pub const NET_DECNET_CONF_GRE: _bindgen_ty_56 = -6;
pub const NET_DECNET_CONF_ETHER: _bindgen_ty_56 = -7;
pub type _bindgen_ty_56 = core::ffi::c_int;
pub const NET_DECNET_CONF_DEV_PRIORITY: _bindgen_ty_57 = 1;
pub const NET_DECNET_CONF_DEV_T1: _bindgen_ty_57 = 2;
pub const NET_DECNET_CONF_DEV_T2: _bindgen_ty_57 = 3;
pub const NET_DECNET_CONF_DEV_T3: _bindgen_ty_57 = 4;
pub const NET_DECNET_CONF_DEV_FORWARDING: _bindgen_ty_57 = 5;
pub const NET_DECNET_CONF_DEV_BLKSIZE: _bindgen_ty_57 = 6;
pub const NET_DECNET_CONF_DEV_STATE: _bindgen_ty_57 = 7;
pub type _bindgen_ty_57 = core::ffi::c_uint;
pub const NET_SCTP_RTO_INITIAL: _bindgen_ty_58 = 1;
pub const NET_SCTP_RTO_MIN: _bindgen_ty_58 = 2;
pub const NET_SCTP_RTO_MAX: _bindgen_ty_58 = 3;
pub const NET_SCTP_RTO_ALPHA: _bindgen_ty_58 = 4;
pub const NET_SCTP_RTO_BETA: _bindgen_ty_58 = 5;
pub const NET_SCTP_VALID_COOKIE_LIFE: _bindgen_ty_58 = 6;
pub const NET_SCTP_ASSOCIATION_MAX_RETRANS: _bindgen_ty_58 = 7;
pub const NET_SCTP_PATH_MAX_RETRANS: _bindgen_ty_58 = 8;
pub const NET_SCTP_MAX_INIT_RETRANSMITS: _bindgen_ty_58 = 9;
pub const NET_SCTP_HB_INTERVAL: _bindgen_ty_58 = 10;
pub const NET_SCTP_PRESERVE_ENABLE: _bindgen_ty_58 = 11;
pub const NET_SCTP_MAX_BURST: _bindgen_ty_58 = 12;
pub const NET_SCTP_ADDIP_ENABLE: _bindgen_ty_58 = 13;
pub const NET_SCTP_PRSCTP_ENABLE: _bindgen_ty_58 = 14;
pub const NET_SCTP_SNDBUF_POLICY: _bindgen_ty_58 = 15;
pub const NET_SCTP_SACK_TIMEOUT: _bindgen_ty_58 = 16;
pub const NET_SCTP_RCVBUF_POLICY: _bindgen_ty_58 = 17;
pub type _bindgen_ty_58 = core::ffi::c_uint;
pub const NET_BRIDGE_NF_CALL_ARPTABLES: _bindgen_ty_59 = 1;
pub const NET_BRIDGE_NF_CALL_IPTABLES: _bindgen_ty_59 = 2;
pub const NET_BRIDGE_NF_CALL_IP6TABLES: _bindgen_ty_59 = 3;
pub const NET_BRIDGE_NF_FILTER_VLAN_TAGGED: _bindgen_ty_59 = 4;
pub const NET_BRIDGE_NF_FILTER_PPPOE_TAGGED: _bindgen_ty_59 = 5;
pub type _bindgen_ty_59 = core::ffi::c_uint;
pub const FS_NRINODE: _bindgen_ty_60 = 1;
pub const FS_STATINODE: _bindgen_ty_60 = 2;
pub const FS_MAXINODE: _bindgen_ty_60 = 3;
pub const FS_NRDQUOT: _bindgen_ty_60 = 4;
pub const FS_MAXDQUOT: _bindgen_ty_60 = 5;
pub const FS_NRFILE: _bindgen_ty_60 = 6;
pub const FS_MAXFILE: _bindgen_ty_60 = 7;
pub const FS_DENTRY: _bindgen_ty_60 = 8;
pub const FS_NRSUPER: _bindgen_ty_60 = 9;
pub const FS_MAXSUPER: _bindgen_ty_60 = 10;
pub const FS_OVERFLOWUID: _bindgen_ty_60 = 11;
pub const FS_OVERFLOWGID: _bindgen_ty_60 = 12;
pub const FS_LEASES: _bindgen_ty_60 = 13;
pub const FS_DIR_NOTIFY: _bindgen_ty_60 = 14;
pub const FS_LEASE_TIME: _bindgen_ty_60 = 15;
pub const FS_DQSTATS: _bindgen_ty_60 = 16;
pub const FS_XFS: _bindgen_ty_60 = 17;
pub const FS_AIO_NR: _bindgen_ty_60 = 18;
pub const FS_AIO_MAX_NR: _bindgen_ty_60 = 19;
pub const FS_INOTIFY: _bindgen_ty_60 = 20;
pub const FS_OCFS2: _bindgen_ty_60 = 988;
pub type _bindgen_ty_60 = core::ffi::c_uint;
pub const FS_DQ_LOOKUPS: _bindgen_ty_61 = 1;
pub const FS_DQ_DROPS: _bindgen_ty_61 = 2;
pub const FS_DQ_READS: _bindgen_ty_61 = 3;
pub const FS_DQ_WRITES: _bindgen_ty_61 = 4;
pub const FS_DQ_CACHE_HITS: _bindgen_ty_61 = 5;
pub const FS_DQ_ALLOCATED: _bindgen_ty_61 = 6;
pub const FS_DQ_FREE: _bindgen_ty_61 = 7;
pub const FS_DQ_SYNCS: _bindgen_ty_61 = 8;
pub const FS_DQ_WARNINGS: _bindgen_ty_61 = 9;
pub type _bindgen_ty_61 = core::ffi::c_uint;
pub const DEV_CDROM: _bindgen_ty_62 = 1;
pub const DEV_HWMON: _bindgen_ty_62 = 2;
pub const DEV_PARPORT: _bindgen_ty_62 = 3;
pub const DEV_RAID: _bindgen_ty_62 = 4;
pub const DEV_MAC_HID: _bindgen_ty_62 = 5;
pub const DEV_SCSI: _bindgen_ty_62 = 6;
pub const DEV_IPMI: _bindgen_ty_62 = 7;
pub type _bindgen_ty_62 = core::ffi::c_uint;
pub const DEV_CDROM_INFO: _bindgen_ty_63 = 1;
pub const DEV_CDROM_AUTOCLOSE: _bindgen_ty_63 = 2;
pub const DEV_CDROM_AUTOEJECT: _bindgen_ty_63 = 3;
pub const DEV_CDROM_DEBUG: _bindgen_ty_63 = 4;
pub const DEV_CDROM_LOCK: _bindgen_ty_63 = 5;
pub const DEV_CDROM_CHECK_MEDIA: _bindgen_ty_63 = 6;
pub type _bindgen_ty_63 = core::ffi::c_uint;
pub const DEV_PARPORT_DEFAULT: _bindgen_ty_64 = -3;
pub type _bindgen_ty_64 = core::ffi::c_int;
pub const DEV_RAID_SPEED_LIMIT_MIN: _bindgen_ty_65 = 1;
pub const DEV_RAID_SPEED_LIMIT_MAX: _bindgen_ty_65 = 2;
pub type _bindgen_ty_65 = core::ffi::c_uint;
pub const DEV_PARPORT_DEFAULT_TIMESLICE: _bindgen_ty_66 = 1;
pub const DEV_PARPORT_DEFAULT_SPINTIME: _bindgen_ty_66 = 2;
pub type _bindgen_ty_66 = core::ffi::c_uint;
pub const DEV_PARPORT_SPINTIME: _bindgen_ty_67 = 1;
pub const DEV_PARPORT_BASE_ADDR: _bindgen_ty_67 = 2;
pub const DEV_PARPORT_IRQ: _bindgen_ty_67 = 3;
pub const DEV_PARPORT_DMA: _bindgen_ty_67 = 4;
pub const DEV_PARPORT_MODES: _bindgen_ty_67 = 5;
pub const DEV_PARPORT_DEVICES: _bindgen_ty_67 = 6;
pub const DEV_PARPORT_AUTOPROBE: _bindgen_ty_67 = 16;
pub type _bindgen_ty_67 = core::ffi::c_uint;
pub const DEV_PARPORT_DEVICES_ACTIVE: _bindgen_ty_68 = -3;
pub type _bindgen_ty_68 = core::ffi::c_int;
pub const DEV_PARPORT_DEVICE_TIMESLICE: _bindgen_ty_69 = 1;
pub type _bindgen_ty_69 = core::ffi::c_uint;
pub const DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES: _bindgen_ty_70 = 1;
pub const DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES: _bindgen_ty_70 = 2;
pub const DEV_MAC_HID_MOUSE_BUTTON_EMULATION: _bindgen_ty_70 = 3;
pub const DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE: _bindgen_ty_70 = 4;
pub const DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE: _bindgen_ty_70 = 5;
pub const DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES: _bindgen_ty_70 = 6;
pub type _bindgen_ty_70 = core::ffi::c_uint;
pub const DEV_SCSI_LOGGING_LEVEL: _bindgen_ty_71 = 1;
pub type _bindgen_ty_71 = core::ffi::c_uint;
pub const DEV_IPMI_POWEROFF_POWERCYCLE: _bindgen_ty_72 = 1;
pub type _bindgen_ty_72 = core::ffi::c_uint;
pub const ABI_DEFHANDLER_COFF: _bindgen_ty_73 = 1;
pub const ABI_DEFHANDLER_ELF: _bindgen_ty_73 = 2;
pub const ABI_DEFHANDLER_LCALL7: _bindgen_ty_73 = 3;
pub const ABI_DEFHANDLER_LIBCSO: _bindgen_ty_73 = 4;
pub const ABI_TRACE: _bindgen_ty_73 = 5;
pub const ABI_FAKE_UTSNAME: _bindgen_ty_73 = 6;
pub type _bindgen_ty_73 = core::ffi::c_uint;
extern "C" {
    pub static sysctl_vals: [core::ffi::c_int; 0usize];
}
extern "C" {
    pub static sysctl_long_vals: [core::ffi::c_ulong; 0usize];
}
pub type proc_handler = ::core::option::Option<
    unsafe extern "C" fn(
        ctl: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn proc_dostring(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dobool(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_douintvec(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_minmax(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_douintvec_minmax(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dou8vec_minmax(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_jiffies(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_ms_jiffies_minmax(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_userhz_jiffies(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_ms_jiffies(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_doulongvec_minmax(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_doulongvec_ms_jiffies_minmax(
        table: *const ctl_table,
        arg1: core::ffi::c_int,
        arg2: *mut core::ffi::c_void,
        arg3: *mut usize,
        arg4: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_do_large_bitmap(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_do_static_key(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_poll {
    pub event: atomic_t,
    pub wait: wait_queue_head_t,
}
impl Default for ctl_table_poll {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table {
    pub procname: *const core::ffi::c_char,
    pub data: *mut core::ffi::c_void,
    pub maxlen: core::ffi::c_int,
    pub mode: umode_t,
    pub proc_handler: proc_handler,
    pub poll: *mut ctl_table_poll,
    pub extra1: *mut core::ffi::c_void,
    pub extra2: *mut core::ffi::c_void,
}
impl Default for ctl_table {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_node {
    pub node: rb_node,
    pub header: *mut ctl_table_header,
}
impl Default for ctl_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_header {
    pub __bindgen_anon_1: ctl_table_header__bindgen_ty_1,
    pub unregistering: *mut completion,
    pub ctl_table_arg: *const ctl_table,
    pub root: *mut ctl_table_root,
    pub set: *mut ctl_table_set,
    pub parent: *mut ctl_dir,
    pub node: *mut ctl_node,
    pub inodes: hlist_head,
    pub type_: ctl_table_header__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ctl_table_header__bindgen_ty_1 {
    pub __bindgen_anon_1: ctl_table_header__bindgen_ty_1__bindgen_ty_1,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_header__bindgen_ty_1__bindgen_ty_1 {
    pub ctl_table: *mut ctl_table,
    pub ctl_table_size: core::ffi::c_int,
    pub used: core::ffi::c_int,
    pub count: core::ffi::c_int,
    pub nreg: core::ffi::c_int,
}
impl Default for ctl_table_header__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ctl_table_header__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ctl_table_header_SYSCTL_TABLE_TYPE_DEFAULT: ctl_table_header__bindgen_ty_2 = 0;
pub const ctl_table_header_SYSCTL_TABLE_TYPE_PERMANENTLY_EMPTY: ctl_table_header__bindgen_ty_2 = 1;
pub type ctl_table_header__bindgen_ty_2 = core::ffi::c_uint;
impl Default for ctl_table_header {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_dir {
    pub header: ctl_table_header,
    pub root: rb_root,
}
impl Default for ctl_dir {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_set {
    pub is_seen:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ctl_table_set) -> core::ffi::c_int>,
    pub dir: ctl_dir,
}
impl Default for ctl_table_set {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_root {
    pub default_set: ctl_table_set,
    pub lookup: ::core::option::Option<
        unsafe extern "C" fn(root: *mut ctl_table_root) -> *mut ctl_table_set,
    >,
    pub set_ownership: ::core::option::Option<
        unsafe extern "C" fn(head: *mut ctl_table_header, uid: *mut kuid_t, gid: *mut kgid_t),
    >,
    pub permissions: ::core::option::Option<
        unsafe extern "C" fn(
            head: *mut ctl_table_header,
            table: *const ctl_table,
        ) -> core::ffi::c_int,
    >,
}
impl Default for ctl_table_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn proc_sys_poll_notify(poll: *mut ctl_table_poll);
}
extern "C" {
    pub fn setup_sysctl_set(
        p: *mut ctl_table_set,
        root: *mut ctl_table_root,
        is_seen: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut ctl_table_set) -> core::ffi::c_int,
        >,
    );
}
extern "C" {
    pub fn retire_sysctl_set(set: *mut ctl_table_set);
}
extern "C" {
    pub fn __register_sysctl_table(
        set: *mut ctl_table_set,
        path: *const core::ffi::c_char,
        table: *mut ctl_table,
        table_size: usize,
    ) -> *mut ctl_table_header;
}
extern "C" {
    pub fn register_sysctl_sz(
        path: *const core::ffi::c_char,
        table: *mut ctl_table,
        table_size: usize,
    ) -> *mut ctl_table_header;
}
extern "C" {
    pub fn unregister_sysctl_table(table: *mut ctl_table_header);
}
extern "C" {
    pub fn sysctl_init_bases() -> core::ffi::c_int;
}
extern "C" {
    pub fn __register_sysctl_init(
        path: *const core::ffi::c_char,
        table: *mut ctl_table,
        table_name: *const core::ffi::c_char,
        table_size: usize,
    );
}
extern "C" {
    pub fn register_sysctl_mount_point(path: *const core::ffi::c_char) -> *mut ctl_table_header;
}
extern "C" {
    pub fn do_sysctl_args();
}
extern "C" {
    pub fn sysctl_is_alias(param: *mut core::ffi::c_char) -> bool_;
}
extern "C" {
    pub fn do_proc_douintvec(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
        conv: ::core::option::Option<
            unsafe extern "C" fn(
                lvalp: *mut core::ffi::c_ulong,
                valp: *mut core::ffi::c_uint,
                write: core::ffi::c_int,
                data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut pwrsw_enabled: core::ffi::c_int;
}
extern "C" {
    pub static mut unaligned_enabled: core::ffi::c_int;
}
extern "C" {
    pub static mut unaligned_dump_stack: core::ffi::c_int;
}
extern "C" {
    pub static mut no_unaligned_warning: core::ffi::c_int;
}
extern "C" {
    pub fn sysctl_max_threads(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct assoc_array {
    pub root: *mut assoc_array_ptr,
    pub nr_leaves_on_tree: core::ffi::c_ulong,
}
impl Default for assoc_array {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct assoc_array_ops {
    pub get_key_chunk: ::core::option::Option<
        unsafe extern "C" fn(
            index_key: *const core::ffi::c_void,
            level: core::ffi::c_int,
        ) -> core::ffi::c_ulong,
    >,
    pub get_object_key_chunk: ::core::option::Option<
        unsafe extern "C" fn(
            object: *const core::ffi::c_void,
            level: core::ffi::c_int,
        ) -> core::ffi::c_ulong,
    >,
    pub compare_object: ::core::option::Option<
        unsafe extern "C" fn(
            object: *const core::ffi::c_void,
            index_key: *const core::ffi::c_void,
        ) -> bool_,
    >,
    pub diff_objects: ::core::option::Option<
        unsafe extern "C" fn(
            object: *const core::ffi::c_void,
            index_key: *const core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub free_object: ::core::option::Option<unsafe extern "C" fn(object: *mut core::ffi::c_void)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct assoc_array_edit {
    _unused: [u8; 0],
}
extern "C" {
    pub fn assoc_array_iterate(
        array: *const assoc_array,
        iterator: ::core::option::Option<
            unsafe extern "C" fn(
                object: *const core::ffi::c_void,
                iterator_data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        iterator_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn assoc_array_find(
        array: *const assoc_array,
        ops: *const assoc_array_ops,
        index_key: *const core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn assoc_array_destroy(array: *mut assoc_array, ops: *const assoc_array_ops);
}
extern "C" {
    pub fn assoc_array_insert(
        array: *mut assoc_array,
        ops: *const assoc_array_ops,
        index_key: *const core::ffi::c_void,
        object: *mut core::ffi::c_void,
    ) -> *mut assoc_array_edit;
}
extern "C" {
    pub fn assoc_array_insert_set_object(
        edit: *mut assoc_array_edit,
        object: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn assoc_array_delete(
        array: *mut assoc_array,
        ops: *const assoc_array_ops,
        index_key: *const core::ffi::c_void,
    ) -> *mut assoc_array_edit;
}
extern "C" {
    pub fn assoc_array_clear(
        array: *mut assoc_array,
        ops: *const assoc_array_ops,
    ) -> *mut assoc_array_edit;
}
extern "C" {
    pub fn assoc_array_apply_edit(edit: *mut assoc_array_edit);
}
extern "C" {
    pub fn assoc_array_cancel_edit(edit: *mut assoc_array_edit);
}
extern "C" {
    pub fn assoc_array_gc(
        array: *mut assoc_array,
        ops: *const assoc_array_ops,
        iterator: ::core::option::Option<
            unsafe extern "C" fn(
                object: *mut core::ffi::c_void,
                iterator_data: *mut core::ffi::c_void,
            ) -> bool_,
        >,
        iterator_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
pub type key_serial_t = i32;
pub type key_perm_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct net {
    _unused: [u8; 0],
}
pub const key_need_perm_KEY_NEED_UNSPECIFIED: key_need_perm = 0;
pub const key_need_perm_KEY_NEED_VIEW: key_need_perm = 1;
pub const key_need_perm_KEY_NEED_READ: key_need_perm = 2;
pub const key_need_perm_KEY_NEED_WRITE: key_need_perm = 3;
pub const key_need_perm_KEY_NEED_SEARCH: key_need_perm = 4;
pub const key_need_perm_KEY_NEED_LINK: key_need_perm = 5;
pub const key_need_perm_KEY_NEED_SETATTR: key_need_perm = 6;
pub const key_need_perm_KEY_NEED_UNLINK: key_need_perm = 7;
pub const key_need_perm_KEY_SYSADMIN_OVERRIDE: key_need_perm = 8;
pub const key_need_perm_KEY_AUTHTOKEN_OVERRIDE: key_need_perm = 9;
pub const key_need_perm_KEY_DEFER_PERM_CHECK: key_need_perm = 10;
pub type key_need_perm = core::ffi::c_uint;
pub const key_lookup_flag_KEY_LOOKUP_CREATE: key_lookup_flag = 1;
pub const key_lookup_flag_KEY_LOOKUP_PARTIAL: key_lookup_flag = 2;
pub const key_lookup_flag_KEY_LOOKUP_ALL: key_lookup_flag = 3;
pub type key_lookup_flag = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key_owner {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct keyring_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct keyring_name {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key_tag {
    pub rcu: callback_head,
    pub usage: refcount_t,
    pub removed: bool_,
}
impl Default for key_tag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct keyring_index_key {
    pub hash: core::ffi::c_ulong,
    pub __bindgen_anon_1: keyring_index_key__bindgen_ty_1,
    pub type_: *mut key_type,
    pub domain_tag: *mut key_tag,
    pub description: *const core::ffi::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union keyring_index_key__bindgen_ty_1 {
    pub __bindgen_anon_1: keyring_index_key__bindgen_ty_1__bindgen_ty_1,
    pub x: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct keyring_index_key__bindgen_ty_1__bindgen_ty_1 {
    pub desc_len: u16_,
    pub desc: [core::ffi::c_char; 6usize],
}
impl Default for keyring_index_key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for keyring_index_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key_payload {
    pub rcu_data0: *mut core::ffi::c_void,
    pub data: [*mut core::ffi::c_void; 4usize],
}
impl Default for key_payload {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __key_reference_with_attributes {
    _unused: [u8; 0],
}
pub type key_ref_t = *mut __key_reference_with_attributes;
pub type key_restrict_link_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        dest_keyring: *mut key,
        type_: *const key_type,
        payload: *const key_payload,
        restriction_key: *mut key,
    ) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key_restriction {
    pub check: key_restrict_link_func_t,
    pub key: *mut key,
    pub keytype: *mut key_type,
}
impl Default for key_restriction {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const key_state_KEY_IS_UNINSTANTIATED: key_state = 0;
pub const key_state_KEY_IS_POSITIVE: key_state = 1;
pub type key_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key {
    pub usage: refcount_t,
    pub serial: key_serial_t,
    pub __bindgen_anon_1: key__bindgen_ty_1,
    pub sem: rw_semaphore,
    pub user: *mut key_user,
    pub security: *mut core::ffi::c_void,
    pub __bindgen_anon_2: key__bindgen_ty_2,
    pub last_used_at: time64_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub perm: key_perm_t,
    pub quotalen: core::ffi::c_ushort,
    pub datalen: core::ffi::c_ushort,
    pub state: core::ffi::c_short,
    pub flags: core::ffi::c_ulong,
    pub __bindgen_anon_3: key__bindgen_ty_3,
    pub __bindgen_anon_4: key__bindgen_ty_4,
    pub restrict_link: *mut key_restriction,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_1 {
    pub graveyard_link: list_head,
    pub serial_node: rb_node,
}
impl Default for key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_2 {
    pub expiry: time64_t,
    pub revoked_at: time64_t,
}
impl Default for key__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_3 {
    pub index_key: keyring_index_key,
    pub __bindgen_anon_1: key__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key__bindgen_ty_3__bindgen_ty_1 {
    pub hash: core::ffi::c_ulong,
    pub len_desc: core::ffi::c_ulong,
    pub type_: *mut key_type,
    pub domain_tag: *mut key_tag,
    pub description: *mut core::ffi::c_char,
}
impl Default for key__bindgen_ty_3__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for key__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_4 {
    pub payload: key_payload,
    pub __bindgen_anon_1: key__bindgen_ty_4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key__bindgen_ty_4__bindgen_ty_1 {
    pub name_link: list_head,
    pub keys: assoc_array,
}
impl Default for key__bindgen_ty_4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for key__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn key_alloc(
        type_: *mut key_type,
        desc: *const core::ffi::c_char,
        uid: kuid_t,
        gid: kgid_t,
        cred: *const cred,
        perm: key_perm_t,
        flags: core::ffi::c_ulong,
        restrict_link: *mut key_restriction,
    ) -> *mut key;
}
extern "C" {
    pub fn key_revoke(key: *mut key);
}
extern "C" {
    pub fn key_invalidate(key: *mut key);
}
extern "C" {
    pub fn key_put(key: *mut key);
}
extern "C" {
    pub fn key_put_tag(tag: *mut key_tag) -> bool_;
}
extern "C" {
    pub fn key_remove_domain(domain_tag: *mut key_tag);
}
extern "C" {
    pub fn request_key_tag(
        type_: *mut key_type,
        description: *const core::ffi::c_char,
        domain_tag: *mut key_tag,
        callout_info: *const core::ffi::c_char,
    ) -> *mut key;
}
extern "C" {
    pub fn request_key_rcu(
        type_: *mut key_type,
        description: *const core::ffi::c_char,
        domain_tag: *mut key_tag,
    ) -> *mut key;
}
extern "C" {
    pub fn request_key_with_auxdata(
        type_: *mut key_type,
        description: *const core::ffi::c_char,
        domain_tag: *mut key_tag,
        callout_info: *const core::ffi::c_void,
        callout_len: usize,
        aux: *mut core::ffi::c_void,
    ) -> *mut key;
}
extern "C" {
    pub fn wait_for_key_construction(key: *mut key, intr: bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn key_validate(key: *const key) -> core::ffi::c_int;
}
extern "C" {
    pub fn key_create(
        keyring: key_ref_t,
        type_: *const core::ffi::c_char,
        description: *const core::ffi::c_char,
        payload: *const core::ffi::c_void,
        plen: usize,
        perm: key_perm_t,
        flags: core::ffi::c_ulong,
    ) -> key_ref_t;
}
extern "C" {
    pub fn key_create_or_update(
        keyring: key_ref_t,
        type_: *const core::ffi::c_char,
        description: *const core::ffi::c_char,
        payload: *const core::ffi::c_void,
        plen: usize,
        perm: key_perm_t,
        flags: core::ffi::c_ulong,
    ) -> key_ref_t;
}
extern "C" {
    pub fn key_update(
        key: key_ref_t,
        payload: *const core::ffi::c_void,
        plen: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn key_link(keyring: *mut key, key: *mut key) -> core::ffi::c_int;
}
extern "C" {
    pub fn key_move(
        key: *mut key,
        from_keyring: *mut key,
        to_keyring: *mut key,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn key_unlink(keyring: *mut key, key: *mut key) -> core::ffi::c_int;
}
extern "C" {
    pub fn keyring_alloc(
        description: *const core::ffi::c_char,
        uid: kuid_t,
        gid: kgid_t,
        cred: *const cred,
        perm: key_perm_t,
        flags: core::ffi::c_ulong,
        restrict_link: *mut key_restriction,
        dest: *mut key,
    ) -> *mut key;
}
extern "C" {
    pub fn restrict_link_reject(
        keyring: *mut key,
        type_: *const key_type,
        payload: *const key_payload,
        restriction_key: *mut key,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn keyring_clear(keyring: *mut key) -> core::ffi::c_int;
}
extern "C" {
    pub fn keyring_search(
        keyring: key_ref_t,
        type_: *mut key_type,
        description: *const core::ffi::c_char,
        recurse: bool_,
    ) -> key_ref_t;
}
extern "C" {
    pub fn keyring_add_key(keyring: *mut key, key: *mut key) -> core::ffi::c_int;
}
extern "C" {
    pub fn keyring_restrict(
        keyring: key_ref_t,
        type_: *const core::ffi::c_char,
        restriction: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn key_lookup(id: key_serial_t) -> *mut key;
}
extern "C" {
    pub fn key_set_timeout(arg1: *mut key, arg2: core::ffi::c_uint);
}
extern "C" {
    pub fn lookup_user_key(
        id: key_serial_t,
        flags: core::ffi::c_ulong,
        need_perm: key_need_perm,
    ) -> key_ref_t;
}
extern "C" {
    pub fn key_free_user_ns(arg1: *mut user_namespace);
}
extern "C" {
    pub fn install_thread_keyring_to_cred(cred: *mut cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn key_fsuid_changed(new_cred: *mut cred);
}
extern "C" {
    pub fn key_fsgid_changed(new_cred: *mut cred);
}
extern "C" {
    pub fn key_init();
}
extern "C" {
    pub static mut printk_ratelimit_state: ratelimit_state;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_struct {
    pub __count: refcount_t,
    pub epoll_watches: percpu_counter,
    pub unix_inflight: core::ffi::c_ulong,
    pub pipe_bufs: atomic_long_t,
    pub uidhash_node: hlist_node,
    pub uid: kuid_t,
    pub locked_vm: atomic_long_t,
    pub ratelimit: ratelimit_state,
}
impl Default for user_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn uids_sysfs_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn find_user(arg1: kuid_t) -> *mut user_struct;
}
extern "C" {
    pub static mut root_user: user_struct;
}
extern "C" {
    pub fn alloc_uid(arg1: kuid_t) -> *mut user_struct;
}
extern "C" {
    pub fn free_uid(arg1: *mut user_struct);
}
#[repr(C)]
#[derive(Default)]
pub struct group_info {
    pub usage: refcount_t,
    pub ngroups: core::ffi::c_int,
    pub gid: __IncompleteArrayField<kgid_t>,
}
extern "C" {
    pub fn groups_alloc(arg1: core::ffi::c_int) -> *mut group_info;
}
extern "C" {
    pub fn groups_free(arg1: *mut group_info);
}
extern "C" {
    pub fn in_group_p(arg1: kgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn in_egroup_p(arg1: kgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn groups_search(arg1: *const group_info, arg2: kgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_current_groups(arg1: *mut group_info) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_groups(arg1: *mut cred, arg2: *mut group_info);
}
extern "C" {
    pub fn may_setgroups() -> bool_;
}
extern "C" {
    pub fn groups_sort(arg1: *mut group_info);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cred {
    pub usage: atomic_long_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub suid: kuid_t,
    pub sgid: kgid_t,
    pub euid: kuid_t,
    pub egid: kgid_t,
    pub fsuid: kuid_t,
    pub fsgid: kgid_t,
    pub securebits: core::ffi::c_uint,
    pub cap_inheritable: kernel_cap_t,
    pub cap_permitted: kernel_cap_t,
    pub cap_effective: kernel_cap_t,
    pub cap_bset: kernel_cap_t,
    pub cap_ambient: kernel_cap_t,
    pub jit_keyring: core::ffi::c_uchar,
    pub session_keyring: *mut key,
    pub process_keyring: *mut key,
    pub thread_keyring: *mut key,
    pub request_key_auth: *mut key,
    pub security: *mut core::ffi::c_void,
    pub user: *mut user_struct,
    pub user_ns: *mut user_namespace,
    pub ucounts: *mut ucounts,
    pub group_info: *mut group_info,
    pub __bindgen_anon_1: cred__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cred__bindgen_ty_1 {
    pub non_rcu: core::ffi::c_int,
    pub rcu: callback_head,
}
impl Default for cred__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for cred {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __put_cred(arg1: *mut cred);
}
extern "C" {
    pub fn exit_creds(arg1: *mut task_struct);
}
extern "C" {
    pub fn copy_creds(arg1: *mut task_struct, arg2: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_task_cred(arg1: *mut task_struct) -> *const cred;
}
extern "C" {
    pub fn cred_alloc_blank() -> *mut cred;
}
extern "C" {
    pub fn prepare_creds() -> *mut cred;
}
extern "C" {
    pub fn prepare_exec_creds() -> *mut cred;
}
extern "C" {
    pub fn commit_creds(arg1: *mut cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn abort_creds(arg1: *mut cred);
}
extern "C" {
    pub fn override_creds(arg1: *const cred) -> *const cred;
}
extern "C" {
    pub fn revert_creds(arg1: *const cred);
}
extern "C" {
    pub fn prepare_kernel_cred(arg1: *mut task_struct) -> *mut cred;
}
extern "C" {
    pub fn set_security_override(arg1: *mut cred, arg2: u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_security_override_from_ctx(
        arg1: *mut cred,
        arg2: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_create_files_as(arg1: *mut cred, arg2: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn cred_fscmp(arg1: *const cred, arg2: *const cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn cred_init();
}
extern "C" {
    pub fn set_cred_ucounts(arg1: *mut cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn timerqueue_add(head: *mut timerqueue_head, node: *mut timerqueue_node) -> bool_;
}
extern "C" {
    pub fn timerqueue_del(head: *mut timerqueue_head, node: *mut timerqueue_node) -> bool_;
}
extern "C" {
    pub fn timerqueue_iterate_next(node: *mut timerqueue_node) -> *mut timerqueue_node;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct hrtimer_clock_base {
    pub cpu_base: *mut hrtimer_cpu_base,
    pub index: core::ffi::c_uint,
    pub clockid: clockid_t,
    pub seq: seqcount_raw_spinlock_t,
    pub running: *mut hrtimer,
    pub active: timerqueue_head,
    pub get_time: ::core::option::Option<unsafe extern "C" fn() -> ktime_t>,
    pub offset: ktime_t,
}
impl Default for hrtimer_clock_base {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const hrtimer_base_type_HRTIMER_BASE_MONOTONIC: hrtimer_base_type = 0;
pub const hrtimer_base_type_HRTIMER_BASE_REALTIME: hrtimer_base_type = 1;
pub const hrtimer_base_type_HRTIMER_BASE_BOOTTIME: hrtimer_base_type = 2;
pub const hrtimer_base_type_HRTIMER_BASE_TAI: hrtimer_base_type = 3;
pub const hrtimer_base_type_HRTIMER_BASE_MONOTONIC_SOFT: hrtimer_base_type = 4;
pub const hrtimer_base_type_HRTIMER_BASE_REALTIME_SOFT: hrtimer_base_type = 5;
pub const hrtimer_base_type_HRTIMER_BASE_BOOTTIME_SOFT: hrtimer_base_type = 6;
pub const hrtimer_base_type_HRTIMER_BASE_TAI_SOFT: hrtimer_base_type = 7;
pub const hrtimer_base_type_HRTIMER_MAX_CLOCK_BASES: hrtimer_base_type = 8;
pub type hrtimer_base_type = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct hrtimer_cpu_base {
    pub lock: raw_spinlock_t,
    pub cpu: core::ffi::c_uint,
    pub active_bases: core::ffi::c_uint,
    pub clock_was_set_seq: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub nr_events: core::ffi::c_uint,
    pub nr_retries: core::ffi::c_ushort,
    pub nr_hangs: core::ffi::c_ushort,
    pub max_hang_time: core::ffi::c_uint,
    pub expires_next: ktime_t,
    pub next_timer: *mut hrtimer,
    pub softirq_expires_next: ktime_t,
    pub softirq_next_timer: *mut hrtimer,
    pub clock_base: [hrtimer_clock_base; 8usize],
}
impl Default for hrtimer_cpu_base {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl hrtimer_cpu_base {
    #[inline]
    pub fn hres_active(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hres_active(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_hrtirq(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_hrtirq(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hang_detected(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hang_detected(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn softirq_activated(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_softirq_activated(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn online(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_online(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hres_active: core::ffi::c_uint,
        in_hrtirq: core::ffi::c_uint,
        hang_detected: core::ffi::c_uint,
        softirq_activated: core::ffi::c_uint,
        online: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hres_active: u32 = unsafe { ::core::mem::transmute(hres_active) };
            hres_active as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let in_hrtirq: u32 = unsafe { ::core::mem::transmute(in_hrtirq) };
            in_hrtirq as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let hang_detected: u32 = unsafe { ::core::mem::transmute(hang_detected) };
            hang_detected as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let softirq_activated: u32 = unsafe { ::core::mem::transmute(softirq_activated) };
            softirq_activated as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let online: u32 = unsafe { ::core::mem::transmute(online) };
            online as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const hrtimer_mode_HRTIMER_MODE_ABS: hrtimer_mode = 0;
pub const hrtimer_mode_HRTIMER_MODE_REL: hrtimer_mode = 1;
pub const hrtimer_mode_HRTIMER_MODE_PINNED: hrtimer_mode = 2;
pub const hrtimer_mode_HRTIMER_MODE_SOFT: hrtimer_mode = 4;
pub const hrtimer_mode_HRTIMER_MODE_HARD: hrtimer_mode = 8;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED: hrtimer_mode = 2;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED: hrtimer_mode = 3;
pub const hrtimer_mode_HRTIMER_MODE_ABS_SOFT: hrtimer_mode = 4;
pub const hrtimer_mode_HRTIMER_MODE_REL_SOFT: hrtimer_mode = 5;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED_SOFT: hrtimer_mode = 6;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED_SOFT: hrtimer_mode = 7;
pub const hrtimer_mode_HRTIMER_MODE_ABS_HARD: hrtimer_mode = 8;
pub const hrtimer_mode_HRTIMER_MODE_REL_HARD: hrtimer_mode = 9;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED_HARD: hrtimer_mode = 10;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED_HARD: hrtimer_mode = 11;
pub type hrtimer_mode = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hrtimer_sleeper {
    pub timer: hrtimer,
    pub task: *mut task_struct,
}
impl Default for hrtimer_sleeper {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct clock_event_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn hrtimer_interrupt(dev: *mut clock_event_device);
}
extern "C" {
    pub static mut hrtimer_resolution: core::ffi::c_uint;
}
extern "C" {
    pub fn timerfd_clock_was_set();
}
extern "C" {
    pub fn timerfd_resume();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tick_device {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut tick_cpu_device: tick_device;
}
extern "C" {
    pub fn hrtimer_init(timer: *mut hrtimer, which_clock: clockid_t, mode: hrtimer_mode);
}
extern "C" {
    pub fn hrtimer_init_sleeper(sl: *mut hrtimer_sleeper, clock_id: clockid_t, mode: hrtimer_mode);
}
extern "C" {
    pub fn hrtimer_start_range_ns(
        timer: *mut hrtimer,
        tim: ktime_t,
        range_ns: u64_,
        mode: hrtimer_mode,
    );
}
extern "C" {
    pub fn hrtimer_cancel(timer: *mut hrtimer) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimer_try_to_cancel(timer: *mut hrtimer) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimer_sleeper_start_expires(sl: *mut hrtimer_sleeper, mode: hrtimer_mode);
}
extern "C" {
    pub fn __hrtimer_get_remaining(timer: *const hrtimer, adjust: bool_) -> ktime_t;
}
extern "C" {
    pub fn hrtimer_get_next_event() -> u64_;
}
extern "C" {
    pub fn hrtimer_next_event_without(exclude: *const hrtimer) -> u64_;
}
extern "C" {
    pub fn hrtimer_active(timer: *const hrtimer) -> bool_;
}
extern "C" {
    pub fn hrtimer_forward(timer: *mut hrtimer, now: ktime_t, interval: ktime_t) -> u64_;
}
extern "C" {
    pub fn nanosleep_copyout(arg1: *mut restart_block, arg2: *mut timespec64) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimer_nanosleep(
        rqtp: ktime_t,
        mode: hrtimer_mode,
        clockid: clockid_t,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_hrtimeout_range(
        expires: *mut ktime_t,
        delta: u64_,
        mode: hrtimer_mode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn schedule_hrtimeout_range_clock(
        expires: *mut ktime_t,
        delta: u64_,
        mode: hrtimer_mode,
        clock_id: clockid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn schedule_hrtimeout(expires: *mut ktime_t, mode: hrtimer_mode) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimer_run_queues();
}
extern "C" {
    pub fn hrtimers_init();
}
extern "C" {
    pub fn sysrq_timer_list_show();
}
extern "C" {
    pub fn hrtimers_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimers_cpu_dying(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rtc_device {
    _unused: [u8; 0],
}
pub const alarmtimer_type_ALARM_REALTIME: alarmtimer_type = 0;
pub const alarmtimer_type_ALARM_BOOTTIME: alarmtimer_type = 1;
pub const alarmtimer_type_ALARM_NUMTYPE: alarmtimer_type = 2;
pub const alarmtimer_type_ALARM_REALTIME_FREEZER: alarmtimer_type = 3;
pub const alarmtimer_type_ALARM_BOOTTIME_FREEZER: alarmtimer_type = 4;
pub type alarmtimer_type = core::ffi::c_uint;
pub const alarmtimer_restart_ALARMTIMER_NORESTART: alarmtimer_restart = 0;
pub const alarmtimer_restart_ALARMTIMER_RESTART: alarmtimer_restart = 1;
pub type alarmtimer_restart = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct alarm {
    pub node: timerqueue_node,
    pub timer: hrtimer,
    pub function: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut alarm, now: ktime_t) -> alarmtimer_restart,
    >,
    pub type_: alarmtimer_type,
    pub state: core::ffi::c_int,
    pub data: *mut core::ffi::c_void,
}
impl Default for alarm {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn alarm_init(
        alarm: *mut alarm,
        type_: alarmtimer_type,
        function: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut alarm, arg2: ktime_t) -> alarmtimer_restart,
        >,
    );
}
extern "C" {
    pub fn alarm_start(alarm: *mut alarm, start: ktime_t);
}
extern "C" {
    pub fn alarm_start_relative(alarm: *mut alarm, start: ktime_t);
}
extern "C" {
    pub fn alarm_restart(alarm: *mut alarm);
}
extern "C" {
    pub fn alarm_try_to_cancel(alarm: *mut alarm) -> core::ffi::c_int;
}
extern "C" {
    pub fn alarm_cancel(alarm: *mut alarm) -> core::ffi::c_int;
}
extern "C" {
    pub fn alarm_forward(alarm: *mut alarm, now: ktime_t, interval: ktime_t) -> u64_;
}
extern "C" {
    pub fn alarm_forward_now(alarm: *mut alarm, interval: ktime_t) -> u64_;
}
extern "C" {
    pub fn alarm_expires_remaining(alarm: *const alarm) -> ktime_t;
}
extern "C" {
    pub fn alarmtimer_get_rtcdev() -> *mut rtc_device;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpu_timer {
    pub node: timerqueue_node,
    pub head: *mut timerqueue_head,
    pub pid: *mut pid,
    pub elist: list_head,
    pub firing: core::ffi::c_int,
    pub handling: *mut task_struct,
}
impl Default for cpu_timer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn posix_cputimers_group_init(pct: *mut posix_cputimers, cpu_limit: u64_);
}
extern "C" {
    pub fn clear_posix_cputimers_work(p: *mut task_struct);
}
extern "C" {
    pub fn posix_cputimers_init_work();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_itimer {
    pub list: list_head,
    pub t_hash: hlist_node,
    pub it_lock: spinlock_t,
    pub kclock: *mut k_clock,
    pub it_clock: clockid_t,
    pub it_id: timer_t,
    pub it_active: core::ffi::c_int,
    pub it_overrun: s64,
    pub it_overrun_last: s64,
    pub it_requeue_pending: core::ffi::c_int,
    pub it_sigev_notify: core::ffi::c_int,
    pub it_interval: ktime_t,
    pub it_signal: *mut signal_struct,
    pub __bindgen_anon_1: k_itimer__bindgen_ty_1,
    pub sigq: *mut sigqueue,
    pub it: k_itimer__bindgen_ty_2,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union k_itimer__bindgen_ty_1 {
    pub it_pid: *mut pid,
    pub it_process: *mut task_struct,
}
impl Default for k_itimer__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union k_itimer__bindgen_ty_2 {
    pub real: k_itimer__bindgen_ty_2__bindgen_ty_1,
    pub cpu: cpu_timer,
    pub alarm: k_itimer__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_itimer__bindgen_ty_2__bindgen_ty_1 {
    pub timer: hrtimer,
}
impl Default for k_itimer__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_itimer__bindgen_ty_2__bindgen_ty_2 {
    pub alarmtimer: alarm,
}
impl Default for k_itimer__bindgen_ty_2__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for k_itimer__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for k_itimer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn run_posix_cpu_timers();
}
extern "C" {
    pub fn posix_cpu_timers_exit(task: *mut task_struct);
}
extern "C" {
    pub fn posix_cpu_timers_exit_group(task: *mut task_struct);
}
extern "C" {
    pub fn set_process_cpu_timer(
        task: *mut task_struct,
        clock_idx: core::ffi::c_uint,
        newval: *mut u64_,
        oldval: *mut u64_,
    );
}
extern "C" {
    pub fn update_rlimit_cpu(
        task: *mut task_struct,
        rlim_new: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn posixtimer_rearm(info: *mut kernel_siginfo);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sighand_struct {
    pub siglock: spinlock_t,
    pub count: refcount_t,
    pub signalfd_wqh: wait_queue_head_t,
    pub action: [k_sigaction; 64usize],
}
impl Default for sighand_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pacct_struct {
    pub ac_flag: core::ffi::c_int,
    pub ac_exitcode: core::ffi::c_long,
    pub ac_mem: core::ffi::c_ulong,
    pub ac_utime: u64_,
    pub ac_stime: u64_,
    pub ac_minflt: core::ffi::c_ulong,
    pub ac_majflt: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpu_itimer {
    pub expires: u64_,
    pub incr: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct task_cputime_atomic {
    pub utime: atomic64_t,
    pub stime: atomic64_t,
    pub sum_exec_runtime: atomic64_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct thread_group_cputimer {
    pub cputime_atomic: task_cputime_atomic,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct multiprocess_signals {
    pub signal: sigset_t,
    pub node: hlist_node,
}
impl Default for multiprocess_signals {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct core_thread {
    pub task: *mut task_struct,
    pub next: *mut core_thread,
}
impl Default for core_thread {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct core_state {
    pub nr_threads: atomic_t,
    pub dumper: core_thread,
    pub startup: completion,
}
impl Default for core_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct signal_struct {
    pub sigcnt: refcount_t,
    pub live: atomic_t,
    pub nr_threads: core::ffi::c_int,
    pub quick_threads: core::ffi::c_int,
    pub thread_head: list_head,
    pub wait_chldexit: wait_queue_head_t,
    pub curr_target: *mut task_struct,
    pub shared_pending: sigpending,
    pub multiprocess: hlist_head,
    pub group_exit_code: core::ffi::c_int,
    pub notify_count: core::ffi::c_int,
    pub group_exec_task: *mut task_struct,
    pub group_stop_count: core::ffi::c_int,
    pub flags: core::ffi::c_uint,
    pub core_state: *mut core_state,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub next_posix_timer_id: core::ffi::c_uint,
    pub posix_timers: list_head,
    pub real_timer: hrtimer,
    pub it_real_incr: ktime_t,
    pub it: [cpu_itimer; 2usize],
    pub cputimer: thread_group_cputimer,
    pub posix_cputimers: posix_cputimers,
    pub pids: [*mut pid; 4usize],
    pub tty_old_pgrp: *mut pid,
    pub leader: core::ffi::c_int,
    pub tty: *mut tty_struct,
    pub stats_lock: seqlock_t,
    pub utime: u64_,
    pub stime: u64_,
    pub cutime: u64_,
    pub cstime: u64_,
    pub gtime: u64_,
    pub cgtime: u64_,
    pub prev_cputime: prev_cputime,
    pub nvcsw: core::ffi::c_ulong,
    pub nivcsw: core::ffi::c_ulong,
    pub cnvcsw: core::ffi::c_ulong,
    pub cnivcsw: core::ffi::c_ulong,
    pub min_flt: core::ffi::c_ulong,
    pub maj_flt: core::ffi::c_ulong,
    pub cmin_flt: core::ffi::c_ulong,
    pub cmaj_flt: core::ffi::c_ulong,
    pub inblock: core::ffi::c_ulong,
    pub oublock: core::ffi::c_ulong,
    pub cinblock: core::ffi::c_ulong,
    pub coublock: core::ffi::c_ulong,
    pub maxrss: core::ffi::c_ulong,
    pub cmaxrss: core::ffi::c_ulong,
    pub ioac: task_io_accounting,
    pub sum_sched_runtime: core::ffi::c_ulonglong,
    pub rlim: [rlimit; 16usize],
    pub pacct: pacct_struct,
    pub stats: *mut taskstats,
    pub audit_tty: core::ffi::c_uint,
    pub tty_audit_buf: *mut tty_audit_buf,
    pub oom_flag_origin: bool_,
    pub oom_score_adj: core::ffi::c_short,
    pub oom_score_adj_min: core::ffi::c_short,
    pub oom_mm: *mut mm_struct,
    pub cred_guard_mutex: mutex,
    pub exec_update_lock: rw_semaphore,
}
impl Default for signal_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl signal_struct {
    #[inline]
    pub fn is_child_subreaper(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_child_subreaper(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_child_subreaper(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_child_subreaper(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_child_subreaper: core::ffi::c_uint,
        has_child_subreaper: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_child_subreaper: u32 = unsafe { ::core::mem::transmute(is_child_subreaper) };
            is_child_subreaper as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let has_child_subreaper: u32 = unsafe { ::core::mem::transmute(has_child_subreaper) };
            has_child_subreaper as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn flush_signals(arg1: *mut task_struct);
}
extern "C" {
    pub fn ignore_signals(arg1: *mut task_struct);
}
extern "C" {
    pub fn flush_signal_handlers(arg1: *mut task_struct, force_default: core::ffi::c_int);
}
extern "C" {
    pub fn dequeue_signal(
        task: *mut task_struct,
        mask: *mut sigset_t,
        info: *mut kernel_siginfo_t,
        type_: *mut pid_type,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_fault_to_task(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
        t: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_fault(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_fault(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
        t: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_mceerr(
        code: core::ffi::c_int,
        arg1: *mut core::ffi::c_void,
        arg2: core::ffi::c_short,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_mceerr(
        code: core::ffi::c_int,
        arg1: *mut core::ffi::c_void,
        arg2: core::ffi::c_short,
        arg3: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_bnderr(
        addr: *mut core::ffi::c_void,
        lower: *mut core::ffi::c_void,
        upper: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_pkuerr(addr: *mut core::ffi::c_void, pkey: u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_perf(
        addr: *mut core::ffi::c_void,
        type_: u32_,
        sig_data: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_ptrace_errno_trap(
        errno: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_fault_trapno(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
        trapno: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_fault_trapno(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
        trapno: core::ffi::c_int,
        t: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_seccomp(
        syscall: core::ffi::c_int,
        reason: core::ffi::c_int,
        force_coredump: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_info(
        arg1: core::ffi::c_int,
        arg2: *mut kernel_siginfo,
        arg3: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sigsegv(sig: core::ffi::c_int);
}
extern "C" {
    pub fn force_sig_info(arg1: *mut kernel_siginfo) -> core::ffi::c_int;
}
extern "C" {
    pub fn __kill_pgrp_info(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        pgrp: *mut pid,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kill_pid_info(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        pid: *mut pid,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kill_pid_usb_asyncio(
        sig: core::ffi::c_int,
        errno: core::ffi::c_int,
        addr: sigval_t,
        arg1: *mut pid,
        arg2: *const cred,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kill_pgrp(
        pid: *mut pid,
        sig: core::ffi::c_int,
        priv_: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kill_pid(
        pid: *mut pid,
        sig: core::ffi::c_int,
        priv_: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_notify_parent(arg1: *mut task_struct, arg2: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn __wake_up_parent(p: *mut task_struct, parent: *mut task_struct);
}
extern "C" {
    pub fn force_sig(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn force_fatal_sig(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn force_exit_sig(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn send_sig(
        arg1: core::ffi::c_int,
        arg2: *mut task_struct,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn zap_other_threads(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn sigqueue_alloc() -> *mut sigqueue;
}
extern "C" {
    pub fn sigqueue_free(arg1: *mut sigqueue);
}
extern "C" {
    pub fn send_sigqueue(arg1: *mut sigqueue, arg2: *mut pid, arg3: pid_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_sigaction(
        arg1: core::ffi::c_int,
        arg2: *mut k_sigaction,
        arg3: *mut k_sigaction,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn recalc_sigpending();
}
extern "C" {
    pub fn calculate_sigpending();
}
extern "C" {
    pub fn signal_wake_up_state(t: *mut task_struct, state: core::ffi::c_uint);
}
extern "C" {
    pub fn task_join_group_stop(task: *mut task_struct);
}
extern "C" {
    pub fn set_user_sigmask(umask: *const sigset_t, sigsetsize: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cleanup_sighand(arg1: *mut sighand_struct);
}
extern "C" {
    pub fn flush_itimer_signals();
}
extern "C" {
    pub fn current_is_single_threaded() -> bool_;
}
pub type proc_visitor = ::core::option::Option<
    unsafe extern "C" fn(p: *mut task_struct, data: *mut core::ffi::c_void) -> core::ffi::c_int,
>;
extern "C" {
    pub fn walk_process_tree(
        top: *mut task_struct,
        arg1: proc_visitor,
        arg2: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __lock_task_sighand(
        task: *mut task_struct,
        flags: *mut core::ffi::c_ulong,
    ) -> *mut sighand_struct;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcuwait {
    pub task: *mut task_struct,
}
impl Default for rcuwait {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rcuwait_wake_up(w: *mut rcuwait) -> core::ffi::c_int;
}
extern "C" {
    pub fn finish_rcuwait(w: *mut rcuwait);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_sync {
    pub gp_state: core::ffi::c_int,
    pub gp_count: core::ffi::c_int,
    pub gp_wait: wait_queue_head_t,
    pub cb_head: callback_head,
}
impl Default for rcu_sync {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rcu_sync_init(arg1: *mut rcu_sync);
}
extern "C" {
    pub fn rcu_sync_enter(arg1: *mut rcu_sync);
}
extern "C" {
    pub fn rcu_sync_exit(arg1: *mut rcu_sync);
}
extern "C" {
    pub fn rcu_sync_dtor(arg1: *mut rcu_sync);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_rw_semaphore {
    pub rss: rcu_sync,
    pub read_count: *mut core::ffi::c_uint,
    pub writer: rcuwait,
    pub waiters: wait_queue_head_t,
    pub block: atomic_t,
}
impl Default for percpu_rw_semaphore {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __percpu_down_read(arg1: *mut percpu_rw_semaphore, arg2: bool_) -> bool_;
}
extern "C" {
    pub fn percpu_is_read_locked(arg1: *mut percpu_rw_semaphore) -> bool_;
}
extern "C" {
    pub fn percpu_down_write(arg1: *mut percpu_rw_semaphore);
}
extern "C" {
    pub fn percpu_up_write(arg1: *mut percpu_rw_semaphore);
}
extern "C" {
    pub fn __percpu_init_rwsem(
        arg1: *mut percpu_rw_semaphore,
        arg2: *const core::ffi::c_char,
        arg3: *mut lock_class_key,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn percpu_free_rwsem(arg1: *mut percpu_rw_semaphore);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct delayed_call {
    pub fn_: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
    pub arg: *mut core::ffi::c_void,
}
impl Default for delayed_call {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct guid_t {
    pub b: [__u8; 16usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct uuid_t {
    pub b: [__u8; 16usize],
}
extern "C" {
    pub static guid_null: guid_t;
}
extern "C" {
    pub static uuid_null: uuid_t;
}
extern "C" {
    pub fn generate_random_uuid(uuid: *mut core::ffi::c_uchar);
}
extern "C" {
    pub fn generate_random_guid(guid: *mut core::ffi::c_uchar);
}
extern "C" {
    pub fn guid_gen(u: *mut guid_t);
}
extern "C" {
    pub fn uuid_gen(u: *mut uuid_t);
}
extern "C" {
    pub fn uuid_is_valid(uuid: *const core::ffi::c_char) -> bool_;
}
extern "C" {
    pub static guid_index: [u8_; 16usize];
}
extern "C" {
    pub static uuid_index: [u8_; 16usize];
}
extern "C" {
    pub fn guid_parse(uuid: *const core::ffi::c_char, u: *mut guid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn uuid_parse(uuid: *const core::ffi::c_char, u: *mut uuid_t) -> core::ffi::c_int;
}
pub type errseq_t = u32_;
extern "C" {
    pub fn errseq_set(eseq: *mut errseq_t, err: core::ffi::c_int) -> errseq_t;
}
extern "C" {
    pub fn errseq_sample(eseq: *mut errseq_t) -> errseq_t;
}
extern "C" {
    pub fn errseq_check(eseq: *mut errseq_t, since: errseq_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn errseq_check_and_advance(eseq: *mut errseq_t, since: *mut errseq_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn rt_mutex_pre_schedule();
}
extern "C" {
    pub fn rt_mutex_schedule();
}
extern "C" {
    pub fn rt_mutex_post_schedule();
}
extern "C" {
    pub fn rt_mutex_setprio(p: *mut task_struct, pi_task: *mut task_struct);
}
extern "C" {
    pub fn rt_mutex_adjust_pi(p: *mut task_struct);
}
extern "C" {
    pub fn normalize_rt_tasks();
}
pub const ICQ_EXITED: _bindgen_ty_74 = 4;
pub const ICQ_DESTROYED: _bindgen_ty_74 = 8;
pub type _bindgen_ty_74 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_cq {
    pub q: *mut request_queue,
    pub ioc: *mut io_context,
    pub __bindgen_anon_1: io_cq__bindgen_ty_1,
    pub __bindgen_anon_2: io_cq__bindgen_ty_2,
    pub flags: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_cq__bindgen_ty_1 {
    pub q_node: list_head,
    pub __rcu_icq_cache: *mut kmem_cache,
}
impl Default for io_cq__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_cq__bindgen_ty_2 {
    pub ioc_node: hlist_node,
    pub __rcu_head: callback_head,
}
impl Default for io_cq__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for io_cq {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_context {
    pub refcount: atomic_long_t,
    pub active_ref: atomic_t,
    pub ioprio: core::ffi::c_ushort,
}
extern "C" {
    pub fn put_io_context(ioc: *mut io_context);
}
extern "C" {
    pub fn exit_io_context(task: *mut task_struct);
}
extern "C" {
    pub fn __copy_io(clone_flags: core::ffi::c_ulong, tsk: *mut task_struct) -> core::ffi::c_int;
}
pub const IOPRIO_CLASS_NONE: _bindgen_ty_75 = 0;
pub const IOPRIO_CLASS_RT: _bindgen_ty_75 = 1;
pub const IOPRIO_CLASS_BE: _bindgen_ty_75 = 2;
pub const IOPRIO_CLASS_IDLE: _bindgen_ty_75 = 3;
pub const IOPRIO_CLASS_INVALID: _bindgen_ty_75 = 7;
pub type _bindgen_ty_75 = core::ffi::c_uint;
pub const IOPRIO_WHO_PROCESS: _bindgen_ty_76 = 1;
pub const IOPRIO_WHO_PGRP: _bindgen_ty_76 = 2;
pub const IOPRIO_WHO_USER: _bindgen_ty_76 = 3;
pub type _bindgen_ty_76 = core::ffi::c_uint;
pub const IOPRIO_HINT_NONE: _bindgen_ty_77 = 0;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_1: _bindgen_ty_77 = 1;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_2: _bindgen_ty_77 = 2;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_3: _bindgen_ty_77 = 3;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_4: _bindgen_ty_77 = 4;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_5: _bindgen_ty_77 = 5;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_6: _bindgen_ty_77 = 6;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_7: _bindgen_ty_77 = 7;
pub type _bindgen_ty_77 = core::ffi::c_uint;
extern "C" {
    pub fn set_task_ioprio(task: *mut task_struct, ioprio: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn ioprio_check_cap(ioprio: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn fs_ftype_to_dtype(filetype: core::ffi::c_uint) -> core::ffi::c_uchar;
}
extern "C" {
    pub fn fs_umode_to_ftype(mode: umode_t) -> core::ffi::c_uchar;
}
extern "C" {
    pub fn fs_umode_to_dtype(mode: umode_t) -> core::ffi::c_uchar;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fs_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vfsmount {
    pub mnt_root: *mut dentry,
    pub mnt_sb: *mut super_block,
    pub mnt_flags: core::ffi::c_int,
    pub mnt_idmap: *mut mnt_idmap,
}
impl Default for vfsmount {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mnt_want_write(mnt: *mut vfsmount) -> core::ffi::c_int;
}
extern "C" {
    pub fn mnt_want_write_file(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn mnt_drop_write(mnt: *mut vfsmount);
}
extern "C" {
    pub fn mnt_drop_write_file(file: *mut file);
}
extern "C" {
    pub fn mntput(mnt: *mut vfsmount);
}
extern "C" {
    pub fn mntget(mnt: *mut vfsmount) -> *mut vfsmount;
}
extern "C" {
    pub fn mnt_make_shortterm(mnt: *mut vfsmount);
}
extern "C" {
    pub fn mnt_clone_internal(path: *const path) -> *mut vfsmount;
}
extern "C" {
    pub fn __mnt_is_readonly(mnt: *mut vfsmount) -> bool_;
}
extern "C" {
    pub fn mnt_may_suid(mnt: *mut vfsmount) -> bool_;
}
extern "C" {
    pub fn clone_private_mount(path: *const path) -> *mut vfsmount;
}
extern "C" {
    pub fn mnt_get_write_access(mnt: *mut vfsmount) -> core::ffi::c_int;
}
extern "C" {
    pub fn mnt_put_write_access(mnt: *mut vfsmount);
}
extern "C" {
    pub fn fc_mount(fc: *mut fs_context) -> *mut vfsmount;
}
extern "C" {
    pub fn vfs_create_mount(fc: *mut fs_context) -> *mut vfsmount;
}
extern "C" {
    pub fn vfs_kern_mount(
        type_: *mut file_system_type,
        flags: core::ffi::c_int,
        name: *const core::ffi::c_char,
        data: *mut core::ffi::c_void,
    ) -> *mut vfsmount;
}
extern "C" {
    pub fn vfs_submount(
        mountpoint: *const dentry,
        type_: *mut file_system_type,
        name: *const core::ffi::c_char,
        data: *mut core::ffi::c_void,
    ) -> *mut vfsmount;
}
extern "C" {
    pub fn mnt_set_expiry(mnt: *mut vfsmount, expiry_list: *mut list_head);
}
extern "C" {
    pub fn mark_mounts_for_expiry(mounts: *mut list_head);
}
extern "C" {
    pub fn path_is_mountpoint(path: *const path) -> bool_;
}
extern "C" {
    pub fn our_mnt(mnt: *mut vfsmount) -> bool_;
}
extern "C" {
    pub fn kern_mount(arg1: *mut file_system_type) -> *mut vfsmount;
}
extern "C" {
    pub fn kern_unmount(mnt: *mut vfsmount);
}
extern "C" {
    pub fn may_umount_tree(arg1: *mut vfsmount) -> core::ffi::c_int;
}
extern "C" {
    pub fn may_umount(arg1: *mut vfsmount) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_mount(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: *const core::ffi::c_char,
        arg4: core::ffi::c_ulong,
        arg5: *mut core::ffi::c_void,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn collect_mounts(arg1: *const path) -> *mut vfsmount;
}
extern "C" {
    pub fn drop_collected_mounts(arg1: *mut vfsmount);
}
extern "C" {
    pub fn iterate_mounts(
        arg1: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut vfsmount,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg2: *mut core::ffi::c_void,
        arg3: *mut vfsmount,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kern_unmount_array(mnt: *mut *mut vfsmount, num: core::ffi::c_uint);
}
extern "C" {
    pub fn cifs_root_data(
        dev: *mut *mut core::ffi::c_char,
        opts: *mut *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut nop_mnt_idmap: mnt_idmap;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfsuid_t {
    pub val: uid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfsgid_t {
    pub val: gid_t,
}
extern "C" {
    pub fn vfsgid_in_group_p(vfsgid: vfsgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn mnt_idmap_get(idmap: *mut mnt_idmap) -> *mut mnt_idmap;
}
extern "C" {
    pub fn mnt_idmap_put(idmap: *mut mnt_idmap);
}
extern "C" {
    pub fn make_vfsuid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        kuid: kuid_t,
    ) -> vfsuid_t;
}
extern "C" {
    pub fn make_vfsgid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        kgid: kgid_t,
    ) -> vfsgid_t;
}
extern "C" {
    pub fn from_vfsuid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        vfsuid: vfsuid_t,
    ) -> kuid_t;
}
extern "C" {
    pub fn from_vfsgid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        vfsgid: vfsgid_t,
    ) -> kgid_t;
}
pub type percpu_ref_func_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut percpu_ref)>;
pub const __PERCPU_REF_ATOMIC: _bindgen_ty_78 = 1;
pub const __PERCPU_REF_DEAD: _bindgen_ty_78 = 2;
pub const __PERCPU_REF_ATOMIC_DEAD: _bindgen_ty_78 = 3;
pub const __PERCPU_REF_FLAG_BITS: _bindgen_ty_78 = 2;
pub type _bindgen_ty_78 = core::ffi::c_uint;
pub const PERCPU_REF_INIT_ATOMIC: _bindgen_ty_79 = 1;
pub const PERCPU_REF_INIT_DEAD: _bindgen_ty_79 = 2;
pub const PERCPU_REF_ALLOW_REINIT: _bindgen_ty_79 = 4;
pub type _bindgen_ty_79 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_ref_data {
    pub count: atomic_long_t,
    pub release: percpu_ref_func_t,
    pub confirm_switch: percpu_ref_func_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub rcu: callback_head,
    pub ref_: *mut percpu_ref,
}
impl Default for percpu_ref_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl percpu_ref_data {
    #[inline]
    pub fn force_atomic(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_force_atomic(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_reinit(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_allow_reinit(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        force_atomic: bool_,
        allow_reinit: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let force_atomic: u8 = unsafe { ::core::mem::transmute(force_atomic) };
            force_atomic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let allow_reinit: u8 = unsafe { ::core::mem::transmute(allow_reinit) };
            allow_reinit as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_ref {
    pub percpu_count_ptr: core::ffi::c_ulong,
    pub data: *mut percpu_ref_data,
}
impl Default for percpu_ref {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn percpu_ref_init(
        ref_: *mut percpu_ref,
        release: percpu_ref_func_t,
        flags: core::ffi::c_uint,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn percpu_ref_exit(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_switch_to_atomic(ref_: *mut percpu_ref, confirm_switch: percpu_ref_func_t);
}
extern "C" {
    pub fn percpu_ref_switch_to_atomic_sync(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_switch_to_percpu(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_kill_and_confirm(ref_: *mut percpu_ref, confirm_kill: percpu_ref_func_t);
}
extern "C" {
    pub fn percpu_ref_resurrect(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_reinit(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_is_zero(ref_: *mut percpu_ref) -> bool_;
}
pub const _slab_flag_bits__SLAB_CONSISTENCY_CHECKS: _slab_flag_bits = 0;
pub const _slab_flag_bits__SLAB_RED_ZONE: _slab_flag_bits = 1;
pub const _slab_flag_bits__SLAB_POISON: _slab_flag_bits = 2;
pub const _slab_flag_bits__SLAB_KMALLOC: _slab_flag_bits = 3;
pub const _slab_flag_bits__SLAB_HWCACHE_ALIGN: _slab_flag_bits = 4;
pub const _slab_flag_bits__SLAB_CACHE_DMA: _slab_flag_bits = 5;
pub const _slab_flag_bits__SLAB_CACHE_DMA32: _slab_flag_bits = 6;
pub const _slab_flag_bits__SLAB_STORE_USER: _slab_flag_bits = 7;
pub const _slab_flag_bits__SLAB_PANIC: _slab_flag_bits = 8;
pub const _slab_flag_bits__SLAB_TYPESAFE_BY_RCU: _slab_flag_bits = 9;
pub const _slab_flag_bits__SLAB_TRACE: _slab_flag_bits = 10;
pub const _slab_flag_bits__SLAB_NOLEAKTRACE: _slab_flag_bits = 11;
pub const _slab_flag_bits__SLAB_NO_MERGE: _slab_flag_bits = 12;
pub const _slab_flag_bits__SLAB_NO_USER_FLAGS: _slab_flag_bits = 13;
pub const _slab_flag_bits__SLAB_RECLAIM_ACCOUNT: _slab_flag_bits = 14;
pub const _slab_flag_bits__SLAB_OBJECT_POISON: _slab_flag_bits = 15;
pub const _slab_flag_bits__SLAB_CMPXCHG_DOUBLE: _slab_flag_bits = 16;
pub const _slab_flag_bits__SLAB_FLAGS_LAST_BIT: _slab_flag_bits = 17;
pub type _slab_flag_bits = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct slab {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_struct {
    _unused: [u8; 0],
}
pub type kasan_vmalloc_flags_t = core::ffi::c_uint;
extern "C" {
    pub fn slab_is_available() -> bool_;
}
extern "C" {
    pub fn kmem_cache_create(
        name: *const core::ffi::c_char,
        size: core::ffi::c_uint,
        align: core::ffi::c_uint,
        flags: slab_flags_t,
        ctor: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
    ) -> *mut kmem_cache;
}
extern "C" {
    pub fn kmem_cache_create_usercopy(
        name: *const core::ffi::c_char,
        size: core::ffi::c_uint,
        align: core::ffi::c_uint,
        flags: slab_flags_t,
        useroffset: core::ffi::c_uint,
        usersize: core::ffi::c_uint,
        ctor: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
    ) -> *mut kmem_cache;
}
extern "C" {
    pub fn kmem_cache_destroy(s: *mut kmem_cache);
}
extern "C" {
    pub fn kmem_cache_shrink(s: *mut kmem_cache) -> core::ffi::c_int;
}
extern "C" {
    pub fn krealloc_noprof(
        objp: *const core::ffi::c_void,
        new_size: usize,
        flags: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kfree(objp: *const core::ffi::c_void);
}
extern "C" {
    pub fn kfree_sensitive(objp: *const core::ffi::c_void);
}
extern "C" {
    pub fn __ksize(objp: *const core::ffi::c_void) -> usize;
}
extern "C" {
    pub fn ksize(objp: *const core::ffi::c_void) -> usize;
}
extern "C" {
    pub fn kmem_dump_obj(object: *mut core::ffi::c_void) -> bool_;
}
pub const kmalloc_cache_type_KMALLOC_NORMAL: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_CGROUP: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_RANDOM_START: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_RANDOM_END: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_RECLAIM: kmalloc_cache_type = 1;
pub const kmalloc_cache_type_KMALLOC_DMA: kmalloc_cache_type = 2;
pub const kmalloc_cache_type_NR_KMALLOC_TYPES: kmalloc_cache_type = 3;
pub type kmalloc_cache_type = core::ffi::c_uint;
pub type kmem_buckets = [*mut kmem_cache; 14usize];
extern "C" {
    pub static mut kmalloc_caches: [kmem_buckets; 3usize];
}
extern "C" {
    pub static mut random_kmalloc_seed: core::ffi::c_ulong;
}
extern "C" {
    pub fn kmem_cache_alloc_noprof(cachep: *mut kmem_cache, flags: gfp_t)
        -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmem_cache_alloc_lru_noprof(
        s: *mut kmem_cache,
        lru: *mut list_lru,
        gfpflags: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmem_cache_free(s: *mut kmem_cache, objp: *mut core::ffi::c_void);
}
extern "C" {
    pub fn kmem_buckets_create(
        name: *const core::ffi::c_char,
        flags: slab_flags_t,
        useroffset: core::ffi::c_uint,
        usersize: core::ffi::c_uint,
        ctor: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
    ) -> *mut kmem_buckets;
}
extern "C" {
    pub fn kmem_cache_free_bulk(s: *mut kmem_cache, size: usize, p: *mut *mut core::ffi::c_void);
}
extern "C" {
    pub fn kmem_cache_alloc_bulk_noprof(
        s: *mut kmem_cache,
        flags: gfp_t,
        size: usize,
        p: *mut *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kmem_cache_alloc_node_noprof(
        s: *mut kmem_cache,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __kmalloc_noprof(size: usize, flags: gfp_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __kmalloc_node_noprof(
        size: usize,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __kmalloc_cache_noprof(
        s: *mut kmem_cache,
        flags: gfp_t,
        size: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __kmalloc_cache_node_noprof(
        s: *mut kmem_cache,
        gfpflags: gfp_t,
        node: core::ffi::c_int,
        size: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __kmalloc_large_noprof(size: usize, flags: gfp_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __kmalloc_large_node_noprof(
        size: usize,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __kmalloc_node_track_caller_noprof(
        size: usize,
        flags: gfp_t,
        node: core::ffi::c_int,
        caller: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __kvmalloc_node_noprof(
        size: usize,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kvrealloc_noprof(
        p: *const core::ffi::c_void,
        oldsize: usize,
        newsize: usize,
        flags: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kvfree(addr: *const core::ffi::c_void);
}
extern "C" {
    pub fn kvfree_sensitive(addr: *const core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn kmem_cache_size(s: *mut kmem_cache) -> core::ffi::c_uint;
}
extern "C" {
    pub fn kmalloc_size_roundup(size: usize) -> usize;
}
extern "C" {
    pub fn kmem_cache_init_late();
}
pub const rw_hint_WRITE_LIFE_NOT_SET: rw_hint = 0;
pub const rw_hint_WRITE_LIFE_NONE: rw_hint = 1;
pub const rw_hint_WRITE_LIFE_SHORT: rw_hint = 2;
pub const rw_hint_WRITE_LIFE_MEDIUM: rw_hint = 3;
pub const rw_hint_WRITE_LIFE_LONG: rw_hint = 4;
pub const rw_hint_WRITE_LIFE_EXTREME: rw_hint = 5;
pub type rw_hint = core::ffi::c_uchar;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct file_clone_range {
    pub src_fd: __s64,
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_offset: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fstrim_range {
    pub start: __u64,
    pub len: __u64,
    pub minlen: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fsuuid2 {
    pub len: __u8,
    pub uuid: [__u8; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fs_sysfs_path {
    pub len: __u8,
    pub name: [__u8; 128usize],
}
impl Default for fs_sysfs_path {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct file_dedupe_range_info {
    pub dest_fd: __s64,
    pub dest_offset: __u64,
    pub bytes_deduped: __u64,
    pub status: __s32,
    pub reserved: __u32,
}
#[repr(C)]
#[derive(Default)]
pub struct file_dedupe_range {
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_count: __u16,
    pub reserved1: __u16,
    pub reserved2: __u32,
    pub info: __IncompleteArrayField<file_dedupe_range_info>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct files_stat_struct {
    pub nr_files: core::ffi::c_ulong,
    pub nr_free_files: core::ffi::c_ulong,
    pub max_files: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct inodes_stat_t {
    pub nr_inodes: core::ffi::c_long,
    pub nr_unused: core::ffi::c_long,
    pub dummy: [core::ffi::c_long; 5usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fsxattr {
    pub fsx_xflags: __u32,
    pub fsx_extsize: __u32,
    pub fsx_nextents: __u32,
    pub fsx_projid: __u32,
    pub fsx_cowextsize: __u32,
    pub fsx_pad: [core::ffi::c_uchar; 8usize],
}
pub type __kernel_rwf_t = core::ffi::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct page_region {
    pub start: __u64,
    pub end: __u64,
    pub categories: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pm_scan_arg {
    pub size: __u64,
    pub flags: __u64,
    pub start: __u64,
    pub end: __u64,
    pub walk_end: __u64,
    pub vec: __u64,
    pub vec_len: __u64,
    pub max_pages: __u64,
    pub category_inverted: __u64,
    pub category_mask: __u64,
    pub category_anyof_mask: __u64,
    pub return_mask: __u64,
}
pub const procmap_query_flags_PROCMAP_QUERY_VMA_READABLE: procmap_query_flags = 1;
pub const procmap_query_flags_PROCMAP_QUERY_VMA_WRITABLE: procmap_query_flags = 2;
pub const procmap_query_flags_PROCMAP_QUERY_VMA_EXECUTABLE: procmap_query_flags = 4;
pub const procmap_query_flags_PROCMAP_QUERY_VMA_SHARED: procmap_query_flags = 8;
pub const procmap_query_flags_PROCMAP_QUERY_COVERING_OR_NEXT_VMA: procmap_query_flags = 16;
pub const procmap_query_flags_PROCMAP_QUERY_FILE_BACKED_VMA: procmap_query_flags = 32;
pub type procmap_query_flags = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct procmap_query {
    pub size: __u64,
    pub query_flags: __u64,
    pub query_addr: __u64,
    pub vma_start: __u64,
    pub vma_end: __u64,
    pub vma_flags: __u64,
    pub vma_page_size: __u64,
    pub vma_offset: __u64,
    pub inode: __u64,
    pub dev_major: __u32,
    pub dev_minor: __u32,
    pub vma_name_size: __u32,
    pub build_id_size: __u32,
    pub vma_name_addr: __u64,
    pub build_id_addr: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_comp_batch {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct export_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fiemap_extent_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hd_geometry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct poll_table_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kstatfs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swap_info_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_inode_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fsverity_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fsverity_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fsnotify_mark_connector {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fsnotify_sb_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fs_parameter_spec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fileattr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iomap_ops {
    _unused: [u8; 0],
}
extern "C" {
    pub fn inode_init();
}
extern "C" {
    pub fn inode_init_early();
}
extern "C" {
    pub fn files_init();
}
extern "C" {
    pub fn files_maxfiles_init();
}
extern "C" {
    pub fn get_max_files() -> core::ffi::c_ulong;
}
extern "C" {
    pub static mut sysctl_nr_open: core::ffi::c_uint;
}
pub type rwf_t = __kernel_rwf_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct buffer_head {
    _unused: [u8; 0],
}
pub type get_block_t = ::core::option::Option<
    unsafe extern "C" fn(
        inode: *mut inode,
        iblock: sector_t,
        bh_result: *mut buffer_head,
        create: core::ffi::c_int,
    ) -> core::ffi::c_int,
>;
pub type dio_iodone_t = ::core::option::Option<
    unsafe extern "C" fn(
        iocb: *mut kiocb,
        offset: loff_t,
        bytes: isize,
        private: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iattr {
    pub ia_valid: core::ffi::c_uint,
    pub ia_mode: umode_t,
    pub __bindgen_anon_1: iattr__bindgen_ty_1,
    pub __bindgen_anon_2: iattr__bindgen_ty_2,
    pub ia_size: loff_t,
    pub ia_atime: timespec64,
    pub ia_mtime: timespec64,
    pub ia_ctime: timespec64,
    pub ia_file: *mut file,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iattr__bindgen_ty_1 {
    pub ia_uid: kuid_t,
    pub ia_vfsuid: vfsuid_t,
}
impl Default for iattr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iattr__bindgen_ty_2 {
    pub ia_gid: kgid_t,
    pub ia_vfsgid: vfsgid_t,
}
impl Default for iattr__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for iattr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_disk_quota {
    pub d_version: __s8,
    pub d_flags: __s8,
    pub d_fieldmask: __u16,
    pub d_id: __u32,
    pub d_blk_hardlimit: __u64,
    pub d_blk_softlimit: __u64,
    pub d_ino_hardlimit: __u64,
    pub d_ino_softlimit: __u64,
    pub d_bcount: __u64,
    pub d_icount: __u64,
    pub d_itimer: __s32,
    pub d_btimer: __s32,
    pub d_iwarns: __u16,
    pub d_bwarns: __u16,
    pub d_itimer_hi: __s8,
    pub d_btimer_hi: __s8,
    pub d_rtbtimer_hi: __s8,
    pub d_padding2: __s8,
    pub d_rtb_hardlimit: __u64,
    pub d_rtb_softlimit: __u64,
    pub d_rtbcount: __u64,
    pub d_rtbtimer: __s32,
    pub d_rtbwarns: __u16,
    pub d_padding3: __s16,
    pub d_padding4: [core::ffi::c_char; 8usize],
}
pub type fs_disk_quota_t = fs_disk_quota;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_qfilestat {
    pub qfs_ino: __u64,
    pub qfs_nblks: __u64,
    pub qfs_nextents: __u32,
}
pub type fs_qfilestat_t = fs_qfilestat;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_quota_stat {
    pub qs_version: __s8,
    pub qs_flags: __u16,
    pub qs_pad: __s8,
    pub qs_uquota: fs_qfilestat_t,
    pub qs_gquota: fs_qfilestat_t,
    pub qs_incoredqs: __u32,
    pub qs_btimelimit: __s32,
    pub qs_itimelimit: __s32,
    pub qs_rtbtimelimit: __s32,
    pub qs_bwarnlimit: __u16,
    pub qs_iwarnlimit: __u16,
}
pub type fs_quota_stat_t = fs_quota_stat;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_qfilestatv {
    pub qfs_ino: __u64,
    pub qfs_nblks: __u64,
    pub qfs_nextents: __u32,
    pub qfs_pad: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_quota_statv {
    pub qs_version: __s8,
    pub qs_pad1: __u8,
    pub qs_flags: __u16,
    pub qs_incoredqs: __u32,
    pub qs_uquota: fs_qfilestatv,
    pub qs_gquota: fs_qfilestatv,
    pub qs_pquota: fs_qfilestatv,
    pub qs_btimelimit: __s32,
    pub qs_itimelimit: __s32,
    pub qs_rtbtimelimit: __s32,
    pub qs_bwarnlimit: __u16,
    pub qs_iwarnlimit: __u16,
    pub qs_rtbwarnlimit: __u16,
    pub qs_pad3: __u16,
    pub qs_pad4: __u32,
    pub qs_pad2: [__u64; 7usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qtree_fmt_operations {
    pub mem2disk_dqblk: ::core::option::Option<
        unsafe extern "C" fn(disk: *mut core::ffi::c_void, dquot: *mut dquot),
    >,
    pub disk2mem_dqblk: ::core::option::Option<
        unsafe extern "C" fn(dquot: *mut dquot, disk: *mut core::ffi::c_void),
    >,
    pub is_id: ::core::option::Option<
        unsafe extern "C" fn(disk: *mut core::ffi::c_void, dquot: *mut dquot) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qtree_mem_dqinfo {
    pub dqi_sb: *mut super_block,
    pub dqi_type: core::ffi::c_int,
    pub dqi_blocks: core::ffi::c_uint,
    pub dqi_free_blk: core::ffi::c_uint,
    pub dqi_free_entry: core::ffi::c_uint,
    pub dqi_blocksize_bits: core::ffi::c_uint,
    pub dqi_entry_size: core::ffi::c_uint,
    pub dqi_usable_bs: core::ffi::c_uint,
    pub dqi_qtree_depth: core::ffi::c_uint,
    pub dqi_ops: *const qtree_fmt_operations,
}
impl Default for qtree_mem_dqinfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn qtree_write_dquot(info: *mut qtree_mem_dqinfo, dquot: *mut dquot) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_read_dquot(info: *mut qtree_mem_dqinfo, dquot: *mut dquot) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_delete_dquot(info: *mut qtree_mem_dqinfo, dquot: *mut dquot) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_release_dquot(info: *mut qtree_mem_dqinfo, dquot: *mut dquot) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_entry_unused(
        info: *mut qtree_mem_dqinfo,
        disk: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_get_next_id(info: *mut qtree_mem_dqinfo, qid: *mut kqid) -> core::ffi::c_int;
}
pub type projid_t = __kernel_uid32_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kprojid_t {
    pub val: projid_t,
}
pub const QIF_BLIMITS_B: _bindgen_ty_80 = 0;
pub const QIF_SPACE_B: _bindgen_ty_80 = 1;
pub const QIF_ILIMITS_B: _bindgen_ty_80 = 2;
pub const QIF_INODES_B: _bindgen_ty_80 = 3;
pub const QIF_BTIME_B: _bindgen_ty_80 = 4;
pub const QIF_ITIME_B: _bindgen_ty_80 = 5;
pub type _bindgen_ty_80 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct if_dqblk {
    pub dqb_bhardlimit: __u64,
    pub dqb_bsoftlimit: __u64,
    pub dqb_curspace: __u64,
    pub dqb_ihardlimit: __u64,
    pub dqb_isoftlimit: __u64,
    pub dqb_curinodes: __u64,
    pub dqb_btime: __u64,
    pub dqb_itime: __u64,
    pub dqb_valid: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct if_nextdqblk {
    pub dqb_bhardlimit: __u64,
    pub dqb_bsoftlimit: __u64,
    pub dqb_curspace: __u64,
    pub dqb_ihardlimit: __u64,
    pub dqb_isoftlimit: __u64,
    pub dqb_curinodes: __u64,
    pub dqb_btime: __u64,
    pub dqb_itime: __u64,
    pub dqb_valid: __u32,
    pub dqb_id: __u32,
}
pub const DQF_ROOT_SQUASH_B: _bindgen_ty_81 = 0;
pub const DQF_SYS_FILE_B: _bindgen_ty_81 = 16;
pub const DQF_PRIVATE: _bindgen_ty_81 = 17;
pub type _bindgen_ty_81 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct if_dqinfo {
    pub dqi_bgrace: __u64,
    pub dqi_igrace: __u64,
    pub dqi_flags: __u32,
    pub dqi_valid: __u32,
}
pub const QUOTA_NL_C_UNSPEC: _bindgen_ty_82 = 0;
pub const QUOTA_NL_C_WARNING: _bindgen_ty_82 = 1;
pub const __QUOTA_NL_C_MAX: _bindgen_ty_82 = 2;
pub type _bindgen_ty_82 = core::ffi::c_uint;
pub const QUOTA_NL_A_UNSPEC: _bindgen_ty_83 = 0;
pub const QUOTA_NL_A_QTYPE: _bindgen_ty_83 = 1;
pub const QUOTA_NL_A_EXCESS_ID: _bindgen_ty_83 = 2;
pub const QUOTA_NL_A_WARNING: _bindgen_ty_83 = 3;
pub const QUOTA_NL_A_DEV_MAJOR: _bindgen_ty_83 = 4;
pub const QUOTA_NL_A_DEV_MINOR: _bindgen_ty_83 = 5;
pub const QUOTA_NL_A_CAUSED_ID: _bindgen_ty_83 = 6;
pub const QUOTA_NL_A_PAD: _bindgen_ty_83 = 7;
pub const __QUOTA_NL_A_MAX: _bindgen_ty_83 = 8;
pub type _bindgen_ty_83 = core::ffi::c_uint;
pub const quota_type_USRQUOTA: quota_type = 0;
pub const quota_type_GRPQUOTA: quota_type = 1;
pub const quota_type_PRJQUOTA: quota_type = 2;
pub type quota_type = core::ffi::c_uint;
pub type qid_t = __kernel_uid32_t;
pub type qsize_t = core::ffi::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kqid {
    pub __bindgen_anon_1: kqid__bindgen_ty_1,
    pub type_: quota_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kqid__bindgen_ty_1 {
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub projid: kprojid_t,
}
impl Default for kqid__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kqid {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn qid_eq(left: kqid, right: kqid) -> bool_;
}
extern "C" {
    pub fn qid_lt(left: kqid, right: kqid) -> bool_;
}
extern "C" {
    pub fn from_kqid(to: *mut user_namespace, qid: kqid) -> qid_t;
}
extern "C" {
    pub fn from_kqid_munged(to: *mut user_namespace, qid: kqid) -> qid_t;
}
extern "C" {
    pub fn qid_valid(qid: kqid) -> bool_;
}
extern "C" {
    pub static mut dq_data_lock: spinlock_t;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mem_dqblk {
    pub dqb_bhardlimit: qsize_t,
    pub dqb_bsoftlimit: qsize_t,
    pub dqb_curspace: qsize_t,
    pub dqb_rsvspace: qsize_t,
    pub dqb_ihardlimit: qsize_t,
    pub dqb_isoftlimit: qsize_t,
    pub dqb_curinodes: qsize_t,
    pub dqb_btime: time64_t,
    pub dqb_itime: time64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mem_dqinfo {
    pub dqi_format: *mut quota_format_type,
    pub dqi_fmt_id: core::ffi::c_int,
    pub dqi_dirty_list: list_head,
    pub dqi_flags: core::ffi::c_ulong,
    pub dqi_bgrace: core::ffi::c_uint,
    pub dqi_igrace: core::ffi::c_uint,
    pub dqi_max_spc_limit: qsize_t,
    pub dqi_max_ino_limit: qsize_t,
    pub dqi_priv: *mut core::ffi::c_void,
}
impl Default for mem_dqinfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const DQF_INFO_DIRTY_B: _bindgen_ty_84 = 17;
pub type _bindgen_ty_84 = core::ffi::c_uint;
extern "C" {
    pub fn mark_info_dirty(sb: *mut super_block, type_: core::ffi::c_int);
}
pub const DQST_LOOKUPS: _bindgen_ty_85 = 0;
pub const DQST_DROPS: _bindgen_ty_85 = 1;
pub const DQST_READS: _bindgen_ty_85 = 2;
pub const DQST_WRITES: _bindgen_ty_85 = 3;
pub const DQST_CACHE_HITS: _bindgen_ty_85 = 4;
pub const DQST_ALLOC_DQUOTS: _bindgen_ty_85 = 5;
pub const DQST_FREE_DQUOTS: _bindgen_ty_85 = 6;
pub const DQST_SYNCS: _bindgen_ty_85 = 7;
pub const _DQST_DQSTAT_LAST: _bindgen_ty_85 = 8;
pub type _bindgen_ty_85 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dqstats {
    pub stat: [core::ffi::c_ulong; 8usize],
    pub counter: [percpu_counter; 8usize],
}
impl Default for dqstats {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut dqstats: dqstats;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dquot {
    pub dq_hash: hlist_node,
    pub dq_inuse: list_head,
    pub dq_free: list_head,
    pub dq_dirty: list_head,
    pub dq_lock: mutex,
    pub dq_dqb_lock: spinlock_t,
    pub dq_count: atomic_t,
    pub dq_sb: *mut super_block,
    pub dq_id: kqid,
    pub dq_off: loff_t,
    pub dq_flags: core::ffi::c_ulong,
    pub dq_dqb: mem_dqblk,
}
impl Default for dquot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct quota_format_ops {
    pub check_quota_file: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub read_file_info: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub write_file_info: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub free_file_info: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub read_dqblk:
        ::core::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> core::ffi::c_int>,
    pub commit_dqblk:
        ::core::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> core::ffi::c_int>,
    pub release_dqblk:
        ::core::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> core::ffi::c_int>,
    pub get_next_id: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, qid: *mut kqid) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dquot_operations {
    pub write_dquot:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub alloc_dquot: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> *mut dquot,
    >,
    pub destroy_dquot: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot)>,
    pub acquire_dquot:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub release_dquot:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub mark_dirty:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub write_info: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub get_reserved_space:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> *mut qsize_t>,
    pub get_projid: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut kprojid_t) -> core::ffi::c_int,
    >,
    pub get_inode_usage: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut qsize_t) -> core::ffi::c_int,
    >,
    pub get_next_id: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, qid: *mut kqid) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qc_dqblk {
    pub d_fieldmask: core::ffi::c_int,
    pub d_spc_hardlimit: u64_,
    pub d_spc_softlimit: u64_,
    pub d_ino_hardlimit: u64_,
    pub d_ino_softlimit: u64_,
    pub d_space: u64_,
    pub d_ino_count: u64_,
    pub d_ino_timer: s64,
    pub d_spc_timer: s64,
    pub d_ino_warns: core::ffi::c_int,
    pub d_spc_warns: core::ffi::c_int,
    pub d_rt_spc_hardlimit: u64_,
    pub d_rt_spc_softlimit: u64_,
    pub d_rt_space: u64_,
    pub d_rt_spc_timer: s64,
    pub d_rt_spc_warns: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qc_type_state {
    pub flags: core::ffi::c_uint,
    pub spc_timelimit: core::ffi::c_uint,
    pub ino_timelimit: core::ffi::c_uint,
    pub rt_spc_timelimit: core::ffi::c_uint,
    pub spc_warnlimit: core::ffi::c_uint,
    pub ino_warnlimit: core::ffi::c_uint,
    pub rt_spc_warnlimit: core::ffi::c_uint,
    pub ino: core::ffi::c_ulonglong,
    pub blocks: blkcnt_t,
    pub nextents: blkcnt_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qc_state {
    pub s_incoredqs: core::ffi::c_uint,
    pub s_state: [qc_type_state; 3usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qc_info {
    pub i_fieldmask: core::ffi::c_int,
    pub i_flags: core::ffi::c_uint,
    pub i_spc_timelimit: core::ffi::c_uint,
    pub i_ino_timelimit: core::ffi::c_uint,
    pub i_rt_spc_timelimit: core::ffi::c_uint,
    pub i_spc_warnlimit: core::ffi::c_uint,
    pub i_ino_warnlimit: core::ffi::c_uint,
    pub i_rt_spc_warnlimit: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct quotactl_ops {
    pub quota_on: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: core::ffi::c_int,
            arg4: *const path,
        ) -> core::ffi::c_int,
    >,
    pub quota_off: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub quota_enable: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub quota_disable: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub quota_sync: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub set_info: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: *mut qc_info,
        ) -> core::ffi::c_int,
    >,
    pub get_dqblk: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: kqid,
            arg3: *mut qc_dqblk,
        ) -> core::ffi::c_int,
    >,
    pub get_nextdqblk: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut kqid,
            arg3: *mut qc_dqblk,
        ) -> core::ffi::c_int,
    >,
    pub set_dqblk: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: kqid,
            arg3: *mut qc_dqblk,
        ) -> core::ffi::c_int,
    >,
    pub get_state: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut qc_state) -> core::ffi::c_int,
    >,
    pub rm_xquota: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct quota_format_type {
    pub qf_fmt_id: core::ffi::c_int,
    pub qf_ops: *const quota_format_ops,
    pub qf_owner: *mut module,
    pub qf_next: *mut quota_format_type,
}
impl Default for quota_format_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const _DQUOT_USAGE_ENABLED: _bindgen_ty_86 = 0;
pub const _DQUOT_LIMITS_ENABLED: _bindgen_ty_86 = 1;
pub const _DQUOT_SUSPENDED: _bindgen_ty_86 = 2;
pub const _DQUOT_STATE_FLAGS: _bindgen_ty_86 = 3;
pub type _bindgen_ty_86 = core::ffi::c_uint;
extern "C" {
    pub fn quota_send_warning(qid: kqid, dev: dev_t, warntype: core::ffi::c_char);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct quota_info {
    pub flags: core::ffi::c_uint,
    pub dqio_sem: rw_semaphore,
    pub files: [*mut inode; 3usize],
    pub info: [mem_dqinfo; 3usize],
    pub ops: [*const quota_format_ops; 3usize],
}
impl Default for quota_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn register_quota_format(fmt: *mut quota_format_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_quota_format(fmt: *mut quota_format_type);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct quota_module_name {
    pub qm_fmt_id: core::ffi::c_int,
    pub qm_mod_name: *mut core::ffi::c_char,
}
impl Default for quota_module_name {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const positive_aop_returns_AOP_WRITEPAGE_ACTIVATE: positive_aop_returns = 524288;
pub const positive_aop_returns_AOP_TRUNCATED_PAGE: positive_aop_returns = 524289;
pub type positive_aop_returns = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct readahead_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kiocb {
    pub ki_filp: *mut file,
    pub ki_pos: loff_t,
    pub ki_complete:
        ::core::option::Option<unsafe extern "C" fn(iocb: *mut kiocb, ret: core::ffi::c_long)>,
    pub private: *mut core::ffi::c_void,
    pub ki_flags: core::ffi::c_int,
    pub ki_ioprio: u16_,
    pub __bindgen_anon_1: kiocb__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kiocb__bindgen_ty_1 {
    pub ki_waitq: *mut wait_page_queue,
    pub dio_complete:
        ::core::option::Option<unsafe extern "C" fn(data: *mut core::ffi::c_void) -> isize>,
}
impl Default for kiocb__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kiocb {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct address_space_operations {
    pub writepage: ::core::option::Option<
        unsafe extern "C" fn(page: *mut page, wbc: *mut writeback_control) -> core::ffi::c_int,
    >,
    pub read_folio: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut folio) -> core::ffi::c_int,
    >,
    pub writepages: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut address_space,
            arg2: *mut writeback_control,
        ) -> core::ffi::c_int,
    >,
    pub dirty_folio: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: *mut folio) -> bool_,
    >,
    pub readahead: ::core::option::Option<unsafe extern "C" fn(arg1: *mut readahead_control)>,
    pub write_begin: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            mapping: *mut address_space,
            pos: loff_t,
            len: core::ffi::c_uint,
            pagep: *mut *mut page,
            fsdata: *mut *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub write_end: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            mapping: *mut address_space,
            pos: loff_t,
            len: core::ffi::c_uint,
            copied: core::ffi::c_uint,
            page: *mut page,
            fsdata: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub bmap: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: sector_t) -> sector_t,
    >,
    pub invalidate_folio:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut folio, offset: usize, len: usize)>,
    pub release_folio:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut folio, arg2: gfp_t) -> bool_>,
    pub free_folio: ::core::option::Option<unsafe extern "C" fn(folio: *mut folio)>,
    pub direct_IO: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut kiocb, iter: *mut iov_iter) -> isize,
    >,
    pub migrate_folio: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut address_space,
            dst: *mut folio,
            src: *mut folio,
            arg2: migrate_mode,
        ) -> core::ffi::c_int,
    >,
    pub launder_folio:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut folio) -> core::ffi::c_int>,
    pub is_partially_uptodate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut folio, from: usize, count: usize) -> bool_,
    >,
    pub is_dirty_writeback: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut folio, dirty: *mut bool_, wb: *mut bool_),
    >,
    pub error_remove_folio: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: *mut folio) -> core::ffi::c_int,
    >,
    pub swap_activate: ::core::option::Option<
        unsafe extern "C" fn(
            sis: *mut swap_info_struct,
            file: *mut file,
            span: *mut sector_t,
        ) -> core::ffi::c_int,
    >,
    pub swap_deactivate: ::core::option::Option<unsafe extern "C" fn(file: *mut file)>,
    pub swap_rw: ::core::option::Option<
        unsafe extern "C" fn(iocb: *mut kiocb, iter: *mut iov_iter) -> core::ffi::c_int,
    >,
}
extern "C" {
    pub static empty_aops: address_space_operations;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct address_space {
    pub host: *mut inode,
    pub i_pages: xarray,
    pub invalidate_lock: rw_semaphore,
    pub gfp_mask: gfp_t,
    pub i_mmap_writable: atomic_t,
    pub i_mmap: rb_root_cached,
    pub nrpages: core::ffi::c_ulong,
    pub writeback_index: core::ffi::c_ulong,
    pub a_ops: *const address_space_operations,
    pub flags: core::ffi::c_ulong,
    pub wb_err: errseq_t,
    pub i_private_lock: spinlock_t,
    pub i_private_list: list_head,
    pub i_mmap_rwsem: rw_semaphore,
    pub i_private_data: *mut core::ffi::c_void,
}
impl Default for address_space {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct posix_acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct inode {
    pub i_mode: umode_t,
    pub i_opflags: core::ffi::c_ushort,
    pub i_uid: kuid_t,
    pub i_gid: kgid_t,
    pub i_flags: core::ffi::c_uint,
    pub i_acl: *mut posix_acl,
    pub i_default_acl: *mut posix_acl,
    pub i_op: *const inode_operations,
    pub i_sb: *mut super_block,
    pub i_mapping: *mut address_space,
    pub i_security: *mut core::ffi::c_void,
    pub i_ino: core::ffi::c_ulong,
    pub __bindgen_anon_1: inode__bindgen_ty_1,
    pub i_rdev: dev_t,
    pub i_size: loff_t,
    pub i_atime_sec: time64_t,
    pub i_mtime_sec: time64_t,
    pub i_ctime_sec: time64_t,
    pub i_atime_nsec: u32_,
    pub i_mtime_nsec: u32_,
    pub i_ctime_nsec: u32_,
    pub i_generation: u32_,
    pub i_lock: spinlock_t,
    pub i_bytes: core::ffi::c_ushort,
    pub i_blkbits: u8_,
    pub i_write_hint: rw_hint,
    pub i_blocks: blkcnt_t,
    pub i_state: core::ffi::c_ulong,
    pub i_rwsem: rw_semaphore,
    pub dirtied_when: core::ffi::c_ulong,
    pub dirtied_time_when: core::ffi::c_ulong,
    pub i_hash: hlist_node,
    pub i_io_list: list_head,
    pub i_lru: list_head,
    pub i_sb_list: list_head,
    pub i_wb_list: list_head,
    pub __bindgen_anon_2: inode__bindgen_ty_2,
    pub i_version: atomic64_t,
    pub i_sequence: atomic64_t,
    pub i_count: atomic_t,
    pub i_dio_count: atomic_t,
    pub i_writecount: atomic_t,
    pub i_readcount: atomic_t,
    pub __bindgen_anon_3: inode__bindgen_ty_3,
    pub i_flctx: *mut file_lock_context,
    pub i_data: address_space,
    pub i_devices: list_head,
    pub __bindgen_anon_4: inode__bindgen_ty_4,
    pub i_fsnotify_mask: __u32,
    pub i_fsnotify_marks: *mut fsnotify_mark_connector,
    pub i_private: *mut core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_1 {
    pub i_nlink: core::ffi::c_uint,
    pub __i_nlink: core::ffi::c_uint,
}
impl Default for inode__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_2 {
    pub i_dentry: hlist_head,
    pub i_rcu: callback_head,
}
impl Default for inode__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_3 {
    pub i_fop: *const file_operations,
    pub free_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
}
impl Default for inode__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_4 {
    pub i_pipe: *mut pipe_inode_info,
    pub i_cdev: *mut cdev,
    pub i_link: *mut core::ffi::c_char,
    pub i_dir_seq: core::ffi::c_uint,
}
impl Default for inode__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for inode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn timestamp_truncate(t: timespec64, inode: *mut inode) -> timespec64;
}
pub const inode_i_mutex_lock_class_I_MUTEX_NORMAL: inode_i_mutex_lock_class = 0;
pub const inode_i_mutex_lock_class_I_MUTEX_PARENT: inode_i_mutex_lock_class = 1;
pub const inode_i_mutex_lock_class_I_MUTEX_CHILD: inode_i_mutex_lock_class = 2;
pub const inode_i_mutex_lock_class_I_MUTEX_XATTR: inode_i_mutex_lock_class = 3;
pub const inode_i_mutex_lock_class_I_MUTEX_NONDIR2: inode_i_mutex_lock_class = 4;
pub const inode_i_mutex_lock_class_I_MUTEX_PARENT2: inode_i_mutex_lock_class = 5;
pub type inode_i_mutex_lock_class = core::ffi::c_uint;
extern "C" {
    pub fn lock_two_nondirectories(arg1: *mut inode, arg2: *mut inode);
}
extern "C" {
    pub fn unlock_two_nondirectories(arg1: *mut inode, arg2: *mut inode);
}
extern "C" {
    pub fn filemap_invalidate_lock_two(mapping1: *mut address_space, mapping2: *mut address_space);
}
extern "C" {
    pub fn filemap_invalidate_unlock_two(
        mapping1: *mut address_space,
        mapping2: *mut address_space,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fown_struct {
    pub lock: rwlock_t,
    pub pid: *mut pid,
    pub pid_type: pid_type,
    pub uid: kuid_t,
    pub euid: kuid_t,
    pub signum: core::ffi::c_int,
}
impl Default for fown_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct file_ra_state {
    pub start: core::ffi::c_ulong,
    pub size: core::ffi::c_uint,
    pub async_size: core::ffi::c_uint,
    pub ra_pages: core::ffi::c_uint,
    pub mmap_miss: core::ffi::c_uint,
    pub prev_pos: loff_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file {
    pub __bindgen_anon_1: file__bindgen_ty_1,
    pub f_lock: spinlock_t,
    pub f_mode: fmode_t,
    pub f_count: atomic_long_t,
    pub f_pos_lock: mutex,
    pub f_pos: loff_t,
    pub f_flags: core::ffi::c_uint,
    pub f_owner: fown_struct,
    pub f_cred: *const cred,
    pub f_ra: file_ra_state,
    pub f_path: path,
    pub f_inode: *mut inode,
    pub f_op: *const file_operations,
    pub f_version: u64_,
    pub f_security: *mut core::ffi::c_void,
    pub private_data: *mut core::ffi::c_void,
    pub f_ep: *mut hlist_head,
    pub f_mapping: *mut address_space,
    pub f_wb_err: errseq_t,
    pub f_sb_err: errseq_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union file__bindgen_ty_1 {
    pub f_task_work: callback_head,
    pub f_llist: llist_node,
    pub f_iocb_flags: core::ffi::c_uint,
}
impl Default for file__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for file {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct file_handle {
    pub handle_bytes: __u32,
    pub handle_type: core::ffi::c_int,
    pub f_handle: __IncompleteArrayField<core::ffi::c_uchar>,
}
extern "C" {
    pub fn get_file_rcu(f: *mut *mut file) -> *mut file;
}
extern "C" {
    pub fn get_file_active(f: *mut *mut file) -> *mut file;
}
pub type fl_owner_t = *mut core::ffi::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_lock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_lease {
    _unused: [u8; 0],
}
extern "C" {
    pub fn send_sigio(fown: *mut fown_struct, fd: core::ffi::c_int, band: core::ffi::c_int);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fasync_struct {
    pub fa_lock: rwlock_t,
    pub magic: core::ffi::c_int,
    pub fa_fd: core::ffi::c_int,
    pub fa_next: *mut fasync_struct,
    pub fa_file: *mut file,
    pub fa_rcu: callback_head,
}
impl Default for fasync_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn fasync_helper(
        arg1: core::ffi::c_int,
        arg2: *mut file,
        arg3: core::ffi::c_int,
        arg4: *mut *mut fasync_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fasync_insert_entry(
        arg1: core::ffi::c_int,
        arg2: *mut file,
        arg3: *mut *mut fasync_struct,
        arg4: *mut fasync_struct,
    ) -> *mut fasync_struct;
}
extern "C" {
    pub fn fasync_remove_entry(arg1: *mut file, arg2: *mut *mut fasync_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn fasync_alloc() -> *mut fasync_struct;
}
extern "C" {
    pub fn fasync_free(arg1: *mut fasync_struct);
}
extern "C" {
    pub fn kill_fasync(
        arg1: *mut *mut fasync_struct,
        arg2: core::ffi::c_int,
        arg3: core::ffi::c_int,
    );
}
extern "C" {
    pub fn __f_setown(filp: *mut file, arg1: *mut pid, arg2: pid_type, force: core::ffi::c_int);
}
extern "C" {
    pub fn f_setown(
        filp: *mut file,
        who: core::ffi::c_int,
        force: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn f_delown(filp: *mut file);
}
extern "C" {
    pub fn f_getown(filp: *mut file) -> pid_t;
}
extern "C" {
    pub fn send_sigurg(fown: *mut fown_struct) -> core::ffi::c_int;
}
pub const SB_UNFROZEN: _bindgen_ty_87 = 0;
pub const SB_FREEZE_WRITE: _bindgen_ty_87 = 1;
pub const SB_FREEZE_PAGEFAULT: _bindgen_ty_87 = 2;
pub const SB_FREEZE_FS: _bindgen_ty_87 = 3;
pub const SB_FREEZE_COMPLETE: _bindgen_ty_87 = 4;
pub type _bindgen_ty_87 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sb_writers {
    pub frozen: core::ffi::c_ushort,
    pub freeze_kcount: core::ffi::c_int,
    pub freeze_ucount: core::ffi::c_int,
    pub rw_sem: [percpu_rw_semaphore; 3usize],
}
impl Default for sb_writers {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct super_block {
    pub s_list: list_head,
    pub s_dev: dev_t,
    pub s_blocksize_bits: core::ffi::c_uchar,
    pub s_blocksize: core::ffi::c_ulong,
    pub s_maxbytes: loff_t,
    pub s_type: *mut file_system_type,
    pub s_op: *const super_operations,
    pub dq_op: *const dquot_operations,
    pub s_qcop: *const quotactl_ops,
    pub s_export_op: *const export_operations,
    pub s_flags: core::ffi::c_ulong,
    pub s_iflags: core::ffi::c_ulong,
    pub s_magic: core::ffi::c_ulong,
    pub s_root: *mut dentry,
    pub s_umount: rw_semaphore,
    pub s_count: core::ffi::c_int,
    pub s_active: atomic_t,
    pub s_security: *mut core::ffi::c_void,
    pub s_xattr: *const *mut xattr_handler,
    pub s_roots: hlist_bl_head,
    pub s_mounts: list_head,
    pub s_bdev: *mut block_device,
    pub s_bdev_file: *mut file,
    pub s_bdi: *mut backing_dev_info,
    pub s_mtd: *mut mtd_info,
    pub s_instances: hlist_node,
    pub s_quota_types: core::ffi::c_uint,
    pub s_dquot: quota_info,
    pub s_writers: sb_writers,
    pub s_fs_info: *mut core::ffi::c_void,
    pub s_time_gran: u32_,
    pub s_time_min: time64_t,
    pub s_time_max: time64_t,
    pub s_fsnotify_mask: __u32,
    pub s_fsnotify_info: *mut fsnotify_sb_info,
    pub s_id: [core::ffi::c_char; 32usize],
    pub s_uuid: uuid_t,
    pub s_uuid_len: u8_,
    pub s_sysfs_name: [core::ffi::c_char; 37usize],
    pub s_max_links: core::ffi::c_uint,
    pub s_vfs_rename_mutex: mutex,
    pub s_subtype: *const core::ffi::c_char,
    pub s_d_op: *const dentry_operations,
    pub s_shrink: *mut shrinker,
    pub s_remove_count: atomic_long_t,
    pub s_readonly_remount: core::ffi::c_int,
    pub s_wb_err: errseq_t,
    pub s_dio_done_wq: *mut workqueue_struct,
    pub s_pins: hlist_head,
    pub s_user_ns: *mut user_namespace,
    pub s_dentry_lru: list_lru,
    pub s_inode_lru: list_lru,
    pub rcu: callback_head,
    pub destroy_work: work_struct,
    pub s_sync_lock: mutex,
    pub s_stack_depth: core::ffi::c_int,
    pub __bindgen_padding_0: u32,
    pub s_inode_list_lock: spinlock_t,
    pub s_inodes: list_head,
    pub s_inode_wblist_lock: spinlock_t,
    pub s_inodes_wb: list_head,
}
impl Default for super_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn current_time(inode: *mut inode) -> timespec64;
}
extern "C" {
    pub fn inode_set_ctime_current(inode: *mut inode) -> timespec64;
}
extern "C" {
    pub fn simple_inode_init_ts(inode: *mut inode) -> timespec64;
}
extern "C" {
    pub fn inode_owner_or_capable(idmap: *mut mnt_idmap, inode: *const inode) -> bool_;
}
extern "C" {
    pub fn vfs_create(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: umode_t,
        arg5: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_mkdir(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: umode_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_mknod(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: umode_t,
        arg5: dev_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_symlink(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_link(
        arg1: *mut dentry,
        arg2: *mut mnt_idmap,
        arg3: *mut inode,
        arg4: *mut dentry,
        arg5: *mut *mut inode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_rmdir(arg1: *mut mnt_idmap, arg2: *mut inode, arg3: *mut dentry)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_unlink(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: *mut *mut inode,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct renamedata {
    pub old_mnt_idmap: *mut mnt_idmap,
    pub old_dir: *mut inode,
    pub old_dentry: *mut dentry,
    pub new_mnt_idmap: *mut mnt_idmap,
    pub new_dir: *mut inode,
    pub new_dentry: *mut dentry,
    pub delegated_inode: *mut *mut inode,
    pub flags: core::ffi::c_uint,
}
impl Default for renamedata {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn vfs_rename(arg1: *mut renamedata) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_tmpfile_open(
        idmap: *mut mnt_idmap,
        parentpath: *const path,
        mode: umode_t,
        open_flag: core::ffi::c_int,
        cred: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn kernel_file_open(
        path: *const path,
        flags: core::ffi::c_int,
        cred: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn vfs_mkobj(
        arg1: *mut dentry,
        arg2: umode_t,
        f: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut dentry,
                arg2: umode_t,
                arg3: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg3: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fchown(file: *mut file, user: uid_t, group: gid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fchmod(file: *mut file, mode: umode_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_utimes(path: *const path, times: *mut timespec64) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_ioctl(
        file: *mut file,
        cmd: core::ffi::c_uint,
        arg: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn compat_ptr_ioctl(
        file: *mut file,
        cmd: core::ffi::c_uint,
        arg: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn inode_init_owner(
        idmap: *mut mnt_idmap,
        inode: *mut inode,
        dir: *const inode,
        mode: umode_t,
    );
}
extern "C" {
    pub fn may_open_dev(path: *const path) -> bool_;
}
extern "C" {
    pub fn mode_strip_sgid(idmap: *mut mnt_idmap, dir: *const inode, mode: umode_t) -> umode_t;
}
extern "C" {
    pub fn in_group_or_capable(
        idmap: *mut mnt_idmap,
        inode: *const inode,
        vfsgid: vfsgid_t,
    ) -> bool_;
}
pub type filldir_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dir_context,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_int,
        arg4: loff_t,
        arg5: u64_,
        arg6: core::ffi::c_uint,
    ) -> bool_,
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dir_context {
    pub actor: filldir_t,
    pub pos: loff_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_uring_cmd {
    _unused: [u8; 0],
}
pub type fop_flags_t = core::ffi::c_uint;
extern "C" {
    pub fn wrap_directory_iterator(
        arg1: *mut file,
        arg2: *mut dir_context,
        arg3: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct inode_operations {
    pub lookup: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut dentry,
            arg3: core::ffi::c_uint,
        ) -> *mut dentry,
    >,
    pub get_link: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut inode,
            arg3: *mut delayed_call,
        ) -> *const core::ffi::c_char,
    >,
    pub permission: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub get_inode_acl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: core::ffi::c_int,
            arg3: bool_,
        ) -> *mut posix_acl,
    >,
    pub readlink: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut core::ffi::c_char,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub create: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
            arg5: bool_,
        ) -> core::ffi::c_int,
    >,
    pub link: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut inode,
            arg3: *mut dentry,
        ) -> core::ffi::c_int,
    >,
    pub unlink: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub symlink: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: *const core::ffi::c_char,
        ) -> core::ffi::c_int,
    >,
    pub mkdir: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub rmdir: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub mknod: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
            arg5: dev_t,
        ) -> core::ffi::c_int,
    >,
    pub rename: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: *mut inode,
            arg5: *mut dentry,
            arg6: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub setattr: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut dentry,
            arg3: *mut iattr,
        ) -> core::ffi::c_int,
    >,
    pub getattr: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *const path,
            arg3: *mut kstat,
            arg4: u32_,
            arg5: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub listxattr: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut core::ffi::c_char, arg3: usize) -> isize,
    >,
    pub fiemap: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut fiemap_extent_info,
            start: u64_,
            len: u64_,
        ) -> core::ffi::c_int,
    >,
    pub update_time: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub atomic_open: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut dentry,
            arg3: *mut file,
            open_flag: core::ffi::c_uint,
            create_mode: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub tmpfile: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut file,
            arg4: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub get_acl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut dentry,
            arg3: core::ffi::c_int,
        ) -> *mut posix_acl,
    >,
    pub set_acl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut dentry,
            arg3: *mut posix_acl,
            arg4: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub fileattr_set: ::core::option::Option<
        unsafe extern "C" fn(
            idmap: *mut mnt_idmap,
            dentry: *mut dentry,
            fa: *mut fileattr,
        ) -> core::ffi::c_int,
    >,
    pub fileattr_get: ::core::option::Option<
        unsafe extern "C" fn(dentry: *mut dentry, fa: *mut fileattr) -> core::ffi::c_int,
    >,
    pub get_offset_ctx:
        ::core::option::Option<unsafe extern "C" fn(inode: *mut inode) -> *mut offset_ctx>,
}
impl Default for inode_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn vfs_read(
        arg1: *mut file,
        arg2: *mut core::ffi::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_write(
        arg1: *mut file,
        arg2: *const core::ffi::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_copy_file_range(
        arg1: *mut file,
        arg2: loff_t,
        arg3: *mut file,
        arg4: loff_t,
        arg5: usize,
        arg6: core::ffi::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn remap_verify_area(
        file: *mut file,
        pos: loff_t,
        len: loff_t,
        write: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __generic_remap_file_range_prep(
        file_in: *mut file,
        pos_in: loff_t,
        file_out: *mut file,
        pos_out: loff_t,
        len: *mut loff_t,
        remap_flags: core::ffi::c_uint,
        dax_read_ops: *const iomap_ops,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_remap_file_range_prep(
        file_in: *mut file,
        pos_in: loff_t,
        file_out: *mut file,
        pos_out: loff_t,
        count: *mut loff_t,
        remap_flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_clone_file_range(
        file_in: *mut file,
        pos_in: loff_t,
        file_out: *mut file,
        pos_out: loff_t,
        len: loff_t,
        remap_flags: core::ffi::c_uint,
    ) -> loff_t;
}
extern "C" {
    pub fn vfs_dedupe_file_range(file: *mut file, same: *mut file_dedupe_range)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_dedupe_file_range_one(
        src_file: *mut file,
        src_pos: loff_t,
        dst_file: *mut file,
        dst_pos: loff_t,
        len: loff_t,
        remap_flags: core::ffi::c_uint,
    ) -> loff_t;
}
pub const freeze_holder_FREEZE_HOLDER_KERNEL: freeze_holder = 1;
pub const freeze_holder_FREEZE_HOLDER_USERSPACE: freeze_holder = 2;
pub const freeze_holder_FREEZE_MAY_NEST: freeze_holder = 4;
pub type freeze_holder = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct super_operations {
    pub alloc_inode:
        ::core::option::Option<unsafe extern "C" fn(sb: *mut super_block) -> *mut inode>,
    pub destroy_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub free_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub dirty_inode:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode, flags: core::ffi::c_int)>,
    pub write_inode: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, wbc: *mut writeback_control) -> core::ffi::c_int,
    >,
    pub drop_inode:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> core::ffi::c_int>,
    pub evict_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub put_super: ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub sync_fs: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, wait: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub freeze_super: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, who: freeze_holder) -> core::ffi::c_int,
    >,
    pub freeze_fs:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block) -> core::ffi::c_int>,
    pub thaw_super: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, who: freeze_holder) -> core::ffi::c_int,
    >,
    pub unfreeze_fs:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block) -> core::ffi::c_int>,
    pub statfs: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut kstatfs) -> core::ffi::c_int,
    >,
    pub remount_fs: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut core::ffi::c_int,
            arg3: *mut core::ffi::c_char,
        ) -> core::ffi::c_int,
    >,
    pub umount_begin: ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub show_options: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub show_devname: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub show_path: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub show_stats: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub quota_read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: *mut core::ffi::c_char,
            arg4: usize,
            arg5: loff_t,
        ) -> isize,
    >,
    pub quota_write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: *const core::ffi::c_char,
            arg4: usize,
            arg5: loff_t,
        ) -> isize,
    >,
    pub get_dquots:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> *mut *mut dquot>,
    pub nr_cached_objects: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut shrink_control,
        ) -> core::ffi::c_long,
    >,
    pub free_cached_objects: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut shrink_control,
        ) -> core::ffi::c_long,
    >,
    pub shutdown: ::core::option::Option<unsafe extern "C" fn(sb: *mut super_block)>,
}
extern "C" {
    pub fn __mark_inode_dirty(arg1: *mut inode, arg2: core::ffi::c_int);
}
extern "C" {
    pub fn inc_nlink(inode: *mut inode);
}
extern "C" {
    pub fn drop_nlink(inode: *mut inode);
}
extern "C" {
    pub fn clear_nlink(inode: *mut inode);
}
extern "C" {
    pub fn set_nlink(inode: *mut inode, nlink: core::ffi::c_uint);
}
pub const file_time_flags_S_ATIME: file_time_flags = 1;
pub const file_time_flags_S_MTIME: file_time_flags = 2;
pub const file_time_flags_S_CTIME: file_time_flags = 4;
pub const file_time_flags_S_VERSION: file_time_flags = 8;
pub type file_time_flags = core::ffi::c_uint;
extern "C" {
    pub fn atime_needs_update(arg1: *const path, arg2: *mut inode) -> bool_;
}
extern "C" {
    pub fn touch_atime(arg1: *const path);
}
extern "C" {
    pub fn inode_update_time(inode: *mut inode, flags: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_modified(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn kiocb_modified(iocb: *mut kiocb) -> core::ffi::c_int;
}
extern "C" {
    pub fn sync_inode_metadata(inode: *mut inode, wait: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn mount_bdev(
        fs_type: *mut file_system_type,
        flags: core::ffi::c_int,
        dev_name: *const core::ffi::c_char,
        data: *mut core::ffi::c_void,
        fill_super: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
                arg3: core::ffi::c_int,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn mount_single(
        fs_type: *mut file_system_type,
        flags: core::ffi::c_int,
        data: *mut core::ffi::c_void,
        fill_super: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
                arg3: core::ffi::c_int,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn mount_nodev(
        fs_type: *mut file_system_type,
        flags: core::ffi::c_int,
        data: *mut core::ffi::c_void,
        fill_super: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
                arg3: core::ffi::c_int,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn mount_subtree(mnt: *mut vfsmount, path: *const core::ffi::c_char) -> *mut dentry;
}
extern "C" {
    pub fn retire_super(sb: *mut super_block);
}
extern "C" {
    pub fn generic_shutdown_super(sb: *mut super_block);
}
extern "C" {
    pub fn kill_block_super(sb: *mut super_block);
}
extern "C" {
    pub fn kill_anon_super(sb: *mut super_block);
}
extern "C" {
    pub fn kill_litter_super(sb: *mut super_block);
}
extern "C" {
    pub fn deactivate_super(sb: *mut super_block);
}
extern "C" {
    pub fn deactivate_locked_super(sb: *mut super_block);
}
extern "C" {
    pub fn set_anon_super(s: *mut super_block, data: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_anon_super_fc(s: *mut super_block, fc: *mut fs_context) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_anon_bdev(arg1: *mut dev_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn free_anon_bdev(arg1: dev_t);
}
extern "C" {
    pub fn sget_fc(
        fc: *mut fs_context,
        test: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut fs_context) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut fs_context) -> core::ffi::c_int,
        >,
    ) -> *mut super_block;
}
extern "C" {
    pub fn sget(
        type_: *mut file_system_type,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        flags: core::ffi::c_int,
        data: *mut core::ffi::c_void,
    ) -> *mut super_block;
}
extern "C" {
    pub fn sget_dev(fc: *mut fs_context, dev: dev_t) -> *mut super_block;
}
extern "C" {
    pub fn register_filesystem(arg1: *mut file_system_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_filesystem(arg1: *mut file_system_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_statfs(arg1: *const path, arg2: *mut kstatfs) -> core::ffi::c_int;
}
extern "C" {
    pub fn user_statfs(arg1: *const core::ffi::c_char, arg2: *mut kstatfs) -> core::ffi::c_int;
}
extern "C" {
    pub fn fd_statfs(arg1: core::ffi::c_int, arg2: *mut kstatfs) -> core::ffi::c_int;
}
extern "C" {
    pub fn freeze_super(super_: *mut super_block, who: freeze_holder) -> core::ffi::c_int;
}
extern "C" {
    pub fn thaw_super(super_: *mut super_block, who: freeze_holder) -> core::ffi::c_int;
}
extern "C" {
    pub fn super_setup_bdi_name(
        sb: *mut super_block,
        fmt: *mut core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn super_setup_bdi(sb: *mut super_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn current_umask() -> core::ffi::c_int;
}
extern "C" {
    pub fn ihold(inode: *mut inode);
}
extern "C" {
    pub fn iput(arg1: *mut inode);
}
extern "C" {
    pub fn inode_update_timestamps(inode: *mut inode, flags: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_update_time(arg1: *mut inode, arg2: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub static mut fs_kobj: *mut kobject;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct audit_names {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct filename {
    pub name: *const core::ffi::c_char,
    pub uptr: *const core::ffi::c_char,
    pub refcnt: atomic_t,
    pub aname: *mut audit_names,
    pub iname: __IncompleteArrayField<core::ffi::c_char>,
}
impl Default for filename {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn vfs_truncate(arg1: *const path, arg2: loff_t) -> core::ffi::c_long;
}
extern "C" {
    pub fn do_truncate(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        start: loff_t,
        time_attrs: core::ffi::c_uint,
        filp: *mut file,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fallocate(
        file: *mut file,
        mode: core::ffi::c_int,
        offset: loff_t,
        len: loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_sys_open(
        dfd: core::ffi::c_int,
        filename: *const core::ffi::c_char,
        flags: core::ffi::c_int,
        mode: umode_t,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn file_open_name(arg1: *mut filename, arg2: core::ffi::c_int, arg3: umode_t) -> *mut file;
}
extern "C" {
    pub fn filp_open(
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_int,
        arg3: umode_t,
    ) -> *mut file;
}
extern "C" {
    pub fn file_open_root(
        arg1: *const path,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_int,
        arg4: umode_t,
    ) -> *mut file;
}
extern "C" {
    pub fn dentry_open(path: *const path, flags: core::ffi::c_int, creds: *const cred)
        -> *mut file;
}
extern "C" {
    pub fn dentry_create(
        path: *const path,
        flags: core::ffi::c_int,
        mode: umode_t,
        cred: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn backing_file_user_path(f: *mut file) -> *mut path;
}
extern "C" {
    pub fn filp_close(arg1: *mut file, id: fl_owner_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn getname_flags(arg1: *const core::ffi::c_char, arg2: core::ffi::c_int) -> *mut filename;
}
extern "C" {
    pub fn getname_uflags(arg1: *const core::ffi::c_char, arg2: core::ffi::c_int) -> *mut filename;
}
extern "C" {
    pub fn getname(arg1: *const core::ffi::c_char) -> *mut filename;
}
extern "C" {
    pub fn getname_kernel(arg1: *const core::ffi::c_char) -> *mut filename;
}
extern "C" {
    pub fn putname(name: *mut filename);
}
extern "C" {
    pub fn finish_open(
        file: *mut file,
        dentry: *mut dentry,
        open: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn finish_no_open(file: *mut file, dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_caches_init_early();
}
extern "C" {
    pub fn vfs_caches_init();
}
extern "C" {
    pub static mut names_cachep: *mut kmem_cache;
}
extern "C" {
    pub static mut blockdev_superblock: *mut super_block;
}
extern "C" {
    pub fn emergency_thaw_all();
}
extern "C" {
    pub fn sync_filesystem(arg1: *mut super_block) -> core::ffi::c_int;
}
extern "C" {
    pub static def_blk_fops: file_operations;
}
extern "C" {
    pub static def_chr_fops: file_operations;
}
extern "C" {
    pub fn alloc_chrdev_region(
        arg1: *mut dev_t,
        arg2: core::ffi::c_uint,
        arg3: core::ffi::c_uint,
        arg4: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn register_chrdev_region(
        arg1: dev_t,
        arg2: core::ffi::c_uint,
        arg3: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __register_chrdev(
        major: core::ffi::c_uint,
        baseminor: core::ffi::c_uint,
        count: core::ffi::c_uint,
        name: *const core::ffi::c_char,
        fops: *const file_operations,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __unregister_chrdev(
        major: core::ffi::c_uint,
        baseminor: core::ffi::c_uint,
        count: core::ffi::c_uint,
        name: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn unregister_chrdev_region(arg1: dev_t, arg2: core::ffi::c_uint);
}
extern "C" {
    pub fn chrdev_show(arg1: *mut seq_file, arg2: off_t);
}
extern "C" {
    pub fn init_special_inode(arg1: *mut inode, arg2: umode_t, arg3: dev_t);
}
extern "C" {
    pub fn make_bad_inode(arg1: *mut inode);
}
extern "C" {
    pub fn is_bad_inode(arg1: *mut inode) -> bool_;
}
extern "C" {
    pub fn file_fdatawait_range(file: *mut file, lstart: loff_t, lend: loff_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_check_and_advance_wb_err(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_write_and_wait_range(
        file: *mut file,
        start: loff_t,
        end: loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fsync_range(
        file: *mut file,
        start: loff_t,
        end: loff_t,
        datasync: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fsync(file: *mut file, datasync: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn sync_file_range(
        file: *mut file,
        offset: loff_t,
        nbytes: loff_t,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn emergency_sync();
}
extern "C" {
    pub fn emergency_remount();
}
extern "C" {
    pub fn bmap(inode: *mut inode, block: *mut sector_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn notify_change(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        arg3: *mut iattr,
        arg4: *mut *mut inode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn inode_permission(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_permission(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __check_sticky(
        idmap: *mut mnt_idmap,
        dir: *mut inode,
        inode: *mut inode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_pipe_flags(arg1: *mut core::ffi::c_int, arg2: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_read(
        arg1: *mut file,
        arg2: *mut core::ffi::c_void,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn __kernel_read(
        file: *mut file,
        buf: *mut core::ffi::c_void,
        count: usize,
        pos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn kernel_write(
        arg1: *mut file,
        arg2: *const core::ffi::c_void,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn __kernel_write(
        arg1: *mut file,
        arg2: *const core::ffi::c_void,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn open_exec(arg1: *const core::ffi::c_char) -> *mut file;
}
extern "C" {
    pub fn is_subdir(arg1: *mut dentry, arg2: *mut dentry) -> bool_;
}
extern "C" {
    pub fn path_is_under(arg1: *const path, arg2: *const path) -> bool_;
}
extern "C" {
    pub fn file_path(
        arg1: *mut file,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn default_llseek(file: *mut file, offset: loff_t, whence: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn vfs_llseek(file: *mut file, offset: loff_t, whence: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn inode_init_always(arg1: *mut super_block, arg2: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn inode_init_once(arg1: *mut inode);
}
extern "C" {
    pub fn address_space_init_once(mapping: *mut address_space);
}
extern "C" {
    pub fn igrab(arg1: *mut inode) -> *mut inode;
}
extern "C" {
    pub fn iunique(arg1: *mut super_block, arg2: ino_t) -> ino_t;
}
extern "C" {
    pub fn inode_needs_sync(inode: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_delete_inode(inode: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn d_mark_dontcache(inode: *mut inode);
}
extern "C" {
    pub fn ilookup5_nowait(
        sb: *mut super_block,
        hashval: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn ilookup5(
        sb: *mut super_block,
        hashval: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn ilookup(sb: *mut super_block, ino: core::ffi::c_ulong) -> *mut inode;
}
extern "C" {
    pub fn inode_insert5(
        inode: *mut inode,
        hashval: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn iget5_locked(
        arg1: *mut super_block,
        arg2: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg3: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn iget5_locked_rcu(
        arg1: *mut super_block,
        arg2: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg3: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn iget_locked(arg1: *mut super_block, arg2: core::ffi::c_ulong) -> *mut inode;
}
extern "C" {
    pub fn find_inode_nowait(
        arg1: *mut super_block,
        arg2: core::ffi::c_ulong,
        match_: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: core::ffi::c_ulong,
                arg3: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn find_inode_rcu(
        arg1: *mut super_block,
        arg2: core::ffi::c_ulong,
        arg3: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg4: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn find_inode_by_ino_rcu(arg1: *mut super_block, arg2: core::ffi::c_ulong) -> *mut inode;
}
extern "C" {
    pub fn insert_inode_locked4(
        arg1: *mut inode,
        arg2: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg3: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn insert_inode_locked(arg1: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn unlock_new_inode(arg1: *mut inode);
}
extern "C" {
    pub fn discard_new_inode(arg1: *mut inode);
}
extern "C" {
    pub fn get_next_ino() -> core::ffi::c_uint;
}
extern "C" {
    pub fn evict_inodes(sb: *mut super_block);
}
extern "C" {
    pub fn dump_mapping(arg1: *const address_space);
}
extern "C" {
    pub fn __iget(inode: *mut inode);
}
extern "C" {
    pub fn iget_failed(arg1: *mut inode);
}
extern "C" {
    pub fn clear_inode(arg1: *mut inode);
}
extern "C" {
    pub fn __destroy_inode(arg1: *mut inode);
}
extern "C" {
    pub fn new_inode_pseudo(sb: *mut super_block) -> *mut inode;
}
extern "C" {
    pub fn new_inode(sb: *mut super_block) -> *mut inode;
}
extern "C" {
    pub fn free_inode_nonrcu(inode: *mut inode);
}
extern "C" {
    pub fn setattr_should_drop_suidgid(arg1: *mut mnt_idmap, arg2: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_remove_privs_flags(file: *mut file, flags: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_remove_privs(arg1: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn setattr_should_drop_sgid(idmap: *mut mnt_idmap, inode: *const inode)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn __insert_inode_hash(arg1: *mut inode, hashval: core::ffi::c_ulong);
}
extern "C" {
    pub fn __remove_inode_hash(arg1: *mut inode);
}
extern "C" {
    pub fn inode_sb_list_add(inode: *mut inode);
}
extern "C" {
    pub fn inode_add_lru(inode: *mut inode);
}
extern "C" {
    pub fn sb_set_blocksize(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn sb_min_blocksize(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_mmap(arg1: *mut file, arg2: *mut vm_area_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_readonly_mmap(
        arg1: *mut file,
        arg2: *mut vm_area_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_write_checks(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_write_checks_count(iocb: *mut kiocb, count: *mut loff_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_write_check_limits(
        file: *mut file,
        pos: loff_t,
        count: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_rw_checks(file_in: *mut file, file_out: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn filemap_read(iocb: *mut kiocb, to: *mut iov_iter, already_read: isize) -> isize;
}
extern "C" {
    pub fn generic_file_read_iter(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn __generic_file_write_iter(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_file_write_iter(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_file_direct_write(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_perform_write(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn direct_write_fallback(
        iocb: *mut kiocb,
        iter: *mut iov_iter,
        direct_written: isize,
        buffered_written: isize,
    ) -> isize;
}
extern "C" {
    pub fn vfs_iter_read(
        file: *mut file,
        iter: *mut iov_iter,
        ppos: *mut loff_t,
        flags: rwf_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_iter_write(
        file: *mut file,
        iter: *mut iov_iter,
        ppos: *mut loff_t,
        flags: rwf_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_iocb_iter_read(file: *mut file, iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn vfs_iocb_iter_write(file: *mut file, iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn filemap_splice_read(
        in_: *mut file,
        ppos: *mut loff_t,
        pipe: *mut pipe_inode_info,
        len: usize,
        flags: core::ffi::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn copy_splice_read(
        in_: *mut file,
        ppos: *mut loff_t,
        pipe: *mut pipe_inode_info,
        len: usize,
        flags: core::ffi::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn iter_file_splice_write(
        arg1: *mut pipe_inode_info,
        arg2: *mut file,
        arg3: *mut loff_t,
        arg4: usize,
        arg5: core::ffi::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn file_ra_state_init(ra: *mut file_ra_state, mapping: *mut address_space);
}
extern "C" {
    pub fn noop_llseek(file: *mut file, offset: loff_t, whence: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn vfs_setpos(file: *mut file, offset: loff_t, maxsize: loff_t) -> loff_t;
}
extern "C" {
    pub fn generic_file_llseek(file: *mut file, offset: loff_t, whence: core::ffi::c_int)
        -> loff_t;
}
extern "C" {
    pub fn generic_file_llseek_size(
        file: *mut file,
        offset: loff_t,
        whence: core::ffi::c_int,
        maxsize: loff_t,
        eof: loff_t,
    ) -> loff_t;
}
extern "C" {
    pub fn fixed_size_llseek(
        file: *mut file,
        offset: loff_t,
        whence: core::ffi::c_int,
        size: loff_t,
    ) -> loff_t;
}
extern "C" {
    pub fn no_seek_end_llseek_size(
        arg1: *mut file,
        arg2: loff_t,
        arg3: core::ffi::c_int,
        arg4: loff_t,
    ) -> loff_t;
}
extern "C" {
    pub fn no_seek_end_llseek(arg1: *mut file, arg2: loff_t, arg3: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn rw_verify_area(
        arg1: core::ffi::c_int,
        arg2: *mut file,
        arg3: *const loff_t,
        arg4: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_open(inode: *mut inode, filp: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn nonseekable_open(inode: *mut inode, filp: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn stream_open(inode: *mut inode, filp: *mut file) -> core::ffi::c_int;
}
pub type dio_submit_t = ::core::option::Option<
    unsafe extern "C" fn(bio: *mut bio, inode: *mut inode, file_offset: loff_t),
>;
pub const DIO_LOCKING: _bindgen_ty_88 = 1;
pub const DIO_SKIP_HOLES: _bindgen_ty_88 = 2;
pub type _bindgen_ty_88 = core::ffi::c_uint;
extern "C" {
    pub fn __blockdev_direct_IO(
        iocb: *mut kiocb,
        inode: *mut inode,
        bdev: *mut block_device,
        iter: *mut iov_iter,
        get_block: get_block_t,
        end_io: dio_iodone_t,
        flags: core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn inode_dio_wait(inode: *mut inode);
}
extern "C" {
    pub fn inode_set_flags(inode: *mut inode, flags: core::ffi::c_uint, mask: core::ffi::c_uint);
}
extern "C" {
    pub static generic_ro_fops: file_operations;
}
extern "C" {
    pub fn readlink_copy(
        arg1: *mut core::ffi::c_char,
        arg2: core::ffi::c_int,
        arg3: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn page_readlink(
        arg1: *mut dentry,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn page_get_link(
        arg1: *mut dentry,
        arg2: *mut inode,
        arg3: *mut delayed_call,
    ) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn page_put_link(arg1: *mut core::ffi::c_void);
}
extern "C" {
    pub fn page_symlink(
        inode: *mut inode,
        symname: *const core::ffi::c_char,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static page_symlink_inode_operations: inode_operations;
}
extern "C" {
    pub fn kfree_link(arg1: *mut core::ffi::c_void);
}
extern "C" {
    pub fn generic_fillattr(arg1: *mut mnt_idmap, arg2: u32_, arg3: *mut inode, arg4: *mut kstat);
}
extern "C" {
    pub fn generic_fill_statx_attr(inode: *mut inode, stat: *mut kstat);
}
extern "C" {
    pub fn generic_fill_statx_atomic_writes(
        stat: *mut kstat,
        unit_min: core::ffi::c_uint,
        unit_max: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn vfs_getattr_nosec(
        arg1: *const path,
        arg2: *mut kstat,
        arg3: u32_,
        arg4: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_getattr(
        arg1: *const path,
        arg2: *mut kstat,
        arg3: u32_,
        arg4: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __inode_add_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn inode_add_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn __inode_sub_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn inode_sub_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn inode_get_bytes(inode: *mut inode) -> loff_t;
}
extern "C" {
    pub fn inode_set_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn simple_get_link(
        arg1: *mut dentry,
        arg2: *mut inode,
        arg3: *mut delayed_call,
    ) -> *const core::ffi::c_char;
}
extern "C" {
    pub static simple_symlink_inode_operations: inode_operations;
}
extern "C" {
    pub fn iterate_dir(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fstatat(
        dfd: core::ffi::c_int,
        filename: *const core::ffi::c_char,
        stat: *mut kstat,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fstat(fd: core::ffi::c_int, stat: *mut kstat) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_get_link(arg1: *mut dentry, arg2: *mut delayed_call) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn vfs_readlink(
        arg1: *mut dentry,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_filesystem(fs: *mut file_system_type) -> *mut file_system_type;
}
extern "C" {
    pub fn put_filesystem(fs: *mut file_system_type);
}
extern "C" {
    pub fn get_fs_type(name: *const core::ffi::c_char) -> *mut file_system_type;
}
extern "C" {
    pub fn drop_super(sb: *mut super_block);
}
extern "C" {
    pub fn drop_super_exclusive(sb: *mut super_block);
}
extern "C" {
    pub fn iterate_supers(
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut core::ffi::c_void),
        >,
        arg2: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn iterate_supers_type(
        arg1: *mut file_system_type,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut core::ffi::c_void),
        >,
        arg3: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn dcache_dir_open(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn dcache_dir_close(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn dcache_dir_lseek(arg1: *mut file, arg2: loff_t, arg3: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn dcache_readdir(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_setattr(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        arg3: *mut iattr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_getattr(
        arg1: *mut mnt_idmap,
        arg2: *const path,
        arg3: *mut kstat,
        arg4: u32_,
        arg5: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_statfs(arg1: *mut dentry, arg2: *mut kstatfs) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_open(inode: *mut inode, file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_link(arg1: *mut dentry, arg2: *mut inode, arg3: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_unlink(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_rmdir(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_rename_timestamp(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    );
}
extern "C" {
    pub fn simple_rename_exchange(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_rename(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: *mut inode,
        arg5: *mut dentry,
        arg6: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_recursive_removal(
        arg1: *mut dentry,
        callback: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    );
}
extern "C" {
    pub fn noop_fsync(
        arg1: *mut file,
        arg2: loff_t,
        arg3: loff_t,
        arg4: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn noop_direct_IO(iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn simple_empty(arg1: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_write_begin(
        file: *mut file,
        mapping: *mut address_space,
        pos: loff_t,
        len: core::ffi::c_uint,
        pagep: *mut *mut page,
        fsdata: *mut *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static ram_aops: address_space_operations;
}
extern "C" {
    pub fn always_delete_dentry(arg1: *const dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn alloc_anon_inode(arg1: *mut super_block) -> *mut inode;
}
extern "C" {
    pub fn simple_nosetlease(
        arg1: *mut file,
        arg2: core::ffi::c_int,
        arg3: *mut *mut file_lease,
        arg4: *mut *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static simple_dentry_operations: dentry_operations;
}
extern "C" {
    pub fn simple_lookup(
        arg1: *mut inode,
        arg2: *mut dentry,
        flags: core::ffi::c_uint,
    ) -> *mut dentry;
}
extern "C" {
    pub fn generic_read_dir(
        arg1: *mut file,
        arg2: *mut core::ffi::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub static simple_dir_operations: file_operations;
}
extern "C" {
    pub static simple_dir_inode_operations: inode_operations;
}
extern "C" {
    pub fn make_empty_dir_inode(inode: *mut inode);
}
extern "C" {
    pub fn is_empty_dir_inode(inode: *mut inode) -> bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tree_descr {
    pub name: *const core::ffi::c_char,
    pub ops: *const file_operations,
    pub mode: core::ffi::c_int,
}
impl Default for tree_descr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn d_alloc_name(arg1: *mut dentry, arg2: *const core::ffi::c_char) -> *mut dentry;
}
extern "C" {
    pub fn simple_fill_super(
        arg1: *mut super_block,
        arg2: core::ffi::c_ulong,
        arg3: *const tree_descr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_pin_fs(
        arg1: *mut file_system_type,
        mount: *mut *mut vfsmount,
        count: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_release_fs(mount: *mut *mut vfsmount, count: *mut core::ffi::c_int);
}
extern "C" {
    pub fn simple_read_from_buffer(
        to: *mut core::ffi::c_void,
        count: usize,
        ppos: *mut loff_t,
        from: *const core::ffi::c_void,
        available: usize,
    ) -> isize;
}
extern "C" {
    pub fn simple_write_to_buffer(
        to: *mut core::ffi::c_void,
        available: usize,
        ppos: *mut loff_t,
        from: *const core::ffi::c_void,
        count: usize,
    ) -> isize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct offset_ctx {
    pub mt: maple_tree,
    pub next_offset: core::ffi::c_ulong,
}
impl Default for offset_ctx {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn simple_offset_init(octx: *mut offset_ctx);
}
extern "C" {
    pub fn simple_offset_add(octx: *mut offset_ctx, dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_offset_remove(octx: *mut offset_ctx, dentry: *mut dentry);
}
extern "C" {
    pub fn simple_offset_empty(dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_offset_rename(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_offset_rename_exchange(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_offset_destroy(octx: *mut offset_ctx);
}
extern "C" {
    pub static simple_offset_dir_operations: file_operations;
}
extern "C" {
    pub fn __generic_file_fsync(
        arg1: *mut file,
        arg2: loff_t,
        arg3: loff_t,
        arg4: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_fsync(
        arg1: *mut file,
        arg2: loff_t,
        arg3: loff_t,
        arg4: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_check_addressable(arg1: core::ffi::c_uint, arg2: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_set_sb_d_ops(sb: *mut super_block);
}
extern "C" {
    pub fn generic_ci_match(
        parent: *const inode,
        name: *const qstr,
        folded_name: *const qstr,
        de_name: *const u8_,
        de_name_len: u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn may_setattr(
        idmap: *mut mnt_idmap,
        inode: *mut inode,
        ia_valid: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn setattr_prepare(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        arg3: *mut iattr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn inode_newsize_ok(arg1: *const inode, offset: loff_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn setattr_copy(arg1: *mut mnt_idmap, inode: *mut inode, attr: *const iattr);
}
extern "C" {
    pub fn file_update_time(file: *mut file) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default)]
pub struct simple_transaction_argresp {
    pub size: isize,
    pub data: __IncompleteArrayField<core::ffi::c_char>,
}
extern "C" {
    pub fn simple_transaction_get(
        file: *mut file,
        buf: *const core::ffi::c_char,
        size: usize,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn simple_transaction_read(
        file: *mut file,
        buf: *mut core::ffi::c_char,
        size: usize,
        pos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn simple_transaction_release(inode: *mut inode, file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_transaction_set(file: *mut file, n: usize);
}
extern "C" {
    pub fn simple_attr_open(
        inode: *mut inode,
        file: *mut file,
        get: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void, arg2: *mut u64_) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void, arg2: u64_) -> core::ffi::c_int,
        >,
        fmt: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_attr_release(inode: *mut inode, file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_attr_read(
        file: *mut file,
        buf: *mut core::ffi::c_char,
        len: usize,
        ppos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn simple_attr_write(
        file: *mut file,
        buf: *const core::ffi::c_char,
        len: usize,
        ppos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn simple_attr_write_signed(
        file: *mut file,
        buf: *const core::ffi::c_char,
        len: usize,
        ppos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn list_bdev_fs_names(buf: *mut core::ffi::c_char, size: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn path_noexec(path: *const path) -> bool_;
}
extern "C" {
    pub fn inode_nohighmem(inode: *mut inode);
}
extern "C" {
    pub fn vfs_fadvise(
        file: *mut file,
        offset: loff_t,
        len: loff_t,
        advice: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_fadvise(
        file: *mut file,
        offset: loff_t,
        len: loff_t,
        advice: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_atomic_write_valid(iter: *mut iov_iter, pos: loff_t) -> bool_;
}
pub type aio_context_t = __kernel_ulong_t;
pub const IOCB_CMD_PREAD: _bindgen_ty_89 = 0;
pub const IOCB_CMD_PWRITE: _bindgen_ty_89 = 1;
pub const IOCB_CMD_FSYNC: _bindgen_ty_89 = 2;
pub const IOCB_CMD_FDSYNC: _bindgen_ty_89 = 3;
pub const IOCB_CMD_POLL: _bindgen_ty_89 = 5;
pub const IOCB_CMD_NOOP: _bindgen_ty_89 = 6;
pub const IOCB_CMD_PREADV: _bindgen_ty_89 = 7;
pub const IOCB_CMD_PWRITEV: _bindgen_ty_89 = 8;
pub type _bindgen_ty_89 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_event {
    pub data: __u64,
    pub obj: __u64,
    pub res: __s64,
    pub res2: __s64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct iocb {
    pub aio_data: __u64,
    pub aio_key: __u32,
    pub aio_rw_flags: __kernel_rwf_t,
    pub aio_lio_opcode: __u16,
    pub aio_reqprio: __s16,
    pub aio_fildes: __u32,
    pub aio_buf: __u64,
    pub aio_nbytes: __u64,
    pub aio_offset: __s64,
    pub aio_reserved2: __u64,
    pub aio_flags: __u32,
    pub aio_resfd: __u32,
}
extern "C" {
    pub fn put_task_stack(tsk: *mut task_struct);
}
extern "C" {
    pub fn exit_task_stack_account(tsk: *mut task_struct);
}
extern "C" {
    pub fn thread_stack_cache_init();
}
extern "C" {
    pub fn set_task_stack_end_magic(tsk: *mut task_struct);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user_i387_ia32_struct {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user32_fxsr_struct {
    pub cwd: core::ffi::c_ushort,
    pub swd: core::ffi::c_ushort,
    pub twd: core::ffi::c_ushort,
    pub fop: core::ffi::c_ushort,
    pub fip: core::ffi::c_int,
    pub fcs: core::ffi::c_int,
    pub foo: core::ffi::c_int,
    pub fos: core::ffi::c_int,
    pub mxcsr: core::ffi::c_int,
    pub reserved: core::ffi::c_int,
    pub st_space: [core::ffi::c_int; 32usize],
    pub xmm_space: [core::ffi::c_int; 32usize],
    pub padding: [core::ffi::c_int; 56usize],
}
impl Default for user32_fxsr_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user_regs_struct32 {
    pub ebx: __u32,
    pub ecx: __u32,
    pub edx: __u32,
    pub esi: __u32,
    pub edi: __u32,
    pub ebp: __u32,
    pub eax: __u32,
    pub ds: core::ffi::c_ushort,
    pub __ds: core::ffi::c_ushort,
    pub es: core::ffi::c_ushort,
    pub __es: core::ffi::c_ushort,
    pub fs: core::ffi::c_ushort,
    pub __fs: core::ffi::c_ushort,
    pub gs: core::ffi::c_ushort,
    pub __gs: core::ffi::c_ushort,
    pub orig_eax: __u32,
    pub eip: __u32,
    pub cs: core::ffi::c_ushort,
    pub __cs: core::ffi::c_ushort,
    pub eflags: __u32,
    pub esp: __u32,
    pub ss: core::ffi::c_ushort,
    pub __ss: core::ffi::c_ushort,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user32 {
    pub regs: user_regs_struct32,
    pub u_fpvalid: core::ffi::c_int,
    pub i387: user_i387_ia32_struct,
    pub u_tsize: __u32,
    pub u_dsize: __u32,
    pub u_ssize: __u32,
    pub start_code: __u32,
    pub start_stack: __u32,
    pub signal: __u32,
    pub reserved: core::ffi::c_int,
    pub u_ar0: __u32,
    pub u_fpstate: __u32,
    pub magic: __u32,
    pub u_comm: [core::ffi::c_char; 32usize],
    pub u_debugreg: [core::ffi::c_int; 8usize],
}
pub type compat_mode_t = u16_;
pub type __compat_uid_t = u16_;
pub type __compat_gid_t = u16_;
pub type compat_dev_t = u16_;
pub type compat_ipc_pid_t = u16_;
pub type compat_size_t = u32_;
pub type compat_ssize_t = s32;
pub type compat_clock_t = s32;
pub type compat_pid_t = s32;
pub type compat_ino_t = u32_;
pub type compat_off_t = s32;
pub type compat_loff_t = s64;
pub type compat_daddr_t = s32;
pub type compat_timer_t = s32;
pub type compat_key_t = s32;
pub type compat_short_t = s16;
pub type compat_int_t = s32;
pub type compat_long_t = s32;
pub type compat_ushort_t = u16_;
pub type compat_uint_t = u32_;
pub type compat_ulong_t = u32_;
pub type compat_uptr_t = u32_;
pub type compat_caddr_t = u32_;
pub type compat_aio_context_t = u32_;
pub type compat_old_sigset_t = u32_;
pub type __compat_uid32_t = u32_;
pub type __compat_gid32_t = u32_;
pub type compat_s64 = s64;
pub type compat_u64 = u64_;
pub type compat_sigset_word = u32_;
pub type compat_fsid_t = __kernel_fsid_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_ipc64_perm {
    pub key: compat_key_t,
    pub uid: __compat_uid32_t,
    pub gid: __compat_gid32_t,
    pub cuid: __compat_uid32_t,
    pub cgid: __compat_gid32_t,
    pub mode: compat_mode_t,
    pub __pad1: [core::ffi::c_uchar; 2usize],
    pub seq: compat_ushort_t,
    pub __pad2: compat_ushort_t,
    pub unused1: compat_ulong_t,
    pub unused2: compat_ulong_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_semid64_ds {
    pub sem_perm: compat_ipc64_perm,
    pub sem_otime: compat_ulong_t,
    pub sem_otime_high: compat_ulong_t,
    pub sem_ctime: compat_ulong_t,
    pub sem_ctime_high: compat_ulong_t,
    pub sem_nsems: compat_ulong_t,
    pub __unused3: compat_ulong_t,
    pub __unused4: compat_ulong_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_msqid64_ds {
    pub msg_perm: compat_ipc64_perm,
    pub msg_stime: compat_ulong_t,
    pub msg_stime_high: compat_ulong_t,
    pub msg_rtime: compat_ulong_t,
    pub msg_rtime_high: compat_ulong_t,
    pub msg_ctime: compat_ulong_t,
    pub msg_ctime_high: compat_ulong_t,
    pub msg_cbytes: compat_ulong_t,
    pub msg_qnum: compat_ulong_t,
    pub msg_qbytes: compat_ulong_t,
    pub msg_lspid: compat_pid_t,
    pub msg_lrpid: compat_pid_t,
    pub __unused4: compat_ulong_t,
    pub __unused5: compat_ulong_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_shmid64_ds {
    pub shm_perm: compat_ipc64_perm,
    pub shm_segsz: compat_size_t,
    pub shm_atime: compat_ulong_t,
    pub shm_atime_high: compat_ulong_t,
    pub shm_dtime: compat_ulong_t,
    pub shm_dtime_high: compat_ulong_t,
    pub shm_ctime: compat_ulong_t,
    pub shm_ctime_high: compat_ulong_t,
    pub shm_cpid: compat_pid_t,
    pub shm_lpid: compat_pid_t,
    pub shm_nattch: compat_ulong_t,
    pub __unused4: compat_ulong_t,
    pub __unused5: compat_ulong_t,
}
pub type compat_nlink_t = u16_;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_stat {
    pub st_dev: u32_,
    pub st_ino: compat_ino_t,
    pub st_mode: compat_mode_t,
    pub st_nlink: compat_nlink_t,
    pub st_uid: __compat_uid_t,
    pub st_gid: __compat_gid_t,
    pub st_rdev: u32_,
    pub st_size: u32_,
    pub st_blksize: u32_,
    pub st_blocks: u32_,
    pub st_atime: u32_,
    pub st_atime_nsec: u32_,
    pub st_mtime: u32_,
    pub st_mtime_nsec: u32_,
    pub st_ctime: u32_,
    pub st_ctime_nsec: u32_,
    pub __unused4: u32_,
    pub __unused5: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_statfs {
    pub f_type: core::ffi::c_int,
    pub f_bsize: core::ffi::c_int,
    pub f_blocks: core::ffi::c_int,
    pub f_bfree: core::ffi::c_int,
    pub f_bavail: core::ffi::c_int,
    pub f_files: core::ffi::c_int,
    pub f_ffree: core::ffi::c_int,
    pub f_fsid: compat_fsid_t,
    pub f_namelen: core::ffi::c_int,
    pub f_frsize: core::ffi::c_int,
    pub f_flags: core::ffi::c_int,
    pub f_spare: [core::ffi::c_int; 4usize],
}
extern "C" {
    pub fn __x64_sys_ni_syscall(regs: *const pt_regs) -> core::ffi::c_long;
}
extern "C" {
    pub fn __ia32_sys_ni_syscall(regs: *const pt_regs) -> core::ffi::c_long;
}
extern "C" {
    pub fn __x64_sys_getcpu(regs: *const pt_regs) -> core::ffi::c_long;
}
extern "C" {
    pub fn __x64_sys_gettimeofday(regs: *const pt_regs) -> core::ffi::c_long;
}
extern "C" {
    pub fn __x64_sys_time(regs: *const pt_regs) -> core::ffi::c_long;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_iovec {
    pub iov_base: compat_uptr_t,
    pub iov_len: compat_size_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_sigaltstack {
    pub ss_sp: compat_uptr_t,
    pub ss_flags: core::ffi::c_int,
    pub ss_size: compat_size_t,
}
pub type compat_stack_t = compat_sigaltstack;
pub type compat_uid_t = __compat_uid32_t;
pub type compat_gid_t = __compat_gid32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_sel_arg_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct old_itimerval32 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_tms {
    pub tms_utime: compat_clock_t,
    pub tms_stime: compat_clock_t,
    pub tms_cutime: compat_clock_t,
    pub tms_cstime: compat_clock_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_sigset_t {
    pub sig: [compat_sigset_word; 2usize],
}
extern "C" {
    pub fn set_compat_user_sigmask(
        umask: *const compat_sigset_t,
        sigsetsize: usize,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_sigaction {
    pub sa_handler: compat_uptr_t,
    pub sa_flags: compat_ulong_t,
    pub sa_restorer: compat_uptr_t,
    pub sa_mask: compat_sigset_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_sigval {
    pub sival_int: compat_int_t,
    pub sival_ptr: compat_uptr_t,
}
impl Default for compat_sigval {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type compat_sigval_t = compat_sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_siginfo {
    pub si_signo: core::ffi::c_int,
    pub si_errno: core::ffi::c_int,
    pub si_code: core::ffi::c_int,
    pub _sifields: compat_siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_siginfo__bindgen_ty_1 {
    pub _pad: [core::ffi::c_int; 29usize],
    pub _kill: compat_siginfo__bindgen_ty_1__bindgen_ty_1,
    pub _timer: compat_siginfo__bindgen_ty_1__bindgen_ty_2,
    pub _rt: compat_siginfo__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: compat_siginfo__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: compat_siginfo__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: compat_siginfo__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: compat_siginfo__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub _pid: compat_pid_t,
    pub _uid: __compat_uid32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_2 {
    pub _tid: compat_timer_t,
    pub _overrun: core::ffi::c_int,
    pub _sigval: compat_sigval_t,
}
impl Default for compat_siginfo__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_3 {
    pub _pid: compat_pid_t,
    pub _uid: __compat_uid32_t,
    pub _sigval: compat_sigval_t,
}
impl Default for compat_siginfo__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_4 {
    pub _pid: compat_pid_t,
    pub _uid: __compat_uid32_t,
    pub _status: core::ffi::c_int,
    pub _utime: compat_clock_t,
    pub _stime: compat_clock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_5 {
    pub _addr: compat_uptr_t,
    pub __bindgen_anon_1: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _trapno: core::ffi::c_int,
    pub _addr_lsb: core::ffi::c_short,
    pub _addr_bnd: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _addr_pkey: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub _perf: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _dummy_bnd: [core::ffi::c_char; 4usize],
    pub _lower: compat_uptr_t,
    pub _upper: compat_uptr_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub _dummy_pkey: [core::ffi::c_char; 4usize],
    pub _pkey: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub _data: compat_ulong_t,
    pub _type: u32_,
    pub _flags: u32_,
}
impl Default for compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for compat_siginfo__bindgen_ty_1__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_6 {
    pub _band: compat_long_t,
    pub _fd: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: compat_uptr_t,
    pub _syscall: core::ffi::c_int,
    pub _arch: core::ffi::c_uint,
}
impl Default for compat_siginfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for compat_siginfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type compat_siginfo_t = compat_siginfo;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_rlimit {
    pub rlim_cur: compat_ulong_t,
    pub rlim_max: compat_ulong_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_flock {
    pub l_type: core::ffi::c_short,
    pub l_whence: core::ffi::c_short,
    pub l_start: compat_off_t,
    pub l_len: compat_off_t,
    pub l_pid: compat_pid_t,
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct compat_flock64 {
    pub l_type: core::ffi::c_short,
    pub l_whence: core::ffi::c_short,
    pub l_start: compat_loff_t,
    pub l_len: compat_loff_t,
    pub l_pid: compat_pid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_rusage {
    pub ru_utime: old_timeval32,
    pub ru_stime: old_timeval32,
    pub ru_maxrss: compat_long_t,
    pub ru_ixrss: compat_long_t,
    pub ru_idrss: compat_long_t,
    pub ru_isrss: compat_long_t,
    pub ru_minflt: compat_long_t,
    pub ru_majflt: compat_long_t,
    pub ru_nswap: compat_long_t,
    pub ru_inblock: compat_long_t,
    pub ru_oublock: compat_long_t,
    pub ru_msgsnd: compat_long_t,
    pub ru_msgrcv: compat_long_t,
    pub ru_nsignals: compat_long_t,
    pub ru_nvcsw: compat_long_t,
    pub ru_nivcsw: compat_long_t,
}
extern "C" {
    pub fn put_compat_rusage(arg1: *const rusage, arg2: *mut compat_rusage) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __compat_aio_sigset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_dirent {
    pub d_ino: u32_,
    pub d_off: compat_off_t,
    pub d_reclen: u16_,
    pub d_name: [core::ffi::c_char; 256usize],
}
impl Default for compat_dirent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_ustat {
    pub f_tfree: compat_daddr_t,
    pub f_tinode: compat_ino_t,
    pub f_fname: [core::ffi::c_char; 6usize],
    pub f_fpack: [core::ffi::c_char; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_sigevent {
    pub sigev_value: compat_sigval_t,
    pub sigev_signo: compat_int_t,
    pub sigev_notify: compat_int_t,
    pub _sigev_un: compat_sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_sigevent__bindgen_ty_1 {
    pub _pad: [compat_int_t; 13usize],
    pub _tid: compat_int_t,
    pub _sigev_thread: compat_sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: compat_uptr_t,
    pub _attribute: compat_uptr_t,
}
impl Default for compat_sigevent__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for compat_sigevent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type compat_sigevent_t = compat_sigevent;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_ifmap {
    pub mem_start: compat_ulong_t,
    pub mem_end: compat_ulong_t,
    pub base_addr: core::ffi::c_ushort,
    pub irq: core::ffi::c_uchar,
    pub dma: core::ffi::c_uchar,
    pub port: core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_if_settings {
    pub type_: core::ffi::c_uint,
    pub size: core::ffi::c_uint,
    pub ifs_ifsu: compat_uptr_t,
}
#[repr(C)]
pub struct compat_ifreq {
    pub ifr_ifrn: compat_ifreq__bindgen_ty_1,
    pub ifr_ifru: compat_ifreq__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_ifreq__bindgen_ty_1 {
    pub ifrn_name: [core::ffi::c_char; 16usize],
}
impl Default for compat_ifreq__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct compat_ifreq__bindgen_ty_2 {
    pub ifru_addr: __BindgenUnionField<sockaddr>,
    pub ifru_dstaddr: __BindgenUnionField<sockaddr>,
    pub ifru_broadaddr: __BindgenUnionField<sockaddr>,
    pub ifru_netmask: __BindgenUnionField<sockaddr>,
    pub ifru_hwaddr: __BindgenUnionField<sockaddr>,
    pub ifru_flags: __BindgenUnionField<core::ffi::c_short>,
    pub ifru_ivalue: __BindgenUnionField<compat_int_t>,
    pub ifru_mtu: __BindgenUnionField<compat_int_t>,
    pub ifru_map: __BindgenUnionField<compat_ifmap>,
    pub ifru_slave: __BindgenUnionField<[core::ffi::c_char; 16usize]>,
    pub ifru_newname: __BindgenUnionField<[core::ffi::c_char; 16usize]>,
    pub ifru_data: __BindgenUnionField<compat_caddr_t>,
    pub ifru_settings: __BindgenUnionField<compat_if_settings>,
    pub bindgen_union_field: [u32; 4usize],
}
impl Default for compat_ifreq__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for compat_ifreq {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_ifconf {
    pub ifc_len: compat_int_t,
    pub ifcbuf: compat_caddr_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_robust_list {
    pub next: compat_uptr_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_robust_list_head {
    pub list: compat_robust_list,
    pub futex_offset: compat_long_t,
    pub list_op_pending: compat_uptr_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_old_sigaction {
    pub sa_handler: compat_uptr_t,
    pub sa_mask: compat_old_sigset_t,
    pub sa_flags: compat_ulong_t,
    pub sa_restorer: compat_uptr_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_keyctl_kdf_params {
    pub hashname: compat_uptr_t,
    pub otherinfo: compat_uptr_t,
    pub otherinfolen: __u32,
    pub __spare: [__u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_statfs64 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_old_linux_dirent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_linux_dirent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_dirent64 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_sysinfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_sysctl_args {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_kexec_segment {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_mq_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_msgbuf {
    _unused: [u8; 0],
}
extern "C" {
    pub fn copy_siginfo_to_external32(to: *mut compat_siginfo, from: *const kernel_siginfo);
}
extern "C" {
    pub fn copy_siginfo_from_user32(
        to: *mut kernel_siginfo_t,
        from: *const compat_siginfo,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __copy_siginfo_to_user32(
        to: *mut compat_siginfo,
        from: *const kernel_siginfo_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_compat_sigevent(
        event: *mut sigevent,
        u_event: *const compat_sigevent,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_compat_sigset(
        set: *mut sigset_t,
        compat: *const compat_sigset_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn compat_ptrace_request(
        child: *mut task_struct,
        request: compat_long_t,
        addr: compat_ulong_t,
        data: compat_ulong_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn compat_arch_ptrace(
        child: *mut task_struct,
        request: compat_long_t,
        addr: compat_ulong_t,
        data: compat_ulong_t,
    ) -> core::ffi::c_long;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct epoll_event {
    _unused: [u8; 0],
}
extern "C" {
    pub fn compat_restore_altstack(uss: *const compat_stack_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __compat_save_altstack(
        arg1: *mut compat_stack_t,
        arg2: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kcompat_sys_statfs64(
        pathname: *const core::ffi::c_char,
        sz: compat_size_t,
        buf: *mut compat_statfs64,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kcompat_sys_fstatfs64(
        fd: core::ffi::c_uint,
        sz: compat_size_t,
        buf: *mut compat_statfs64,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn compat_get_bitmap(
        mask: *mut core::ffi::c_ulong,
        umask: *const compat_ulong_t,
        bitmap_size: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn compat_put_bitmap(
        umask: *mut compat_ulong_t,
        mask: *mut core::ffi::c_ulong,
        bitmap_size: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
pub type stack_trace_consume_fn = ::core::option::Option<
    unsafe extern "C" fn(cookie: *mut core::ffi::c_void, addr: core::ffi::c_ulong) -> bool_,
>;
extern "C" {
    pub fn arch_stack_walk(
        consume_entry: stack_trace_consume_fn,
        cookie: *mut core::ffi::c_void,
        task: *mut task_struct,
        regs: *mut pt_regs,
    );
}
extern "C" {
    pub fn arch_stack_walk_reliable(
        consume_entry: stack_trace_consume_fn,
        cookie: *mut core::ffi::c_void,
        task: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_stack_walk_user(
        consume_entry: stack_trace_consume_fn,
        cookie: *mut core::ffi::c_void,
        regs: *const pt_regs,
    );
}
extern "C" {
    pub fn stack_trace_print(
        trace: *const core::ffi::c_ulong,
        nr_entries: core::ffi::c_uint,
        spaces: core::ffi::c_int,
    );
}
extern "C" {
    pub fn stack_trace_snprint(
        buf: *mut core::ffi::c_char,
        size: usize,
        entries: *const core::ffi::c_ulong,
        nr_entries: core::ffi::c_uint,
        spaces: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn stack_trace_save(
        store: *mut core::ffi::c_ulong,
        size: core::ffi::c_uint,
        skipnr: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn stack_trace_save_tsk(
        task: *mut task_struct,
        store: *mut core::ffi::c_ulong,
        size: core::ffi::c_uint,
        skipnr: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn stack_trace_save_regs(
        regs: *mut pt_regs,
        store: *mut core::ffi::c_ulong,
        size: core::ffi::c_uint,
        skipnr: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn stack_trace_save_user(
        store: *mut core::ffi::c_ulong,
        size: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn filter_irq_stacks(
        entries: *mut core::ffi::c_ulong,
        nr_entries: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn stack_trace_save_tsk_reliable(
        tsk: *mut task_struct,
        store: *mut core::ffi::c_ulong,
        size: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut __tracepoint_page_ref_set: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_page_ref_mod: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_page_ref_mod_and_test: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_page_ref_mod_and_return: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_page_ref_mod_unless: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_page_ref_freeze: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_page_ref_unfreeze: tracepoint;
}
extern "C" {
    pub fn pte_free_defer(mm: *mut mm_struct, pgtable: pgtable_t);
}
extern "C" {
    pub fn ptep_clear_flush(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        ptep: *mut pte_t,
    ) -> pte_t;
}
extern "C" {
    pub fn pmdp_huge_clear_flush(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
    ) -> pmd_t;
}
extern "C" {
    pub fn pudp_huge_clear_flush(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pudp: *mut pud_t,
    ) -> pud_t;
}
extern "C" {
    pub fn pgtable_trans_huge_deposit(mm: *mut mm_struct, pmdp: *mut pmd_t, pgtable: pgtable_t);
}
extern "C" {
    pub fn pgtable_trans_huge_withdraw(mm: *mut mm_struct, pmdp: *mut pmd_t) -> pgtable_t;
}
extern "C" {
    pub fn pmdp_invalidate(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
    ) -> pmd_t;
}
extern "C" {
    pub fn pgd_clear_bad(arg1: *mut pgd_t);
}
extern "C" {
    pub fn p4d_clear_bad(arg1: *mut p4d_t);
}
extern "C" {
    pub fn pud_clear_bad(arg1: *mut pud_t);
}
extern "C" {
    pub fn pmd_clear_bad(arg1: *mut pmd_t);
}
extern "C" {
    pub fn track_pfn_remap(
        vma: *mut vm_area_struct,
        prot: *mut pgprot_t,
        pfn: core::ffi::c_ulong,
        addr: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn track_pfn_insert(vma: *mut vm_area_struct, prot: *mut pgprot_t, pfn: pfn_t);
}
extern "C" {
    pub fn track_pfn_copy(vma: *mut vm_area_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn untrack_pfn(
        vma: *mut vm_area_struct,
        pfn: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        mm_wr_locked: bool_,
    );
}
extern "C" {
    pub fn untrack_pfn_clear(vma: *mut vm_area_struct);
}
extern "C" {
    pub fn p4d_set_huge(p4d: *mut p4d_t, addr: phys_addr_t, prot: pgprot_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn p4d_clear_huge(p4d: *mut p4d_t);
}
extern "C" {
    pub fn pud_set_huge(pud: *mut pud_t, addr: phys_addr_t, prot: pgprot_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmd_set_huge(pmd: *mut pmd_t, addr: phys_addr_t, prot: pgprot_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn pud_clear_huge(pud: *mut pud_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmd_clear_huge(pmd: *mut pmd_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn p4d_free_pud_page(p4d: *mut p4d_t, addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn pud_free_pmd_page(pud: *mut pud_t, addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmd_free_pte_page(pmd: *mut pmd_t, addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn phys_mem_access_prot_allowed(
        file: *mut file,
        pfn: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        vma_prot: *mut pgprot_t,
    ) -> core::ffi::c_int;
}
pub type pgtbl_mod_mask = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct resource {
    pub start: resource_size_t,
    pub end: resource_size_t,
    pub name: *const core::ffi::c_char,
    pub flags: core::ffi::c_ulong,
    pub desc: core::ffi::c_ulong,
    pub parent: *mut resource,
    pub sibling: *mut resource,
    pub child: *mut resource,
}
impl Default for resource {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IORES_DESC_NONE: _bindgen_ty_90 = 0;
pub const IORES_DESC_CRASH_KERNEL: _bindgen_ty_90 = 1;
pub const IORES_DESC_ACPI_TABLES: _bindgen_ty_90 = 2;
pub const IORES_DESC_ACPI_NV_STORAGE: _bindgen_ty_90 = 3;
pub const IORES_DESC_PERSISTENT_MEMORY: _bindgen_ty_90 = 4;
pub const IORES_DESC_PERSISTENT_MEMORY_LEGACY: _bindgen_ty_90 = 5;
pub const IORES_DESC_DEVICE_PRIVATE_MEMORY: _bindgen_ty_90 = 6;
pub const IORES_DESC_RESERVED: _bindgen_ty_90 = 7;
pub const IORES_DESC_SOFT_RESERVED: _bindgen_ty_90 = 8;
pub const IORES_DESC_CXL: _bindgen_ty_90 = 9;
pub type _bindgen_ty_90 = core::ffi::c_uint;
pub const IORES_MAP_SYSTEM_RAM: _bindgen_ty_91 = 1;
pub const IORES_MAP_ENCRYPTED: _bindgen_ty_91 = 2;
pub type _bindgen_ty_91 = core::ffi::c_uint;
pub type resource_alignf = ::core::option::Option<
    unsafe extern "C" fn(
        data: *mut core::ffi::c_void,
        res: *const resource,
        size: resource_size_t,
        align: resource_size_t,
    ) -> resource_size_t,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct resource_constraint {
    pub min: resource_size_t,
    pub max: resource_size_t,
    pub align: resource_size_t,
    pub alignf: resource_alignf,
    pub alignf_data: *mut core::ffi::c_void,
}
impl Default for resource_constraint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut ioport_resource: resource;
}
extern "C" {
    pub static mut iomem_resource: resource;
}
extern "C" {
    pub fn request_resource_conflict(root: *mut resource, new: *mut resource) -> *mut resource;
}
extern "C" {
    pub fn request_resource(root: *mut resource, new: *mut resource) -> core::ffi::c_int;
}
extern "C" {
    pub fn release_resource(new: *mut resource) -> core::ffi::c_int;
}
extern "C" {
    pub fn release_child_resources(new: *mut resource);
}
extern "C" {
    pub fn reserve_region_with_split(
        root: *mut resource,
        start: resource_size_t,
        end: resource_size_t,
        name: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn insert_resource_conflict(parent: *mut resource, new: *mut resource) -> *mut resource;
}
extern "C" {
    pub fn insert_resource(parent: *mut resource, new: *mut resource) -> core::ffi::c_int;
}
extern "C" {
    pub fn insert_resource_expand_to_fit(root: *mut resource, new: *mut resource);
}
extern "C" {
    pub fn remove_resource(old: *mut resource) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_remove_reservations(avail: *mut resource);
}
extern "C" {
    pub fn allocate_resource(
        root: *mut resource,
        new: *mut resource,
        size: resource_size_t,
        min: resource_size_t,
        max: resource_size_t,
        align: resource_size_t,
        alignf: resource_alignf,
        alignf_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn lookup_resource(root: *mut resource, start: resource_size_t) -> *mut resource;
}
extern "C" {
    pub fn adjust_resource(
        res: *mut resource,
        start: resource_size_t,
        size: resource_size_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn resource_alignment(res: *mut resource) -> resource_size_t;
}
extern "C" {
    pub fn find_resource_space(
        root: *mut resource,
        new: *mut resource,
        size: resource_size_t,
        constraint: *mut resource_constraint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __request_region(
        arg1: *mut resource,
        start: resource_size_t,
        n: resource_size_t,
        name: *const core::ffi::c_char,
        flags: core::ffi::c_int,
    ) -> *mut resource;
}
extern "C" {
    pub fn __release_region(arg1: *mut resource, arg2: resource_size_t, arg3: resource_size_t);
}
extern "C" {
    pub fn devm_request_resource(
        dev: *mut device,
        root: *mut resource,
        new: *mut resource,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn devm_release_resource(dev: *mut device, new: *mut resource);
}
extern "C" {
    pub fn __devm_request_region(
        dev: *mut device,
        parent: *mut resource,
        start: resource_size_t,
        n: resource_size_t,
        name: *const core::ffi::c_char,
    ) -> *mut resource;
}
extern "C" {
    pub fn __devm_release_region(
        dev: *mut device,
        parent: *mut resource,
        start: resource_size_t,
        n: resource_size_t,
    );
}
extern "C" {
    pub fn iomem_map_sanity_check(
        addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn iomem_is_exclusive(addr: u64_) -> bool_;
}
extern "C" {
    pub fn resource_is_exclusive(
        resource: *mut resource,
        addr: u64_,
        size: resource_size_t,
    ) -> bool_;
}
extern "C" {
    pub fn walk_system_ram_range(
        start_pfn: core::ffi::c_ulong,
        nr_pages: core::ffi::c_ulong,
        arg: *mut core::ffi::c_void,
        func: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: core::ffi::c_ulong,
                arg2: core::ffi::c_ulong,
                arg3: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn walk_mem_res(
        start: u64_,
        end: u64_,
        arg: *mut core::ffi::c_void,
        func: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut resource,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn walk_system_ram_res(
        start: u64_,
        end: u64_,
        arg: *mut core::ffi::c_void,
        func: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut resource,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn walk_system_ram_res_rev(
        start: u64_,
        end: u64_,
        arg: *mut core::ffi::c_void,
        func: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut resource,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn walk_iomem_res_desc(
        desc: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        start: u64_,
        end: u64_,
        arg: *mut core::ffi::c_void,
        func: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut resource,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn devm_request_free_mem_region(
        dev: *mut device,
        base: *mut resource,
        size: core::ffi::c_ulong,
    ) -> *mut resource;
}
extern "C" {
    pub fn request_free_mem_region(
        base: *mut resource,
        size: core::ffi::c_ulong,
        name: *const core::ffi::c_char,
    ) -> *mut resource;
}
extern "C" {
    pub fn alloc_free_mem_region(
        base: *mut resource,
        size: core::ffi::c_ulong,
        align: core::ffi::c_ulong,
        name: *const core::ffi::c_char,
    ) -> *mut resource;
}
extern "C" {
    pub fn iomem_get_mapping() -> *mut address_space;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vmem_altmap {
    pub base_pfn: core::ffi::c_ulong,
    pub end_pfn: core::ffi::c_ulong,
    pub reserve: core::ffi::c_ulong,
    pub free: core::ffi::c_ulong,
    pub align: core::ffi::c_ulong,
    pub alloc: core::ffi::c_ulong,
    pub inaccessible: bool_,
}
pub const memory_type_MEMORY_DEVICE_PRIVATE: memory_type = 1;
pub const memory_type_MEMORY_DEVICE_COHERENT: memory_type = 2;
pub const memory_type_MEMORY_DEVICE_FS_DAX: memory_type = 3;
pub const memory_type_MEMORY_DEVICE_GENERIC: memory_type = 4;
pub const memory_type_MEMORY_DEVICE_PCI_P2PDMA: memory_type = 5;
pub type memory_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dev_pagemap_ops {
    pub page_free: ::core::option::Option<unsafe extern "C" fn(page: *mut page)>,
    pub migrate_to_ram:
        ::core::option::Option<unsafe extern "C" fn(vmf: *mut vm_fault) -> vm_fault_t>,
    pub memory_failure: ::core::option::Option<
        unsafe extern "C" fn(
            pgmap: *mut dev_pagemap,
            pfn: core::ffi::c_ulong,
            nr_pages: core::ffi::c_ulong,
            mf_flags: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
}
#[repr(C)]
pub struct dev_pagemap {
    pub altmap: vmem_altmap,
    pub ref_: percpu_ref,
    pub done: completion,
    pub type_: memory_type,
    pub flags: core::ffi::c_uint,
    pub vmemmap_shift: core::ffi::c_ulong,
    pub ops: *const dev_pagemap_ops,
    pub owner: *mut core::ffi::c_void,
    pub nr_range: core::ffi::c_int,
    pub __bindgen_anon_1: dev_pagemap__bindgen_ty_1,
}
#[repr(C)]
pub struct dev_pagemap__bindgen_ty_1 {
    pub range: __BindgenUnionField<range>,
    pub __bindgen_anon_1: __BindgenUnionField<dev_pagemap__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u64; 2usize],
}
#[repr(C)]
#[derive(Default)]
pub struct dev_pagemap__bindgen_ty_1__bindgen_ty_1 {
    pub __empty_ranges: dev_pagemap__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ranges: __IncompleteArrayField<range>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dev_pagemap__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
impl Default for dev_pagemap__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for dev_pagemap {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct anon_vma {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct anon_vma_chain {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut sysctl_page_lock_unfairness: core::ffi::c_int;
}
extern "C" {
    pub fn mm_core_init();
}
extern "C" {
    pub fn init_mm_internals();
}
extern "C" {
    pub static mut _totalram_pages: atomic_long_t;
}
extern "C" {
    pub static mut high_memory: *mut core::ffi::c_void;
}
extern "C" {
    pub static mut page_cluster: core::ffi::c_int;
}
extern "C" {
    pub static page_cluster_max: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_legacy_va_layout: core::ffi::c_int;
}
extern "C" {
    pub static mmap_rnd_bits_min: core::ffi::c_int;
}
extern "C" {
    pub static mut mmap_rnd_bits_max: core::ffi::c_int;
}
extern "C" {
    pub static mut mmap_rnd_bits: core::ffi::c_int;
}
extern "C" {
    pub static mmap_rnd_compat_bits_min: core::ffi::c_int;
}
extern "C" {
    pub static mmap_rnd_compat_bits_max: core::ffi::c_int;
}
extern "C" {
    pub static mut mmap_rnd_compat_bits: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_max_map_count: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_user_reserve_kbytes: core::ffi::c_ulong;
}
extern "C" {
    pub static mut sysctl_admin_reserve_kbytes: core::ffi::c_ulong;
}
extern "C" {
    pub static mut sysctl_overcommit_memory: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_overcommit_ratio: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_overcommit_kbytes: core::ffi::c_ulong;
}
extern "C" {
    pub fn overcommit_ratio_handler(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn overcommit_kbytes_handler(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn overcommit_policy_handler(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn setup_initial_init_mm(
        start_code: *mut core::ffi::c_void,
        end_code: *mut core::ffi::c_void,
        end_data: *mut core::ffi::c_void,
        brk: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn vm_area_alloc(arg1: *mut mm_struct) -> *mut vm_area_struct;
}
extern "C" {
    pub fn vm_area_dup(arg1: *mut vm_area_struct) -> *mut vm_area_struct;
}
extern "C" {
    pub fn vm_area_free(arg1: *mut vm_area_struct);
}
extern "C" {
    pub fn __vm_area_free(vma: *mut vm_area_struct);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_fault {
    pub __bindgen_anon_1: vm_fault__bindgen_ty_1,
    pub flags: fault_flag,
    pub pmd: *mut pmd_t,
    pub pud: *mut pud_t,
    pub __bindgen_anon_2: vm_fault__bindgen_ty_2,
    pub cow_page: *mut page,
    pub page: *mut page,
    pub pte: *mut pte_t,
    pub ptl: *mut spinlock_t,
    pub prealloc_pte: pgtable_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_fault__bindgen_ty_1 {
    pub vma: *mut vm_area_struct,
    pub gfp_mask: gfp_t,
    pub pgoff: core::ffi::c_ulong,
    pub address: core::ffi::c_ulong,
    pub real_address: core::ffi::c_ulong,
}
impl Default for vm_fault__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_fault__bindgen_ty_2 {
    pub orig_pte: pte_t,
    pub orig_pmd: pmd_t,
}
impl Default for vm_fault__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for vm_fault {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vm_operations_struct {
    pub open: ::core::option::Option<unsafe extern "C" fn(area: *mut vm_area_struct)>,
    pub close: ::core::option::Option<unsafe extern "C" fn(area: *mut vm_area_struct)>,
    pub may_split: ::core::option::Option<
        unsafe extern "C" fn(
            area: *mut vm_area_struct,
            addr: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub mremap:
        ::core::option::Option<unsafe extern "C" fn(area: *mut vm_area_struct) -> core::ffi::c_int>,
    pub mprotect: ::core::option::Option<
        unsafe extern "C" fn(
            vma: *mut vm_area_struct,
            start: core::ffi::c_ulong,
            end: core::ffi::c_ulong,
            newflags: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub fault: ::core::option::Option<unsafe extern "C" fn(vmf: *mut vm_fault) -> vm_fault_t>,
    pub huge_fault: ::core::option::Option<
        unsafe extern "C" fn(vmf: *mut vm_fault, order: core::ffi::c_uint) -> vm_fault_t,
    >,
    pub map_pages: ::core::option::Option<
        unsafe extern "C" fn(
            vmf: *mut vm_fault,
            start_pgoff: core::ffi::c_ulong,
            end_pgoff: core::ffi::c_ulong,
        ) -> vm_fault_t,
    >,
    pub pagesize: ::core::option::Option<
        unsafe extern "C" fn(area: *mut vm_area_struct) -> core::ffi::c_ulong,
    >,
    pub page_mkwrite:
        ::core::option::Option<unsafe extern "C" fn(vmf: *mut vm_fault) -> vm_fault_t>,
    pub pfn_mkwrite: ::core::option::Option<unsafe extern "C" fn(vmf: *mut vm_fault) -> vm_fault_t>,
    pub access: ::core::option::Option<
        unsafe extern "C" fn(
            vma: *mut vm_area_struct,
            addr: core::ffi::c_ulong,
            buf: *mut core::ffi::c_void,
            len: core::ffi::c_int,
            write: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub name: ::core::option::Option<
        unsafe extern "C" fn(vma: *mut vm_area_struct) -> *const core::ffi::c_char,
    >,
    pub set_policy: ::core::option::Option<
        unsafe extern "C" fn(vma: *mut vm_area_struct, new: *mut mempolicy) -> core::ffi::c_int,
    >,
    pub get_policy: ::core::option::Option<
        unsafe extern "C" fn(
            vma: *mut vm_area_struct,
            addr: core::ffi::c_ulong,
            ilx: *mut core::ffi::c_ulong,
        ) -> *mut mempolicy,
    >,
    pub find_special_page: ::core::option::Option<
        unsafe extern "C" fn(vma: *mut vm_area_struct, addr: core::ffi::c_ulong) -> *mut page,
    >,
}
extern "C" {
    pub fn lock_vma_under_rcu(
        mm: *mut mm_struct,
        address: core::ffi::c_ulong,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub static vma_dummy_vm_ops: vm_operations_struct;
}
extern "C" {
    pub fn vma_is_shmem(vma: *mut vm_area_struct) -> bool_;
}
extern "C" {
    pub fn vma_is_anon_shmem(vma: *mut vm_area_struct) -> bool_;
}
extern "C" {
    pub fn vma_is_stack_for_current(vma: *mut vm_area_struct) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct idr {
    pub idr_rt: xarray,
    pub idr_base: core::ffi::c_uint,
    pub idr_next: core::ffi::c_uint,
}
impl Default for idr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn idr_preload(gfp_mask: gfp_t);
}
extern "C" {
    pub fn idr_alloc(
        arg1: *mut idr,
        ptr: *mut core::ffi::c_void,
        start: core::ffi::c_int,
        end: core::ffi::c_int,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_alloc_u32(
        arg1: *mut idr,
        ptr: *mut core::ffi::c_void,
        id: *mut u32_,
        max: core::ffi::c_ulong,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_alloc_cyclic(
        arg1: *mut idr,
        ptr: *mut core::ffi::c_void,
        start: core::ffi::c_int,
        end: core::ffi::c_int,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_remove(arg1: *mut idr, id: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_find(arg1: *const idr, id: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_for_each(
        arg1: *const idr,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                id: core::ffi::c_int,
                p: *mut core::ffi::c_void,
                data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_get_next(arg1: *mut idr, nextid: *mut core::ffi::c_int) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_get_next_ul(
        arg1: *mut idr,
        nextid: *mut core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_replace(
        arg1: *mut idr,
        arg2: *mut core::ffi::c_void,
        id: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_destroy(arg1: *mut idr);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ida_bitmap {
    pub bitmap: [core::ffi::c_ulong; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ida {
    pub xa: xarray,
}
impl Default for ida {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ida_alloc_range(
        arg1: *mut ida,
        min: core::ffi::c_uint,
        max: core::ffi::c_uint,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ida_free(arg1: *mut ida, id: core::ffi::c_uint);
}
extern "C" {
    pub fn ida_destroy(ida: *mut ida);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_open_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_iattrs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_global_locks {
    pub open_file_mutex: [mutex; 1024usize],
}
impl Default for kernfs_global_locks {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const kernfs_node_type_KERNFS_DIR: kernfs_node_type = 1;
pub const kernfs_node_type_KERNFS_FILE: kernfs_node_type = 2;
pub const kernfs_node_type_KERNFS_LINK: kernfs_node_type = 4;
pub type kernfs_node_type = core::ffi::c_uint;
pub const kernfs_node_flag_KERNFS_ACTIVATED: kernfs_node_flag = 16;
pub const kernfs_node_flag_KERNFS_NS: kernfs_node_flag = 32;
pub const kernfs_node_flag_KERNFS_HAS_SEQ_SHOW: kernfs_node_flag = 64;
pub const kernfs_node_flag_KERNFS_HAS_MMAP: kernfs_node_flag = 128;
pub const kernfs_node_flag_KERNFS_LOCKDEP: kernfs_node_flag = 256;
pub const kernfs_node_flag_KERNFS_HIDDEN: kernfs_node_flag = 512;
pub const kernfs_node_flag_KERNFS_SUICIDAL: kernfs_node_flag = 1024;
pub const kernfs_node_flag_KERNFS_SUICIDED: kernfs_node_flag = 2048;
pub const kernfs_node_flag_KERNFS_EMPTY_DIR: kernfs_node_flag = 4096;
pub const kernfs_node_flag_KERNFS_HAS_RELEASE: kernfs_node_flag = 8192;
pub const kernfs_node_flag_KERNFS_REMOVING: kernfs_node_flag = 16384;
pub type kernfs_node_flag = core::ffi::c_uint;
pub const kernfs_root_flag_KERNFS_ROOT_CREATE_DEACTIVATED: kernfs_root_flag = 1;
pub const kernfs_root_flag_KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK: kernfs_root_flag = 2;
pub const kernfs_root_flag_KERNFS_ROOT_SUPPORT_EXPORTOP: kernfs_root_flag = 4;
pub const kernfs_root_flag_KERNFS_ROOT_SUPPORT_USER_XATTR: kernfs_root_flag = 8;
pub type kernfs_root_flag = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_elem_dir {
    pub subdirs: core::ffi::c_ulong,
    pub children: rb_root,
    pub root: *mut kernfs_root,
    pub rev: core::ffi::c_ulong,
}
impl Default for kernfs_elem_dir {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_elem_symlink {
    pub target_kn: *mut kernfs_node,
}
impl Default for kernfs_elem_symlink {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_elem_attr {
    pub ops: *const kernfs_ops,
    pub open: *mut kernfs_open_node,
    pub size: loff_t,
    pub notify_next: *mut kernfs_node,
}
impl Default for kernfs_elem_attr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_node {
    pub count: atomic_t,
    pub active: atomic_t,
    pub parent: *mut kernfs_node,
    pub name: *const core::ffi::c_char,
    pub rb: rb_node,
    pub ns: *const core::ffi::c_void,
    pub hash: core::ffi::c_uint,
    pub flags: core::ffi::c_ushort,
    pub mode: umode_t,
    pub __bindgen_anon_1: kernfs_node__bindgen_ty_1,
    pub id: u64_,
    pub priv_: *mut core::ffi::c_void,
    pub iattr: *mut kernfs_iattrs,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kernfs_node__bindgen_ty_1 {
    pub dir: kernfs_elem_dir,
    pub symlink: kernfs_elem_symlink,
    pub attr: kernfs_elem_attr,
}
impl Default for kernfs_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kernfs_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernfs_syscall_ops {
    pub show_options: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, root: *mut kernfs_root) -> core::ffi::c_int,
    >,
    pub mkdir: ::core::option::Option<
        unsafe extern "C" fn(
            parent: *mut kernfs_node,
            name: *const core::ffi::c_char,
            mode: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub rmdir:
        ::core::option::Option<unsafe extern "C" fn(kn: *mut kernfs_node) -> core::ffi::c_int>,
    pub rename: ::core::option::Option<
        unsafe extern "C" fn(
            kn: *mut kernfs_node,
            new_parent: *mut kernfs_node,
            new_name: *const core::ffi::c_char,
        ) -> core::ffi::c_int,
    >,
    pub show_path: ::core::option::Option<
        unsafe extern "C" fn(
            sf: *mut seq_file,
            kn: *mut kernfs_node,
            root: *mut kernfs_root,
        ) -> core::ffi::c_int,
    >,
}
extern "C" {
    pub fn kernfs_root_to_node(root: *mut kernfs_root) -> *mut kernfs_node;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_open_file {
    pub kn: *mut kernfs_node,
    pub file: *mut file,
    pub seq_file: *mut seq_file,
    pub priv_: *mut core::ffi::c_void,
    pub mutex: mutex,
    pub prealloc_mutex: mutex,
    pub event: core::ffi::c_int,
    pub list: list_head,
    pub prealloc_buf: *mut core::ffi::c_char,
    pub atomic_write_len: usize,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub vm_ops: *const vm_operations_struct,
}
impl Default for kernfs_open_file {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl kernfs_open_file {
    #[inline]
    pub fn mmapped(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mmapped(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn released(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_released(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(mmapped: bool_, released: bool_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mmapped: u8 = unsafe { ::core::mem::transmute(mmapped) };
            mmapped as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let released: u8 = unsafe { ::core::mem::transmute(released) };
            released as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernfs_ops {
    pub open:
        ::core::option::Option<unsafe extern "C" fn(of: *mut kernfs_open_file) -> core::ffi::c_int>,
    pub release: ::core::option::Option<unsafe extern "C" fn(of: *mut kernfs_open_file)>,
    pub seq_show: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, v: *mut core::ffi::c_void) -> core::ffi::c_int,
    >,
    pub seq_start: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, ppos: *mut loff_t) -> *mut core::ffi::c_void,
    >,
    pub seq_next: ::core::option::Option<
        unsafe extern "C" fn(
            sf: *mut seq_file,
            v: *mut core::ffi::c_void,
            ppos: *mut loff_t,
        ) -> *mut core::ffi::c_void,
    >,
    pub seq_stop:
        ::core::option::Option<unsafe extern "C" fn(sf: *mut seq_file, v: *mut core::ffi::c_void)>,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            buf: *mut core::ffi::c_char,
            bytes: usize,
            off: loff_t,
        ) -> isize,
    >,
    pub atomic_write_len: usize,
    pub prealloc: bool_,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            buf: *mut core::ffi::c_char,
            bytes: usize,
            off: loff_t,
        ) -> isize,
    >,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(of: *mut kernfs_open_file, pt: *mut poll_table_struct) -> __poll_t,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            vma: *mut vm_area_struct,
        ) -> core::ffi::c_int,
    >,
    pub llseek: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            offset: loff_t,
            whence: core::ffi::c_int,
        ) -> loff_t,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_fs_context {
    pub root: *mut kernfs_root,
    pub ns_tag: *mut core::ffi::c_void,
    pub magic: core::ffi::c_ulong,
    pub new_sb_created: bool_,
}
impl Default for kernfs_fs_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kernfs_name(
        kn: *mut kernfs_node,
        buf: *mut core::ffi::c_char,
        buflen: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_path_from_node(
        root_kn: *mut kernfs_node,
        kn: *mut kernfs_node,
        buf: *mut core::ffi::c_char,
        buflen: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pr_cont_kernfs_name(kn: *mut kernfs_node);
}
extern "C" {
    pub fn pr_cont_kernfs_path(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_get_parent(kn: *mut kernfs_node) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_find_and_get_ns(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        ns: *const core::ffi::c_void,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_walk_and_get_ns(
        parent: *mut kernfs_node,
        path: *const core::ffi::c_char,
        ns: *const core::ffi::c_void,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_get(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_put(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_node_from_dentry(dentry: *mut dentry) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_root_from_sb(sb: *mut super_block) -> *mut kernfs_root;
}
extern "C" {
    pub fn kernfs_get_inode(sb: *mut super_block, kn: *mut kernfs_node) -> *mut inode;
}
extern "C" {
    pub fn kernfs_node_dentry(kn: *mut kernfs_node, sb: *mut super_block) -> *mut dentry;
}
extern "C" {
    pub fn kernfs_create_root(
        scops: *mut kernfs_syscall_ops,
        flags: core::ffi::c_uint,
        priv_: *mut core::ffi::c_void,
    ) -> *mut kernfs_root;
}
extern "C" {
    pub fn kernfs_destroy_root(root: *mut kernfs_root);
}
extern "C" {
    pub fn kernfs_create_dir_ns(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        mode: umode_t,
        uid: kuid_t,
        gid: kgid_t,
        priv_: *mut core::ffi::c_void,
        ns: *const core::ffi::c_void,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_create_empty_dir(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn __kernfs_create_file(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        mode: umode_t,
        uid: kuid_t,
        gid: kgid_t,
        size: loff_t,
        ops: *const kernfs_ops,
        priv_: *mut core::ffi::c_void,
        ns: *const core::ffi::c_void,
        key: *mut lock_class_key,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_create_link(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        target: *mut kernfs_node,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_activate(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_show(kn: *mut kernfs_node, show: bool_);
}
extern "C" {
    pub fn kernfs_remove(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_break_active_protection(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_unbreak_active_protection(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_remove_self(kn: *mut kernfs_node) -> bool_;
}
extern "C" {
    pub fn kernfs_remove_by_name_ns(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_rename_ns(
        kn: *mut kernfs_node,
        new_parent: *mut kernfs_node,
        new_name: *const core::ffi::c_char,
        new_ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_setattr(kn: *mut kernfs_node, iattr: *const iattr) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_generic_poll(of: *mut kernfs_open_file, pt: *mut poll_table_struct) -> __poll_t;
}
extern "C" {
    pub fn kernfs_notify(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_xattr_get(
        kn: *mut kernfs_node,
        name: *const core::ffi::c_char,
        value: *mut core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_xattr_set(
        kn: *mut kernfs_node,
        name: *const core::ffi::c_char,
        value: *const core::ffi::c_void,
        size: usize,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_super_ns(sb: *mut super_block) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn kernfs_get_tree(fc: *mut fs_context) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_free_fs_context(fc: *mut fs_context);
}
extern "C" {
    pub fn kernfs_kill_sb(sb: *mut super_block);
}
extern "C" {
    pub fn kernfs_init();
}
extern "C" {
    pub fn kernfs_find_and_get_node_by_id(root: *mut kernfs_root, id: u64_) -> *mut kernfs_node;
}
pub const kobj_ns_type_KOBJ_NS_TYPE_NONE: kobj_ns_type = 0;
pub const kobj_ns_type_KOBJ_NS_TYPE_NET: kobj_ns_type = 1;
pub const kobj_ns_type_KOBJ_NS_TYPES: kobj_ns_type = 2;
pub type kobj_ns_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobj_ns_type_operations {
    pub type_: kobj_ns_type,
    pub current_may_mount: ::core::option::Option<unsafe extern "C" fn() -> bool_>,
    pub grab_current_ns: ::core::option::Option<unsafe extern "C" fn() -> *mut core::ffi::c_void>,
    pub netlink_ns:
        ::core::option::Option<unsafe extern "C" fn(sk: *mut sock) -> *const core::ffi::c_void>,
    pub initial_ns: ::core::option::Option<unsafe extern "C" fn() -> *const core::ffi::c_void>,
    pub drop_ns: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
}
impl Default for kobj_ns_type_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kobj_ns_type_register(ops: *const kobj_ns_type_operations) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobj_ns_type_registered(type_: kobj_ns_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobj_child_ns_ops(parent: *const kobject) -> *const kobj_ns_type_operations;
}
extern "C" {
    pub fn kobj_ns_ops(kobj: *const kobject) -> *const kobj_ns_type_operations;
}
extern "C" {
    pub fn kobj_ns_current_may_mount(type_: kobj_ns_type) -> bool_;
}
extern "C" {
    pub fn kobj_ns_grab_current(type_: kobj_ns_type) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kobj_ns_netlink(type_: kobj_ns_type, sk: *mut sock) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn kobj_ns_initial(type_: kobj_ns_type) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn kobj_ns_drop(type_: kobj_ns_type, ns: *mut core::ffi::c_void);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attribute {
    pub name: *const core::ffi::c_char,
    pub mode: umode_t,
}
impl Default for attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attribute_group {
    pub name: *const core::ffi::c_char,
    pub is_visible: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: core::ffi::c_int,
        ) -> umode_t,
    >,
    pub is_bin_visible: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut bin_attribute,
            arg3: core::ffi::c_int,
        ) -> umode_t,
    >,
    pub attrs: *mut *mut attribute,
    pub bin_attrs: *mut *mut bin_attribute,
}
impl Default for attribute_group {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bin_attribute {
    pub attr: attribute,
    pub size: usize,
    pub private: *mut core::ffi::c_void,
    pub f_mapping: ::core::option::Option<unsafe extern "C" fn() -> *mut address_space>,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: *mut core::ffi::c_char,
            arg5: loff_t,
            arg6: usize,
        ) -> isize,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: *mut core::ffi::c_char,
            arg5: loff_t,
            arg6: usize,
        ) -> isize,
    >,
    pub llseek: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: loff_t,
            arg5: core::ffi::c_int,
        ) -> loff_t,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            attr: *mut bin_attribute,
            vma: *mut vm_area_struct,
        ) -> core::ffi::c_int,
    >,
}
impl Default for bin_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sysfs_ops {
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: *const core::ffi::c_char,
            arg4: usize,
        ) -> isize,
    >,
}
extern "C" {
    pub fn sysfs_create_dir_ns(
        kobj: *mut kobject,
        ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_dir(kobj: *mut kobject);
}
extern "C" {
    pub fn sysfs_rename_dir_ns(
        kobj: *mut kobject,
        new_name: *const core::ffi::c_char,
        new_ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_move_dir_ns(
        kobj: *mut kobject,
        new_parent_kobj: *mut kobject,
        new_ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_create_mount_point(
        parent_kobj: *mut kobject,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_mount_point(parent_kobj: *mut kobject, name: *const core::ffi::c_char);
}
extern "C" {
    pub fn sysfs_create_file_ns(
        kobj: *mut kobject,
        attr: *const attribute,
        ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_create_files(
        kobj: *mut kobject,
        attr: *const *const attribute,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_chmod_file(
        kobj: *mut kobject,
        attr: *const attribute,
        mode: umode_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_break_active_protection(
        kobj: *mut kobject,
        attr: *const attribute,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn sysfs_unbreak_active_protection(kn: *mut kernfs_node);
}
extern "C" {
    pub fn sysfs_remove_file_ns(
        kobj: *mut kobject,
        attr: *const attribute,
        ns: *const core::ffi::c_void,
    );
}
extern "C" {
    pub fn sysfs_remove_file_self(kobj: *mut kobject, attr: *const attribute) -> bool_;
}
extern "C" {
    pub fn sysfs_remove_files(kobj: *mut kobject, attr: *const *const attribute);
}
extern "C" {
    pub fn sysfs_create_bin_file(
        kobj: *mut kobject,
        attr: *const bin_attribute,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_bin_file(kobj: *mut kobject, attr: *const bin_attribute);
}
extern "C" {
    pub fn sysfs_create_link(
        kobj: *mut kobject,
        target: *mut kobject,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_create_link_nowarn(
        kobj: *mut kobject,
        target: *mut kobject,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_link(kobj: *mut kobject, name: *const core::ffi::c_char);
}
extern "C" {
    pub fn sysfs_rename_link_ns(
        kobj: *mut kobject,
        target: *mut kobject,
        old_name: *const core::ffi::c_char,
        new_name: *const core::ffi::c_char,
        new_ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_delete_link(dir: *mut kobject, targ: *mut kobject, name: *const core::ffi::c_char);
}
extern "C" {
    pub fn sysfs_create_group(kobj: *mut kobject, grp: *const attribute_group) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_create_groups(
        kobj: *mut kobject,
        groups: *mut *const attribute_group,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_update_groups(
        kobj: *mut kobject,
        groups: *mut *const attribute_group,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_update_group(kobj: *mut kobject, grp: *const attribute_group) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_group(kobj: *mut kobject, grp: *const attribute_group);
}
extern "C" {
    pub fn sysfs_remove_groups(kobj: *mut kobject, groups: *mut *const attribute_group);
}
extern "C" {
    pub fn sysfs_add_file_to_group(
        kobj: *mut kobject,
        attr: *const attribute,
        group: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_file_from_group(
        kobj: *mut kobject,
        attr: *const attribute,
        group: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn sysfs_merge_group(kobj: *mut kobject, grp: *const attribute_group) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_unmerge_group(kobj: *mut kobject, grp: *const attribute_group);
}
extern "C" {
    pub fn sysfs_add_link_to_group(
        kobj: *mut kobject,
        group_name: *const core::ffi::c_char,
        target: *mut kobject,
        link_name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_link_from_group(
        kobj: *mut kobject,
        group_name: *const core::ffi::c_char,
        link_name: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn compat_only_sysfs_link_entry_to_kobj(
        kobj: *mut kobject,
        target_kobj: *mut kobject,
        target_name: *const core::ffi::c_char,
        symlink_name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_notify(
        kobj: *mut kobject,
        dir: *const core::ffi::c_char,
        attr: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn sysfs_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_file_change_owner(
        kobj: *mut kobject,
        name: *const core::ffi::c_char,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_change_owner(kobj: *mut kobject, kuid: kuid_t, kgid: kgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_link_change_owner(
        kobj: *mut kobject,
        targ: *mut kobject,
        name: *const core::ffi::c_char,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_groups_change_owner(
        kobj: *mut kobject,
        groups: *mut *const attribute_group,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_group_change_owner(
        kobj: *mut kobject,
        groups: *const attribute_group,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_emit(
        buf: *mut core::ffi::c_char,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_emit_at(
        buf: *mut core::ffi::c_char,
        at: core::ffi::c_int,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_bin_attr_simple_read(
        file: *mut file,
        kobj: *mut kobject,
        attr: *mut bin_attribute,
        buf: *mut core::ffi::c_char,
        off: loff_t,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub static mut uevent_seqnum: atomic64_t;
}
pub const kobject_action_KOBJ_ADD: kobject_action = 0;
pub const kobject_action_KOBJ_REMOVE: kobject_action = 1;
pub const kobject_action_KOBJ_CHANGE: kobject_action = 2;
pub const kobject_action_KOBJ_MOVE: kobject_action = 3;
pub const kobject_action_KOBJ_ONLINE: kobject_action = 4;
pub const kobject_action_KOBJ_OFFLINE: kobject_action = 5;
pub const kobject_action_KOBJ_BIND: kobject_action = 6;
pub const kobject_action_KOBJ_UNBIND: kobject_action = 7;
pub type kobject_action = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobject {
    pub name: *const core::ffi::c_char,
    pub entry: list_head,
    pub parent: *mut kobject,
    pub kset: *mut kset,
    pub ktype: *const kobj_type,
    pub sd: *mut kernfs_node,
    pub kref: kref,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl Default for kobject {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl kobject {
    #[inline]
    pub fn state_initialized(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_initialized(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_in_sysfs(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_in_sysfs(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_add_uevent_sent(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_add_uevent_sent(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_remove_uevent_sent(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_remove_uevent_sent(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uevent_suppress(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uevent_suppress(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        state_initialized: core::ffi::c_uint,
        state_in_sysfs: core::ffi::c_uint,
        state_add_uevent_sent: core::ffi::c_uint,
        state_remove_uevent_sent: core::ffi::c_uint,
        uevent_suppress: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let state_initialized: u32 = unsafe { ::core::mem::transmute(state_initialized) };
            state_initialized as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let state_in_sysfs: u32 = unsafe { ::core::mem::transmute(state_in_sysfs) };
            state_in_sysfs as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let state_add_uevent_sent: u32 =
                unsafe { ::core::mem::transmute(state_add_uevent_sent) };
            state_add_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let state_remove_uevent_sent: u32 =
                unsafe { ::core::mem::transmute(state_remove_uevent_sent) };
            state_remove_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let uevent_suppress: u32 = unsafe { ::core::mem::transmute(uevent_suppress) };
            uevent_suppress as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn kobject_set_name(
        kobj: *mut kobject,
        name: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_set_name_vargs(
        kobj: *mut kobject,
        fmt: *const core::ffi::c_char,
        vargs: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_init(kobj: *mut kobject, ktype: *const kobj_type);
}
extern "C" {
    pub fn kobject_add(
        kobj: *mut kobject,
        parent: *mut kobject,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_init_and_add(
        kobj: *mut kobject,
        ktype: *const kobj_type,
        parent: *mut kobject,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_del(kobj: *mut kobject);
}
extern "C" {
    pub fn kobject_create_and_add(
        name: *const core::ffi::c_char,
        parent: *mut kobject,
    ) -> *mut kobject;
}
extern "C" {
    pub fn kobject_rename(
        arg1: *mut kobject,
        new_name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_move(arg1: *mut kobject, arg2: *mut kobject) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_get(kobj: *mut kobject) -> *mut kobject;
}
extern "C" {
    pub fn kobject_get_unless_zero(kobj: *mut kobject) -> *mut kobject;
}
extern "C" {
    pub fn kobject_put(kobj: *mut kobject);
}
extern "C" {
    pub fn kobject_namespace(kobj: *const kobject) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn kobject_get_ownership(kobj: *const kobject, uid: *mut kuid_t, gid: *mut kgid_t);
}
extern "C" {
    pub fn kobject_get_path(kobj: *const kobject, flag: gfp_t) -> *mut core::ffi::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobj_type {
    pub release: ::core::option::Option<unsafe extern "C" fn(kobj: *mut kobject)>,
    pub sysfs_ops: *const sysfs_ops,
    pub default_groups: *mut *const attribute_group,
    pub child_ns_type: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject) -> *const kobj_ns_type_operations,
    >,
    pub namespace: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject) -> *const core::ffi::c_void,
    >,
    pub get_ownership: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject, uid: *mut kuid_t, gid: *mut kgid_t),
    >,
}
impl Default for kobj_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobj_uevent_env {
    pub argv: [*mut core::ffi::c_char; 3usize],
    pub envp: [*mut core::ffi::c_char; 64usize],
    pub envp_idx: core::ffi::c_int,
    pub buf: [core::ffi::c_char; 2048usize],
    pub buflen: core::ffi::c_int,
}
impl Default for kobj_uevent_env {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kset_uevent_ops {
    pub filter:
        ::core::option::Option<unsafe extern "C" fn(kobj: *const kobject) -> core::ffi::c_int>,
    pub name: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject) -> *const core::ffi::c_char,
    >,
    pub uevent: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject, env: *mut kobj_uevent_env) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobj_attribute {
    pub attr: attribute,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            kobj: *mut kobject,
            attr: *mut kobj_attribute,
            buf: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            kobj: *mut kobject,
            attr: *mut kobj_attribute,
            buf: *const core::ffi::c_char,
            count: usize,
        ) -> isize,
    >,
}
impl Default for kobj_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static kobj_sysfs_ops: sysfs_ops;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kset {
    pub list: list_head,
    pub list_lock: spinlock_t,
    pub kobj: kobject,
    pub uevent_ops: *const kset_uevent_ops,
}
impl Default for kset {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kset_init(kset: *mut kset);
}
extern "C" {
    pub fn kset_register(kset: *mut kset) -> core::ffi::c_int;
}
extern "C" {
    pub fn kset_unregister(kset: *mut kset);
}
extern "C" {
    pub fn kset_create_and_add(
        name: *const core::ffi::c_char,
        u: *const kset_uevent_ops,
        parent_kobj: *mut kobject,
    ) -> *mut kset;
}
extern "C" {
    pub fn kset_find_obj(arg1: *mut kset, arg2: *const core::ffi::c_char) -> *mut kobject;
}
extern "C" {
    pub static mut kernel_kobj: *mut kobject;
}
extern "C" {
    pub static mut mm_kobj: *mut kobject;
}
extern "C" {
    pub static mut hypervisor_kobj: *mut kobject;
}
extern "C" {
    pub static mut power_kobj: *mut kobject;
}
extern "C" {
    pub static mut firmware_kobj: *mut kobject;
}
extern "C" {
    pub fn kobject_uevent(kobj: *mut kobject, action: kobject_action) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_uevent_env(
        kobj: *mut kobject,
        action: kobject_action,
        envp: *mut *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_synth_uevent(
        kobj: *mut kobject,
        buf: *const core::ffi::c_char,
        count: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn add_uevent_var(
        env: *mut kobj_uevent_env,
        format: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_huge_pmd_anonymous_page(vmf: *mut vm_fault) -> vm_fault_t;
}
extern "C" {
    pub fn copy_huge_pmd(
        dst_mm: *mut mm_struct,
        src_mm: *mut mm_struct,
        dst_pmd: *mut pmd_t,
        src_pmd: *mut pmd_t,
        addr: core::ffi::c_ulong,
        dst_vma: *mut vm_area_struct,
        src_vma: *mut vm_area_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn huge_pmd_set_accessed(vmf: *mut vm_fault);
}
extern "C" {
    pub fn copy_huge_pud(
        dst_mm: *mut mm_struct,
        src_mm: *mut mm_struct,
        dst_pud: *mut pud_t,
        src_pud: *mut pud_t,
        addr: core::ffi::c_ulong,
        vma: *mut vm_area_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn huge_pud_set_accessed(vmf: *mut vm_fault, orig_pud: pud_t);
}
extern "C" {
    pub fn do_huge_pmd_wp_page(vmf: *mut vm_fault) -> vm_fault_t;
}
extern "C" {
    pub fn madvise_free_huge_pmd(
        tlb: *mut mmu_gather,
        vma: *mut vm_area_struct,
        pmd: *mut pmd_t,
        addr: core::ffi::c_ulong,
        next: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn zap_huge_pmd(
        tlb: *mut mmu_gather,
        vma: *mut vm_area_struct,
        pmd: *mut pmd_t,
        addr: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn zap_huge_pud(
        tlb: *mut mmu_gather,
        vma: *mut vm_area_struct,
        pud: *mut pud_t,
        addr: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn move_huge_pmd(
        vma: *mut vm_area_struct,
        old_addr: core::ffi::c_ulong,
        new_addr: core::ffi::c_ulong,
        old_pmd: *mut pmd_t,
        new_pmd: *mut pmd_t,
    ) -> bool_;
}
extern "C" {
    pub fn change_huge_pmd(
        tlb: *mut mmu_gather,
        vma: *mut vm_area_struct,
        pmd: *mut pmd_t,
        addr: core::ffi::c_ulong,
        newprot: pgprot_t,
        cp_flags: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vmf_insert_pfn_pmd(vmf: *mut vm_fault, pfn: pfn_t, write: bool_) -> vm_fault_t;
}
extern "C" {
    pub fn vmf_insert_pfn_pud(vmf: *mut vm_fault, pfn: pfn_t, write: bool_) -> vm_fault_t;
}
pub const transparent_hugepage_flag_TRANSPARENT_HUGEPAGE_UNSUPPORTED: transparent_hugepage_flag = 0;
pub const transparent_hugepage_flag_TRANSPARENT_HUGEPAGE_FLAG: transparent_hugepage_flag = 1;
pub const transparent_hugepage_flag_TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG: transparent_hugepage_flag =
    2;
pub const transparent_hugepage_flag_TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG:
    transparent_hugepage_flag = 3;
pub const transparent_hugepage_flag_TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG:
    transparent_hugepage_flag = 4;
pub const transparent_hugepage_flag_TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG:
    transparent_hugepage_flag = 5;
pub const transparent_hugepage_flag_TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG:
    transparent_hugepage_flag = 6;
pub const transparent_hugepage_flag_TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG:
    transparent_hugepage_flag = 7;
pub const transparent_hugepage_flag_TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG:
    transparent_hugepage_flag = 8;
pub type transparent_hugepage_flag = core::ffi::c_uint;
extern "C" {
    pub fn single_hugepage_flag_store(
        kobj: *mut kobject,
        attr: *mut kobj_attribute,
        buf: *const core::ffi::c_char,
        count: usize,
        flag: transparent_hugepage_flag,
    ) -> isize;
}
extern "C" {
    pub fn single_hugepage_flag_show(
        kobj: *mut kobject,
        attr: *mut kobj_attribute,
        buf: *mut core::ffi::c_char,
        flag: transparent_hugepage_flag,
    ) -> isize;
}
extern "C" {
    pub static mut shmem_enabled_attr: kobj_attribute;
}
extern "C" {
    pub static mut thpsize_shmem_enabled_attr: kobj_attribute;
}
extern "C" {
    pub fn page_is_ram(pfn: core::ffi::c_ulong) -> core::ffi::c_int;
}
pub const REGION_INTERSECTS: _bindgen_ty_92 = 0;
pub const REGION_DISJOINT: _bindgen_ty_92 = 1;
pub const REGION_MIXED: _bindgen_ty_92 = 2;
pub type _bindgen_ty_92 = core::ffi::c_uint;
extern "C" {
    pub fn region_intersects(
        offset: resource_size_t,
        size: usize,
        flags: core::ffi::c_ulong,
        desc: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vmalloc_to_page(addr: *const core::ffi::c_void) -> *mut page;
}
extern "C" {
    pub fn vmalloc_to_pfn(addr: *const core::ffi::c_void) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn is_vmalloc_addr(x: *const core::ffi::c_void) -> bool_;
}
extern "C" {
    pub fn is_vmalloc_or_module_addr(x: *const core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn __folio_put(folio: *mut folio);
}
extern "C" {
    pub fn put_pages_list(pages: *mut list_head);
}
extern "C" {
    pub fn split_page(page: *mut page, order: core::ffi::c_uint);
}
extern "C" {
    pub fn folio_copy(dst: *mut folio, src: *mut folio);
}
extern "C" {
    pub fn folio_mc_copy(dst: *mut folio, src: *mut folio) -> core::ffi::c_int;
}
extern "C" {
    pub fn nr_free_buffer_pages() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn do_set_pmd(vmf: *mut vm_fault, page: *mut page) -> vm_fault_t;
}
extern "C" {
    pub fn set_pte_range(
        vmf: *mut vm_fault,
        folio: *mut folio,
        page: *mut page,
        nr: core::ffi::c_uint,
        addr: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn finish_fault(vmf: *mut vm_fault) -> vm_fault_t;
}
extern "C" {
    pub fn folios_put_refs(folios: *mut folio_batch, refs: *mut core::ffi::c_uint);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union release_pages_arg {
    pub pages: *mut *mut page,
    pub folios: *mut *mut folio,
    pub encoded_pages: *mut *mut encoded_page,
}
impl Default for release_pages_arg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn release_pages(arg1: release_pages_arg, nr: core::ffi::c_int);
}
extern "C" {
    pub fn unpin_user_page(page: *mut page);
}
extern "C" {
    pub fn unpin_folio(folio: *mut folio);
}
extern "C" {
    pub fn unpin_user_pages_dirty_lock(
        pages: *mut *mut page,
        npages: core::ffi::c_ulong,
        make_dirty: bool_,
    );
}
extern "C" {
    pub fn unpin_user_page_range_dirty_lock(
        page: *mut page,
        npages: core::ffi::c_ulong,
        make_dirty: bool_,
    );
}
extern "C" {
    pub fn unpin_user_pages(pages: *mut *mut page, npages: core::ffi::c_ulong);
}
extern "C" {
    pub fn unpin_folios(folios: *mut *mut folio, nfolios: core::ffi::c_ulong);
}
pub const vm_event_item_PGPGIN: vm_event_item = 0;
pub const vm_event_item_PGPGOUT: vm_event_item = 1;
pub const vm_event_item_PSWPIN: vm_event_item = 2;
pub const vm_event_item_PSWPOUT: vm_event_item = 3;
pub const vm_event_item_PGALLOC_DMA: vm_event_item = 4;
pub const vm_event_item_PGALLOC_DMA32: vm_event_item = 5;
pub const vm_event_item_PGALLOC_NORMAL: vm_event_item = 6;
pub const vm_event_item_PGALLOC_MOVABLE: vm_event_item = 7;
pub const vm_event_item_ALLOCSTALL_DMA: vm_event_item = 8;
pub const vm_event_item_ALLOCSTALL_DMA32: vm_event_item = 9;
pub const vm_event_item_ALLOCSTALL_NORMAL: vm_event_item = 10;
pub const vm_event_item_ALLOCSTALL_MOVABLE: vm_event_item = 11;
pub const vm_event_item_PGSCAN_SKIP_DMA: vm_event_item = 12;
pub const vm_event_item_PGSCAN_SKIP_DMA32: vm_event_item = 13;
pub const vm_event_item_PGSCAN_SKIP_NORMAL: vm_event_item = 14;
pub const vm_event_item_PGSCAN_SKIP_MOVABLE: vm_event_item = 15;
pub const vm_event_item_PGFREE: vm_event_item = 16;
pub const vm_event_item_PGACTIVATE: vm_event_item = 17;
pub const vm_event_item_PGDEACTIVATE: vm_event_item = 18;
pub const vm_event_item_PGLAZYFREE: vm_event_item = 19;
pub const vm_event_item_PGFAULT: vm_event_item = 20;
pub const vm_event_item_PGMAJFAULT: vm_event_item = 21;
pub const vm_event_item_PGLAZYFREED: vm_event_item = 22;
pub const vm_event_item_PGREFILL: vm_event_item = 23;
pub const vm_event_item_PGREUSE: vm_event_item = 24;
pub const vm_event_item_PGSTEAL_KSWAPD: vm_event_item = 25;
pub const vm_event_item_PGSTEAL_DIRECT: vm_event_item = 26;
pub const vm_event_item_PGSTEAL_KHUGEPAGED: vm_event_item = 27;
pub const vm_event_item_PGSCAN_KSWAPD: vm_event_item = 28;
pub const vm_event_item_PGSCAN_DIRECT: vm_event_item = 29;
pub const vm_event_item_PGSCAN_KHUGEPAGED: vm_event_item = 30;
pub const vm_event_item_PGSCAN_DIRECT_THROTTLE: vm_event_item = 31;
pub const vm_event_item_PGSCAN_ANON: vm_event_item = 32;
pub const vm_event_item_PGSCAN_FILE: vm_event_item = 33;
pub const vm_event_item_PGSTEAL_ANON: vm_event_item = 34;
pub const vm_event_item_PGSTEAL_FILE: vm_event_item = 35;
pub const vm_event_item_PGSCAN_ZONE_RECLAIM_FAILED: vm_event_item = 36;
pub const vm_event_item_PGINODESTEAL: vm_event_item = 37;
pub const vm_event_item_SLABS_SCANNED: vm_event_item = 38;
pub const vm_event_item_KSWAPD_INODESTEAL: vm_event_item = 39;
pub const vm_event_item_KSWAPD_LOW_WMARK_HIT_QUICKLY: vm_event_item = 40;
pub const vm_event_item_KSWAPD_HIGH_WMARK_HIT_QUICKLY: vm_event_item = 41;
pub const vm_event_item_PAGEOUTRUN: vm_event_item = 42;
pub const vm_event_item_PGROTATED: vm_event_item = 43;
pub const vm_event_item_DROP_PAGECACHE: vm_event_item = 44;
pub const vm_event_item_DROP_SLAB: vm_event_item = 45;
pub const vm_event_item_OOM_KILL: vm_event_item = 46;
pub const vm_event_item_PGMIGRATE_SUCCESS: vm_event_item = 47;
pub const vm_event_item_PGMIGRATE_FAIL: vm_event_item = 48;
pub const vm_event_item_THP_MIGRATION_SUCCESS: vm_event_item = 49;
pub const vm_event_item_THP_MIGRATION_FAIL: vm_event_item = 50;
pub const vm_event_item_THP_MIGRATION_SPLIT: vm_event_item = 51;
pub const vm_event_item_COMPACTMIGRATE_SCANNED: vm_event_item = 52;
pub const vm_event_item_COMPACTFREE_SCANNED: vm_event_item = 53;
pub const vm_event_item_COMPACTISOLATED: vm_event_item = 54;
pub const vm_event_item_COMPACTSTALL: vm_event_item = 55;
pub const vm_event_item_COMPACTFAIL: vm_event_item = 56;
pub const vm_event_item_COMPACTSUCCESS: vm_event_item = 57;
pub const vm_event_item_KCOMPACTD_WAKE: vm_event_item = 58;
pub const vm_event_item_KCOMPACTD_MIGRATE_SCANNED: vm_event_item = 59;
pub const vm_event_item_KCOMPACTD_FREE_SCANNED: vm_event_item = 60;
pub const vm_event_item_HTLB_BUDDY_PGALLOC: vm_event_item = 61;
pub const vm_event_item_HTLB_BUDDY_PGALLOC_FAIL: vm_event_item = 62;
pub const vm_event_item_UNEVICTABLE_PGCULLED: vm_event_item = 63;
pub const vm_event_item_UNEVICTABLE_PGSCANNED: vm_event_item = 64;
pub const vm_event_item_UNEVICTABLE_PGRESCUED: vm_event_item = 65;
pub const vm_event_item_UNEVICTABLE_PGMLOCKED: vm_event_item = 66;
pub const vm_event_item_UNEVICTABLE_PGMUNLOCKED: vm_event_item = 67;
pub const vm_event_item_UNEVICTABLE_PGCLEARED: vm_event_item = 68;
pub const vm_event_item_UNEVICTABLE_PGSTRANDED: vm_event_item = 69;
pub const vm_event_item_SWAP_RA: vm_event_item = 70;
pub const vm_event_item_SWAP_RA_HIT: vm_event_item = 71;
pub const vm_event_item_DIRECT_MAP_LEVEL2_SPLIT: vm_event_item = 72;
pub const vm_event_item_DIRECT_MAP_LEVEL3_SPLIT: vm_event_item = 73;
pub const vm_event_item_NR_VM_EVENT_ITEMS: vm_event_item = 74;
pub type vm_event_item = core::ffi::c_uint;
extern "C" {
    pub static mut sysctl_stat_interval: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_vm_numa_stat: core::ffi::c_int;
}
extern "C" {
    pub static mut vm_numa_stat_key: static_key_true;
}
extern "C" {
    pub fn sysctl_vm_numa_stat_handler(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        length: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct reclaim_stat {
    pub nr_dirty: core::ffi::c_uint,
    pub nr_unqueued_dirty: core::ffi::c_uint,
    pub nr_congested: core::ffi::c_uint,
    pub nr_writeback: core::ffi::c_uint,
    pub nr_immediate: core::ffi::c_uint,
    pub nr_pageout: core::ffi::c_uint,
    pub nr_activate: [core::ffi::c_uint; 2usize],
    pub nr_ref_keep: core::ffi::c_uint,
    pub nr_unmap_fail: core::ffi::c_uint,
    pub nr_lazyfree_fail: core::ffi::c_uint,
}
pub const writeback_stat_item_NR_DIRTY_THRESHOLD: writeback_stat_item = 0;
pub const writeback_stat_item_NR_DIRTY_BG_THRESHOLD: writeback_stat_item = 1;
pub const writeback_stat_item_NR_VM_WRITEBACK_STAT_ITEMS: writeback_stat_item = 2;
pub type writeback_stat_item = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_event_state {
    pub event: [core::ffi::c_ulong; 74usize],
}
impl Default for vm_event_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut vm_event_states: vm_event_state;
}
extern "C" {
    pub fn all_vm_events(arg1: *mut core::ffi::c_ulong);
}
extern "C" {
    pub fn vm_events_fold_cpu(cpu: core::ffi::c_int);
}
extern "C" {
    pub static mut vm_zone_stat: [atomic_long_t; 10usize];
}
extern "C" {
    pub static mut vm_node_stat: [atomic_long_t; 47usize];
}
extern "C" {
    pub static mut vm_numa_event: [atomic_long_t; 6usize];
}
extern "C" {
    pub fn sum_zone_node_page_state(
        node: core::ffi::c_int,
        item: zone_stat_item,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn sum_zone_numa_event_state(
        node: core::ffi::c_int,
        item: numa_stat_item,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn node_page_state(pgdat: *mut pglist_data, item: node_stat_item) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn node_page_state_pages(
        pgdat: *mut pglist_data,
        item: node_stat_item,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn fold_vm_numa_events();
}
extern "C" {
    pub fn __mod_zone_page_state(arg1: *mut zone, item: zone_stat_item, arg2: core::ffi::c_long);
}
extern "C" {
    pub fn __inc_zone_page_state(arg1: *mut page, arg2: zone_stat_item);
}
extern "C" {
    pub fn __dec_zone_page_state(arg1: *mut page, arg2: zone_stat_item);
}
extern "C" {
    pub fn __mod_node_page_state(
        arg1: *mut pglist_data,
        item: node_stat_item,
        arg2: core::ffi::c_long,
    );
}
extern "C" {
    pub fn __inc_node_page_state(arg1: *mut page, arg2: node_stat_item);
}
extern "C" {
    pub fn __dec_node_page_state(arg1: *mut page, arg2: node_stat_item);
}
extern "C" {
    pub fn mod_zone_page_state(arg1: *mut zone, arg2: zone_stat_item, arg3: core::ffi::c_long);
}
extern "C" {
    pub fn inc_zone_page_state(arg1: *mut page, arg2: zone_stat_item);
}
extern "C" {
    pub fn dec_zone_page_state(arg1: *mut page, arg2: zone_stat_item);
}
extern "C" {
    pub fn mod_node_page_state(
        arg1: *mut pglist_data,
        arg2: node_stat_item,
        arg3: core::ffi::c_long,
    );
}
extern "C" {
    pub fn inc_node_page_state(arg1: *mut page, arg2: node_stat_item);
}
extern "C" {
    pub fn dec_node_page_state(arg1: *mut page, arg2: node_stat_item);
}
extern "C" {
    pub fn inc_node_state(arg1: *mut pglist_data, arg2: node_stat_item);
}
extern "C" {
    pub fn __inc_zone_state(arg1: *mut zone, arg2: zone_stat_item);
}
extern "C" {
    pub fn __inc_node_state(arg1: *mut pglist_data, arg2: node_stat_item);
}
extern "C" {
    pub fn dec_zone_state(arg1: *mut zone, arg2: zone_stat_item);
}
extern "C" {
    pub fn __dec_zone_state(arg1: *mut zone, arg2: zone_stat_item);
}
extern "C" {
    pub fn __dec_node_state(arg1: *mut pglist_data, arg2: node_stat_item);
}
extern "C" {
    pub fn quiet_vmstat();
}
extern "C" {
    pub fn cpu_vm_stats_fold(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn refresh_zone_stat_thresholds();
}
extern "C" {
    pub fn vmstat_refresh(
        arg1: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn drain_zonestat(zone: *mut zone, arg1: *mut per_cpu_zonestat);
}
extern "C" {
    pub fn calculate_pressure_threshold(zone: *mut zone) -> core::ffi::c_int;
}
extern "C" {
    pub fn calculate_normal_threshold(zone: *mut zone) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_pgdat_percpu_threshold(
        pgdat: *mut pg_data_t,
        calculate_pressure: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut zone) -> core::ffi::c_int,
        >,
    );
}
extern "C" {
    pub static vmstat_text: [*const core::ffi::c_char; 0usize];
}
extern "C" {
    pub fn mod_node_early_perpage_metadata(nid: core::ffi::c_int, delta: core::ffi::c_long);
}
extern "C" {
    pub fn store_early_perpage_metadata();
}
extern "C" {
    pub fn pagefault_out_of_memory();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zap_details {
    pub single_folio: *mut folio,
    pub even_cows: bool_,
    pub zap_flags: zap_flags_t,
}
impl Default for zap_details {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn sched_mm_cid_before_execve(t: *mut task_struct);
}
extern "C" {
    pub fn sched_mm_cid_after_execve(t: *mut task_struct);
}
extern "C" {
    pub fn sched_mm_cid_fork(t: *mut task_struct);
}
extern "C" {
    pub fn sched_mm_cid_exit_signals(t: *mut task_struct);
}
extern "C" {
    pub fn can_do_mlock() -> bool_;
}
extern "C" {
    pub fn user_shm_lock(arg1: usize, arg2: *mut ucounts) -> core::ffi::c_int;
}
extern "C" {
    pub fn user_shm_unlock(arg1: usize, arg2: *mut ucounts);
}
extern "C" {
    pub fn vm_normal_folio(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pte: pte_t,
    ) -> *mut folio;
}
extern "C" {
    pub fn vm_normal_page(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pte: pte_t,
    ) -> *mut page;
}
extern "C" {
    pub fn vm_normal_folio_pmd(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pmd: pmd_t,
    ) -> *mut folio;
}
extern "C" {
    pub fn vm_normal_page_pmd(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pmd: pmd_t,
    ) -> *mut page;
}
extern "C" {
    pub fn zap_vma_ptes(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn zap_page_range_single(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        details: *mut zap_details,
    );
}
extern "C" {
    pub fn unmap_vmas(
        tlb: *mut mmu_gather,
        mas: *mut ma_state,
        start_vma: *mut vm_area_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        tree_end: core::ffi::c_ulong,
        mm_wr_locked: bool_,
    );
}
extern "C" {
    pub fn free_pgd_range(
        tlb: *mut mmu_gather,
        addr: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        floor: core::ffi::c_ulong,
        ceiling: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn copy_page_range(
        dst_vma: *mut vm_area_struct,
        src_vma: *mut vm_area_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn follow_pte(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        ptepp: *mut *mut pte_t,
        ptlp: *mut *mut spinlock_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_access_phys(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        buf: *mut core::ffi::c_void,
        len: core::ffi::c_int,
        write: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn truncate_pagecache(inode: *mut inode, new: loff_t);
}
extern "C" {
    pub fn truncate_setsize(inode: *mut inode, newsize: loff_t);
}
extern "C" {
    pub fn pagecache_isize_extended(inode: *mut inode, from: loff_t, to: loff_t);
}
extern "C" {
    pub fn truncate_pagecache_range(inode: *mut inode, offset: loff_t, end: loff_t);
}
extern "C" {
    pub fn generic_error_remove_folio(
        mapping: *mut address_space,
        folio: *mut folio,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn lock_mm_and_find_vma(
        mm: *mut mm_struct,
        address: core::ffi::c_ulong,
        regs: *mut pt_regs,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub fn handle_mm_fault(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        flags: core::ffi::c_uint,
        regs: *mut pt_regs,
    ) -> vm_fault_t;
}
extern "C" {
    pub fn fixup_user_fault(
        mm: *mut mm_struct,
        address: core::ffi::c_ulong,
        fault_flags: core::ffi::c_uint,
        unlocked: *mut bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn unmap_mapping_pages(
        mapping: *mut address_space,
        start: core::ffi::c_ulong,
        nr: core::ffi::c_ulong,
        even_cows: bool_,
    );
}
extern "C" {
    pub fn unmap_mapping_range(
        mapping: *mut address_space,
        holebegin: loff_t,
        holelen: loff_t,
        even_cows: core::ffi::c_int,
    );
}
extern "C" {
    pub fn access_process_vm(
        tsk: *mut task_struct,
        addr: core::ffi::c_ulong,
        buf: *mut core::ffi::c_void,
        len: core::ffi::c_int,
        gup_flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn access_remote_vm(
        mm: *mut mm_struct,
        addr: core::ffi::c_ulong,
        buf: *mut core::ffi::c_void,
        len: core::ffi::c_int,
        gup_flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_user_pages_remote(
        mm: *mut mm_struct,
        start: core::ffi::c_ulong,
        nr_pages: core::ffi::c_ulong,
        gup_flags: core::ffi::c_uint,
        pages: *mut *mut page,
        locked: *mut core::ffi::c_int,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn pin_user_pages_remote(
        mm: *mut mm_struct,
        start: core::ffi::c_ulong,
        nr_pages: core::ffi::c_ulong,
        gup_flags: core::ffi::c_uint,
        pages: *mut *mut page,
        locked: *mut core::ffi::c_int,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn get_user_pages(
        start: core::ffi::c_ulong,
        nr_pages: core::ffi::c_ulong,
        gup_flags: core::ffi::c_uint,
        pages: *mut *mut page,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn pin_user_pages(
        start: core::ffi::c_ulong,
        nr_pages: core::ffi::c_ulong,
        gup_flags: core::ffi::c_uint,
        pages: *mut *mut page,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn get_user_pages_unlocked(
        start: core::ffi::c_ulong,
        nr_pages: core::ffi::c_ulong,
        pages: *mut *mut page,
        gup_flags: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn pin_user_pages_unlocked(
        start: core::ffi::c_ulong,
        nr_pages: core::ffi::c_ulong,
        pages: *mut *mut page,
        gup_flags: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn memfd_pin_folios(
        memfd: *mut file,
        start: loff_t,
        end: loff_t,
        folios: *mut *mut folio,
        max_folios: core::ffi::c_uint,
        offset: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn get_user_pages_fast(
        start: core::ffi::c_ulong,
        nr_pages: core::ffi::c_int,
        gup_flags: core::ffi::c_uint,
        pages: *mut *mut page,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pin_user_pages_fast(
        start: core::ffi::c_ulong,
        nr_pages: core::ffi::c_int,
        gup_flags: core::ffi::c_uint,
        pages: *mut *mut page,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn folio_add_pin(folio: *mut folio);
}
extern "C" {
    pub fn account_locked_vm(
        mm: *mut mm_struct,
        pages: core::ffi::c_ulong,
        inc: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __account_locked_vm(
        mm: *mut mm_struct,
        pages: core::ffi::c_ulong,
        inc: bool_,
        task: *mut task_struct,
        bypass_rlim: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_dump_page(addr: core::ffi::c_ulong) -> *mut page;
}
extern "C" {
    pub fn folio_mark_dirty(folio: *mut folio) -> bool_;
}
extern "C" {
    pub fn set_page_dirty(page: *mut page) -> bool_;
}
extern "C" {
    pub fn set_page_dirty_lock(page: *mut page) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_cmdline(
        task: *mut task_struct,
        buffer: *mut core::ffi::c_char,
        buflen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn move_page_tables(
        vma: *mut vm_area_struct,
        old_addr: core::ffi::c_ulong,
        new_vma: *mut vm_area_struct,
        new_addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        need_rmap_locks: bool_,
        for_stack: bool_,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn vma_needs_dirty_tracking(vma: *mut vm_area_struct) -> bool_;
}
extern "C" {
    pub fn vma_wants_writenotify(vma: *mut vm_area_struct, vm_page_prot: pgprot_t) -> bool_;
}
extern "C" {
    pub fn can_change_pte_writable(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pte: pte_t,
    ) -> bool_;
}
extern "C" {
    pub fn change_protection(
        tlb: *mut mmu_gather,
        vma: *mut vm_area_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        cp_flags: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn mprotect_fixup(
        vmi: *mut vma_iterator,
        tlb: *mut mmu_gather,
        vma: *mut vm_area_struct,
        pprev: *mut *mut vm_area_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        newflags: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_user_pages_fast_only(
        start: core::ffi::c_ulong,
        nr_pages: core::ffi::c_int,
        gup_flags: core::ffi::c_uint,
        pages: *mut *mut page,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mm_trace_rss_stat(mm: *mut mm_struct, member: core::ffi::c_int);
}
extern "C" {
    pub fn __get_locked_pte(
        mm: *mut mm_struct,
        addr: core::ffi::c_ulong,
        ptl: *mut *mut spinlock_t,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn __p4d_alloc(
        mm: *mut mm_struct,
        pgd: *mut pgd_t,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __pud_alloc(
        mm: *mut mm_struct,
        p4d: *mut p4d_t,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __pmd_alloc(
        mm: *mut mm_struct,
        pud: *mut pud_t,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __pte_alloc(mm: *mut mm_struct, pmd: *mut pmd_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __pte_alloc_kernel(pmd: *mut pmd_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __pte_offset_map(
        pmd: *mut pmd_t,
        addr: core::ffi::c_ulong,
        pmdvalp: *mut pmd_t,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn __pte_offset_map_lock(
        mm: *mut mm_struct,
        pmd: *mut pmd_t,
        addr: core::ffi::c_ulong,
        ptlp: *mut *mut spinlock_t,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn pte_offset_map_nolock(
        mm: *mut mm_struct,
        pmd: *mut pmd_t,
        addr: core::ffi::c_ulong,
        ptlp: *mut *mut spinlock_t,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn pagecache_init();
}
extern "C" {
    pub fn free_initmem();
}
extern "C" {
    pub fn free_reserved_area(
        start: *mut core::ffi::c_void,
        end: *mut core::ffi::c_void,
        poison: core::ffi::c_int,
        s: *const core::ffi::c_char,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn adjust_managed_page_count(page: *mut page, count: core::ffi::c_long);
}
extern "C" {
    pub fn reserve_bootmem_region(start: phys_addr_t, end: phys_addr_t, nid: core::ffi::c_int);
}
extern "C" {
    pub fn free_reserved_page(page: *mut page);
}
extern "C" {
    pub fn free_area_init(max_zone_pfn: *mut core::ffi::c_ulong);
}
extern "C" {
    pub fn node_map_pfn_alignment() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn absent_pages_in_range(
        start_pfn: core::ffi::c_ulong,
        end_pfn: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_pfn_range_for_nid(
        nid: core::ffi::c_uint,
        start_pfn: *mut core::ffi::c_ulong,
        end_pfn: *mut core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn early_pfn_to_nid(pfn: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn mem_init();
}
extern "C" {
    pub fn mmap_init();
}
extern "C" {
    pub fn __show_mem(
        flags: core::ffi::c_uint,
        nodemask: *mut nodemask_t,
        max_zone_idx: core::ffi::c_int,
    );
}
extern "C" {
    pub fn si_mem_available() -> core::ffi::c_long;
}
extern "C" {
    pub fn si_meminfo(val: *mut sysinfo);
}
extern "C" {
    pub fn si_meminfo_node(val: *mut sysinfo, nid: core::ffi::c_int);
}
extern "C" {
    pub fn warn_alloc(
        gfp_mask: gfp_t,
        nodemask: *mut nodemask_t,
        fmt: *const core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn setup_per_cpu_pageset();
}
extern "C" {
    pub static mut mmap_pages_allocated: atomic_long_t;
}
extern "C" {
    pub fn nommu_shrink_inode_mappings(
        arg1: *mut inode,
        arg2: usize,
        arg3: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vma_interval_tree_insert(node: *mut vm_area_struct, root: *mut rb_root_cached);
}
extern "C" {
    pub fn vma_interval_tree_insert_after(
        node: *mut vm_area_struct,
        prev: *mut vm_area_struct,
        root: *mut rb_root_cached,
    );
}
extern "C" {
    pub fn vma_interval_tree_remove(node: *mut vm_area_struct, root: *mut rb_root_cached);
}
extern "C" {
    pub fn vma_interval_tree_iter_first(
        root: *mut rb_root_cached,
        start: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub fn vma_interval_tree_iter_next(
        node: *mut vm_area_struct,
        start: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub fn anon_vma_interval_tree_insert(node: *mut anon_vma_chain, root: *mut rb_root_cached);
}
extern "C" {
    pub fn anon_vma_interval_tree_remove(node: *mut anon_vma_chain, root: *mut rb_root_cached);
}
extern "C" {
    pub fn anon_vma_interval_tree_iter_first(
        root: *mut rb_root_cached,
        start: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
    ) -> *mut anon_vma_chain;
}
extern "C" {
    pub fn anon_vma_interval_tree_iter_next(
        node: *mut anon_vma_chain,
        start: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
    ) -> *mut anon_vma_chain;
}
extern "C" {
    pub fn __vm_enough_memory(
        mm: *mut mm_struct,
        pages: core::ffi::c_long,
        cap_sys_admin: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vma_expand(
        vmi: *mut vma_iterator,
        vma: *mut vm_area_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        next: *mut vm_area_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vma_shrink(
        vmi: *mut vma_iterator,
        vma: *mut vm_area_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn find_mergeable_anon_vma(arg1: *mut vm_area_struct) -> *mut anon_vma;
}
extern "C" {
    pub fn insert_vm_struct(arg1: *mut mm_struct, arg2: *mut vm_area_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn unlink_file_vma(arg1: *mut vm_area_struct);
}
extern "C" {
    pub fn copy_vma(
        arg1: *mut *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        need_rmap_locks: *mut bool_,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub fn exit_mmap(arg1: *mut mm_struct);
}
extern "C" {
    pub fn vma_modify(
        vmi: *mut vma_iterator,
        prev: *mut vm_area_struct,
        vma: *mut vm_area_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        vm_flags: core::ffi::c_ulong,
        policy: *mut mempolicy,
        uffd_ctx: vm_userfaultfd_ctx,
        anon_name: *mut anon_vma_name,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub fn mm_take_all_locks(mm: *mut mm_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn mm_drop_all_locks(mm: *mut mm_struct);
}
extern "C" {
    pub fn set_mm_exe_file(mm: *mut mm_struct, new_exe_file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn replace_mm_exe_file(mm: *mut mm_struct, new_exe_file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_mm_exe_file(mm: *mut mm_struct) -> *mut file;
}
extern "C" {
    pub fn get_task_exe_file(task: *mut task_struct) -> *mut file;
}
extern "C" {
    pub fn may_expand_vm(
        arg1: *mut mm_struct,
        arg2: vm_flags_t,
        npages: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn vm_stat_account(arg1: *mut mm_struct, arg2: vm_flags_t, npages: core::ffi::c_long);
}
extern "C" {
    pub fn vma_is_special_mapping(
        vma: *const vm_area_struct,
        sm: *const vm_special_mapping,
    ) -> bool_;
}
extern "C" {
    pub fn _install_special_mapping(
        mm: *mut mm_struct,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        spec: *const vm_special_mapping,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub fn install_special_mapping(
        mm: *mut mm_struct,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        pages: *mut *mut page,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn randomize_stack_top(stack_top: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn randomize_page(
        start: core::ffi::c_ulong,
        range: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __get_unmapped_area(
        file: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        vm_flags: vm_flags_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn mmap_region(
        file: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        vm_flags: vm_flags_t,
        pgoff: core::ffi::c_ulong,
        uf: *mut list_head,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn do_mmap(
        file: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        prot: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        vm_flags: vm_flags_t,
        pgoff: core::ffi::c_ulong,
        populate: *mut core::ffi::c_ulong,
        uf: *mut list_head,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn do_vmi_munmap(
        vmi: *mut vma_iterator,
        mm: *mut mm_struct,
        start: core::ffi::c_ulong,
        len: usize,
        uf: *mut list_head,
        unlock: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_munmap(
        arg1: *mut mm_struct,
        arg2: core::ffi::c_ulong,
        arg3: usize,
        uf: *mut list_head,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_madvise(
        mm: *mut mm_struct,
        start: core::ffi::c_ulong,
        len_in: usize,
        behavior: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_vma_munmap(
        vmi: *mut vma_iterator,
        vma: *mut vm_area_struct,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        uf: *mut list_head,
        unlock: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __mm_populate(
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        ignore_errors: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vm_brk_flags(
        arg1: core::ffi::c_ulong,
        arg2: core::ffi::c_ulong,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vm_munmap(arg1: core::ffi::c_ulong, arg2: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn vm_mmap(
        arg1: *mut file,
        arg2: core::ffi::c_ulong,
        arg3: core::ffi::c_ulong,
        arg4: core::ffi::c_ulong,
        arg5: core::ffi::c_ulong,
        arg6: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vm_unmapped_area_info {
    pub flags: core::ffi::c_ulong,
    pub length: core::ffi::c_ulong,
    pub low_limit: core::ffi::c_ulong,
    pub high_limit: core::ffi::c_ulong,
    pub align_mask: core::ffi::c_ulong,
    pub align_offset: core::ffi::c_ulong,
    pub start_gap: core::ffi::c_ulong,
}
extern "C" {
    pub fn vm_unmapped_area(info: *mut vm_unmapped_area_info) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn truncate_inode_pages(arg1: *mut address_space, arg2: loff_t);
}
extern "C" {
    pub fn truncate_inode_pages_range(arg1: *mut address_space, lstart: loff_t, lend: loff_t);
}
extern "C" {
    pub fn truncate_inode_pages_final(arg1: *mut address_space);
}
extern "C" {
    pub fn filemap_fault(vmf: *mut vm_fault) -> vm_fault_t;
}
extern "C" {
    pub fn filemap_map_pages(
        vmf: *mut vm_fault,
        start_pgoff: core::ffi::c_ulong,
        end_pgoff: core::ffi::c_ulong,
    ) -> vm_fault_t;
}
extern "C" {
    pub fn filemap_page_mkwrite(vmf: *mut vm_fault) -> vm_fault_t;
}
extern "C" {
    pub static mut stack_guard_gap: core::ffi::c_ulong;
}
extern "C" {
    pub fn expand_stack_locked(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn expand_stack(mm: *mut mm_struct, addr: core::ffi::c_ulong) -> *mut vm_area_struct;
}
extern "C" {
    pub fn expand_downwards(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn find_vma(mm: *mut mm_struct, addr: core::ffi::c_ulong) -> *mut vm_area_struct;
}
extern "C" {
    pub fn find_vma_prev(
        mm: *mut mm_struct,
        addr: core::ffi::c_ulong,
        pprev: *mut *mut vm_area_struct,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub fn find_vma_intersection(
        mm: *mut mm_struct,
        start_addr: core::ffi::c_ulong,
        end_addr: core::ffi::c_ulong,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub fn vm_get_page_prot(vm_flags: core::ffi::c_ulong) -> pgprot_t;
}
extern "C" {
    pub fn vma_set_page_prot(vma: *mut vm_area_struct);
}
extern "C" {
    pub fn vma_set_file(vma: *mut vm_area_struct, file: *mut file);
}
extern "C" {
    pub fn find_extend_vma_locked(
        arg1: *mut mm_struct,
        addr: core::ffi::c_ulong,
    ) -> *mut vm_area_struct;
}
extern "C" {
    pub fn remap_pfn_range(
        arg1: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pfn: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        arg2: pgprot_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn remap_pfn_range_notrack(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pfn: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        prot: pgprot_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vm_insert_page(
        arg1: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        arg2: *mut page,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vm_insert_pages(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pages: *mut *mut page,
        num: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vm_map_pages(
        vma: *mut vm_area_struct,
        pages: *mut *mut page,
        num: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vm_map_pages_zero(
        vma: *mut vm_area_struct,
        pages: *mut *mut page,
        num: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vmf_insert_pfn(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pfn: core::ffi::c_ulong,
    ) -> vm_fault_t;
}
extern "C" {
    pub fn vmf_insert_pfn_prot(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pfn: core::ffi::c_ulong,
        pgprot: pgprot_t,
    ) -> vm_fault_t;
}
extern "C" {
    pub fn vmf_insert_mixed(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pfn: pfn_t,
    ) -> vm_fault_t;
}
extern "C" {
    pub fn vmf_insert_mixed_mkwrite(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pfn: pfn_t,
    ) -> vm_fault_t;
}
extern "C" {
    pub fn vm_iomap_memory(
        vma: *mut vm_area_struct,
        start: phys_addr_t,
        len: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn follow_page(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        foll_flags: core::ffi::c_uint,
    ) -> *mut page;
}
pub type pte_fn_t = ::core::option::Option<
    unsafe extern "C" fn(
        pte: *mut pte_t,
        addr: core::ffi::c_ulong,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn apply_to_page_range(
        mm: *mut mm_struct,
        address: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        fn_: pte_fn_t,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn apply_to_existing_page_range(
        mm: *mut mm_struct,
        address: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        fn_: pte_fn_t,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut init_on_alloc: static_key_false;
}
extern "C" {
    pub static mut init_on_free: static_key_false;
}
extern "C" {
    pub static mut _debug_pagealloc_enabled_early: bool_;
}
extern "C" {
    pub static mut _debug_pagealloc_enabled: static_key_false;
}
extern "C" {
    pub fn __kernel_map_pages(
        page: *mut page,
        numpages: core::ffi::c_int,
        enable: core::ffi::c_int,
    );
}
extern "C" {
    pub fn get_gate_vma(mm: *mut mm_struct) -> *mut vm_area_struct;
}
extern "C" {
    pub fn in_gate_area_no_mm(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn in_gate_area(mm: *mut mm_struct, addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn process_shares_mm(p: *mut task_struct, mm: *mut mm_struct) -> bool_;
}
extern "C" {
    pub static mut sysctl_drop_caches: core::ffi::c_int;
}
extern "C" {
    pub fn drop_caches_sysctl_handler(
        arg1: *const ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn drop_slab();
}
extern "C" {
    pub static mut randomize_va_space: core::ffi::c_int;
}
extern "C" {
    pub fn arch_vma_name(vma: *mut vm_area_struct) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn print_vma_addr(prefix: *mut core::ffi::c_char, rip: core::ffi::c_ulong);
}
extern "C" {
    pub fn sparse_buffer_alloc(size: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __populate_section_memmap(
        pfn: core::ffi::c_ulong,
        nr_pages: core::ffi::c_ulong,
        nid: core::ffi::c_int,
        altmap: *mut vmem_altmap,
        pgmap: *mut dev_pagemap,
    ) -> *mut page;
}
extern "C" {
    pub fn pmd_init(addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn pud_init(addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn vmemmap_pgd_populate(addr: core::ffi::c_ulong, node: core::ffi::c_int) -> *mut pgd_t;
}
extern "C" {
    pub fn vmemmap_p4d_populate(
        pgd: *mut pgd_t,
        addr: core::ffi::c_ulong,
        node: core::ffi::c_int,
    ) -> *mut p4d_t;
}
extern "C" {
    pub fn vmemmap_pud_populate(
        p4d: *mut p4d_t,
        addr: core::ffi::c_ulong,
        node: core::ffi::c_int,
    ) -> *mut pud_t;
}
extern "C" {
    pub fn vmemmap_pmd_populate(
        pud: *mut pud_t,
        addr: core::ffi::c_ulong,
        node: core::ffi::c_int,
    ) -> *mut pmd_t;
}
extern "C" {
    pub fn vmemmap_pte_populate(
        pmd: *mut pmd_t,
        addr: core::ffi::c_ulong,
        node: core::ffi::c_int,
        altmap: *mut vmem_altmap,
        reuse: *mut page,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn vmemmap_alloc_block(
        size: core::ffi::c_ulong,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn vmemmap_alloc_block_buf(
        size: core::ffi::c_ulong,
        node: core::ffi::c_int,
        altmap: *mut vmem_altmap,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn vmemmap_verify(
        arg1: *mut pte_t,
        arg2: core::ffi::c_int,
        arg3: core::ffi::c_ulong,
        arg4: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn vmemmap_set_pmd(
        pmd: *mut pmd_t,
        p: *mut core::ffi::c_void,
        node: core::ffi::c_int,
        addr: core::ffi::c_ulong,
        next: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn vmemmap_check_pmd(
        pmd: *mut pmd_t,
        node: core::ffi::c_int,
        addr: core::ffi::c_ulong,
        next: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vmemmap_populate_basepages(
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        node: core::ffi::c_int,
        altmap: *mut vmem_altmap,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vmemmap_populate_hugepages(
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        node: core::ffi::c_int,
        altmap: *mut vmem_altmap,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vmemmap_populate(
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        node: core::ffi::c_int,
        altmap: *mut vmem_altmap,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vmemmap_populate_print_last();
}
extern "C" {
    pub fn register_page_bootmem_memmap(
        section_nr: core::ffi::c_ulong,
        map: *mut page,
        nr_pages: core::ffi::c_ulong,
    );
}
pub const mf_flags_MF_COUNT_INCREASED: mf_flags = 1;
pub const mf_flags_MF_ACTION_REQUIRED: mf_flags = 2;
pub const mf_flags_MF_MUST_KILL: mf_flags = 4;
pub const mf_flags_MF_SOFT_OFFLINE: mf_flags = 8;
pub const mf_flags_MF_UNPOISON: mf_flags = 16;
pub const mf_flags_MF_SW_SIMULATED: mf_flags = 32;
pub const mf_flags_MF_NO_RETRY: mf_flags = 64;
pub const mf_flags_MF_MEM_PRE_REMOVE: mf_flags = 128;
pub type mf_flags = core::ffi::c_uint;
extern "C" {
    pub fn mf_dax_kill_procs(
        mapping: *mut address_space,
        index: core::ffi::c_ulong,
        count: core::ffi::c_ulong,
        mf_flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memory_failure(pfn: core::ffi::c_ulong, flags: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn memory_failure_queue_kick(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn unpoison_memory(pfn: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub static mut num_poisoned_pages: atomic_long_t;
}
extern "C" {
    pub fn soft_offline_page(pfn: core::ffi::c_ulong, flags: core::ffi::c_int) -> core::ffi::c_int;
}
pub const mf_result_MF_IGNORED: mf_result = 0;
pub const mf_result_MF_FAILED: mf_result = 1;
pub const mf_result_MF_DELAYED: mf_result = 2;
pub const mf_result_MF_RECOVERED: mf_result = 3;
pub type mf_result = core::ffi::c_uint;
pub const mf_action_page_type_MF_MSG_KERNEL: mf_action_page_type = 0;
pub const mf_action_page_type_MF_MSG_KERNEL_HIGH_ORDER: mf_action_page_type = 1;
pub const mf_action_page_type_MF_MSG_DIFFERENT_COMPOUND: mf_action_page_type = 2;
pub const mf_action_page_type_MF_MSG_HUGE: mf_action_page_type = 3;
pub const mf_action_page_type_MF_MSG_FREE_HUGE: mf_action_page_type = 4;
pub const mf_action_page_type_MF_MSG_GET_HWPOISON: mf_action_page_type = 5;
pub const mf_action_page_type_MF_MSG_UNMAP_FAILED: mf_action_page_type = 6;
pub const mf_action_page_type_MF_MSG_DIRTY_SWAPCACHE: mf_action_page_type = 7;
pub const mf_action_page_type_MF_MSG_CLEAN_SWAPCACHE: mf_action_page_type = 8;
pub const mf_action_page_type_MF_MSG_DIRTY_MLOCKED_LRU: mf_action_page_type = 9;
pub const mf_action_page_type_MF_MSG_CLEAN_MLOCKED_LRU: mf_action_page_type = 10;
pub const mf_action_page_type_MF_MSG_DIRTY_UNEVICTABLE_LRU: mf_action_page_type = 11;
pub const mf_action_page_type_MF_MSG_CLEAN_UNEVICTABLE_LRU: mf_action_page_type = 12;
pub const mf_action_page_type_MF_MSG_DIRTY_LRU: mf_action_page_type = 13;
pub const mf_action_page_type_MF_MSG_CLEAN_LRU: mf_action_page_type = 14;
pub const mf_action_page_type_MF_MSG_TRUNCATED_LRU: mf_action_page_type = 15;
pub const mf_action_page_type_MF_MSG_BUDDY: mf_action_page_type = 16;
pub const mf_action_page_type_MF_MSG_DAX: mf_action_page_type = 17;
pub const mf_action_page_type_MF_MSG_UNSPLIT_THP: mf_action_page_type = 18;
pub const mf_action_page_type_MF_MSG_ALREADY_POISONED: mf_action_page_type = 19;
pub const mf_action_page_type_MF_MSG_UNKNOWN: mf_action_page_type = 20;
pub type mf_action_page_type = core::ffi::c_uint;
extern "C" {
    pub fn folio_zero_user(folio: *mut folio, addr_hint: core::ffi::c_ulong);
}
extern "C" {
    pub fn copy_user_large_folio(
        dst: *mut folio,
        src: *mut folio,
        addr_hint: core::ffi::c_ulong,
        vma: *mut vm_area_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn copy_folio_from_user(
        dst_folio: *mut folio,
        usr_src: *const core::ffi::c_void,
        allow_pagefault: bool_,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn setup_nr_node_ids();
}
extern "C" {
    pub fn memcmp_pages(page1: *mut page, page2: *mut page) -> core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_nr_trim_pages: core::ffi::c_int;
}
extern "C" {
    pub fn mem_dump_obj(object: *mut core::ffi::c_void);
}
extern "C" {
    pub fn vma_pgtable_walk_begin(vma: *mut vm_area_struct);
}
extern "C" {
    pub fn vma_pgtable_walk_end(vma: *mut vm_area_struct);
}
extern "C" {
    pub fn reserve_mem_find_by_name(
        name: *const core::ffi::c_char,
        start: *mut phys_addr_t,
        size: *mut phys_addr_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn clflush_cache_range(addr: *mut core::ffi::c_void, size: core::ffi::c_uint);
}
pub const dma_data_direction_DMA_BIDIRECTIONAL: dma_data_direction = 0;
pub const dma_data_direction_DMA_TO_DEVICE: dma_data_direction = 1;
pub const dma_data_direction_DMA_FROM_DEVICE: dma_data_direction = 2;
pub const dma_data_direction_DMA_NONE: dma_data_direction = 3;
pub type dma_data_direction = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct urb {
    _unused: [u8; 0],
}
pub const ctx_state_CONTEXT_DISABLED: ctx_state = -1;
pub const ctx_state_CONTEXT_KERNEL: ctx_state = 0;
pub const ctx_state_CONTEXT_IDLE: ctx_state = 1;
pub const ctx_state_CONTEXT_USER: ctx_state = 2;
pub const ctx_state_CONTEXT_GUEST: ctx_state = 3;
pub const ctx_state_CONTEXT_MAX: ctx_state = 4;
pub type ctx_state = core::ffi::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct context_tracking {
    pub state: atomic_t,
    pub dynticks_nesting: core::ffi::c_long,
    pub dynticks_nmi_nesting: core::ffi::c_long,
}
extern "C" {
    pub static mut context_tracking: context_tracking;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct irq_cpustat_t {
    pub __nmi_count: core::ffi::c_uint,
    pub apic_timer_irqs: core::ffi::c_uint,
    pub irq_spurious_count: core::ffi::c_uint,
    pub icr_read_retry_count: core::ffi::c_uint,
    pub x86_platform_ipis: core::ffi::c_uint,
    pub apic_perf_irqs: core::ffi::c_uint,
    pub apic_irq_work_irqs: core::ffi::c_uint,
    pub irq_resched_count: core::ffi::c_uint,
    pub irq_call_count: core::ffi::c_uint,
    pub irq_tlb_count: core::ffi::c_uint,
    pub irq_thermal_count: core::ffi::c_uint,
    pub irq_threshold_count: core::ffi::c_uint,
    pub irq_deferred_error_count: core::ffi::c_uint,
    pub irq_hv_callback_count: core::ffi::c_uint,
}
impl Default for irq_cpustat_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut irq_stat: irq_cpustat_t;
}
extern "C" {
    pub fn ack_bad_irq(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn arch_irq_stat_cpu(cpu: core::ffi::c_uint) -> u64_;
}
extern "C" {
    pub fn arch_irq_stat() -> u64_;
}
extern "C" {
    pub fn synchronize_irq(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn synchronize_hardirq(irq: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn irq_enter();
}
extern "C" {
    pub fn irq_enter_rcu();
}
extern "C" {
    pub fn irq_exit();
}
extern "C" {
    pub fn irq_exit_rcu();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bio_vec {
    pub bv_page: *mut page,
    pub bv_len: core::ffi::c_uint,
    pub bv_offset: core::ffi::c_uint,
}
impl Default for bio_vec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed(4))]
#[derive(Default, Copy, Clone)]
pub struct bvec_iter {
    pub bi_sector: sector_t,
    pub bi_size: core::ffi::c_uint,
    pub bi_idx: core::ffi::c_uint,
    pub bi_bvec_done: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bvec_iter_all {
    pub bv: bio_vec,
    pub idx: core::ffi::c_int,
    pub done: core::ffi::c_uint,
}
impl Default for bvec_iter_all {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn csum_partial(
        buff: *const core::ffi::c_void,
        len: core::ffi::c_int,
        sum: __wsum,
    ) -> __wsum;
}
extern "C" {
    pub fn csum_partial_copy_generic(
        src: *const core::ffi::c_void,
        dst: *mut core::ffi::c_void,
        len: core::ffi::c_int,
    ) -> __wsum;
}
extern "C" {
    pub fn csum_and_copy_from_user(
        src: *const core::ffi::c_void,
        dst: *mut core::ffi::c_void,
        len: core::ffi::c_int,
    ) -> __wsum;
}
extern "C" {
    pub fn csum_and_copy_to_user(
        src: *const core::ffi::c_void,
        dst: *mut core::ffi::c_void,
        len: core::ffi::c_int,
    ) -> __wsum;
}
extern "C" {
    pub fn csum_partial_copy_nocheck(
        src: *const core::ffi::c_void,
        dst: *mut core::ffi::c_void,
        len: core::ffi::c_int,
    ) -> __wsum;
}
extern "C" {
    pub fn ip_compute_csum(buff: *const core::ffi::c_void, len: core::ffi::c_int) -> __sum16;
}
extern "C" {
    pub fn csum_ipv6_magic(
        saddr: *const in6_addr,
        daddr: *const in6_addr,
        len: __u32,
        proto: __u8,
        sum: __wsum,
    ) -> __sum16;
}
extern "C" {
    pub fn inet_proto_csum_replace4(
        sum: *mut __sum16,
        skb: *mut sk_buff,
        from: __be32,
        to: __be32,
        pseudohdr: bool_,
    );
}
extern "C" {
    pub fn inet_proto_csum_replace16(
        sum: *mut __sum16,
        skb: *mut sk_buff,
        from: *const __be32,
        to: *const __be32,
        pseudohdr: bool_,
    );
}
extern "C" {
    pub fn inet_proto_csum_replace_by_diff(
        sum: *mut __sum16,
        skb: *mut sk_buff,
        diff: __wsum,
        pseudohdr: bool_,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_printk_info {
    pub subsystem: [core::ffi::c_char; 16usize],
    pub device: [core::ffi::c_char; 48usize],
}
impl Default for dev_printk_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn dev_vprintk_emit(
        level: core::ffi::c_int,
        dev: *const device,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn dev_printk_emit(
        level: core::ffi::c_int,
        dev: *const device,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn _dev_printk(
        level: *const core::ffi::c_char,
        dev: *const device,
        fmt: *const core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn _dev_emerg(dev: *const device, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn _dev_alert(dev: *const device, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn _dev_crit(dev: *const device, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn _dev_err(dev: *const device, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn _dev_warn(dev: *const device, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn _dev_notice(dev: *const device, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn _dev_info(dev: *const device, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn dev_err_probe(
        dev: *const device,
        err: core::ffi::c_int,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpufreq_policy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct update_util_data {
    pub func: ::core::option::Option<
        unsafe extern "C" fn(data: *mut update_util_data, time: u64_, flags: core::ffi::c_uint),
    >,
}
extern "C" {
    pub fn cpufreq_add_update_util_hook(
        cpu: core::ffi::c_int,
        data: *mut update_util_data,
        func: ::core::option::Option<
            unsafe extern "C" fn(data: *mut update_util_data, time: u64_, flags: core::ffi::c_uint),
        >,
    );
}
extern "C" {
    pub fn cpufreq_remove_update_util_hook(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn cpufreq_this_cpu_can_update(policy: *mut cpufreq_policy) -> bool_;
}
pub const cpu_idle_type___CPU_NOT_IDLE: cpu_idle_type = 0;
pub const cpu_idle_type_CPU_IDLE: cpu_idle_type = 1;
pub const cpu_idle_type_CPU_NEWLY_IDLE: cpu_idle_type = 2;
pub const cpu_idle_type_CPU_MAX_IDLE_TYPES: cpu_idle_type = 3;
pub type cpu_idle_type = core::ffi::c_uint;
extern "C" {
    pub fn wake_up_if_idle(cpu: core::ffi::c_int);
}
pub const __SD_BALANCE_NEWIDLE: _bindgen_ty_93 = 0;
pub const __SD_BALANCE_EXEC: _bindgen_ty_93 = 1;
pub const __SD_BALANCE_FORK: _bindgen_ty_93 = 2;
pub const __SD_BALANCE_WAKE: _bindgen_ty_93 = 3;
pub const __SD_WAKE_AFFINE: _bindgen_ty_93 = 4;
pub const __SD_ASYM_CPUCAPACITY: _bindgen_ty_93 = 5;
pub const __SD_ASYM_CPUCAPACITY_FULL: _bindgen_ty_93 = 6;
pub const __SD_SHARE_CPUCAPACITY: _bindgen_ty_93 = 7;
pub const __SD_CLUSTER: _bindgen_ty_93 = 8;
pub const __SD_SHARE_LLC: _bindgen_ty_93 = 9;
pub const __SD_SERIALIZE: _bindgen_ty_93 = 10;
pub const __SD_ASYM_PACKING: _bindgen_ty_93 = 11;
pub const __SD_PREFER_SIBLING: _bindgen_ty_93 = 12;
pub const __SD_OVERLAP: _bindgen_ty_93 = 13;
pub const __SD_NUMA: _bindgen_ty_93 = 14;
pub const __SD_FLAG_CNT: _bindgen_ty_93 = 15;
pub type _bindgen_ty_93 = core::ffi::c_uint;
pub const SD_BALANCE_NEWIDLE: _bindgen_ty_94 = 1;
pub const SD_BALANCE_EXEC: _bindgen_ty_94 = 2;
pub const SD_BALANCE_FORK: _bindgen_ty_94 = 4;
pub const SD_BALANCE_WAKE: _bindgen_ty_94 = 8;
pub const SD_WAKE_AFFINE: _bindgen_ty_94 = 16;
pub const SD_ASYM_CPUCAPACITY: _bindgen_ty_94 = 32;
pub const SD_ASYM_CPUCAPACITY_FULL: _bindgen_ty_94 = 64;
pub const SD_SHARE_CPUCAPACITY: _bindgen_ty_94 = 128;
pub const SD_CLUSTER: _bindgen_ty_94 = 256;
pub const SD_SHARE_LLC: _bindgen_ty_94 = 512;
pub const SD_SERIALIZE: _bindgen_ty_94 = 1024;
pub const SD_ASYM_PACKING: _bindgen_ty_94 = 2048;
pub const SD_PREFER_SIBLING: _bindgen_ty_94 = 4096;
pub const SD_OVERLAP: _bindgen_ty_94 = 8192;
pub const SD_NUMA: _bindgen_ty_94 = 16384;
pub type _bindgen_ty_94 = core::ffi::c_uint;
extern "C" {
    pub fn arch_asym_cpu_priority(cpu: core::ffi::c_int) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sched_domain_attr {
    pub relax_domain_level: core::ffi::c_int,
}
extern "C" {
    pub static mut sched_domain_level_max: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sched_domain_shared {
    pub ref_: atomic_t,
    pub nr_busy_cpus: atomic_t,
    pub has_idle_cores: core::ffi::c_int,
    pub nr_idle_scan: core::ffi::c_int,
}
#[repr(C)]
pub struct sched_domain {
    pub parent: *mut sched_domain,
    pub child: *mut sched_domain,
    pub groups: *mut sched_group,
    pub min_interval: core::ffi::c_ulong,
    pub max_interval: core::ffi::c_ulong,
    pub busy_factor: core::ffi::c_uint,
    pub imbalance_pct: core::ffi::c_uint,
    pub cache_nice_tries: core::ffi::c_uint,
    pub imb_numa_nr: core::ffi::c_uint,
    pub nohz_idle: core::ffi::c_int,
    pub flags: core::ffi::c_int,
    pub level: core::ffi::c_int,
    pub last_balance: core::ffi::c_ulong,
    pub balance_interval: core::ffi::c_uint,
    pub nr_balance_failed: core::ffi::c_uint,
    pub max_newidle_lb_cost: u64_,
    pub last_decay_max_lb_cost: core::ffi::c_ulong,
    pub lb_count: [core::ffi::c_uint; 3usize],
    pub lb_failed: [core::ffi::c_uint; 3usize],
    pub lb_balanced: [core::ffi::c_uint; 3usize],
    pub lb_imbalance: [core::ffi::c_uint; 3usize],
    pub lb_gained: [core::ffi::c_uint; 3usize],
    pub lb_hot_gained: [core::ffi::c_uint; 3usize],
    pub lb_nobusyg: [core::ffi::c_uint; 3usize],
    pub lb_nobusyq: [core::ffi::c_uint; 3usize],
    pub alb_count: core::ffi::c_uint,
    pub alb_failed: core::ffi::c_uint,
    pub alb_pushed: core::ffi::c_uint,
    pub sbe_count: core::ffi::c_uint,
    pub sbe_balanced: core::ffi::c_uint,
    pub sbe_pushed: core::ffi::c_uint,
    pub sbf_count: core::ffi::c_uint,
    pub sbf_balanced: core::ffi::c_uint,
    pub sbf_pushed: core::ffi::c_uint,
    pub ttwu_wake_remote: core::ffi::c_uint,
    pub ttwu_move_affine: core::ffi::c_uint,
    pub ttwu_move_balance: core::ffi::c_uint,
    pub __bindgen_anon_1: sched_domain__bindgen_ty_1,
    pub shared: *mut sched_domain_shared,
    pub span_weight: core::ffi::c_uint,
    pub span: __IncompleteArrayField<core::ffi::c_ulong>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sched_domain__bindgen_ty_1 {
    pub private: *mut core::ffi::c_void,
    pub rcu: callback_head,
}
impl Default for sched_domain__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sched_domain {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn partition_sched_domains_locked(
        ndoms_new: core::ffi::c_int,
        doms_new: *mut cpumask_var_t,
        dattr_new: *mut sched_domain_attr,
    );
}
extern "C" {
    pub fn partition_sched_domains(
        ndoms_new: core::ffi::c_int,
        doms_new: *mut cpumask_var_t,
        dattr_new: *mut sched_domain_attr,
    );
}
extern "C" {
    pub fn alloc_sched_domains(ndoms: core::ffi::c_uint) -> *mut cpumask_var_t;
}
extern "C" {
    pub fn free_sched_domains(doms: *mut cpumask_var_t, ndoms: core::ffi::c_uint);
}
extern "C" {
    pub fn cpus_equal_capacity(this_cpu: core::ffi::c_int, that_cpu: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn cpus_share_cache(this_cpu: core::ffi::c_int, that_cpu: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn cpus_share_resources(this_cpu: core::ffi::c_int, that_cpu: core::ffi::c_int) -> bool_;
}
pub type sched_domain_mask_f =
    ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int) -> *const cpumask>;
pub type sched_domain_flags_f = ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sd_data {
    pub sd: *mut *mut sched_domain,
    pub sds: *mut *mut sched_domain_shared,
    pub sg: *mut *mut sched_group,
    pub sgc: *mut *mut sched_group_capacity,
}
impl Default for sd_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_domain_topology_level {
    pub mask: sched_domain_mask_f,
    pub sd_flags: sched_domain_flags_f,
    pub flags: core::ffi::c_int,
    pub numa_level: core::ffi::c_int,
    pub data: sd_data,
}
impl Default for sched_domain_topology_level {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn set_sched_topology(tl: *mut sched_domain_topology_level);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct em_perf_state {
    pub performance: core::ffi::c_ulong,
    pub frequency: core::ffi::c_ulong,
    pub power: core::ffi::c_ulong,
    pub cost: core::ffi::c_ulong,
    pub flags: core::ffi::c_ulong,
}
#[repr(C)]
pub struct em_perf_table {
    pub rcu: callback_head,
    pub kref: kref,
    pub state: __IncompleteArrayField<em_perf_state>,
}
impl Default for em_perf_table {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct em_perf_domain {
    pub em_table: *mut em_perf_table,
    pub nr_perf_states: core::ffi::c_int,
    pub flags: core::ffi::c_ulong,
    pub cpus: __IncompleteArrayField<core::ffi::c_ulong>,
}
impl Default for em_perf_domain {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct em_data_callback {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct klist {
    pub k_lock: spinlock_t,
    pub k_list: list_head,
    pub get: ::core::option::Option<unsafe extern "C" fn(arg1: *mut klist_node)>,
    pub put: ::core::option::Option<unsafe extern "C" fn(arg1: *mut klist_node)>,
}
impl Default for klist {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn klist_init(
        k: *mut klist,
        get: ::core::option::Option<unsafe extern "C" fn(arg1: *mut klist_node)>,
        put: ::core::option::Option<unsafe extern "C" fn(arg1: *mut klist_node)>,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct klist_node {
    pub n_klist: *mut core::ffi::c_void,
    pub n_node: list_head,
    pub n_ref: kref,
}
impl Default for klist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn klist_add_tail(n: *mut klist_node, k: *mut klist);
}
extern "C" {
    pub fn klist_add_head(n: *mut klist_node, k: *mut klist);
}
extern "C" {
    pub fn klist_add_behind(n: *mut klist_node, pos: *mut klist_node);
}
extern "C" {
    pub fn klist_add_before(n: *mut klist_node, pos: *mut klist_node);
}
extern "C" {
    pub fn klist_del(n: *mut klist_node);
}
extern "C" {
    pub fn klist_remove(n: *mut klist_node);
}
extern "C" {
    pub fn klist_node_attached(n: *mut klist_node) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct klist_iter {
    pub i_klist: *mut klist,
    pub i_cur: *mut klist_node,
}
impl Default for klist_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn klist_iter_init(k: *mut klist, i: *mut klist_iter);
}
extern "C" {
    pub fn klist_iter_init_node(k: *mut klist, i: *mut klist_iter, n: *mut klist_node);
}
extern "C" {
    pub fn klist_iter_exit(i: *mut klist_iter);
}
extern "C" {
    pub fn klist_prev(i: *mut klist_iter) -> *mut klist_node;
}
extern "C" {
    pub fn klist_next(i: *mut klist_iter) -> *mut klist_node;
}
extern "C" {
    pub static mut pm_power_off: ::core::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn pm_vt_switch_required(dev: *mut device, required: bool_);
}
extern "C" {
    pub fn pm_vt_switch_unregister(dev: *mut device);
}
extern "C" {
    pub static power_group_name: [core::ffi::c_char; 0usize];
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pm_message {
    pub event: core::ffi::c_int,
}
pub type pm_message_t = pm_message;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dev_pm_ops {
    pub prepare: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub complete: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub suspend: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub resume: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub freeze: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub thaw: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub poweroff:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub restore: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub suspend_late:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub resume_early:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub freeze_late:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub thaw_early:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub poweroff_late:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub restore_early:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub suspend_noirq:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub resume_noirq:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub freeze_noirq:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub thaw_noirq:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub poweroff_noirq:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub restore_noirq:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub runtime_suspend:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub runtime_resume:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub runtime_idle:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
}
pub const rpm_status_RPM_INVALID: rpm_status = -1;
pub const rpm_status_RPM_ACTIVE: rpm_status = 0;
pub const rpm_status_RPM_RESUMING: rpm_status = 1;
pub const rpm_status_RPM_SUSPENDED: rpm_status = 2;
pub const rpm_status_RPM_SUSPENDING: rpm_status = 3;
pub type rpm_status = core::ffi::c_int;
pub const rpm_request_RPM_REQ_NONE: rpm_request = 0;
pub const rpm_request_RPM_REQ_IDLE: rpm_request = 1;
pub const rpm_request_RPM_REQ_SUSPEND: rpm_request = 2;
pub const rpm_request_RPM_REQ_AUTOSUSPEND: rpm_request = 3;
pub const rpm_request_RPM_REQ_RESUME: rpm_request = 4;
pub type rpm_request = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wake_irq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pm_domain_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pm_subsys_data {
    pub lock: spinlock_t,
    pub refcount: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_pm_info {
    pub power_state: pm_message_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub driver_flags: u32_,
    pub lock: spinlock_t,
    pub entry: list_head,
    pub completion: completion,
    pub wakeup: *mut wakeup_source,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub suspend_timer: hrtimer,
    pub timer_expires: u64_,
    pub work: work_struct,
    pub wait_queue: wait_queue_head_t,
    pub wakeirq: *mut wake_irq,
    pub usage_count: atomic_t,
    pub child_count: atomic_t,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub links_count: core::ffi::c_uint,
    pub request: rpm_request,
    pub runtime_status: rpm_status,
    pub last_status: rpm_status,
    pub runtime_error: core::ffi::c_int,
    pub autosuspend_delay: core::ffi::c_int,
    pub last_busy: u64_,
    pub active_time: u64_,
    pub suspended_time: u64_,
    pub accounting_timestamp: u64_,
    pub subsys_data: *mut pm_subsys_data,
    pub set_latency_tolerance:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut device, arg2: s32)>,
    pub qos: *mut dev_pm_qos,
}
impl Default for dev_pm_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl dev_pm_info {
    #[inline]
    pub fn can_wakeup(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_can_wakeup(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn async_suspend(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_async_suspend(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_dpm_list(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_in_dpm_list(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_prepared(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_prepared(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_suspended(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_suspended(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_noirq_suspended(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_noirq_suspended(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_late_suspended(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_late_suspended(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_pm(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_pm(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn early_init(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_early_init(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct_complete(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_direct_complete(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        can_wakeup: bool_,
        async_suspend: bool_,
        in_dpm_list: bool_,
        is_prepared: bool_,
        is_suspended: bool_,
        is_noirq_suspended: bool_,
        is_late_suspended: bool_,
        no_pm: bool_,
        early_init: bool_,
        direct_complete: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let can_wakeup: u8 = unsafe { ::core::mem::transmute(can_wakeup) };
            can_wakeup as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let async_suspend: u8 = unsafe { ::core::mem::transmute(async_suspend) };
            async_suspend as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let in_dpm_list: u8 = unsafe { ::core::mem::transmute(in_dpm_list) };
            in_dpm_list as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_prepared: u8 = unsafe { ::core::mem::transmute(is_prepared) };
            is_prepared as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_suspended: u8 = unsafe { ::core::mem::transmute(is_suspended) };
            is_suspended as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let is_noirq_suspended: u8 = unsafe { ::core::mem::transmute(is_noirq_suspended) };
            is_noirq_suspended as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let is_late_suspended: u8 = unsafe { ::core::mem::transmute(is_late_suspended) };
            is_late_suspended as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let no_pm: u8 = unsafe { ::core::mem::transmute(no_pm) };
            no_pm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let early_init: u8 = unsafe { ::core::mem::transmute(early_init) };
            early_init as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let direct_complete: u8 = unsafe { ::core::mem::transmute(direct_complete) };
            direct_complete as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn wakeup_path(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wakeup_path(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn syscore(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_syscore(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_pm_callbacks(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_pm_callbacks(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn async_in_progress(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_async_in_progress(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn must_resume(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_must_resume(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn may_skip_resume(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_may_skip_resume(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        wakeup_path: bool_,
        syscore: bool_,
        no_pm_callbacks: bool_,
        async_in_progress: bool_,
        must_resume: bool_,
        may_skip_resume: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wakeup_path: u8 = unsafe { ::core::mem::transmute(wakeup_path) };
            wakeup_path as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let syscore: u8 = unsafe { ::core::mem::transmute(syscore) };
            syscore as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_pm_callbacks: u8 = unsafe { ::core::mem::transmute(no_pm_callbacks) };
            no_pm_callbacks as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let async_in_progress: u8 = unsafe { ::core::mem::transmute(async_in_progress) };
            async_in_progress as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let must_resume: u8 = unsafe { ::core::mem::transmute(must_resume) };
            must_resume as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let may_skip_resume: u8 = unsafe { ::core::mem::transmute(may_skip_resume) };
            may_skip_resume as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn disable_depth(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_disable_depth(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_3.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn idle_notification(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_idle_notification(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_pending(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_request_pending(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deferred_resume(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_deferred_resume(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn needs_force_resume(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_needs_force_resume(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn runtime_auto(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_runtime_auto(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_children(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ignore_children(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_callbacks(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_callbacks(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn irq_safe(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_irq_safe(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_autosuspend(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_use_autosuspend(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timer_autosuspends(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_timer_autosuspends(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn memalloc_noio(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_memalloc_noio(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        disable_depth: core::ffi::c_uint,
        idle_notification: bool_,
        request_pending: bool_,
        deferred_resume: bool_,
        needs_force_resume: bool_,
        runtime_auto: bool_,
        ignore_children: bool_,
        no_callbacks: bool_,
        irq_safe: bool_,
        use_autosuspend: bool_,
        timer_autosuspends: bool_,
        memalloc_noio: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let disable_depth: u32 = unsafe { ::core::mem::transmute(disable_depth) };
            disable_depth as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let idle_notification: u8 = unsafe { ::core::mem::transmute(idle_notification) };
            idle_notification as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let request_pending: u8 = unsafe { ::core::mem::transmute(request_pending) };
            request_pending as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let deferred_resume: u8 = unsafe { ::core::mem::transmute(deferred_resume) };
            deferred_resume as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let needs_force_resume: u8 = unsafe { ::core::mem::transmute(needs_force_resume) };
            needs_force_resume as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let runtime_auto: u8 = unsafe { ::core::mem::transmute(runtime_auto) };
            runtime_auto as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ignore_children: u8 = unsafe { ::core::mem::transmute(ignore_children) };
            ignore_children as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let no_callbacks: u8 = unsafe { ::core::mem::transmute(no_callbacks) };
            no_callbacks as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let irq_safe: u8 = unsafe { ::core::mem::transmute(irq_safe) };
            irq_safe as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let use_autosuspend: u8 = unsafe { ::core::mem::transmute(use_autosuspend) };
            use_autosuspend as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let timer_autosuspends: u8 = unsafe { ::core::mem::transmute(timer_autosuspends) };
            timer_autosuspends as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let memalloc_noio: u8 = unsafe { ::core::mem::transmute(memalloc_noio) };
            memalloc_noio as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn dev_pm_get_subsys_data(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn dev_pm_put_subsys_data(dev: *mut device);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dev_pm_domain {
    pub ops: dev_pm_ops,
    pub start: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub detach: ::core::option::Option<unsafe extern "C" fn(dev: *mut device, power_off: bool_)>,
    pub activate:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub sync: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub dismiss: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub set_performance_state: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut device, state: core::ffi::c_uint) -> core::ffi::c_int,
    >,
}
extern "C" {
    pub fn device_pm_lock();
}
extern "C" {
    pub fn dpm_resume_start(state: pm_message_t);
}
extern "C" {
    pub fn dpm_resume_end(state: pm_message_t);
}
extern "C" {
    pub fn dpm_resume_noirq(state: pm_message_t);
}
extern "C" {
    pub fn dpm_resume_early(state: pm_message_t);
}
extern "C" {
    pub fn dpm_resume(state: pm_message_t);
}
extern "C" {
    pub fn dpm_complete(state: pm_message_t);
}
extern "C" {
    pub fn device_pm_unlock();
}
extern "C" {
    pub fn dpm_suspend_end(state: pm_message_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn dpm_suspend_start(state: pm_message_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn dpm_suspend_noirq(state: pm_message_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn dpm_suspend_late(state: pm_message_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn dpm_suspend(state: pm_message_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn dpm_prepare(state: pm_message_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __suspend_report_result(
        function: *const core::ffi::c_char,
        dev: *mut device,
        fn_: *mut core::ffi::c_void,
        ret: core::ffi::c_int,
    );
}
extern "C" {
    pub fn device_pm_wait_for_dev(sub: *mut device, dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn dpm_for_each_dev(
        data: *mut core::ffi::c_void,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut device, arg2: *mut core::ffi::c_void),
        >,
    );
}
extern "C" {
    pub fn pm_generic_prepare(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_suspend_late(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_suspend_noirq(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_suspend(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_resume_early(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_resume_noirq(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_resume(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_freeze_noirq(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_freeze_late(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_freeze(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_thaw_noirq(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_thaw_early(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_thaw(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_restore_noirq(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_restore_early(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_restore(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_poweroff_noirq(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_poweroff_late(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_poweroff(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn pm_generic_complete(dev: *mut device);
}
extern "C" {
    pub fn dev_pm_skip_resume(dev: *mut device) -> bool_;
}
extern "C" {
    pub fn dev_pm_skip_suspend(dev: *mut device) -> bool_;
}
pub const dpm_order_DPM_ORDER_NONE: dpm_order = 0;
pub const dpm_order_DPM_ORDER_DEV_AFTER_PARENT: dpm_order = 1;
pub const dpm_order_DPM_ORDER_PARENT_BEFORE_DEV: dpm_order = 2;
pub const dpm_order_DPM_ORDER_DEV_LAST: dpm_order = 3;
pub type dpm_order = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bus_type {
    pub name: *const core::ffi::c_char,
    pub dev_name: *const core::ffi::c_char,
    pub bus_groups: *mut *const attribute_group,
    pub dev_groups: *mut *const attribute_group,
    pub drv_groups: *mut *const attribute_group,
    pub match_: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut device, drv: *const device_driver) -> core::ffi::c_int,
    >,
    pub uevent: ::core::option::Option<
        unsafe extern "C" fn(dev: *const device, env: *mut kobj_uevent_env) -> core::ffi::c_int,
    >,
    pub probe: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub sync_state: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub remove: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub shutdown: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub online: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub offline: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub suspend: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut device, state: pm_message_t) -> core::ffi::c_int,
    >,
    pub resume: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub num_vf: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub dma_configure:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub dma_cleanup: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub pm: *const dev_pm_ops,
    pub need_parent_lock: bool_,
}
impl Default for bus_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn bus_register(bus: *const bus_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn bus_unregister(bus: *const bus_type);
}
extern "C" {
    pub fn bus_rescan_devices(bus: *const bus_type) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bus_attribute {
    pub attr: attribute,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(bus: *const bus_type, buf: *mut core::ffi::c_char) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            bus: *const bus_type,
            buf: *const core::ffi::c_char,
            count: usize,
        ) -> isize,
    >,
}
impl Default for bus_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn bus_create_file(bus: *const bus_type, attr: *mut bus_attribute) -> core::ffi::c_int;
}
extern "C" {
    pub fn bus_remove_file(bus: *const bus_type, attr: *mut bus_attribute);
}
extern "C" {
    pub fn device_match_name(dev: *mut device, name: *const core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_match_of_node(dev: *mut device, np: *const core::ffi::c_void)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn device_match_fwnode(
        dev: *mut device,
        fwnode: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_match_devt(dev: *mut device, pdevt: *const core::ffi::c_void)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn device_match_acpi_dev(
        dev: *mut device,
        adev: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_match_acpi_handle(
        dev: *mut device,
        handle: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_match_any(dev: *mut device, unused: *const core::ffi::c_void)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn bus_for_each_dev(
        bus: *const bus_type,
        start: *mut device,
        data: *mut core::ffi::c_void,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bus_find_device(
        bus: *const bus_type,
        start: *mut device,
        data: *const core::ffi::c_void,
        match_: ::core::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *const core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut device;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bus_for_each_drv(
        bus: *const bus_type,
        start: *mut device_driver,
        data: *mut core::ffi::c_void,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut device_driver,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bus_sort_breadthfirst(
        bus: *const bus_type,
        compare: ::core::option::Option<
            unsafe extern "C" fn(a: *const device, b: *const device) -> core::ffi::c_int,
        >,
    );
}
extern "C" {
    pub fn bus_register_notifier(bus: *const bus_type, nb: *mut notifier_block)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn bus_unregister_notifier(
        bus: *const bus_type,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
pub const bus_notifier_event_BUS_NOTIFY_ADD_DEVICE: bus_notifier_event = 0;
pub const bus_notifier_event_BUS_NOTIFY_DEL_DEVICE: bus_notifier_event = 1;
pub const bus_notifier_event_BUS_NOTIFY_REMOVED_DEVICE: bus_notifier_event = 2;
pub const bus_notifier_event_BUS_NOTIFY_BIND_DRIVER: bus_notifier_event = 3;
pub const bus_notifier_event_BUS_NOTIFY_BOUND_DRIVER: bus_notifier_event = 4;
pub const bus_notifier_event_BUS_NOTIFY_UNBIND_DRIVER: bus_notifier_event = 5;
pub const bus_notifier_event_BUS_NOTIFY_UNBOUND_DRIVER: bus_notifier_event = 6;
pub const bus_notifier_event_BUS_NOTIFY_DRIVER_NOT_BOUND: bus_notifier_event = 7;
pub type bus_notifier_event = core::ffi::c_uint;
extern "C" {
    pub fn bus_get_kset(bus: *const bus_type) -> *mut kset;
}
extern "C" {
    pub fn bus_get_dev_root(bus: *const bus_type) -> *mut device;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class {
    pub name: *const core::ffi::c_char,
    pub class_groups: *mut *const attribute_group,
    pub dev_groups: *mut *const attribute_group,
    pub dev_uevent: ::core::option::Option<
        unsafe extern "C" fn(dev: *const device, env: *mut kobj_uevent_env) -> core::ffi::c_int,
    >,
    pub devnode: ::core::option::Option<
        unsafe extern "C" fn(dev: *const device, mode: *mut umode_t) -> *mut core::ffi::c_char,
    >,
    pub class_release: ::core::option::Option<unsafe extern "C" fn(class: *const class)>,
    pub dev_release: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub shutdown_pre:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub ns_type: *const kobj_ns_type_operations,
    pub namespace: ::core::option::Option<
        unsafe extern "C" fn(dev: *const device) -> *const core::ffi::c_void,
    >,
    pub get_ownership: ::core::option::Option<
        unsafe extern "C" fn(dev: *const device, uid: *mut kuid_t, gid: *mut kgid_t),
    >,
    pub pm: *const dev_pm_ops,
}
impl Default for class {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_dev_iter {
    pub ki: klist_iter,
    pub type_: *const device_type,
    pub sp: *mut subsys_private,
}
impl Default for class_dev_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn class_register(class: *const class) -> core::ffi::c_int;
}
extern "C" {
    pub fn class_unregister(class: *const class);
}
extern "C" {
    pub fn class_is_registered(class: *const class) -> bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_compat {
    _unused: [u8; 0],
}
extern "C" {
    pub fn class_compat_register(name: *const core::ffi::c_char) -> *mut class_compat;
}
extern "C" {
    pub fn class_compat_unregister(cls: *mut class_compat);
}
extern "C" {
    pub fn class_compat_create_link(
        cls: *mut class_compat,
        dev: *mut device,
        device_link: *mut device,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn class_compat_remove_link(
        cls: *mut class_compat,
        dev: *mut device,
        device_link: *mut device,
    );
}
extern "C" {
    pub fn class_dev_iter_init(
        iter: *mut class_dev_iter,
        class: *const class,
        start: *const device,
        type_: *const device_type,
    );
}
extern "C" {
    pub fn class_dev_iter_next(iter: *mut class_dev_iter) -> *mut device;
}
extern "C" {
    pub fn class_dev_iter_exit(iter: *mut class_dev_iter);
}
extern "C" {
    pub fn class_for_each_device(
        class: *const class,
        start: *const device,
        data: *mut core::ffi::c_void,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn class_find_device(
        class: *const class,
        start: *const device,
        data: *const core::ffi::c_void,
        match_: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut device,
                arg2: *const core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut device;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_attribute {
    pub attr: attribute,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            class: *const class,
            attr: *const class_attribute,
            buf: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            class: *const class,
            attr: *const class_attribute,
            buf: *const core::ffi::c_char,
            count: usize,
        ) -> isize,
    >,
}
impl Default for class_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn class_create_file_ns(
        class: *const class,
        attr: *const class_attribute,
        ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn class_remove_file_ns(
        class: *const class,
        attr: *const class_attribute,
        ns: *const core::ffi::c_void,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_attribute_string {
    pub attr: class_attribute,
    pub str_: *mut core::ffi::c_char,
}
impl Default for class_attribute_string {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn show_class_attr_string(
        class: *const class,
        attr: *const class_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_interface {
    pub node: list_head,
    pub class: *const class,
    pub add_dev: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub remove_dev: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
}
impl Default for class_interface {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn class_interface_register(arg1: *mut class_interface) -> core::ffi::c_int;
}
extern "C" {
    pub fn class_interface_unregister(arg1: *mut class_interface);
}
extern "C" {
    pub fn class_create(name: *const core::ffi::c_char) -> *mut class;
}
extern "C" {
    pub fn class_destroy(cls: *const class);
}
extern "C" {
    pub fn build_id_parse(
        vma: *mut vm_area_struct,
        build_id: *mut core::ffi::c_uchar,
        size: *mut __u32,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn build_id_parse_buf(
        buf: *const core::ffi::c_void,
        build_id: *mut core::ffi::c_uchar,
        buf_size: u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut vmlinux_build_id: [core::ffi::c_uchar; 20usize];
}
extern "C" {
    pub fn init_vmlinux_build_id();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct subprocess_info {
    pub work: work_struct,
    pub complete: *mut completion,
    pub path: *const core::ffi::c_char,
    pub argv: *mut *mut core::ffi::c_char,
    pub envp: *mut *mut core::ffi::c_char,
    pub wait: core::ffi::c_int,
    pub retval: core::ffi::c_int,
    pub init: ::core::option::Option<
        unsafe extern "C" fn(info: *mut subprocess_info, new: *mut cred) -> core::ffi::c_int,
    >,
    pub cleanup: ::core::option::Option<unsafe extern "C" fn(info: *mut subprocess_info)>,
    pub data: *mut core::ffi::c_void,
}
impl Default for subprocess_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn call_usermodehelper(
        path: *const core::ffi::c_char,
        argv: *mut *mut core::ffi::c_char,
        envp: *mut *mut core::ffi::c_char,
        wait: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn call_usermodehelper_setup(
        path: *const core::ffi::c_char,
        argv: *mut *mut core::ffi::c_char,
        envp: *mut *mut core::ffi::c_char,
        gfp_mask: gfp_t,
        init: ::core::option::Option<
            unsafe extern "C" fn(info: *mut subprocess_info, new: *mut cred) -> core::ffi::c_int,
        >,
        cleanup: ::core::option::Option<unsafe extern "C" fn(arg1: *mut subprocess_info)>,
        data: *mut core::ffi::c_void,
    ) -> *mut subprocess_info;
}
extern "C" {
    pub fn call_usermodehelper_exec(
        info: *mut subprocess_info,
        wait: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
pub const umh_disable_depth_UMH_ENABLED: umh_disable_depth = 0;
pub const umh_disable_depth_UMH_FREEZING: umh_disable_depth = 1;
pub const umh_disable_depth_UMH_DISABLED: umh_disable_depth = 2;
pub type umh_disable_depth = core::ffi::c_uint;
extern "C" {
    pub fn __usermodehelper_disable(depth: umh_disable_depth) -> core::ffi::c_int;
}
extern "C" {
    pub fn __usermodehelper_set_disable_depth(depth: umh_disable_depth);
}
extern "C" {
    pub fn usermodehelper_read_trylock() -> core::ffi::c_int;
}
extern "C" {
    pub fn usermodehelper_read_lock_wait(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn usermodehelper_read_unlock();
}
extern "C" {
    pub static mut modprobe_path: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub fn __request_module(wait: bool_, name: *const core::ffi::c_char, ...) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ucontext_ia32 {
    pub uc_flags: core::ffi::c_uint,
    pub uc_link: core::ffi::c_uint,
    pub uc_stack: compat_stack_t,
    pub uc_mcontext: sigcontext_32,
    pub uc_sigmask: compat_sigset_t,
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct stat64 {
    pub st_dev: core::ffi::c_ulonglong,
    pub __pad0: [core::ffi::c_uchar; 4usize],
    pub __st_ino: core::ffi::c_uint,
    pub st_mode: core::ffi::c_uint,
    pub st_nlink: core::ffi::c_uint,
    pub st_uid: core::ffi::c_uint,
    pub st_gid: core::ffi::c_uint,
    pub st_rdev: core::ffi::c_ulonglong,
    pub __pad3: [core::ffi::c_uchar; 4usize],
    pub st_size: core::ffi::c_longlong,
    pub st_blksize: core::ffi::c_uint,
    pub st_blocks: core::ffi::c_longlong,
    pub st_atime: core::ffi::c_uint,
    pub st_atime_nsec: core::ffi::c_uint,
    pub st_mtime: core::ffi::c_uint,
    pub st_mtime_nsec: core::ffi::c_uint,
    pub st_ctime: core::ffi::c_uint,
    pub st_ctime_nsec: core::ffi::c_uint,
    pub st_ino: core::ffi::c_ulonglong,
}
extern "C" {
    pub static mut __ia32_enabled: bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_i387_struct {
    pub cwd: core::ffi::c_ushort,
    pub swd: core::ffi::c_ushort,
    pub twd: core::ffi::c_ushort,
    pub fop: core::ffi::c_ushort,
    pub rip: __u64,
    pub rdp: __u64,
    pub mxcsr: __u32,
    pub mxcsr_mask: __u32,
    pub st_space: [__u32; 32usize],
    pub xmm_space: [__u32; 64usize],
    pub padding: [__u32; 24usize],
}
impl Default for user_i387_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user_regs_struct {
    pub r15: core::ffi::c_ulong,
    pub r14: core::ffi::c_ulong,
    pub r13: core::ffi::c_ulong,
    pub r12: core::ffi::c_ulong,
    pub bp: core::ffi::c_ulong,
    pub bx: core::ffi::c_ulong,
    pub r11: core::ffi::c_ulong,
    pub r10: core::ffi::c_ulong,
    pub r9: core::ffi::c_ulong,
    pub r8: core::ffi::c_ulong,
    pub ax: core::ffi::c_ulong,
    pub cx: core::ffi::c_ulong,
    pub dx: core::ffi::c_ulong,
    pub si: core::ffi::c_ulong,
    pub di: core::ffi::c_ulong,
    pub orig_ax: core::ffi::c_ulong,
    pub ip: core::ffi::c_ulong,
    pub cs: core::ffi::c_ulong,
    pub flags: core::ffi::c_ulong,
    pub sp: core::ffi::c_ulong,
    pub ss: core::ffi::c_ulong,
    pub fs_base: core::ffi::c_ulong,
    pub gs_base: core::ffi::c_ulong,
    pub ds: core::ffi::c_ulong,
    pub es: core::ffi::c_ulong,
    pub fs: core::ffi::c_ulong,
    pub gs: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user {
    pub regs: user_regs_struct,
    pub u_fpvalid: core::ffi::c_int,
    pub pad0: core::ffi::c_int,
    pub i387: user_i387_struct,
    pub u_tsize: core::ffi::c_ulong,
    pub u_dsize: core::ffi::c_ulong,
    pub u_ssize: core::ffi::c_ulong,
    pub start_code: core::ffi::c_ulong,
    pub start_stack: core::ffi::c_ulong,
    pub signal: core::ffi::c_long,
    pub reserved: core::ffi::c_int,
    pub pad1: core::ffi::c_int,
    pub u_ar0: core::ffi::c_ulong,
    pub u_fpstate: *mut user_i387_struct,
    pub magic: core::ffi::c_ulong,
    pub u_comm: [core::ffi::c_char; 32usize],
    pub u_debugreg: [core::ffi::c_ulong; 8usize],
    pub error_code: core::ffi::c_ulong,
    pub fault_address: core::ffi::c_ulong,
}
impl Default for user {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_ymmh_regs {
    pub ymmh_space: [__u32; 64usize],
}
impl Default for user_ymmh_regs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user_xstate_header {
    pub xfeatures: __u64,
    pub reserved1: [__u64; 2usize],
    pub reserved2: [__u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_xstateregs {
    pub i387: user_xstateregs__bindgen_ty_1,
    pub header: user_xstate_header,
    pub ymmh: user_ymmh_regs,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_xstateregs__bindgen_ty_1 {
    pub fpx_space: [__u64; 58usize],
    pub xstate_fx_sw: [__u64; 6usize],
}
impl Default for user_xstateregs__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for user_xstateregs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn x86_fsbase_read_task(task: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn x86_gsbase_read_task(task: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn x86_fsbase_write_task(task: *mut task_struct, fsbase: core::ffi::c_ulong);
}
extern "C" {
    pub fn x86_gsbase_write_task(task: *mut task_struct, gsbase: core::ffi::c_ulong);
}
extern "C" {
    pub fn x86_gsbase_read_cpu_inactive() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn x86_gsbase_write_cpu_inactive(gsbase: core::ffi::c_ulong);
}
extern "C" {
    pub fn x86_fsgsbase_read_task(
        task: *mut task_struct,
        selector: core::ffi::c_ushort,
    ) -> core::ffi::c_ulong;
}
pub type elf_greg_t = core::ffi::c_ulong;
pub type elf_gregset_t = [elf_greg_t; 27usize];
pub type elf_fpregset_t = user_i387_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vdso_image {
    pub data: *mut core::ffi::c_void,
    pub size: core::ffi::c_ulong,
    pub alt: core::ffi::c_ulong,
    pub alt_len: core::ffi::c_ulong,
    pub extable_base: core::ffi::c_ulong,
    pub extable_len: core::ffi::c_ulong,
    pub extable: *const core::ffi::c_void,
    pub sym_vvar_start: core::ffi::c_long,
    pub sym_vvar_page: core::ffi::c_long,
    pub sym_pvclock_page: core::ffi::c_long,
    pub sym_hvclock_page: core::ffi::c_long,
    pub sym_timens_page: core::ffi::c_long,
    pub sym_VDSO32_NOTE_MASK: core::ffi::c_long,
    pub sym___kernel_sigreturn: core::ffi::c_long,
    pub sym___kernel_rt_sigreturn: core::ffi::c_long,
    pub sym___kernel_vsyscall: core::ffi::c_long,
    pub sym_int80_landing_pad: core::ffi::c_long,
    pub sym_vdso32_sigreturn_landing_pad: core::ffi::c_long,
    pub sym_vdso32_rt_sigreturn_landing_pad: core::ffi::c_long,
}
impl Default for vdso_image {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static vdso_image_64: vdso_image;
}
extern "C" {
    pub static vdso_image_32: vdso_image;
}
extern "C" {
    pub fn init_vdso_image(image: *const vdso_image) -> core::ffi::c_int;
}
extern "C" {
    pub fn map_vdso_once(image: *const vdso_image, addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn fixup_vdso_exception(
        regs: *mut pt_regs,
        trapnr: core::ffi::c_int,
        error_code: core::ffi::c_ulong,
        fault_addr: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub static mut vdso64_enabled: core::ffi::c_uint;
}
extern "C" {
    pub static mut vdso32_enabled: core::ffi::c_uint;
}
extern "C" {
    pub fn compat_start_thread(regs: *mut pt_regs, new_ip: u32_, new_sp: u32_, x32: bool_);
}
extern "C" {
    pub fn set_personality_ia32(arg1: bool_);
}
extern "C" {
    pub fn set_personality_64bit();
}
extern "C" {
    pub static mut force_personality32: core::ffi::c_int;
}
extern "C" {
    pub static mut elf_hwcap2: u32_;
}
extern "C" {
    pub fn task_size_32bit() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn task_size_64bit(full_addr_space: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_mmap_base(is_legacy: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn mmap_address_hint_valid(addr: core::ffi::c_ulong, len: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn get_sigframe_size() -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_binprm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn arch_setup_additional_pages(
        bprm: *mut linux_binprm,
        uses_interp: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn compat_arch_setup_additional_pages(
        bprm: *mut linux_binprm,
        uses_interp: core::ffi::c_int,
        x32: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_syscall_is_vdso_sigreturn(regs: *mut pt_regs) -> bool_;
}
pub const align_flags_ALIGN_VA_32: align_flags = 1;
pub const align_flags_ALIGN_VA_64: align_flags = 2;
pub type align_flags = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct va_alignment {
    pub flags: core::ffi::c_int,
    pub mask: core::ffi::c_ulong,
    pub bits: core::ffi::c_ulong,
}
impl Default for va_alignment {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut va_align: va_alignment;
}
pub type Elf32_Addr = __u32;
pub type Elf32_Half = __u16;
pub type Elf32_Off = __u32;
pub type Elf32_Sword = __s32;
pub type Elf32_Word = __u32;
pub type Elf64_Addr = __u64;
pub type Elf64_Half = __u16;
pub type Elf64_SHalf = __s16;
pub type Elf64_Off = __u64;
pub type Elf64_Sword = __s32;
pub type Elf64_Word = __u32;
pub type Elf64_Xword = __u64;
pub type Elf64_Sxword = __s64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf32_Dyn {
    pub d_tag: Elf32_Sword,
    pub d_un: Elf32_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf32_Dyn__bindgen_ty_1 {
    pub d_val: Elf32_Sword,
    pub d_ptr: Elf32_Addr,
}
impl Default for Elf32_Dyn__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for Elf32_Dyn {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf64_Dyn {
    pub d_tag: Elf64_Sxword,
    pub d_un: Elf64_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf64_Dyn__bindgen_ty_1 {
    pub d_val: Elf64_Xword,
    pub d_ptr: Elf64_Addr,
}
impl Default for Elf64_Dyn__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for Elf64_Dyn {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_rel {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
}
pub type Elf32_Rel = elf32_rel;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_rel {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
}
pub type Elf64_Rel = elf64_rel;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_rela {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
    pub r_addend: Elf32_Sword,
}
pub type Elf32_Rela = elf32_rela;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_rela {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
    pub r_addend: Elf64_Sxword,
}
pub type Elf64_Rela = elf64_rela;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_sym {
    pub st_name: Elf32_Word,
    pub st_value: Elf32_Addr,
    pub st_size: Elf32_Word,
    pub st_info: core::ffi::c_uchar,
    pub st_other: core::ffi::c_uchar,
    pub st_shndx: Elf32_Half,
}
pub type Elf32_Sym = elf32_sym;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_sym {
    pub st_name: Elf64_Word,
    pub st_info: core::ffi::c_uchar,
    pub st_other: core::ffi::c_uchar,
    pub st_shndx: Elf64_Half,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
pub type Elf64_Sym = elf64_sym;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_hdr {
    pub e_ident: [core::ffi::c_uchar; 16usize],
    pub e_type: Elf32_Half,
    pub e_machine: Elf32_Half,
    pub e_version: Elf32_Word,
    pub e_entry: Elf32_Addr,
    pub e_phoff: Elf32_Off,
    pub e_shoff: Elf32_Off,
    pub e_flags: Elf32_Word,
    pub e_ehsize: Elf32_Half,
    pub e_phentsize: Elf32_Half,
    pub e_phnum: Elf32_Half,
    pub e_shentsize: Elf32_Half,
    pub e_shnum: Elf32_Half,
    pub e_shstrndx: Elf32_Half,
}
pub type Elf32_Ehdr = elf32_hdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_hdr {
    pub e_ident: [core::ffi::c_uchar; 16usize],
    pub e_type: Elf64_Half,
    pub e_machine: Elf64_Half,
    pub e_version: Elf64_Word,
    pub e_entry: Elf64_Addr,
    pub e_phoff: Elf64_Off,
    pub e_shoff: Elf64_Off,
    pub e_flags: Elf64_Word,
    pub e_ehsize: Elf64_Half,
    pub e_phentsize: Elf64_Half,
    pub e_phnum: Elf64_Half,
    pub e_shentsize: Elf64_Half,
    pub e_shnum: Elf64_Half,
    pub e_shstrndx: Elf64_Half,
}
pub type Elf64_Ehdr = elf64_hdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_phdr {
    pub p_type: Elf32_Word,
    pub p_offset: Elf32_Off,
    pub p_vaddr: Elf32_Addr,
    pub p_paddr: Elf32_Addr,
    pub p_filesz: Elf32_Word,
    pub p_memsz: Elf32_Word,
    pub p_flags: Elf32_Word,
    pub p_align: Elf32_Word,
}
pub type Elf32_Phdr = elf32_phdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_phdr {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
pub type Elf64_Phdr = elf64_phdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_shdr {
    pub sh_name: Elf32_Word,
    pub sh_type: Elf32_Word,
    pub sh_flags: Elf32_Word,
    pub sh_addr: Elf32_Addr,
    pub sh_offset: Elf32_Off,
    pub sh_size: Elf32_Word,
    pub sh_link: Elf32_Word,
    pub sh_info: Elf32_Word,
    pub sh_addralign: Elf32_Word,
    pub sh_entsize: Elf32_Word,
}
pub type Elf32_Shdr = elf32_shdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_shdr {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
pub type Elf64_Shdr = elf64_shdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_note {
    pub n_namesz: Elf32_Word,
    pub n_descsz: Elf32_Word,
    pub n_type: Elf32_Word,
}
pub type Elf32_Nhdr = elf32_note;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_note {
    pub n_namesz: Elf64_Word,
    pub n_descsz: Elf64_Word,
    pub n_type: Elf64_Word,
}
pub type Elf64_Nhdr = elf64_note;
extern "C" {
    pub static mut _DYNAMIC: [Elf64_Dyn; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct coredump_params {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct gnu_property {
    pub pr_type: u32_,
    pub pr_datasz: u32_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arch_elf_state {
    _unused: [u8; 0],
}
pub const KERNEL_PARAM_OPS_FL_NOARG: _bindgen_ty_95 = 1;
pub type _bindgen_ty_95 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_param_ops {
    pub flags: core::ffi::c_uint,
    pub set: ::core::option::Option<
        unsafe extern "C" fn(
            val: *const core::ffi::c_char,
            kp: *const kernel_param,
        ) -> core::ffi::c_int,
    >,
    pub get: ::core::option::Option<
        unsafe extern "C" fn(
            buffer: *mut core::ffi::c_char,
            kp: *const kernel_param,
        ) -> core::ffi::c_int,
    >,
    pub free: ::core::option::Option<unsafe extern "C" fn(arg: *mut core::ffi::c_void)>,
}
pub const KERNEL_PARAM_FL_UNSAFE: _bindgen_ty_96 = 1;
pub const KERNEL_PARAM_FL_HWPARAM: _bindgen_ty_96 = 2;
pub type _bindgen_ty_96 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_param {
    pub name: *const core::ffi::c_char,
    pub mod_: *mut module,
    pub ops: *const kernel_param_ops,
    pub perm: u16_,
    pub level: s8,
    pub flags: u8_,
    pub __bindgen_anon_1: kernel_param__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kernel_param__bindgen_ty_1 {
    pub arg: *mut core::ffi::c_void,
    pub str_: *const kparam_string,
    pub arr: *const kparam_array,
}
impl Default for kernel_param__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kernel_param {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static __start___param: [kernel_param; 0usize];
}
extern "C" {
    pub static __stop___param: [kernel_param; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kparam_string {
    pub maxlen: core::ffi::c_uint,
    pub string: *mut core::ffi::c_char,
}
impl Default for kparam_string {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kparam_array {
    pub max: core::ffi::c_uint,
    pub elemsize: core::ffi::c_uint,
    pub num: *mut core::ffi::c_uint,
    pub ops: *const kernel_param_ops,
    pub elem: *mut core::ffi::c_void,
}
impl Default for kparam_array {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kernel_param_lock(mod_: *mut module);
}
extern "C" {
    pub fn kernel_param_unlock(mod_: *mut module);
}
extern "C" {
    pub fn parameq(name1: *const core::ffi::c_char, name2: *const core::ffi::c_char) -> bool_;
}
extern "C" {
    pub fn parameqn(
        name1: *const core::ffi::c_char,
        name2: *const core::ffi::c_char,
        n: usize,
    ) -> bool_;
}
pub type parse_unknown_fn = ::core::option::Option<
    unsafe extern "C" fn(
        param: *mut core::ffi::c_char,
        val: *mut core::ffi::c_char,
        doing: *const core::ffi::c_char,
        arg: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn parse_args(
        name: *const core::ffi::c_char,
        args: *mut core::ffi::c_char,
        params: *const kernel_param,
        num: core::ffi::c_uint,
        level_min: s16,
        level_max: s16,
        arg: *mut core::ffi::c_void,
        unknown: parse_unknown_fn,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn destroy_params(params: *const kernel_param, num: core::ffi::c_uint);
}
extern "C" {
    pub static param_ops_byte: kernel_param_ops;
}
extern "C" {
    pub fn param_set_byte(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_byte(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_short: kernel_param_ops;
}
extern "C" {
    pub fn param_set_short(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_short(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_ushort: kernel_param_ops;
}
extern "C" {
    pub fn param_set_ushort(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_ushort(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_int: kernel_param_ops;
}
extern "C" {
    pub fn param_set_int(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_int(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_uint: kernel_param_ops;
}
extern "C" {
    pub fn param_set_uint(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_uint(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_set_uint_minmax(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
        min: core::ffi::c_uint,
        max: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_long: kernel_param_ops;
}
extern "C" {
    pub fn param_set_long(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_long(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_ulong: kernel_param_ops;
}
extern "C" {
    pub fn param_set_ulong(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_ulong(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_ullong: kernel_param_ops;
}
extern "C" {
    pub fn param_set_ullong(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_ullong(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_hexint: kernel_param_ops;
}
extern "C" {
    pub fn param_set_hexint(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_hexint(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_charp: kernel_param_ops;
}
extern "C" {
    pub fn param_set_charp(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_charp(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_free_charp(arg: *mut core::ffi::c_void);
}
extern "C" {
    pub static param_ops_bool: kernel_param_ops;
}
extern "C" {
    pub fn param_set_bool(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_bool(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_bool_enable_only: kernel_param_ops;
}
extern "C" {
    pub fn param_set_bool_enable_only(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_invbool: kernel_param_ops;
}
extern "C" {
    pub fn param_set_invbool(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_invbool(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_bint: kernel_param_ops;
}
extern "C" {
    pub fn param_set_bint(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
pub const hwparam_type_hwparam_ioport: hwparam_type = 0;
pub const hwparam_type_hwparam_iomem: hwparam_type = 1;
pub const hwparam_type_hwparam_ioport_or_iomem: hwparam_type = 2;
pub const hwparam_type_hwparam_irq: hwparam_type = 3;
pub const hwparam_type_hwparam_dma: hwparam_type = 4;
pub const hwparam_type_hwparam_dma_addr: hwparam_type = 5;
pub const hwparam_type_hwparam_other: hwparam_type = 6;
pub type hwparam_type = core::ffi::c_uint;
extern "C" {
    pub static param_array_ops: kernel_param_ops;
}
extern "C" {
    pub static param_ops_string: kernel_param_ops;
}
extern "C" {
    pub fn param_set_copystring(
        val: *const core::ffi::c_char,
        arg1: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_string(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_param_sysfs_setup(
        mod_: *mut module,
        kparam: *const kernel_param,
        num_params: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_param_sysfs_remove(mod_: *mut module);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct latch_tree_node {
    pub node: [rb_node; 2usize],
}
impl Default for latch_tree_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct latch_tree_root {
    pub seq: seqcount_latch_t,
    pub tree: [rb_root; 2usize],
}
impl Default for latch_tree_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct latch_tree_ops {
    pub less: ::core::option::Option<
        unsafe extern "C" fn(a: *mut latch_tree_node, b: *mut latch_tree_node) -> bool_,
    >,
    pub comp: ::core::option::Option<
        unsafe extern "C" fn(
            key: *mut core::ffi::c_void,
            b: *mut latch_tree_node,
        ) -> core::ffi::c_int,
    >,
}
pub const EI_ETYPE_NULL: _bindgen_ty_97 = 0;
pub const EI_ETYPE_ERRNO: _bindgen_ty_97 = 1;
pub const EI_ETYPE_ERRNO_NULL: _bindgen_ty_97 = 2;
pub const EI_ETYPE_TRUE: _bindgen_ty_97 = 3;
pub type _bindgen_ty_97 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct error_injection_entry {
    pub addr: core::ffi::c_ulong,
    pub etype: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ddebug {
    pub modname: *const core::ffi::c_char,
    pub function: *const core::ffi::c_char,
    pub filename: *const core::ffi::c_char,
    pub format: *const core::ffi::c_char,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub key: _ddebug__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ddebug__bindgen_ty_1 {
    pub dd_key_true: static_key_true,
    pub dd_key_false: static_key_false,
}
impl Default for _ddebug__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _ddebug {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl _ddebug {
    #[inline]
    pub fn lineno(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_lineno(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn class_id(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_class_id(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lineno: core::ffi::c_uint,
        class_id: core::ffi::c_uint,
        flags: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let lineno: u32 = unsafe { ::core::mem::transmute(lineno) };
            lineno as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let class_id: u32 = unsafe { ::core::mem::transmute(class_id) };
            class_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let flags: u32 = unsafe { ::core::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const class_map_type_DD_CLASS_TYPE_DISJOINT_BITS: class_map_type = 0;
pub const class_map_type_DD_CLASS_TYPE_LEVEL_NUM: class_map_type = 1;
pub const class_map_type_DD_CLASS_TYPE_DISJOINT_NAMES: class_map_type = 2;
pub const class_map_type_DD_CLASS_TYPE_LEVEL_NAMES: class_map_type = 3;
pub type class_map_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ddebug_class_map {
    pub link: list_head,
    pub mod_: *mut module,
    pub mod_name: *const core::ffi::c_char,
    pub class_names: *mut *const core::ffi::c_char,
    pub length: core::ffi::c_int,
    pub base: core::ffi::c_int,
    pub map_type: class_map_type,
}
impl Default for ddebug_class_map {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ddebug_info {
    pub descs: *mut _ddebug,
    pub classes: *mut ddebug_class_map,
    pub num_descs: core::ffi::c_uint,
    pub num_classes: core::ffi::c_uint,
}
impl Default for _ddebug_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ddebug_class_param {
    pub __bindgen_anon_1: ddebug_class_param__bindgen_ty_1,
    pub flags: [core::ffi::c_char; 8usize],
    pub map: *const ddebug_class_map,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ddebug_class_param__bindgen_ty_1 {
    pub bits: *mut core::ffi::c_ulong,
    pub lvl: *mut core::ffi::c_uint,
}
impl Default for ddebug_class_param__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ddebug_class_param {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static param_ops_dyndbg_classes: kernel_param_ops;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mod_arch_specific {
    pub num_orcs: core::ffi::c_uint,
    pub orc_unwind_ip: *mut core::ffi::c_int,
    pub orc_unwind: *mut orc_entry,
}
impl Default for mod_arch_specific {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct modversion_info {
    pub crc: core::ffi::c_ulong,
    pub name: [core::ffi::c_char; 56usize],
}
impl Default for modversion_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_kobject {
    pub kobj: kobject,
    pub mod_: *mut module,
    pub drivers_dir: *mut kobject,
    pub mp: *mut module_param_attrs,
    pub kobj_completion: *mut completion,
}
impl Default for module_kobject {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_attribute {
    pub attr: attribute,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut module_attribute,
            arg2: *mut module_kobject,
            arg3: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut module_attribute,
            arg2: *mut module_kobject,
            arg3: *const core::ffi::c_char,
            count: usize,
        ) -> isize,
    >,
    pub setup: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut module, arg2: *const core::ffi::c_char),
    >,
    pub test: ::core::option::Option<unsafe extern "C" fn(arg1: *mut module) -> core::ffi::c_int>,
    pub free: ::core::option::Option<unsafe extern "C" fn(arg1: *mut module)>,
}
impl Default for module_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_version_attribute {
    pub mattr: module_attribute,
    pub module_name: *const core::ffi::c_char,
    pub version: *const core::ffi::c_char,
}
impl Default for module_version_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __modver_version_show(
        arg1: *mut module_attribute,
        arg2: *mut module_kobject,
        arg3: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub static mut module_uevent: module_attribute;
}
extern "C" {
    pub fn init_module() -> core::ffi::c_int;
}
extern "C" {
    pub fn cleanup_module();
}
extern "C" {
    pub static mut modules_disabled: core::ffi::c_int;
}
extern "C" {
    pub fn __symbol_get(symbol: *const core::ffi::c_char) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __symbol_get_gpl(symbol: *const core::ffi::c_char) -> *mut core::ffi::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_use {
    pub source_list: list_head,
    pub target_list: list_head,
    pub source: *mut module,
    pub target: *mut module,
}
impl Default for module_use {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const module_state_MODULE_STATE_LIVE: module_state = 0;
pub const module_state_MODULE_STATE_COMING: module_state = 1;
pub const module_state_MODULE_STATE_GOING: module_state = 2;
pub const module_state_MODULE_STATE_UNFORMED: module_state = 3;
pub type module_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mod_tree_node {
    pub mod_: *mut module,
    pub node: latch_tree_node,
}
impl Default for mod_tree_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const mod_mem_type_MOD_TEXT: mod_mem_type = 0;
pub const mod_mem_type_MOD_DATA: mod_mem_type = 1;
pub const mod_mem_type_MOD_RODATA: mod_mem_type = 2;
pub const mod_mem_type_MOD_RO_AFTER_INIT: mod_mem_type = 3;
pub const mod_mem_type_MOD_INIT_TEXT: mod_mem_type = 4;
pub const mod_mem_type_MOD_INIT_DATA: mod_mem_type = 5;
pub const mod_mem_type_MOD_INIT_RODATA: mod_mem_type = 6;
pub const mod_mem_type_MOD_MEM_NUM_TYPES: mod_mem_type = 7;
pub const mod_mem_type_MOD_INVALID: mod_mem_type = -1;
pub type mod_mem_type = core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_memory {
    pub base: *mut core::ffi::c_void,
    pub size: core::ffi::c_uint,
    pub mtn: mod_tree_node,
}
impl Default for module_memory {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mod_kallsyms {
    pub symtab: *mut Elf64_Sym,
    pub num_symtab: core::ffi::c_uint,
    pub strtab: *mut core::ffi::c_char,
    pub typetab: *mut core::ffi::c_char,
}
impl Default for mod_kallsyms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __module_text_address(addr: core::ffi::c_ulong) -> *mut module;
}
extern "C" {
    pub fn __module_address(addr: core::ffi::c_ulong) -> *mut module;
}
extern "C" {
    pub fn is_module_address(addr: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn __is_module_percpu_address(
        addr: core::ffi::c_ulong,
        can_addr: *mut core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn is_module_percpu_address(addr: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn is_module_text_address(addr: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn find_module(name: *const core::ffi::c_char) -> *mut module;
}
extern "C" {
    pub fn __module_put_and_kthread_exit(mod_: *mut module, code: core::ffi::c_long) -> !;
}
extern "C" {
    pub fn module_refcount(mod_: *mut module) -> core::ffi::c_int;
}
extern "C" {
    pub fn __symbol_put(symbol: *const core::ffi::c_char);
}
extern "C" {
    pub fn symbol_put_addr(addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn __module_get(module: *mut module);
}
extern "C" {
    pub fn try_module_get(module: *mut module) -> bool_;
}
extern "C" {
    pub fn module_put(module: *mut module);
}
extern "C" {
    pub fn dereference_module_function_descriptor(
        mod_: *mut module,
        ptr: *mut core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn register_module_notifier(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_module_notifier(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn print_modules();
}
extern "C" {
    pub fn set_module_sig_enforced();
}
extern "C" {
    pub static mut module_kset: *mut kset;
}
extern "C" {
    pub static module_ktype: kobj_type;
}
extern "C" {
    pub fn module_bug_finalize(arg1: *const Elf64_Ehdr, arg2: *const Elf64_Shdr, arg3: *mut module);
}
extern "C" {
    pub fn module_bug_cleanup(arg1: *mut module);
}
extern "C" {
    pub fn retpoline_module_ok(has_retpoline: bool_) -> bool_;
}
extern "C" {
    pub fn module_kallsyms_on_each_symbol(
        modname: *const core::ffi::c_char,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut core::ffi::c_void,
                arg2: *const core::ffi::c_char,
                arg3: core::ffi::c_ulong,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_address_lookup(
        addr: core::ffi::c_ulong,
        symbolsize: *mut core::ffi::c_ulong,
        offset: *mut core::ffi::c_ulong,
        modname: *mut *mut core::ffi::c_char,
        modbuildid: *mut *const core::ffi::c_uchar,
        namebuf: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn lookup_module_symbol_name(
        addr: core::ffi::c_ulong,
        symname: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn lookup_module_symbol_attrs(
        addr: core::ffi::c_ulong,
        size: *mut core::ffi::c_ulong,
        offset: *mut core::ffi::c_ulong,
        modname: *mut core::ffi::c_char,
        name: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_get_kallsym(
        symnum: core::ffi::c_uint,
        value: *mut core::ffi::c_ulong,
        type_: *mut core::ffi::c_char,
        name: *mut core::ffi::c_char,
        module_name: *mut core::ffi::c_char,
        exported: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_kallsyms_lookup_name(name: *const core::ffi::c_char) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn find_kallsyms_symbol_value(
        mod_: *mut module,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_ulong;
}
pub const probe_type_PROBE_DEFAULT_STRATEGY: probe_type = 0;
pub const probe_type_PROBE_PREFER_ASYNCHRONOUS: probe_type = 1;
pub const probe_type_PROBE_FORCE_SYNCHRONOUS: probe_type = 2;
pub type probe_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_driver {
    pub name: *const core::ffi::c_char,
    pub bus: *const bus_type,
    pub owner: *mut module,
    pub mod_name: *const core::ffi::c_char,
    pub suppress_bind_attrs: bool_,
    pub probe_type: probe_type,
    pub of_match_table: *mut of_device_id,
    pub acpi_match_table: *mut acpi_device_id,
    pub probe: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub sync_state: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub remove: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub shutdown: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub suspend: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut device, state: pm_message_t) -> core::ffi::c_int,
    >,
    pub resume: ::core::option::Option<unsafe extern "C" fn(dev: *mut device) -> core::ffi::c_int>,
    pub groups: *mut *const attribute_group,
    pub dev_groups: *mut *const attribute_group,
    pub pm: *const dev_pm_ops,
    pub coredump: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub p: *mut driver_private,
}
impl Default for device_driver {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn driver_register(drv: *mut device_driver) -> core::ffi::c_int;
}
extern "C" {
    pub fn driver_unregister(drv: *mut device_driver);
}
extern "C" {
    pub fn driver_find(name: *const core::ffi::c_char, bus: *const bus_type) -> *mut device_driver;
}
extern "C" {
    pub fn driver_probe_done() -> bool_;
}
extern "C" {
    pub fn wait_for_device_probe();
}
extern "C" {
    pub fn wait_for_init_devices_probe();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct driver_attribute {
    pub attr: attribute,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(driver: *mut device_driver, buf: *mut core::ffi::c_char) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            driver: *mut device_driver,
            buf: *const core::ffi::c_char,
            count: usize,
        ) -> isize,
    >,
}
impl Default for driver_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn driver_create_file(
        driver: *const device_driver,
        attr: *const driver_attribute,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn driver_remove_file(driver: *const device_driver, attr: *const driver_attribute);
}
extern "C" {
    pub fn driver_set_override(
        dev: *mut device,
        override_: *mut *const core::ffi::c_char,
        s: *const core::ffi::c_char,
        len: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn driver_for_each_device(
        drv: *mut device_driver,
        start: *mut device,
        data: *mut core::ffi::c_void,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                arg1: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn driver_find_device(
        drv: *const device_driver,
        start: *mut device,
        data: *const core::ffi::c_void,
        match_: ::core::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *const core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut device;
}
extern "C" {
    pub fn driver_deferred_probe_add(dev: *mut device);
}
extern "C" {
    pub fn driver_deferred_probe_check_state(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn driver_init();
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dev_archdata {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pdev_archdata {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_private {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct driver_private {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct subsys_private {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iommu_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_pin_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_iommu {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msi_device_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct subsys_interface {
    pub name: *const core::ffi::c_char,
    pub subsys: *const bus_type,
    pub node: list_head,
    pub add_dev: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut device, sif: *mut subsys_interface) -> core::ffi::c_int,
    >,
    pub remove_dev:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut device, sif: *mut subsys_interface)>,
}
impl Default for subsys_interface {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn subsys_interface_register(sif: *mut subsys_interface) -> core::ffi::c_int;
}
extern "C" {
    pub fn subsys_interface_unregister(sif: *mut subsys_interface);
}
extern "C" {
    pub fn subsys_system_register(
        subsys: *const bus_type,
        groups: *mut *const attribute_group,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn subsys_virtual_register(
        subsys: *const bus_type,
        groups: *mut *const attribute_group,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_type {
    pub name: *const core::ffi::c_char,
    pub groups: *mut *const attribute_group,
    pub uevent: ::core::option::Option<
        unsafe extern "C" fn(dev: *const device, env: *mut kobj_uevent_env) -> core::ffi::c_int,
    >,
    pub devnode: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *const device,
            mode: *mut umode_t,
            uid: *mut kuid_t,
            gid: *mut kgid_t,
        ) -> *mut core::ffi::c_char,
    >,
    pub release: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub pm: *const dev_pm_ops,
}
impl Default for device_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_attribute {
    pub attr: attribute,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut device,
            attr: *mut device_attribute,
            buf: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut device,
            attr: *mut device_attribute,
            buf: *const core::ffi::c_char,
            count: usize,
        ) -> isize,
    >,
}
impl Default for device_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_ext_attribute {
    pub attr: device_attribute,
    pub var: *mut core::ffi::c_void,
}
impl Default for dev_ext_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn device_show_ulong(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn device_store_ulong(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *const core::ffi::c_char,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn device_show_int(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn device_store_int(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *const core::ffi::c_char,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn device_show_bool(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn device_store_bool(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *const core::ffi::c_char,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn device_show_string(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn device_create_file(
        device: *mut device,
        entry: *const device_attribute,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_remove_file(dev: *mut device, attr: *const device_attribute);
}
extern "C" {
    pub fn device_remove_file_self(dev: *mut device, attr: *const device_attribute) -> bool_;
}
extern "C" {
    pub fn device_create_bin_file(dev: *mut device, attr: *const bin_attribute)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn device_remove_bin_file(dev: *mut device, attr: *const bin_attribute);
}
pub type dr_release_t =
    ::core::option::Option<unsafe extern "C" fn(dev: *mut device, res: *mut core::ffi::c_void)>;
pub type dr_match_t = ::core::option::Option<
    unsafe extern "C" fn(
        dev: *mut device,
        res: *mut core::ffi::c_void,
        match_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn __devres_alloc_node(
        release: dr_release_t,
        size: usize,
        gfp: gfp_t,
        nid: core::ffi::c_int,
        name: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devres_for_each_res(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut core::ffi::c_void,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut device,
                arg2: *mut core::ffi::c_void,
                arg3: *mut core::ffi::c_void,
            ),
        >,
        data: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn devres_free(res: *mut core::ffi::c_void);
}
extern "C" {
    pub fn devres_add(dev: *mut device, res: *mut core::ffi::c_void);
}
extern "C" {
    pub fn devres_find(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devres_get(
        dev: *mut device,
        new_res: *mut core::ffi::c_void,
        match_: dr_match_t,
        match_data: *mut core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devres_remove(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devres_destroy(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn devres_release(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn devres_open_group(
        dev: *mut device,
        id: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devres_close_group(dev: *mut device, id: *mut core::ffi::c_void);
}
extern "C" {
    pub fn devres_remove_group(dev: *mut device, id: *mut core::ffi::c_void);
}
extern "C" {
    pub fn devres_release_group(dev: *mut device, id: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn devm_kmalloc(dev: *mut device, size: usize, gfp: gfp_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devm_krealloc(
        dev: *mut device,
        ptr: *mut core::ffi::c_void,
        size: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devm_kvasprintf(
        dev: *mut device,
        gfp: gfp_t,
        fmt: *const core::ffi::c_char,
        ap: *mut __va_list_tag,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn devm_kasprintf(
        dev: *mut device,
        gfp: gfp_t,
        fmt: *const core::ffi::c_char,
        ...
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn devm_kfree(dev: *mut device, p: *const core::ffi::c_void);
}
extern "C" {
    pub fn devm_kstrdup(
        dev: *mut device,
        s: *const core::ffi::c_char,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn devm_kstrdup_const(
        dev: *mut device,
        s: *const core::ffi::c_char,
        gfp: gfp_t,
    ) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn devm_kmemdup(
        dev: *mut device,
        src: *const core::ffi::c_void,
        len: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devm_get_free_pages(
        dev: *mut device,
        gfp_mask: gfp_t,
        order: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn devm_free_pages(dev: *mut device, addr: core::ffi::c_ulong);
}
extern "C" {
    pub fn devm_ioremap_resource(dev: *mut device, res: *const resource) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devm_ioremap_resource_wc(
        dev: *mut device,
        res: *const resource,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devm_of_iomap(
        dev: *mut device,
        node: *mut device_node,
        index: core::ffi::c_int,
        size: *mut resource_size_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devm_remove_action(
        dev: *mut device,
        action: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
        data: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn devm_release_action(
        dev: *mut device,
        action: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
        data: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __devm_add_action(
        dev: *mut device,
        action: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
        data: *mut core::ffi::c_void,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __devm_alloc_percpu(
        dev: *mut device,
        size: usize,
        align: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn devm_free_percpu(dev: *mut device, pdata: *mut core::ffi::c_void);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct device_dma_parameters {
    pub max_segment_size: core::ffi::c_uint,
    pub min_align_mask: core::ffi::c_uint,
    pub segment_boundary_mask: core::ffi::c_ulong,
}
pub const device_link_state_DL_STATE_NONE: device_link_state = -1;
pub const device_link_state_DL_STATE_DORMANT: device_link_state = 0;
pub const device_link_state_DL_STATE_AVAILABLE: device_link_state = 1;
pub const device_link_state_DL_STATE_CONSUMER_PROBE: device_link_state = 2;
pub const device_link_state_DL_STATE_ACTIVE: device_link_state = 3;
pub const device_link_state_DL_STATE_SUPPLIER_UNBIND: device_link_state = 4;
pub type device_link_state = core::ffi::c_int;
pub const dl_dev_state_DL_DEV_NO_DRIVER: dl_dev_state = 0;
pub const dl_dev_state_DL_DEV_PROBING: dl_dev_state = 1;
pub const dl_dev_state_DL_DEV_DRIVER_BOUND: dl_dev_state = 2;
pub const dl_dev_state_DL_DEV_UNBINDING: dl_dev_state = 3;
pub type dl_dev_state = core::ffi::c_uint;
pub const device_removable_DEVICE_REMOVABLE_NOT_SUPPORTED: device_removable = 0;
pub const device_removable_DEVICE_REMOVABLE_UNKNOWN: device_removable = 1;
pub const device_removable_DEVICE_FIXED: device_removable = 2;
pub const device_removable_DEVICE_REMOVABLE: device_removable = 3;
pub type device_removable = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_links_info {
    pub suppliers: list_head,
    pub consumers: list_head,
    pub defer_sync: list_head,
    pub status: dl_dev_state,
}
impl Default for dev_links_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_msi_info {
    pub domain: *mut irq_domain,
    pub data: *mut msi_device_data,
}
impl Default for dev_msi_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const device_physical_location_panel_DEVICE_PANEL_TOP: device_physical_location_panel = 0;
pub const device_physical_location_panel_DEVICE_PANEL_BOTTOM: device_physical_location_panel = 1;
pub const device_physical_location_panel_DEVICE_PANEL_LEFT: device_physical_location_panel = 2;
pub const device_physical_location_panel_DEVICE_PANEL_RIGHT: device_physical_location_panel = 3;
pub const device_physical_location_panel_DEVICE_PANEL_FRONT: device_physical_location_panel = 4;
pub const device_physical_location_panel_DEVICE_PANEL_BACK: device_physical_location_panel = 5;
pub const device_physical_location_panel_DEVICE_PANEL_UNKNOWN: device_physical_location_panel = 6;
pub type device_physical_location_panel = core::ffi::c_uint;
pub const device_physical_location_vertical_position_DEVICE_VERT_POS_UPPER:
    device_physical_location_vertical_position = 0;
pub const device_physical_location_vertical_position_DEVICE_VERT_POS_CENTER:
    device_physical_location_vertical_position = 1;
pub const device_physical_location_vertical_position_DEVICE_VERT_POS_LOWER:
    device_physical_location_vertical_position = 2;
pub type device_physical_location_vertical_position = core::ffi::c_uint;
pub const device_physical_location_horizontal_position_DEVICE_HORI_POS_LEFT:
    device_physical_location_horizontal_position = 0;
pub const device_physical_location_horizontal_position_DEVICE_HORI_POS_CENTER:
    device_physical_location_horizontal_position = 1;
pub const device_physical_location_horizontal_position_DEVICE_HORI_POS_RIGHT:
    device_physical_location_horizontal_position = 2;
pub type device_physical_location_horizontal_position = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_physical_location {
    pub panel: device_physical_location_panel,
    pub vertical_position: device_physical_location_vertical_position,
    pub horizontal_position: device_physical_location_horizontal_position,
    pub dock: bool_,
    pub lid: bool_,
}
impl Default for device_physical_location {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device {
    pub kobj: kobject,
    pub parent: *mut device,
    pub p: *mut device_private,
    pub init_name: *const core::ffi::c_char,
    pub type_: *const device_type,
    pub bus: *const bus_type,
    pub driver: *mut device_driver,
    pub platform_data: *mut core::ffi::c_void,
    pub driver_data: *mut core::ffi::c_void,
    pub mutex: mutex,
    pub links: dev_links_info,
    pub power: dev_pm_info,
    pub pm_domain: *mut dev_pm_domain,
    pub msi: dev_msi_info,
    pub dma_ops: *mut dma_map_ops,
    pub dma_mask: *mut u64_,
    pub coherent_dma_mask: u64_,
    pub bus_dma_limit: u64_,
    pub dma_range_map: *mut bus_dma_region,
    pub dma_parms: *mut device_dma_parameters,
    pub dma_pools: list_head,
    pub dma_io_tlb_mem: *mut io_tlb_mem,
    pub archdata: dev_archdata,
    pub of_node: *mut device_node,
    pub fwnode: *mut fwnode_handle,
    pub numa_node: core::ffi::c_int,
    pub devt: dev_t,
    pub id: u32_,
    pub devres_lock: spinlock_t,
    pub devres_head: list_head,
    pub class: *const class,
    pub groups: *mut *const attribute_group,
    pub release: ::core::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub iommu_group: *mut iommu_group,
    pub iommu: *mut dev_iommu,
    pub physical_location: *mut device_physical_location,
    pub removable: device_removable,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl Default for device {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl device {
    #[inline]
    pub fn offline_disabled(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offline_disabled(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offline(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offline(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn of_node_reused(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_of_node_reused(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_synced(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_state_synced(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_match(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_can_match(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_skip_sync(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dma_skip_sync(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        offline_disabled: bool_,
        offline: bool_,
        of_node_reused: bool_,
        state_synced: bool_,
        can_match: bool_,
        dma_skip_sync: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let offline_disabled: u8 = unsafe { ::core::mem::transmute(offline_disabled) };
            offline_disabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let offline: u8 = unsafe { ::core::mem::transmute(offline) };
            offline as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let of_node_reused: u8 = unsafe { ::core::mem::transmute(of_node_reused) };
            of_node_reused as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let state_synced: u8 = unsafe { ::core::mem::transmute(state_synced) };
            state_synced as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let can_match: u8 = unsafe { ::core::mem::transmute(can_match) };
            can_match as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dma_skip_sync: u8 = unsafe { ::core::mem::transmute(dma_skip_sync) };
            dma_skip_sync as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_link {
    pub supplier: *mut device,
    pub s_node: list_head,
    pub consumer: *mut device,
    pub c_node: list_head,
    pub link_dev: device,
    pub status: device_link_state,
    pub flags: u32_,
    pub rpm_active: refcount_t,
    pub kref: kref,
    pub rm_work: work_struct,
    pub supplier_preactivated: bool_,
}
impl Default for device_link {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wakeup_source {
    pub name: *const core::ffi::c_char,
    pub id: core::ffi::c_int,
    pub entry: list_head,
    pub lock: spinlock_t,
    pub wakeirq: *mut wake_irq,
    pub timer: timer_list,
    pub timer_expires: core::ffi::c_ulong,
    pub total_time: ktime_t,
    pub max_time: ktime_t,
    pub last_time: ktime_t,
    pub start_prevent_time: ktime_t,
    pub prevent_sleep_time: ktime_t,
    pub event_count: core::ffi::c_ulong,
    pub active_count: core::ffi::c_ulong,
    pub relax_count: core::ffi::c_ulong,
    pub expire_count: core::ffi::c_ulong,
    pub wakeup_count: core::ffi::c_ulong,
    pub dev: *mut device,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl Default for wakeup_source {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl wakeup_source {
    #[inline]
    pub fn active(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_active(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autosleep_enabled(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_autosleep_enabled(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        active: bool_,
        autosleep_enabled: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let active: u8 = unsafe { ::core::mem::transmute(active) };
            active as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let autosleep_enabled: u8 = unsafe { ::core::mem::transmute(autosleep_enabled) };
            autosleep_enabled as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn wakeup_source_create(name: *const core::ffi::c_char) -> *mut wakeup_source;
}
extern "C" {
    pub fn wakeup_source_destroy(ws: *mut wakeup_source);
}
extern "C" {
    pub fn wakeup_source_add(ws: *mut wakeup_source);
}
extern "C" {
    pub fn wakeup_source_remove(ws: *mut wakeup_source);
}
extern "C" {
    pub fn wakeup_source_register(
        dev: *mut device,
        name: *const core::ffi::c_char,
    ) -> *mut wakeup_source;
}
extern "C" {
    pub fn wakeup_source_unregister(ws: *mut wakeup_source);
}
extern "C" {
    pub fn wakeup_sources_read_lock() -> core::ffi::c_int;
}
extern "C" {
    pub fn wakeup_sources_read_unlock(idx: core::ffi::c_int);
}
extern "C" {
    pub fn wakeup_sources_walk_start() -> *mut wakeup_source;
}
extern "C" {
    pub fn wakeup_sources_walk_next(ws: *mut wakeup_source) -> *mut wakeup_source;
}
extern "C" {
    pub fn device_wakeup_enable(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_wakeup_disable(dev: *mut device);
}
extern "C" {
    pub fn device_set_wakeup_capable(dev: *mut device, capable: bool_);
}
extern "C" {
    pub fn device_set_wakeup_enable(dev: *mut device, enable: bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn __pm_stay_awake(ws: *mut wakeup_source);
}
extern "C" {
    pub fn pm_stay_awake(dev: *mut device);
}
extern "C" {
    pub fn __pm_relax(ws: *mut wakeup_source);
}
extern "C" {
    pub fn pm_relax(dev: *mut device);
}
extern "C" {
    pub fn pm_wakeup_ws_event(ws: *mut wakeup_source, msec: core::ffi::c_uint, hard: bool_);
}
extern "C" {
    pub fn pm_wakeup_dev_event(dev: *mut device, msec: core::ffi::c_uint, hard: bool_);
}
extern "C" {
    pub fn dev_set_name(dev: *mut device, name: *const core::ffi::c_char, ...) -> core::ffi::c_int;
}
pub type class_device_t = *mut device;
extern "C" {
    pub fn device_register(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_unregister(dev: *mut device);
}
extern "C" {
    pub fn device_initialize(dev: *mut device);
}
extern "C" {
    pub fn device_add(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_del(dev: *mut device);
}
extern "C" {
    pub fn device_for_each_child(
        dev: *mut device,
        data: *mut core::ffi::c_void,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_for_each_child_reverse(
        dev: *mut device,
        data: *mut core::ffi::c_void,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_find_child(
        dev: *mut device,
        data: *mut core::ffi::c_void,
        match_: ::core::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut device;
}
extern "C" {
    pub fn device_find_child_by_name(
        parent: *mut device,
        name: *const core::ffi::c_char,
    ) -> *mut device;
}
extern "C" {
    pub fn device_find_any_child(parent: *mut device) -> *mut device;
}
extern "C" {
    pub fn device_rename(dev: *mut device, new_name: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_move(
        dev: *mut device,
        new_parent: *mut device,
        dpm_order: dpm_order,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_change_owner(dev: *mut device, kuid: kuid_t, kgid: kgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn lock_device_hotplug();
}
extern "C" {
    pub fn unlock_device_hotplug();
}
extern "C" {
    pub fn lock_device_hotplug_sysfs() -> core::ffi::c_int;
}
extern "C" {
    pub fn device_offline(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_online(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_primary_fwnode(dev: *mut device, fwnode: *mut fwnode_handle);
}
extern "C" {
    pub fn set_secondary_fwnode(dev: *mut device, fwnode: *mut fwnode_handle);
}
extern "C" {
    pub fn device_set_node(dev: *mut device, fwnode: *mut fwnode_handle);
}
extern "C" {
    pub fn device_set_of_node_from_dev(dev: *mut device, dev2: *const device);
}
extern "C" {
    pub fn __root_device_register(
        name: *const core::ffi::c_char,
        owner: *mut module,
    ) -> *mut device;
}
extern "C" {
    pub fn root_device_unregister(root: *mut device);
}
extern "C" {
    pub fn device_driver_attach(drv: *const device_driver, dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_bind_driver(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_release_driver(dev: *mut device);
}
extern "C" {
    pub fn device_attach(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn driver_attach(drv: *const device_driver) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_initial_probe(dev: *mut device);
}
extern "C" {
    pub fn device_reprobe(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_is_bound(dev: *mut device) -> bool_;
}
extern "C" {
    pub fn device_create(
        cls: *const class,
        parent: *mut device,
        devt: dev_t,
        drvdata: *mut core::ffi::c_void,
        fmt: *const core::ffi::c_char,
        ...
    ) -> *mut device;
}
extern "C" {
    pub fn device_create_with_groups(
        cls: *const class,
        parent: *mut device,
        devt: dev_t,
        drvdata: *mut core::ffi::c_void,
        groups: *mut *const attribute_group,
        fmt: *const core::ffi::c_char,
        ...
    ) -> *mut device;
}
extern "C" {
    pub fn device_destroy(cls: *const class, devt: dev_t);
}
extern "C" {
    pub fn device_add_groups(
        dev: *mut device,
        groups: *mut *const attribute_group,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn device_remove_groups(dev: *mut device, groups: *mut *const attribute_group);
}
extern "C" {
    pub fn devm_device_add_group(dev: *mut device, grp: *const attribute_group)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn get_device(dev: *mut device) -> *mut device;
}
extern "C" {
    pub fn put_device(dev: *mut device);
}
extern "C" {
    pub fn kill_device(dev: *mut device) -> bool_;
}
extern "C" {
    pub fn devtmpfs_mount() -> core::ffi::c_int;
}
extern "C" {
    pub fn device_shutdown();
}
extern "C" {
    pub fn dev_driver_string(dev: *const device) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn device_link_add(
        consumer: *mut device,
        supplier: *mut device,
        flags: u32_,
    ) -> *mut device_link;
}
extern "C" {
    pub fn device_link_del(link: *mut device_link);
}
extern "C" {
    pub fn device_link_remove(consumer: *mut core::ffi::c_void, supplier: *mut device);
}
extern "C" {
    pub fn device_links_supplier_sync_state_pause();
}
extern "C" {
    pub fn device_links_supplier_sync_state_resume();
}
extern "C" {
    pub fn device_link_wait_removal();
}
extern "C" {
    pub fn early_ioremap(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_memremap(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_memremap_ro(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_memremap_prot(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
        prot_val: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_iounmap(addr: *mut core::ffi::c_void, size: core::ffi::c_ulong);
}
extern "C" {
    pub fn early_memunmap(addr: *mut core::ffi::c_void, size: core::ffi::c_ulong);
}
extern "C" {
    pub fn early_ioremap_init();
}
extern "C" {
    pub fn early_ioremap_setup();
}
extern "C" {
    pub fn early_ioremap_reset();
}
extern "C" {
    pub fn copy_from_early_mem(
        dest: *mut core::ffi::c_void,
        src: phys_addr_t,
        size: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn valid_phys_addr_range(addr: phys_addr_t, size: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn valid_mmap_phys_addr_range(pfn: core::ffi::c_ulong, size: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn ioremap_uc(offset: resource_size_t, size: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn ioremap_cache(
        offset: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn ioremap_prot(
        offset: resource_size_t,
        size: core::ffi::c_ulong,
        prot_val: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn ioremap_encrypted(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn ioremap(offset: resource_size_t, size: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn iounmap(addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn memcpy_fromio(arg1: *mut core::ffi::c_void, arg2: *const core::ffi::c_void, arg3: usize);
}
extern "C" {
    pub fn memcpy_toio(arg1: *mut core::ffi::c_void, arg2: *const core::ffi::c_void, arg3: usize);
}
extern "C" {
    pub fn memset_io(arg1: *mut core::ffi::c_void, arg2: core::ffi::c_int, arg3: usize);
}
extern "C" {
    pub fn native_io_delay();
}
extern "C" {
    pub static mut io_delay_type: core::ffi::c_int;
}
extern "C" {
    pub fn io_delay_init();
}
extern "C" {
    pub fn xlate_dev_mem_ptr(phys: phys_addr_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn unxlate_dev_mem_ptr(phys: phys_addr_t, addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn ioremap_change_attr(
        vaddr: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        pcm: page_cache_mode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ioremap_wc(offset: resource_size_t, size: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn ioremap_wt(offset: resource_size_t, size: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn is_early_ioremap_ptep(ptep: *mut pte_t) -> bool_;
}
extern "C" {
    pub fn ioread8(arg1: *const core::ffi::c_void) -> core::ffi::c_uint;
}
extern "C" {
    pub fn ioread16(arg1: *const core::ffi::c_void) -> core::ffi::c_uint;
}
extern "C" {
    pub fn ioread16be(arg1: *const core::ffi::c_void) -> core::ffi::c_uint;
}
extern "C" {
    pub fn ioread32(arg1: *const core::ffi::c_void) -> core::ffi::c_uint;
}
extern "C" {
    pub fn ioread32be(arg1: *const core::ffi::c_void) -> core::ffi::c_uint;
}
extern "C" {
    pub fn ioread64(arg1: *const core::ffi::c_void) -> u64_;
}
extern "C" {
    pub fn ioread64be(arg1: *const core::ffi::c_void) -> u64_;
}
extern "C" {
    pub fn ioread64_lo_hi(addr: *const core::ffi::c_void) -> u64_;
}
extern "C" {
    pub fn ioread64_hi_lo(addr: *const core::ffi::c_void) -> u64_;
}
extern "C" {
    pub fn ioread64be_lo_hi(addr: *const core::ffi::c_void) -> u64_;
}
extern "C" {
    pub fn ioread64be_hi_lo(addr: *const core::ffi::c_void) -> u64_;
}
extern "C" {
    pub fn iowrite8(arg1: u8_, arg2: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite16(arg1: u16_, arg2: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite16be(arg1: u16_, arg2: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite32(arg1: u32_, arg2: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite32be(arg1: u32_, arg2: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite64(arg1: u64_, arg2: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite64be(arg1: u64_, arg2: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite64_lo_hi(val: u64_, addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite64_hi_lo(val: u64_, addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite64be_lo_hi(val: u64_, addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn iowrite64be_hi_lo(val: u64_, addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn ioread8_rep(
        port: *const core::ffi::c_void,
        buf: *mut core::ffi::c_void,
        count: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn ioread16_rep(
        port: *const core::ffi::c_void,
        buf: *mut core::ffi::c_void,
        count: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn ioread32_rep(
        port: *const core::ffi::c_void,
        buf: *mut core::ffi::c_void,
        count: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn iowrite8_rep(
        port: *mut core::ffi::c_void,
        buf: *const core::ffi::c_void,
        count: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn iowrite16_rep(
        port: *mut core::ffi::c_void,
        buf: *const core::ffi::c_void,
        count: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn iowrite32_rep(
        port: *mut core::ffi::c_void,
        buf: *const core::ffi::c_void,
        count: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn ioport_map(port: core::ffi::c_ulong, nr: core::ffi::c_uint) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn ioport_unmap(arg1: *mut core::ffi::c_void);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pci_dev {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pci_iomap(
        dev: *mut pci_dev,
        bar: core::ffi::c_int,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn pci_iomap_wc(
        dev: *mut pci_dev,
        bar: core::ffi::c_int,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn pci_iomap_range(
        dev: *mut pci_dev,
        bar: core::ffi::c_int,
        offset: core::ffi::c_ulong,
        maxlen: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn pci_iomap_wc_range(
        dev: *mut pci_dev,
        bar: core::ffi::c_int,
        offset: core::ffi::c_ulong,
        maxlen: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn pci_iounmap(dev: *mut pci_dev, arg1: *mut core::ffi::c_void);
}
pub const dev_dma_attr_DEV_DMA_NOT_SUPPORTED: dev_dma_attr = 0;
pub const dev_dma_attr_DEV_DMA_NON_COHERENT: dev_dma_attr = 1;
pub const dev_dma_attr_DEV_DMA_COHERENT: dev_dma_attr = 2;
pub type dev_dma_attr = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fwnode_handle {
    pub secondary: *mut fwnode_handle,
    pub ops: *const fwnode_operations,
    pub dev: *mut device,
    pub suppliers: list_head,
    pub consumers: list_head,
    pub flags: u8_,
}
impl Default for fwnode_handle {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fwnode_link {
    pub supplier: *mut fwnode_handle,
    pub s_hook: list_head,
    pub consumer: *mut fwnode_handle,
    pub c_hook: list_head,
    pub flags: u8_,
}
impl Default for fwnode_link {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fwnode_endpoint {
    pub port: core::ffi::c_uint,
    pub id: core::ffi::c_uint,
    pub local_fwnode: *const fwnode_handle,
}
impl Default for fwnode_endpoint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fwnode_reference_args {
    pub fwnode: *mut fwnode_handle,
    pub nargs: core::ffi::c_uint,
    pub args: [u64_; 8usize],
}
impl Default for fwnode_reference_args {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fwnode_operations {
    pub get: ::core::option::Option<
        unsafe extern "C" fn(fwnode: *mut fwnode_handle) -> *mut fwnode_handle,
    >,
    pub put: ::core::option::Option<unsafe extern "C" fn(fwnode: *mut fwnode_handle)>,
    pub device_is_available:
        ::core::option::Option<unsafe extern "C" fn(fwnode: *const fwnode_handle) -> bool_>,
    pub device_get_match_data: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *const fwnode_handle,
            dev: *const device,
        ) -> *const core::ffi::c_void,
    >,
    pub device_dma_supported:
        ::core::option::Option<unsafe extern "C" fn(fwnode: *const fwnode_handle) -> bool_>,
    pub device_get_dma_attr:
        ::core::option::Option<unsafe extern "C" fn(fwnode: *const fwnode_handle) -> dev_dma_attr>,
    pub property_present: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *const fwnode_handle,
            propname: *const core::ffi::c_char,
        ) -> bool_,
    >,
    pub property_read_int_array: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *const fwnode_handle,
            propname: *const core::ffi::c_char,
            elem_size: core::ffi::c_uint,
            val: *mut core::ffi::c_void,
            nval: usize,
        ) -> core::ffi::c_int,
    >,
    pub property_read_string_array: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode_handle: *const fwnode_handle,
            propname: *const core::ffi::c_char,
            val: *mut *const core::ffi::c_char,
            nval: usize,
        ) -> core::ffi::c_int,
    >,
    pub get_name: ::core::option::Option<
        unsafe extern "C" fn(fwnode: *const fwnode_handle) -> *const core::ffi::c_char,
    >,
    pub get_name_prefix: ::core::option::Option<
        unsafe extern "C" fn(fwnode: *const fwnode_handle) -> *const core::ffi::c_char,
    >,
    pub get_parent: ::core::option::Option<
        unsafe extern "C" fn(fwnode: *const fwnode_handle) -> *mut fwnode_handle,
    >,
    pub get_next_child_node: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *const fwnode_handle,
            child: *mut fwnode_handle,
        ) -> *mut fwnode_handle,
    >,
    pub get_named_child_node: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *const fwnode_handle,
            name: *const core::ffi::c_char,
        ) -> *mut fwnode_handle,
    >,
    pub get_reference_args: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *const fwnode_handle,
            prop: *const core::ffi::c_char,
            nargs_prop: *const core::ffi::c_char,
            nargs: core::ffi::c_uint,
            index: core::ffi::c_uint,
            args: *mut fwnode_reference_args,
        ) -> core::ffi::c_int,
    >,
    pub graph_get_next_endpoint: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *const fwnode_handle,
            prev: *mut fwnode_handle,
        ) -> *mut fwnode_handle,
    >,
    pub graph_get_remote_endpoint: ::core::option::Option<
        unsafe extern "C" fn(fwnode: *const fwnode_handle) -> *mut fwnode_handle,
    >,
    pub graph_get_port_parent: ::core::option::Option<
        unsafe extern "C" fn(fwnode: *mut fwnode_handle) -> *mut fwnode_handle,
    >,
    pub graph_parse_endpoint: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *const fwnode_handle,
            endpoint: *mut fwnode_endpoint,
        ) -> core::ffi::c_int,
    >,
    pub iomap: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *mut fwnode_handle,
            index: core::ffi::c_int,
        ) -> *mut core::ffi::c_void,
    >,
    pub irq_get: ::core::option::Option<
        unsafe extern "C" fn(
            fwnode: *const fwnode_handle,
            index: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub add_links: ::core::option::Option<
        unsafe extern "C" fn(fwnode: *mut fwnode_handle) -> core::ffi::c_int,
    >,
}
extern "C" {
    pub fn fwnode_link_add(
        con: *mut fwnode_handle,
        sup: *mut fwnode_handle,
        flags: u8_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fwnode_links_purge(fwnode: *mut fwnode_handle);
}
extern "C" {
    pub fn fw_devlink_purge_absent_suppliers(fwnode: *mut fwnode_handle);
}
extern "C" {
    pub fn fw_devlink_is_strict() -> bool_;
}
pub const LOGIC_PIO_INDIRECT: _bindgen_ty_98 = 0;
pub const LOGIC_PIO_CPU_MMIO: _bindgen_ty_98 = 1;
pub type _bindgen_ty_98 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct logic_pio_hwaddr {
    pub list: list_head,
    pub fwnode: *mut fwnode_handle,
    pub hw_start: resource_size_t,
    pub io_start: resource_size_t,
    pub size: resource_size_t,
    pub flags: core::ffi::c_ulong,
    pub hostdata: *mut core::ffi::c_void,
    pub ops: *const logic_pio_host_ops,
}
impl Default for logic_pio_hwaddr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct logic_pio_host_ops {
    pub in_: ::core::option::Option<
        unsafe extern "C" fn(
            hostdata: *mut core::ffi::c_void,
            addr: core::ffi::c_ulong,
            dwidth: usize,
        ) -> u32_,
    >,
    pub out: ::core::option::Option<
        unsafe extern "C" fn(
            hostdata: *mut core::ffi::c_void,
            addr: core::ffi::c_ulong,
            val: u32_,
            dwidth: usize,
        ),
    >,
    pub ins: ::core::option::Option<
        unsafe extern "C" fn(
            hostdata: *mut core::ffi::c_void,
            addr: core::ffi::c_ulong,
            buffer: *mut core::ffi::c_void,
            dwidth: usize,
            count: core::ffi::c_uint,
        ) -> u32_,
    >,
    pub outs: ::core::option::Option<
        unsafe extern "C" fn(
            hostdata: *mut core::ffi::c_void,
            addr: core::ffi::c_ulong,
            buffer: *const core::ffi::c_void,
            dwidth: usize,
            count: core::ffi::c_uint,
        ),
    >,
}
extern "C" {
    pub fn find_io_range_by_fwnode(fwnode: *mut fwnode_handle) -> *mut logic_pio_hwaddr;
}
extern "C" {
    pub fn logic_pio_trans_hwaddr(
        fwnode: *mut fwnode_handle,
        hw_addr: resource_size_t,
        size: resource_size_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn logic_pio_register_range(newrange: *mut logic_pio_hwaddr) -> core::ffi::c_int;
}
extern "C" {
    pub fn logic_pio_unregister_range(range: *mut logic_pio_hwaddr);
}
extern "C" {
    pub fn logic_pio_to_hwaddr(pio: core::ffi::c_ulong) -> resource_size_t;
}
extern "C" {
    pub fn logic_pio_trans_cpuaddr(hw_addr: resource_size_t) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn arch_phys_wc_index(handle: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_phys_wc_add(base: core::ffi::c_ulong, size: core::ffi::c_ulong)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_phys_wc_del(handle: core::ffi::c_int);
}
extern "C" {
    pub fn arch_io_reserve_memtype_wc(
        start: resource_size_t,
        size: resource_size_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_io_free_memtype_wc(start: resource_size_t, size: resource_size_t);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct scatterlist {
    pub page_link: core::ffi::c_ulong,
    pub offset: core::ffi::c_uint,
    pub length: core::ffi::c_uint,
    pub dma_address: dma_addr_t,
    pub dma_length: core::ffi::c_uint,
    pub dma_flags: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sg_table {
    pub sgl: *mut scatterlist,
    pub nents: core::ffi::c_uint,
    pub orig_nents: core::ffi::c_uint,
}
impl Default for sg_table {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sg_append_table {
    pub sgt: sg_table,
    pub prv: *mut scatterlist,
    pub total_nents: core::ffi::c_uint,
}
impl Default for sg_append_table {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn sg_nents(sg: *mut scatterlist) -> core::ffi::c_int;
}
extern "C" {
    pub fn sg_nents_for_len(sg: *mut scatterlist, len: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn sg_next(arg1: *mut scatterlist) -> *mut scatterlist;
}
extern "C" {
    pub fn sg_last(s: *mut scatterlist, arg1: core::ffi::c_uint) -> *mut scatterlist;
}
extern "C" {
    pub fn sg_init_table(arg1: *mut scatterlist, arg2: core::ffi::c_uint);
}
extern "C" {
    pub fn sg_init_one(
        arg1: *mut scatterlist,
        arg2: *const core::ffi::c_void,
        arg3: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn sg_split(
        in_: *mut scatterlist,
        in_mapped_nents: core::ffi::c_int,
        skip: off_t,
        nb_splits: core::ffi::c_int,
        split_sizes: *const usize,
        out: *mut *mut scatterlist,
        out_mapped_nents: *mut core::ffi::c_int,
        gfp_mask: gfp_t,
    ) -> core::ffi::c_int;
}
pub type sg_alloc_fn = ::core::option::Option<
    unsafe extern "C" fn(arg1: core::ffi::c_uint, arg2: gfp_t) -> *mut scatterlist,
>;
pub type sg_free_fn =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut scatterlist, arg2: core::ffi::c_uint)>;
extern "C" {
    pub fn __sg_free_table(
        arg1: *mut sg_table,
        arg2: core::ffi::c_uint,
        arg3: core::ffi::c_uint,
        arg4: sg_free_fn,
        arg5: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn sg_free_table(arg1: *mut sg_table);
}
extern "C" {
    pub fn sg_free_append_table(sgt: *mut sg_append_table);
}
extern "C" {
    pub fn __sg_alloc_table(
        arg1: *mut sg_table,
        arg2: core::ffi::c_uint,
        arg3: core::ffi::c_uint,
        arg4: *mut scatterlist,
        arg5: core::ffi::c_uint,
        arg6: gfp_t,
        arg7: sg_alloc_fn,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sg_alloc_table(
        arg1: *mut sg_table,
        arg2: core::ffi::c_uint,
        arg3: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sg_alloc_append_table_from_pages(
        sgt: *mut sg_append_table,
        pages: *mut *mut page,
        n_pages: core::ffi::c_uint,
        offset: core::ffi::c_uint,
        size: core::ffi::c_ulong,
        max_segment: core::ffi::c_uint,
        left_pages: core::ffi::c_uint,
        gfp_mask: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sg_alloc_table_from_pages_segment(
        sgt: *mut sg_table,
        pages: *mut *mut page,
        n_pages: core::ffi::c_uint,
        offset: core::ffi::c_uint,
        size: core::ffi::c_ulong,
        max_segment: core::ffi::c_uint,
        gfp_mask: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sgl_alloc_order(
        length: core::ffi::c_ulonglong,
        order: core::ffi::c_uint,
        chainable: bool_,
        gfp: gfp_t,
        nent_p: *mut core::ffi::c_uint,
    ) -> *mut scatterlist;
}
extern "C" {
    pub fn sgl_alloc(
        length: core::ffi::c_ulonglong,
        gfp: gfp_t,
        nent_p: *mut core::ffi::c_uint,
    ) -> *mut scatterlist;
}
extern "C" {
    pub fn sgl_free_n_order(
        sgl: *mut scatterlist,
        nents: core::ffi::c_int,
        order: core::ffi::c_int,
    );
}
extern "C" {
    pub fn sgl_free_order(sgl: *mut scatterlist, order: core::ffi::c_int);
}
extern "C" {
    pub fn sgl_free(sgl: *mut scatterlist);
}
extern "C" {
    pub fn sg_copy_buffer(
        sgl: *mut scatterlist,
        nents: core::ffi::c_uint,
        buf: *mut core::ffi::c_void,
        buflen: usize,
        skip: off_t,
        to_buffer: bool_,
    ) -> usize;
}
extern "C" {
    pub fn sg_copy_from_buffer(
        sgl: *mut scatterlist,
        nents: core::ffi::c_uint,
        buf: *const core::ffi::c_void,
        buflen: usize,
    ) -> usize;
}
extern "C" {
    pub fn sg_copy_to_buffer(
        sgl: *mut scatterlist,
        nents: core::ffi::c_uint,
        buf: *mut core::ffi::c_void,
        buflen: usize,
    ) -> usize;
}
extern "C" {
    pub fn sg_pcopy_from_buffer(
        sgl: *mut scatterlist,
        nents: core::ffi::c_uint,
        buf: *const core::ffi::c_void,
        buflen: usize,
        skip: off_t,
    ) -> usize;
}
extern "C" {
    pub fn sg_pcopy_to_buffer(
        sgl: *mut scatterlist,
        nents: core::ffi::c_uint,
        buf: *mut core::ffi::c_void,
        buflen: usize,
        skip: off_t,
    ) -> usize;
}
extern "C" {
    pub fn sg_zero_buffer(
        sgl: *mut scatterlist,
        nents: core::ffi::c_uint,
        buflen: usize,
        skip: off_t,
    ) -> usize;
}
extern "C" {
    pub fn sg_free_table_chained(table: *mut sg_table, nents_first_chunk: core::ffi::c_uint);
}
extern "C" {
    pub fn sg_alloc_table_chained(
        table: *mut sg_table,
        nents: core::ffi::c_int,
        first_chunk: *mut scatterlist,
        nents_first_chunk: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sg_page_iter {
    pub sg: *mut scatterlist,
    pub sg_pgoffset: core::ffi::c_uint,
    pub __nents: core::ffi::c_uint,
    pub __pg_advance: core::ffi::c_int,
}
impl Default for sg_page_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sg_dma_page_iter {
    pub base: sg_page_iter,
}
impl Default for sg_dma_page_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __sg_page_iter_next(piter: *mut sg_page_iter) -> bool_;
}
extern "C" {
    pub fn __sg_page_iter_dma_next(dma_iter: *mut sg_dma_page_iter) -> bool_;
}
extern "C" {
    pub fn __sg_page_iter_start(
        piter: *mut sg_page_iter,
        sglist: *mut scatterlist,
        nents: core::ffi::c_uint,
        pgoffset: core::ffi::c_ulong,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sg_mapping_iter {
    pub page: *mut page,
    pub addr: *mut core::ffi::c_void,
    pub length: usize,
    pub consumed: usize,
    pub piter: sg_page_iter,
    pub __offset: core::ffi::c_uint,
    pub __remaining: core::ffi::c_uint,
    pub __flags: core::ffi::c_uint,
}
impl Default for sg_mapping_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn sg_miter_start(
        miter: *mut sg_mapping_iter,
        sgl: *mut scatterlist,
        nents: core::ffi::c_uint,
        flags: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn sg_miter_skip(miter: *mut sg_mapping_iter, offset: off_t) -> bool_;
}
extern "C" {
    pub fn sg_miter_next(miter: *mut sg_mapping_iter) -> bool_;
}
extern "C" {
    pub fn sg_miter_stop(miter: *mut sg_mapping_iter);
}
extern "C" {
    pub fn dma_map_page_attrs(
        dev: *mut device,
        page: *mut page,
        offset: usize,
        size: usize,
        dir: dma_data_direction,
        attrs: core::ffi::c_ulong,
    ) -> dma_addr_t;
}
extern "C" {
    pub fn dma_unmap_page_attrs(
        dev: *mut device,
        addr: dma_addr_t,
        size: usize,
        dir: dma_data_direction,
        attrs: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn dma_map_sg_attrs(
        dev: *mut device,
        sg: *mut scatterlist,
        nents: core::ffi::c_int,
        dir: dma_data_direction,
        attrs: core::ffi::c_ulong,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn dma_unmap_sg_attrs(
        dev: *mut device,
        sg: *mut scatterlist,
        nents: core::ffi::c_int,
        dir: dma_data_direction,
        attrs: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn dma_map_sgtable(
        dev: *mut device,
        sgt: *mut sg_table,
        dir: dma_data_direction,
        attrs: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn dma_map_resource(
        dev: *mut device,
        phys_addr: phys_addr_t,
        size: usize,
        dir: dma_data_direction,
        attrs: core::ffi::c_ulong,
    ) -> dma_addr_t;
}
extern "C" {
    pub fn dma_unmap_resource(
        dev: *mut device,
        addr: dma_addr_t,
        size: usize,
        dir: dma_data_direction,
        attrs: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn dma_alloc_attrs(
        dev: *mut device,
        size: usize,
        dma_handle: *mut dma_addr_t,
        flag: gfp_t,
        attrs: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn dma_free_attrs(
        dev: *mut device,
        size: usize,
        cpu_addr: *mut core::ffi::c_void,
        dma_handle: dma_addr_t,
        attrs: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn dmam_alloc_attrs(
        dev: *mut device,
        size: usize,
        dma_handle: *mut dma_addr_t,
        gfp: gfp_t,
        attrs: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn dmam_free_coherent(
        dev: *mut device,
        size: usize,
        vaddr: *mut core::ffi::c_void,
        dma_handle: dma_addr_t,
    );
}
extern "C" {
    pub fn dma_get_sgtable_attrs(
        dev: *mut device,
        sgt: *mut sg_table,
        cpu_addr: *mut core::ffi::c_void,
        dma_addr: dma_addr_t,
        size: usize,
        attrs: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn dma_mmap_attrs(
        dev: *mut device,
        vma: *mut vm_area_struct,
        cpu_addr: *mut core::ffi::c_void,
        dma_addr: dma_addr_t,
        size: usize,
        attrs: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn dma_can_mmap(dev: *mut device) -> bool_;
}
extern "C" {
    pub fn dma_pci_p2pdma_supported(dev: *mut device) -> bool_;
}
extern "C" {
    pub fn dma_set_mask(dev: *mut device, mask: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn dma_set_coherent_mask(dev: *mut device, mask: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn dma_get_required_mask(dev: *mut device) -> u64_;
}
extern "C" {
    pub fn dma_addressing_limited(dev: *mut device) -> bool_;
}
extern "C" {
    pub fn dma_max_mapping_size(dev: *mut device) -> usize;
}
extern "C" {
    pub fn dma_opt_mapping_size(dev: *mut device) -> usize;
}
extern "C" {
    pub fn dma_get_merge_boundary(dev: *mut device) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn dma_alloc_noncontiguous(
        dev: *mut device,
        size: usize,
        dir: dma_data_direction,
        gfp: gfp_t,
        attrs: core::ffi::c_ulong,
    ) -> *mut sg_table;
}
extern "C" {
    pub fn dma_free_noncontiguous(
        dev: *mut device,
        size: usize,
        sgt: *mut sg_table,
        dir: dma_data_direction,
    );
}
extern "C" {
    pub fn dma_vmap_noncontiguous(
        dev: *mut device,
        size: usize,
        sgt: *mut sg_table,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn dma_vunmap_noncontiguous(dev: *mut device, vaddr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn dma_mmap_noncontiguous(
        dev: *mut device,
        vma: *mut vm_area_struct,
        size: usize,
        sgt: *mut sg_table,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __dma_sync_single_for_cpu(
        dev: *mut device,
        addr: dma_addr_t,
        size: usize,
        dir: dma_data_direction,
    );
}
extern "C" {
    pub fn __dma_sync_single_for_device(
        dev: *mut device,
        addr: dma_addr_t,
        size: usize,
        dir: dma_data_direction,
    );
}
extern "C" {
    pub fn __dma_sync_sg_for_cpu(
        dev: *mut device,
        sg: *mut scatterlist,
        nelems: core::ffi::c_int,
        dir: dma_data_direction,
    );
}
extern "C" {
    pub fn __dma_sync_sg_for_device(
        dev: *mut device,
        sg: *mut scatterlist,
        nelems: core::ffi::c_int,
        dir: dma_data_direction,
    );
}
extern "C" {
    pub fn __dma_need_sync(dev: *mut device, dma_addr: dma_addr_t) -> bool_;
}
extern "C" {
    pub fn dma_alloc_pages(
        dev: *mut device,
        size: usize,
        dma_handle: *mut dma_addr_t,
        dir: dma_data_direction,
        gfp: gfp_t,
    ) -> *mut page;
}
extern "C" {
    pub fn dma_free_pages(
        dev: *mut device,
        size: usize,
        page: *mut page,
        dma_handle: dma_addr_t,
        dir: dma_data_direction,
    );
}
extern "C" {
    pub fn dma_mmap_pages(
        dev: *mut device,
        vma: *mut vm_area_struct,
        size: usize,
        page: *mut page,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn dma_coherent_ok(dev: *mut device, phys: phys_addr_t, size: usize) -> bool_;
}
pub type netdev_features_t = u64_;
pub const NETIF_F_SG_BIT: _bindgen_ty_99 = 0;
pub const NETIF_F_IP_CSUM_BIT: _bindgen_ty_99 = 1;
pub const __UNUSED_NETIF_F_1: _bindgen_ty_99 = 2;
pub const NETIF_F_HW_CSUM_BIT: _bindgen_ty_99 = 3;
pub const NETIF_F_IPV6_CSUM_BIT: _bindgen_ty_99 = 4;
pub const NETIF_F_HIGHDMA_BIT: _bindgen_ty_99 = 5;
pub const NETIF_F_FRAGLIST_BIT: _bindgen_ty_99 = 6;
pub const NETIF_F_HW_VLAN_CTAG_TX_BIT: _bindgen_ty_99 = 7;
pub const NETIF_F_HW_VLAN_CTAG_RX_BIT: _bindgen_ty_99 = 8;
pub const NETIF_F_HW_VLAN_CTAG_FILTER_BIT: _bindgen_ty_99 = 9;
pub const NETIF_F_VLAN_CHALLENGED_BIT: _bindgen_ty_99 = 10;
pub const NETIF_F_GSO_BIT: _bindgen_ty_99 = 11;
pub const NETIF_F_LLTX_BIT: _bindgen_ty_99 = 12;
pub const NETIF_F_NETNS_LOCAL_BIT: _bindgen_ty_99 = 13;
pub const NETIF_F_GRO_BIT: _bindgen_ty_99 = 14;
pub const NETIF_F_LRO_BIT: _bindgen_ty_99 = 15;
pub const NETIF_F_GSO_SHIFT: _bindgen_ty_99 = 16;
pub const NETIF_F_TSO_BIT: _bindgen_ty_99 = 16;
pub const NETIF_F_GSO_ROBUST_BIT: _bindgen_ty_99 = 17;
pub const NETIF_F_TSO_ECN_BIT: _bindgen_ty_99 = 18;
pub const NETIF_F_TSO_MANGLEID_BIT: _bindgen_ty_99 = 19;
pub const NETIF_F_TSO6_BIT: _bindgen_ty_99 = 20;
pub const NETIF_F_FSO_BIT: _bindgen_ty_99 = 21;
pub const NETIF_F_GSO_GRE_BIT: _bindgen_ty_99 = 22;
pub const NETIF_F_GSO_GRE_CSUM_BIT: _bindgen_ty_99 = 23;
pub const NETIF_F_GSO_IPXIP4_BIT: _bindgen_ty_99 = 24;
pub const NETIF_F_GSO_IPXIP6_BIT: _bindgen_ty_99 = 25;
pub const NETIF_F_GSO_UDP_TUNNEL_BIT: _bindgen_ty_99 = 26;
pub const NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT: _bindgen_ty_99 = 27;
pub const NETIF_F_GSO_PARTIAL_BIT: _bindgen_ty_99 = 28;
pub const NETIF_F_GSO_TUNNEL_REMCSUM_BIT: _bindgen_ty_99 = 29;
pub const NETIF_F_GSO_SCTP_BIT: _bindgen_ty_99 = 30;
pub const NETIF_F_GSO_ESP_BIT: _bindgen_ty_99 = 31;
pub const NETIF_F_GSO_UDP_BIT: _bindgen_ty_99 = 32;
pub const NETIF_F_GSO_UDP_L4_BIT: _bindgen_ty_99 = 33;
pub const NETIF_F_GSO_FRAGLIST_BIT: _bindgen_ty_99 = 34;
pub const NETIF_F_GSO_LAST: _bindgen_ty_99 = 34;
pub const NETIF_F_FCOE_CRC_BIT: _bindgen_ty_99 = 35;
pub const NETIF_F_SCTP_CRC_BIT: _bindgen_ty_99 = 36;
pub const NETIF_F_FCOE_MTU_BIT: _bindgen_ty_99 = 37;
pub const NETIF_F_NTUPLE_BIT: _bindgen_ty_99 = 38;
pub const NETIF_F_RXHASH_BIT: _bindgen_ty_99 = 39;
pub const NETIF_F_RXCSUM_BIT: _bindgen_ty_99 = 40;
pub const NETIF_F_NOCACHE_COPY_BIT: _bindgen_ty_99 = 41;
pub const NETIF_F_LOOPBACK_BIT: _bindgen_ty_99 = 42;
pub const NETIF_F_RXFCS_BIT: _bindgen_ty_99 = 43;
pub const NETIF_F_RXALL_BIT: _bindgen_ty_99 = 44;
pub const NETIF_F_HW_VLAN_STAG_TX_BIT: _bindgen_ty_99 = 45;
pub const NETIF_F_HW_VLAN_STAG_RX_BIT: _bindgen_ty_99 = 46;
pub const NETIF_F_HW_VLAN_STAG_FILTER_BIT: _bindgen_ty_99 = 47;
pub const NETIF_F_HW_L2FW_DOFFLOAD_BIT: _bindgen_ty_99 = 48;
pub const NETIF_F_HW_TC_BIT: _bindgen_ty_99 = 49;
pub const NETIF_F_HW_ESP_BIT: _bindgen_ty_99 = 50;
pub const NETIF_F_HW_ESP_TX_CSUM_BIT: _bindgen_ty_99 = 51;
pub const NETIF_F_RX_UDP_TUNNEL_PORT_BIT: _bindgen_ty_99 = 52;
pub const NETIF_F_HW_TLS_TX_BIT: _bindgen_ty_99 = 53;
pub const NETIF_F_HW_TLS_RX_BIT: _bindgen_ty_99 = 54;
pub const NETIF_F_GRO_HW_BIT: _bindgen_ty_99 = 55;
pub const NETIF_F_HW_TLS_RECORD_BIT: _bindgen_ty_99 = 56;
pub const NETIF_F_GRO_FRAGLIST_BIT: _bindgen_ty_99 = 57;
pub const NETIF_F_HW_MACSEC_BIT: _bindgen_ty_99 = 58;
pub const NETIF_F_GRO_UDP_FWD_BIT: _bindgen_ty_99 = 59;
pub const NETIF_F_HW_HSR_TAG_INS_BIT: _bindgen_ty_99 = 60;
pub const NETIF_F_HW_HSR_TAG_RM_BIT: _bindgen_ty_99 = 61;
pub const NETIF_F_HW_HSR_FWD_BIT: _bindgen_ty_99 = 62;
pub const NETIF_F_HW_HSR_DUP_BIT: _bindgen_ty_99 = 63;
pub const NETDEV_FEATURE_COUNT: _bindgen_ty_99 = 64;
pub type _bindgen_ty_99 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub u6_addr8: [__u8; 16usize],
    pub u6_addr16: [__be16; 8usize],
    pub u6_addr32: [__be32; 4usize],
}
impl Default for in6_addr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for in6_addr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: core::ffi::c_ushort,
    pub sin6_port: __be16,
    pub sin6_flowinfo: __be32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: __u32,
}
impl Default for sockaddr_in6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_ifindex: core::ffi::c_int,
}
impl Default for ipv6_mreq {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_flowlabel_req {
    pub flr_dst: in6_addr,
    pub flr_label: __be32,
    pub flr_action: __u8,
    pub flr_share: __u8,
    pub flr_flags: __u16,
    pub flr_expires: __u16,
    pub flr_linger: __u16,
    pub __flr_pad: __u32,
}
impl Default for in6_flowlabel_req {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
extern "C" {
    pub static in6addr_interfacelocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_interfacelocal_allrouters: in6_addr;
}
extern "C" {
    pub static in6addr_sitelocal_allrouters: in6_addr;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct siphash_key_t {
    pub key: [u64_; 2usize],
}
extern "C" {
    pub fn __siphash_aligned(
        data: *const core::ffi::c_void,
        len: usize,
        key: *const siphash_key_t,
    ) -> u64_;
}
extern "C" {
    pub fn __siphash_unaligned(
        data: *const core::ffi::c_void,
        len: usize,
        key: *const siphash_key_t,
    ) -> u64_;
}
extern "C" {
    pub fn siphash_1u64(a: u64_, key: *const siphash_key_t) -> u64_;
}
extern "C" {
    pub fn siphash_2u64(a: u64_, b: u64_, key: *const siphash_key_t) -> u64_;
}
extern "C" {
    pub fn siphash_3u64(a: u64_, b: u64_, c: u64_, key: *const siphash_key_t) -> u64_;
}
extern "C" {
    pub fn siphash_4u64(a: u64_, b: u64_, c: u64_, d: u64_, key: *const siphash_key_t) -> u64_;
}
extern "C" {
    pub fn siphash_1u32(a: u32_, key: *const siphash_key_t) -> u64_;
}
extern "C" {
    pub fn siphash_3u32(a: u32_, b: u32_, c: u32_, key: *const siphash_key_t) -> u64_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct hsiphash_key_t {
    pub key: [core::ffi::c_ulong; 2usize],
}
extern "C" {
    pub fn __hsiphash_aligned(
        data: *const core::ffi::c_void,
        len: usize,
        key: *const hsiphash_key_t,
    ) -> u32_;
}
extern "C" {
    pub fn __hsiphash_unaligned(
        data: *const core::ffi::c_void,
        len: usize,
        key: *const hsiphash_key_t,
    ) -> u32_;
}
extern "C" {
    pub fn hsiphash_1u32(a: u32_, key: *const hsiphash_key_t) -> u32_;
}
extern "C" {
    pub fn hsiphash_2u32(a: u32_, b: u32_, key: *const hsiphash_key_t) -> u32_;
}
extern "C" {
    pub fn hsiphash_3u32(a: u32_, b: u32_, c: u32_, key: *const hsiphash_key_t) -> u32_;
}
extern "C" {
    pub fn hsiphash_4u32(a: u32_, b: u32_, c: u32_, d: u32_, key: *const hsiphash_key_t) -> u32_;
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct ethhdr {
    pub h_dest: [core::ffi::c_uchar; 6usize],
    pub h_source: [core::ffi::c_uchar; 6usize],
    pub h_proto: __be16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_stats {
    pub bytes: __u64,
    pub packets: __u32,
    pub drops: __u32,
    pub overlimits: __u32,
    pub bps: __u32,
    pub pps: __u32,
    pub qlen: __u32,
    pub backlog: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_estimator {
    pub interval: core::ffi::c_schar,
    pub ewma_log: core::ffi::c_uchar,
}
pub const tc_link_layer_TC_LINKLAYER_UNAWARE: tc_link_layer = 0;
pub const tc_link_layer_TC_LINKLAYER_ETHERNET: tc_link_layer = 1;
pub const tc_link_layer_TC_LINKLAYER_ATM: tc_link_layer = 2;
pub type tc_link_layer = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_ratespec {
    pub cell_log: core::ffi::c_uchar,
    pub linklayer: __u8,
    pub overhead: core::ffi::c_ushort,
    pub cell_align: core::ffi::c_short,
    pub mpu: core::ffi::c_ushort,
    pub rate: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_sizespec {
    pub cell_log: core::ffi::c_uchar,
    pub size_log: core::ffi::c_uchar,
    pub cell_align: core::ffi::c_short,
    pub overhead: core::ffi::c_int,
    pub linklayer: core::ffi::c_uint,
    pub mpu: core::ffi::c_uint,
    pub mtu: core::ffi::c_uint,
    pub tsize: core::ffi::c_uint,
}
pub const TCA_STAB_UNSPEC: _bindgen_ty_100 = 0;
pub const TCA_STAB_BASE: _bindgen_ty_100 = 1;
pub const TCA_STAB_DATA: _bindgen_ty_100 = 2;
pub const __TCA_STAB_MAX: _bindgen_ty_100 = 3;
pub type _bindgen_ty_100 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_fifo_qopt {
    pub limit: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_skbprio_qopt {
    pub limit: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_prio_qopt {
    pub bands: core::ffi::c_int,
    pub priomap: [__u8; 16usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_multiq_qopt {
    pub bands: __u16,
    pub max_bands: __u16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_plug_qopt {
    pub action: core::ffi::c_int,
    pub limit: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_tbf_qopt {
    pub rate: tc_ratespec,
    pub peakrate: tc_ratespec,
    pub limit: __u32,
    pub buffer: __u32,
    pub mtu: __u32,
}
pub const TCA_TBF_UNSPEC: _bindgen_ty_101 = 0;
pub const TCA_TBF_PARMS: _bindgen_ty_101 = 1;
pub const TCA_TBF_RTAB: _bindgen_ty_101 = 2;
pub const TCA_TBF_PTAB: _bindgen_ty_101 = 3;
pub const TCA_TBF_RATE64: _bindgen_ty_101 = 4;
pub const TCA_TBF_PRATE64: _bindgen_ty_101 = 5;
pub const TCA_TBF_BURST: _bindgen_ty_101 = 6;
pub const TCA_TBF_PBURST: _bindgen_ty_101 = 7;
pub const TCA_TBF_PAD: _bindgen_ty_101 = 8;
pub const __TCA_TBF_MAX: _bindgen_ty_101 = 9;
pub type _bindgen_ty_101 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_sfq_qopt {
    pub quantum: core::ffi::c_uint,
    pub perturb_period: core::ffi::c_int,
    pub limit: __u32,
    pub divisor: core::ffi::c_uint,
    pub flows: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_sfqred_stats {
    pub prob_drop: __u32,
    pub forced_drop: __u32,
    pub prob_mark: __u32,
    pub forced_mark: __u32,
    pub prob_mark_head: __u32,
    pub forced_mark_head: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_sfq_qopt_v1 {
    pub v0: tc_sfq_qopt,
    pub depth: core::ffi::c_uint,
    pub headdrop: core::ffi::c_uint,
    pub limit: __u32,
    pub qth_min: __u32,
    pub qth_max: __u32,
    pub Wlog: core::ffi::c_uchar,
    pub Plog: core::ffi::c_uchar,
    pub Scell_log: core::ffi::c_uchar,
    pub flags: core::ffi::c_uchar,
    pub max_P: __u32,
    pub stats: tc_sfqred_stats,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_sfq_xstats {
    pub allot: __s32,
}
pub const TCA_RED_UNSPEC: _bindgen_ty_102 = 0;
pub const TCA_RED_PARMS: _bindgen_ty_102 = 1;
pub const TCA_RED_STAB: _bindgen_ty_102 = 2;
pub const TCA_RED_MAX_P: _bindgen_ty_102 = 3;
pub const TCA_RED_FLAGS: _bindgen_ty_102 = 4;
pub const TCA_RED_EARLY_DROP_BLOCK: _bindgen_ty_102 = 5;
pub const TCA_RED_MARK_BLOCK: _bindgen_ty_102 = 6;
pub const __TCA_RED_MAX: _bindgen_ty_102 = 7;
pub type _bindgen_ty_102 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_red_qopt {
    pub limit: __u32,
    pub qth_min: __u32,
    pub qth_max: __u32,
    pub Wlog: core::ffi::c_uchar,
    pub Plog: core::ffi::c_uchar,
    pub Scell_log: core::ffi::c_uchar,
    pub flags: core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_red_xstats {
    pub early: __u32,
    pub pdrop: __u32,
    pub other: __u32,
    pub marked: __u32,
}
pub const TCA_GRED_UNSPEC: _bindgen_ty_103 = 0;
pub const TCA_GRED_PARMS: _bindgen_ty_103 = 1;
pub const TCA_GRED_STAB: _bindgen_ty_103 = 2;
pub const TCA_GRED_DPS: _bindgen_ty_103 = 3;
pub const TCA_GRED_MAX_P: _bindgen_ty_103 = 4;
pub const TCA_GRED_LIMIT: _bindgen_ty_103 = 5;
pub const TCA_GRED_VQ_LIST: _bindgen_ty_103 = 6;
pub const __TCA_GRED_MAX: _bindgen_ty_103 = 7;
pub type _bindgen_ty_103 = core::ffi::c_uint;
pub const TCA_GRED_VQ_ENTRY_UNSPEC: _bindgen_ty_104 = 0;
pub const TCA_GRED_VQ_ENTRY: _bindgen_ty_104 = 1;
pub const __TCA_GRED_VQ_ENTRY_MAX: _bindgen_ty_104 = 2;
pub type _bindgen_ty_104 = core::ffi::c_uint;
pub const TCA_GRED_VQ_UNSPEC: _bindgen_ty_105 = 0;
pub const TCA_GRED_VQ_PAD: _bindgen_ty_105 = 1;
pub const TCA_GRED_VQ_DP: _bindgen_ty_105 = 2;
pub const TCA_GRED_VQ_STAT_BYTES: _bindgen_ty_105 = 3;
pub const TCA_GRED_VQ_STAT_PACKETS: _bindgen_ty_105 = 4;
pub const TCA_GRED_VQ_STAT_BACKLOG: _bindgen_ty_105 = 5;
pub const TCA_GRED_VQ_STAT_PROB_DROP: _bindgen_ty_105 = 6;
pub const TCA_GRED_VQ_STAT_PROB_MARK: _bindgen_ty_105 = 7;
pub const TCA_GRED_VQ_STAT_FORCED_DROP: _bindgen_ty_105 = 8;
pub const TCA_GRED_VQ_STAT_FORCED_MARK: _bindgen_ty_105 = 9;
pub const TCA_GRED_VQ_STAT_PDROP: _bindgen_ty_105 = 10;
pub const TCA_GRED_VQ_STAT_OTHER: _bindgen_ty_105 = 11;
pub const TCA_GRED_VQ_FLAGS: _bindgen_ty_105 = 12;
pub const __TCA_GRED_VQ_MAX: _bindgen_ty_105 = 13;
pub type _bindgen_ty_105 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_gred_qopt {
    pub limit: __u32,
    pub qth_min: __u32,
    pub qth_max: __u32,
    pub DP: __u32,
    pub backlog: __u32,
    pub qave: __u32,
    pub forced: __u32,
    pub early: __u32,
    pub other: __u32,
    pub pdrop: __u32,
    pub Wlog: __u8,
    pub Plog: __u8,
    pub Scell_log: __u8,
    pub prio: __u8,
    pub packets: __u32,
    pub bytesin: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_gred_sopt {
    pub DPs: __u32,
    pub def_DP: __u32,
    pub grio: __u8,
    pub flags: __u8,
    pub pad1: __u16,
}
pub const TCA_CHOKE_UNSPEC: _bindgen_ty_106 = 0;
pub const TCA_CHOKE_PARMS: _bindgen_ty_106 = 1;
pub const TCA_CHOKE_STAB: _bindgen_ty_106 = 2;
pub const TCA_CHOKE_MAX_P: _bindgen_ty_106 = 3;
pub const __TCA_CHOKE_MAX: _bindgen_ty_106 = 4;
pub type _bindgen_ty_106 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_choke_qopt {
    pub limit: __u32,
    pub qth_min: __u32,
    pub qth_max: __u32,
    pub Wlog: core::ffi::c_uchar,
    pub Plog: core::ffi::c_uchar,
    pub Scell_log: core::ffi::c_uchar,
    pub flags: core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_choke_xstats {
    pub early: __u32,
    pub pdrop: __u32,
    pub other: __u32,
    pub marked: __u32,
    pub matched: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_htb_opt {
    pub rate: tc_ratespec,
    pub ceil: tc_ratespec,
    pub buffer: __u32,
    pub cbuffer: __u32,
    pub quantum: __u32,
    pub level: __u32,
    pub prio: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_htb_glob {
    pub version: __u32,
    pub rate2quantum: __u32,
    pub defcls: __u32,
    pub debug: __u32,
    pub direct_pkts: __u32,
}
pub const TCA_HTB_UNSPEC: _bindgen_ty_107 = 0;
pub const TCA_HTB_PARMS: _bindgen_ty_107 = 1;
pub const TCA_HTB_INIT: _bindgen_ty_107 = 2;
pub const TCA_HTB_CTAB: _bindgen_ty_107 = 3;
pub const TCA_HTB_RTAB: _bindgen_ty_107 = 4;
pub const TCA_HTB_DIRECT_QLEN: _bindgen_ty_107 = 5;
pub const TCA_HTB_RATE64: _bindgen_ty_107 = 6;
pub const TCA_HTB_CEIL64: _bindgen_ty_107 = 7;
pub const TCA_HTB_PAD: _bindgen_ty_107 = 8;
pub const TCA_HTB_OFFLOAD: _bindgen_ty_107 = 9;
pub const __TCA_HTB_MAX: _bindgen_ty_107 = 10;
pub type _bindgen_ty_107 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_htb_xstats {
    pub lends: __u32,
    pub borrows: __u32,
    pub giants: __u32,
    pub tokens: __s32,
    pub ctokens: __s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_hfsc_qopt {
    pub defcls: __u16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_service_curve {
    pub m1: __u32,
    pub d: __u32,
    pub m2: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_hfsc_stats {
    pub work: __u64,
    pub rtwork: __u64,
    pub period: __u32,
    pub level: __u32,
}
pub const TCA_HFSC_UNSPEC: _bindgen_ty_108 = 0;
pub const TCA_HFSC_RSC: _bindgen_ty_108 = 1;
pub const TCA_HFSC_FSC: _bindgen_ty_108 = 2;
pub const TCA_HFSC_USC: _bindgen_ty_108 = 3;
pub const __TCA_HFSC_MAX: _bindgen_ty_108 = 4;
pub type _bindgen_ty_108 = core::ffi::c_uint;
pub const TCA_NETEM_UNSPEC: _bindgen_ty_109 = 0;
pub const TCA_NETEM_CORR: _bindgen_ty_109 = 1;
pub const TCA_NETEM_DELAY_DIST: _bindgen_ty_109 = 2;
pub const TCA_NETEM_REORDER: _bindgen_ty_109 = 3;
pub const TCA_NETEM_CORRUPT: _bindgen_ty_109 = 4;
pub const TCA_NETEM_LOSS: _bindgen_ty_109 = 5;
pub const TCA_NETEM_RATE: _bindgen_ty_109 = 6;
pub const TCA_NETEM_ECN: _bindgen_ty_109 = 7;
pub const TCA_NETEM_RATE64: _bindgen_ty_109 = 8;
pub const TCA_NETEM_PAD: _bindgen_ty_109 = 9;
pub const TCA_NETEM_LATENCY64: _bindgen_ty_109 = 10;
pub const TCA_NETEM_JITTER64: _bindgen_ty_109 = 11;
pub const TCA_NETEM_SLOT: _bindgen_ty_109 = 12;
pub const TCA_NETEM_SLOT_DIST: _bindgen_ty_109 = 13;
pub const TCA_NETEM_PRNG_SEED: _bindgen_ty_109 = 14;
pub const __TCA_NETEM_MAX: _bindgen_ty_109 = 15;
pub type _bindgen_ty_109 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_netem_qopt {
    pub latency: __u32,
    pub limit: __u32,
    pub loss: __u32,
    pub gap: __u32,
    pub duplicate: __u32,
    pub jitter: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_netem_corr {
    pub delay_corr: __u32,
    pub loss_corr: __u32,
    pub dup_corr: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_netem_reorder {
    pub probability: __u32,
    pub correlation: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_netem_corrupt {
    pub probability: __u32,
    pub correlation: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_netem_rate {
    pub rate: __u32,
    pub packet_overhead: __s32,
    pub cell_size: __u32,
    pub cell_overhead: __s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_netem_slot {
    pub min_delay: __s64,
    pub max_delay: __s64,
    pub max_packets: __s32,
    pub max_bytes: __s32,
    pub dist_delay: __s64,
    pub dist_jitter: __s64,
}
pub const NETEM_LOSS_UNSPEC: _bindgen_ty_110 = 0;
pub const NETEM_LOSS_GI: _bindgen_ty_110 = 1;
pub const NETEM_LOSS_GE: _bindgen_ty_110 = 2;
pub const __NETEM_LOSS_MAX: _bindgen_ty_110 = 3;
pub type _bindgen_ty_110 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_netem_gimodel {
    pub p13: __u32,
    pub p31: __u32,
    pub p32: __u32,
    pub p14: __u32,
    pub p23: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_netem_gemodel {
    pub p: __u32,
    pub r: __u32,
    pub h: __u32,
    pub k1: __u32,
}
pub const TCA_DRR_UNSPEC: _bindgen_ty_111 = 0;
pub const TCA_DRR_QUANTUM: _bindgen_ty_111 = 1;
pub const __TCA_DRR_MAX: _bindgen_ty_111 = 2;
pub type _bindgen_ty_111 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_drr_stats {
    pub deficit: __u32,
}
pub const TC_MQPRIO_HW_OFFLOAD_NONE: _bindgen_ty_112 = 0;
pub const TC_MQPRIO_HW_OFFLOAD_TCS: _bindgen_ty_112 = 1;
pub const __TC_MQPRIO_HW_OFFLOAD_MAX: _bindgen_ty_112 = 2;
pub type _bindgen_ty_112 = core::ffi::c_uint;
pub const TC_MQPRIO_MODE_DCB: _bindgen_ty_113 = 0;
pub const TC_MQPRIO_MODE_CHANNEL: _bindgen_ty_113 = 1;
pub const __TC_MQPRIO_MODE_MAX: _bindgen_ty_113 = 2;
pub type _bindgen_ty_113 = core::ffi::c_uint;
pub const TC_MQPRIO_SHAPER_DCB: _bindgen_ty_114 = 0;
pub const TC_MQPRIO_SHAPER_BW_RATE: _bindgen_ty_114 = 1;
pub const __TC_MQPRIO_SHAPER_MAX: _bindgen_ty_114 = 2;
pub type _bindgen_ty_114 = core::ffi::c_uint;
pub const TC_FP_EXPRESS: _bindgen_ty_115 = 1;
pub const TC_FP_PREEMPTIBLE: _bindgen_ty_115 = 2;
pub type _bindgen_ty_115 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_mqprio_qopt {
    pub num_tc: __u8,
    pub prio_tc_map: [__u8; 16usize],
    pub hw: __u8,
    pub count: [__u16; 16usize],
    pub offset: [__u16; 16usize],
}
pub const TCA_MQPRIO_TC_ENTRY_UNSPEC: _bindgen_ty_116 = 0;
pub const TCA_MQPRIO_TC_ENTRY_INDEX: _bindgen_ty_116 = 1;
pub const TCA_MQPRIO_TC_ENTRY_FP: _bindgen_ty_116 = 2;
pub const __TCA_MQPRIO_TC_ENTRY_CNT: _bindgen_ty_116 = 3;
pub const TCA_MQPRIO_TC_ENTRY_MAX: _bindgen_ty_116 = 2;
pub type _bindgen_ty_116 = core::ffi::c_uint;
pub const TCA_MQPRIO_UNSPEC: _bindgen_ty_117 = 0;
pub const TCA_MQPRIO_MODE: _bindgen_ty_117 = 1;
pub const TCA_MQPRIO_SHAPER: _bindgen_ty_117 = 2;
pub const TCA_MQPRIO_MIN_RATE64: _bindgen_ty_117 = 3;
pub const TCA_MQPRIO_MAX_RATE64: _bindgen_ty_117 = 4;
pub const TCA_MQPRIO_TC_ENTRY: _bindgen_ty_117 = 5;
pub const __TCA_MQPRIO_MAX: _bindgen_ty_117 = 6;
pub type _bindgen_ty_117 = core::ffi::c_uint;
pub const TCA_SFB_UNSPEC: _bindgen_ty_118 = 0;
pub const TCA_SFB_PARMS: _bindgen_ty_118 = 1;
pub const __TCA_SFB_MAX: _bindgen_ty_118 = 2;
pub type _bindgen_ty_118 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_sfb_qopt {
    pub rehash_interval: __u32,
    pub warmup_time: __u32,
    pub max: __u32,
    pub bin_size: __u32,
    pub increment: __u32,
    pub decrement: __u32,
    pub limit: __u32,
    pub penalty_rate: __u32,
    pub penalty_burst: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_sfb_xstats {
    pub earlydrop: __u32,
    pub penaltydrop: __u32,
    pub bucketdrop: __u32,
    pub queuedrop: __u32,
    pub childdrop: __u32,
    pub marked: __u32,
    pub maxqlen: __u32,
    pub maxprob: __u32,
    pub avgprob: __u32,
}
pub const TCA_QFQ_UNSPEC: _bindgen_ty_119 = 0;
pub const TCA_QFQ_WEIGHT: _bindgen_ty_119 = 1;
pub const TCA_QFQ_LMAX: _bindgen_ty_119 = 2;
pub const __TCA_QFQ_MAX: _bindgen_ty_119 = 3;
pub type _bindgen_ty_119 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_qfq_stats {
    pub weight: __u32,
    pub lmax: __u32,
}
pub const TCA_CODEL_UNSPEC: _bindgen_ty_120 = 0;
pub const TCA_CODEL_TARGET: _bindgen_ty_120 = 1;
pub const TCA_CODEL_LIMIT: _bindgen_ty_120 = 2;
pub const TCA_CODEL_INTERVAL: _bindgen_ty_120 = 3;
pub const TCA_CODEL_ECN: _bindgen_ty_120 = 4;
pub const TCA_CODEL_CE_THRESHOLD: _bindgen_ty_120 = 5;
pub const __TCA_CODEL_MAX: _bindgen_ty_120 = 6;
pub type _bindgen_ty_120 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_codel_xstats {
    pub maxpacket: __u32,
    pub count: __u32,
    pub lastcount: __u32,
    pub ldelay: __u32,
    pub drop_next: __s32,
    pub drop_overlimit: __u32,
    pub ecn_mark: __u32,
    pub dropping: __u32,
    pub ce_mark: __u32,
}
pub const TCA_FQ_CODEL_UNSPEC: _bindgen_ty_121 = 0;
pub const TCA_FQ_CODEL_TARGET: _bindgen_ty_121 = 1;
pub const TCA_FQ_CODEL_LIMIT: _bindgen_ty_121 = 2;
pub const TCA_FQ_CODEL_INTERVAL: _bindgen_ty_121 = 3;
pub const TCA_FQ_CODEL_ECN: _bindgen_ty_121 = 4;
pub const TCA_FQ_CODEL_FLOWS: _bindgen_ty_121 = 5;
pub const TCA_FQ_CODEL_QUANTUM: _bindgen_ty_121 = 6;
pub const TCA_FQ_CODEL_CE_THRESHOLD: _bindgen_ty_121 = 7;
pub const TCA_FQ_CODEL_DROP_BATCH_SIZE: _bindgen_ty_121 = 8;
pub const TCA_FQ_CODEL_MEMORY_LIMIT: _bindgen_ty_121 = 9;
pub const TCA_FQ_CODEL_CE_THRESHOLD_SELECTOR: _bindgen_ty_121 = 10;
pub const TCA_FQ_CODEL_CE_THRESHOLD_MASK: _bindgen_ty_121 = 11;
pub const __TCA_FQ_CODEL_MAX: _bindgen_ty_121 = 12;
pub type _bindgen_ty_121 = core::ffi::c_uint;
pub const TCA_FQ_CODEL_XSTATS_QDISC: _bindgen_ty_122 = 0;
pub const TCA_FQ_CODEL_XSTATS_CLASS: _bindgen_ty_122 = 1;
pub type _bindgen_ty_122 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_fq_codel_qd_stats {
    pub maxpacket: __u32,
    pub drop_overlimit: __u32,
    pub ecn_mark: __u32,
    pub new_flow_count: __u32,
    pub new_flows_len: __u32,
    pub old_flows_len: __u32,
    pub ce_mark: __u32,
    pub memory_usage: __u32,
    pub drop_overmemory: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_fq_codel_cl_stats {
    pub deficit: __s32,
    pub ldelay: __u32,
    pub count: __u32,
    pub lastcount: __u32,
    pub dropping: __u32,
    pub drop_next: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tc_fq_codel_xstats {
    pub type_: __u32,
    pub __bindgen_anon_1: tc_fq_codel_xstats__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tc_fq_codel_xstats__bindgen_ty_1 {
    pub qdisc_stats: tc_fq_codel_qd_stats,
    pub class_stats: tc_fq_codel_cl_stats,
}
impl Default for tc_fq_codel_xstats__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tc_fq_codel_xstats {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TCA_FQ_UNSPEC: _bindgen_ty_123 = 0;
pub const TCA_FQ_PLIMIT: _bindgen_ty_123 = 1;
pub const TCA_FQ_FLOW_PLIMIT: _bindgen_ty_123 = 2;
pub const TCA_FQ_QUANTUM: _bindgen_ty_123 = 3;
pub const TCA_FQ_INITIAL_QUANTUM: _bindgen_ty_123 = 4;
pub const TCA_FQ_RATE_ENABLE: _bindgen_ty_123 = 5;
pub const TCA_FQ_FLOW_DEFAULT_RATE: _bindgen_ty_123 = 6;
pub const TCA_FQ_FLOW_MAX_RATE: _bindgen_ty_123 = 7;
pub const TCA_FQ_BUCKETS_LOG: _bindgen_ty_123 = 8;
pub const TCA_FQ_FLOW_REFILL_DELAY: _bindgen_ty_123 = 9;
pub const TCA_FQ_ORPHAN_MASK: _bindgen_ty_123 = 10;
pub const TCA_FQ_LOW_RATE_THRESHOLD: _bindgen_ty_123 = 11;
pub const TCA_FQ_CE_THRESHOLD: _bindgen_ty_123 = 12;
pub const TCA_FQ_TIMER_SLACK: _bindgen_ty_123 = 13;
pub const TCA_FQ_HORIZON: _bindgen_ty_123 = 14;
pub const TCA_FQ_HORIZON_DROP: _bindgen_ty_123 = 15;
pub const TCA_FQ_PRIOMAP: _bindgen_ty_123 = 16;
pub const TCA_FQ_WEIGHTS: _bindgen_ty_123 = 17;
pub const __TCA_FQ_MAX: _bindgen_ty_123 = 18;
pub type _bindgen_ty_123 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_fq_qd_stats {
    pub gc_flows: __u64,
    pub highprio_packets: __u64,
    pub tcp_retrans: __u64,
    pub throttled: __u64,
    pub flows_plimit: __u64,
    pub pkts_too_long: __u64,
    pub allocation_errors: __u64,
    pub time_next_delayed_flow: __s64,
    pub flows: __u32,
    pub inactive_flows: __u32,
    pub throttled_flows: __u32,
    pub unthrottle_latency_ns: __u32,
    pub ce_mark: __u64,
    pub horizon_drops: __u64,
    pub horizon_caps: __u64,
    pub fastpath_packets: __u64,
    pub band_drops: [__u64; 3usize],
    pub band_pkt_count: [__u32; 3usize],
    pub pad: __u32,
}
pub const TCA_HHF_UNSPEC: _bindgen_ty_124 = 0;
pub const TCA_HHF_BACKLOG_LIMIT: _bindgen_ty_124 = 1;
pub const TCA_HHF_QUANTUM: _bindgen_ty_124 = 2;
pub const TCA_HHF_HH_FLOWS_LIMIT: _bindgen_ty_124 = 3;
pub const TCA_HHF_RESET_TIMEOUT: _bindgen_ty_124 = 4;
pub const TCA_HHF_ADMIT_BYTES: _bindgen_ty_124 = 5;
pub const TCA_HHF_EVICT_TIMEOUT: _bindgen_ty_124 = 6;
pub const TCA_HHF_NON_HH_WEIGHT: _bindgen_ty_124 = 7;
pub const __TCA_HHF_MAX: _bindgen_ty_124 = 8;
pub type _bindgen_ty_124 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_hhf_xstats {
    pub drop_overlimit: __u32,
    pub hh_overlimit: __u32,
    pub hh_tot_count: __u32,
    pub hh_cur_count: __u32,
}
pub const TCA_PIE_UNSPEC: _bindgen_ty_125 = 0;
pub const TCA_PIE_TARGET: _bindgen_ty_125 = 1;
pub const TCA_PIE_LIMIT: _bindgen_ty_125 = 2;
pub const TCA_PIE_TUPDATE: _bindgen_ty_125 = 3;
pub const TCA_PIE_ALPHA: _bindgen_ty_125 = 4;
pub const TCA_PIE_BETA: _bindgen_ty_125 = 5;
pub const TCA_PIE_ECN: _bindgen_ty_125 = 6;
pub const TCA_PIE_BYTEMODE: _bindgen_ty_125 = 7;
pub const TCA_PIE_DQ_RATE_ESTIMATOR: _bindgen_ty_125 = 8;
pub const __TCA_PIE_MAX: _bindgen_ty_125 = 9;
pub type _bindgen_ty_125 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_pie_xstats {
    pub prob: __u64,
    pub delay: __u32,
    pub avg_dq_rate: __u32,
    pub dq_rate_estimating: __u32,
    pub packets_in: __u32,
    pub dropped: __u32,
    pub overlimit: __u32,
    pub maxq: __u32,
    pub ecn_mark: __u32,
}
pub const TCA_FQ_PIE_UNSPEC: _bindgen_ty_126 = 0;
pub const TCA_FQ_PIE_LIMIT: _bindgen_ty_126 = 1;
pub const TCA_FQ_PIE_FLOWS: _bindgen_ty_126 = 2;
pub const TCA_FQ_PIE_TARGET: _bindgen_ty_126 = 3;
pub const TCA_FQ_PIE_TUPDATE: _bindgen_ty_126 = 4;
pub const TCA_FQ_PIE_ALPHA: _bindgen_ty_126 = 5;
pub const TCA_FQ_PIE_BETA: _bindgen_ty_126 = 6;
pub const TCA_FQ_PIE_QUANTUM: _bindgen_ty_126 = 7;
pub const TCA_FQ_PIE_MEMORY_LIMIT: _bindgen_ty_126 = 8;
pub const TCA_FQ_PIE_ECN_PROB: _bindgen_ty_126 = 9;
pub const TCA_FQ_PIE_ECN: _bindgen_ty_126 = 10;
pub const TCA_FQ_PIE_BYTEMODE: _bindgen_ty_126 = 11;
pub const TCA_FQ_PIE_DQ_RATE_ESTIMATOR: _bindgen_ty_126 = 12;
pub const __TCA_FQ_PIE_MAX: _bindgen_ty_126 = 13;
pub type _bindgen_ty_126 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_fq_pie_xstats {
    pub packets_in: __u32,
    pub dropped: __u32,
    pub overlimit: __u32,
    pub overmemory: __u32,
    pub ecn_mark: __u32,
    pub new_flow_count: __u32,
    pub new_flows_len: __u32,
    pub old_flows_len: __u32,
    pub memory_usage: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_cbs_qopt {
    pub offload: __u8,
    pub _pad: [__u8; 3usize],
    pub hicredit: __s32,
    pub locredit: __s32,
    pub idleslope: __s32,
    pub sendslope: __s32,
}
pub const TCA_CBS_UNSPEC: _bindgen_ty_127 = 0;
pub const TCA_CBS_PARMS: _bindgen_ty_127 = 1;
pub const __TCA_CBS_MAX: _bindgen_ty_127 = 2;
pub type _bindgen_ty_127 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_etf_qopt {
    pub delta: __s32,
    pub clockid: __s32,
    pub flags: __u32,
}
pub const TCA_ETF_UNSPEC: _bindgen_ty_128 = 0;
pub const TCA_ETF_PARMS: _bindgen_ty_128 = 1;
pub const __TCA_ETF_MAX: _bindgen_ty_128 = 2;
pub type _bindgen_ty_128 = core::ffi::c_uint;
pub const TCA_CAKE_UNSPEC: _bindgen_ty_129 = 0;
pub const TCA_CAKE_PAD: _bindgen_ty_129 = 1;
pub const TCA_CAKE_BASE_RATE64: _bindgen_ty_129 = 2;
pub const TCA_CAKE_DIFFSERV_MODE: _bindgen_ty_129 = 3;
pub const TCA_CAKE_ATM: _bindgen_ty_129 = 4;
pub const TCA_CAKE_FLOW_MODE: _bindgen_ty_129 = 5;
pub const TCA_CAKE_OVERHEAD: _bindgen_ty_129 = 6;
pub const TCA_CAKE_RTT: _bindgen_ty_129 = 7;
pub const TCA_CAKE_TARGET: _bindgen_ty_129 = 8;
pub const TCA_CAKE_AUTORATE: _bindgen_ty_129 = 9;
pub const TCA_CAKE_MEMORY: _bindgen_ty_129 = 10;
pub const TCA_CAKE_NAT: _bindgen_ty_129 = 11;
pub const TCA_CAKE_RAW: _bindgen_ty_129 = 12;
pub const TCA_CAKE_WASH: _bindgen_ty_129 = 13;
pub const TCA_CAKE_MPU: _bindgen_ty_129 = 14;
pub const TCA_CAKE_INGRESS: _bindgen_ty_129 = 15;
pub const TCA_CAKE_ACK_FILTER: _bindgen_ty_129 = 16;
pub const TCA_CAKE_SPLIT_GSO: _bindgen_ty_129 = 17;
pub const TCA_CAKE_FWMARK: _bindgen_ty_129 = 18;
pub const __TCA_CAKE_MAX: _bindgen_ty_129 = 19;
pub type _bindgen_ty_129 = core::ffi::c_uint;
pub const __TCA_CAKE_STATS_INVALID: _bindgen_ty_130 = 0;
pub const TCA_CAKE_STATS_PAD: _bindgen_ty_130 = 1;
pub const TCA_CAKE_STATS_CAPACITY_ESTIMATE64: _bindgen_ty_130 = 2;
pub const TCA_CAKE_STATS_MEMORY_LIMIT: _bindgen_ty_130 = 3;
pub const TCA_CAKE_STATS_MEMORY_USED: _bindgen_ty_130 = 4;
pub const TCA_CAKE_STATS_AVG_NETOFF: _bindgen_ty_130 = 5;
pub const TCA_CAKE_STATS_MIN_NETLEN: _bindgen_ty_130 = 6;
pub const TCA_CAKE_STATS_MAX_NETLEN: _bindgen_ty_130 = 7;
pub const TCA_CAKE_STATS_MIN_ADJLEN: _bindgen_ty_130 = 8;
pub const TCA_CAKE_STATS_MAX_ADJLEN: _bindgen_ty_130 = 9;
pub const TCA_CAKE_STATS_TIN_STATS: _bindgen_ty_130 = 10;
pub const TCA_CAKE_STATS_DEFICIT: _bindgen_ty_130 = 11;
pub const TCA_CAKE_STATS_COBALT_COUNT: _bindgen_ty_130 = 12;
pub const TCA_CAKE_STATS_DROPPING: _bindgen_ty_130 = 13;
pub const TCA_CAKE_STATS_DROP_NEXT_US: _bindgen_ty_130 = 14;
pub const TCA_CAKE_STATS_P_DROP: _bindgen_ty_130 = 15;
pub const TCA_CAKE_STATS_BLUE_TIMER_US: _bindgen_ty_130 = 16;
pub const __TCA_CAKE_STATS_MAX: _bindgen_ty_130 = 17;
pub type _bindgen_ty_130 = core::ffi::c_uint;
pub const __TCA_CAKE_TIN_STATS_INVALID: _bindgen_ty_131 = 0;
pub const TCA_CAKE_TIN_STATS_PAD: _bindgen_ty_131 = 1;
pub const TCA_CAKE_TIN_STATS_SENT_PACKETS: _bindgen_ty_131 = 2;
pub const TCA_CAKE_TIN_STATS_SENT_BYTES64: _bindgen_ty_131 = 3;
pub const TCA_CAKE_TIN_STATS_DROPPED_PACKETS: _bindgen_ty_131 = 4;
pub const TCA_CAKE_TIN_STATS_DROPPED_BYTES64: _bindgen_ty_131 = 5;
pub const TCA_CAKE_TIN_STATS_ACKS_DROPPED_PACKETS: _bindgen_ty_131 = 6;
pub const TCA_CAKE_TIN_STATS_ACKS_DROPPED_BYTES64: _bindgen_ty_131 = 7;
pub const TCA_CAKE_TIN_STATS_ECN_MARKED_PACKETS: _bindgen_ty_131 = 8;
pub const TCA_CAKE_TIN_STATS_ECN_MARKED_BYTES64: _bindgen_ty_131 = 9;
pub const TCA_CAKE_TIN_STATS_BACKLOG_PACKETS: _bindgen_ty_131 = 10;
pub const TCA_CAKE_TIN_STATS_BACKLOG_BYTES: _bindgen_ty_131 = 11;
pub const TCA_CAKE_TIN_STATS_THRESHOLD_RATE64: _bindgen_ty_131 = 12;
pub const TCA_CAKE_TIN_STATS_TARGET_US: _bindgen_ty_131 = 13;
pub const TCA_CAKE_TIN_STATS_INTERVAL_US: _bindgen_ty_131 = 14;
pub const TCA_CAKE_TIN_STATS_WAY_INDIRECT_HITS: _bindgen_ty_131 = 15;
pub const TCA_CAKE_TIN_STATS_WAY_MISSES: _bindgen_ty_131 = 16;
pub const TCA_CAKE_TIN_STATS_WAY_COLLISIONS: _bindgen_ty_131 = 17;
pub const TCA_CAKE_TIN_STATS_PEAK_DELAY_US: _bindgen_ty_131 = 18;
pub const TCA_CAKE_TIN_STATS_AVG_DELAY_US: _bindgen_ty_131 = 19;
pub const TCA_CAKE_TIN_STATS_BASE_DELAY_US: _bindgen_ty_131 = 20;
pub const TCA_CAKE_TIN_STATS_SPARSE_FLOWS: _bindgen_ty_131 = 21;
pub const TCA_CAKE_TIN_STATS_BULK_FLOWS: _bindgen_ty_131 = 22;
pub const TCA_CAKE_TIN_STATS_UNRESPONSIVE_FLOWS: _bindgen_ty_131 = 23;
pub const TCA_CAKE_TIN_STATS_MAX_SKBLEN: _bindgen_ty_131 = 24;
pub const TCA_CAKE_TIN_STATS_FLOW_QUANTUM: _bindgen_ty_131 = 25;
pub const __TCA_CAKE_TIN_STATS_MAX: _bindgen_ty_131 = 26;
pub type _bindgen_ty_131 = core::ffi::c_uint;
pub const CAKE_FLOW_NONE: _bindgen_ty_132 = 0;
pub const CAKE_FLOW_SRC_IP: _bindgen_ty_132 = 1;
pub const CAKE_FLOW_DST_IP: _bindgen_ty_132 = 2;
pub const CAKE_FLOW_HOSTS: _bindgen_ty_132 = 3;
pub const CAKE_FLOW_FLOWS: _bindgen_ty_132 = 4;
pub const CAKE_FLOW_DUAL_SRC: _bindgen_ty_132 = 5;
pub const CAKE_FLOW_DUAL_DST: _bindgen_ty_132 = 6;
pub const CAKE_FLOW_TRIPLE: _bindgen_ty_132 = 7;
pub const CAKE_FLOW_MAX: _bindgen_ty_132 = 8;
pub type _bindgen_ty_132 = core::ffi::c_uint;
pub const CAKE_DIFFSERV_DIFFSERV3: _bindgen_ty_133 = 0;
pub const CAKE_DIFFSERV_DIFFSERV4: _bindgen_ty_133 = 1;
pub const CAKE_DIFFSERV_DIFFSERV8: _bindgen_ty_133 = 2;
pub const CAKE_DIFFSERV_BESTEFFORT: _bindgen_ty_133 = 3;
pub const CAKE_DIFFSERV_PRECEDENCE: _bindgen_ty_133 = 4;
pub const CAKE_DIFFSERV_MAX: _bindgen_ty_133 = 5;
pub type _bindgen_ty_133 = core::ffi::c_uint;
pub const CAKE_ACK_NONE: _bindgen_ty_134 = 0;
pub const CAKE_ACK_FILTER: _bindgen_ty_134 = 1;
pub const CAKE_ACK_AGGRESSIVE: _bindgen_ty_134 = 2;
pub const CAKE_ACK_MAX: _bindgen_ty_134 = 3;
pub type _bindgen_ty_134 = core::ffi::c_uint;
pub const CAKE_ATM_NONE: _bindgen_ty_135 = 0;
pub const CAKE_ATM_ATM: _bindgen_ty_135 = 1;
pub const CAKE_ATM_PTM: _bindgen_ty_135 = 2;
pub const CAKE_ATM_MAX: _bindgen_ty_135 = 3;
pub type _bindgen_ty_135 = core::ffi::c_uint;
pub const TC_TAPRIO_CMD_SET_GATES: _bindgen_ty_136 = 0;
pub const TC_TAPRIO_CMD_SET_AND_HOLD: _bindgen_ty_136 = 1;
pub const TC_TAPRIO_CMD_SET_AND_RELEASE: _bindgen_ty_136 = 2;
pub type _bindgen_ty_136 = core::ffi::c_uint;
pub const TCA_TAPRIO_SCHED_ENTRY_UNSPEC: _bindgen_ty_137 = 0;
pub const TCA_TAPRIO_SCHED_ENTRY_INDEX: _bindgen_ty_137 = 1;
pub const TCA_TAPRIO_SCHED_ENTRY_CMD: _bindgen_ty_137 = 2;
pub const TCA_TAPRIO_SCHED_ENTRY_GATE_MASK: _bindgen_ty_137 = 3;
pub const TCA_TAPRIO_SCHED_ENTRY_INTERVAL: _bindgen_ty_137 = 4;
pub const __TCA_TAPRIO_SCHED_ENTRY_MAX: _bindgen_ty_137 = 5;
pub type _bindgen_ty_137 = core::ffi::c_uint;
pub const TCA_TAPRIO_SCHED_UNSPEC: _bindgen_ty_138 = 0;
pub const TCA_TAPRIO_SCHED_ENTRY: _bindgen_ty_138 = 1;
pub const __TCA_TAPRIO_SCHED_MAX: _bindgen_ty_138 = 2;
pub type _bindgen_ty_138 = core::ffi::c_uint;
pub const TCA_TAPRIO_TC_ENTRY_UNSPEC: _bindgen_ty_139 = 0;
pub const TCA_TAPRIO_TC_ENTRY_INDEX: _bindgen_ty_139 = 1;
pub const TCA_TAPRIO_TC_ENTRY_MAX_SDU: _bindgen_ty_139 = 2;
pub const TCA_TAPRIO_TC_ENTRY_FP: _bindgen_ty_139 = 3;
pub const __TCA_TAPRIO_TC_ENTRY_CNT: _bindgen_ty_139 = 4;
pub const TCA_TAPRIO_TC_ENTRY_MAX: _bindgen_ty_139 = 3;
pub type _bindgen_ty_139 = core::ffi::c_uint;
pub const TCA_TAPRIO_OFFLOAD_STATS_PAD: _bindgen_ty_140 = 1;
pub const TCA_TAPRIO_OFFLOAD_STATS_WINDOW_DROPS: _bindgen_ty_140 = 2;
pub const TCA_TAPRIO_OFFLOAD_STATS_TX_OVERRUNS: _bindgen_ty_140 = 3;
pub const __TCA_TAPRIO_OFFLOAD_STATS_CNT: _bindgen_ty_140 = 4;
pub const TCA_TAPRIO_OFFLOAD_STATS_MAX: _bindgen_ty_140 = 3;
pub type _bindgen_ty_140 = core::ffi::c_uint;
pub const TCA_TAPRIO_ATTR_UNSPEC: _bindgen_ty_141 = 0;
pub const TCA_TAPRIO_ATTR_PRIOMAP: _bindgen_ty_141 = 1;
pub const TCA_TAPRIO_ATTR_SCHED_ENTRY_LIST: _bindgen_ty_141 = 2;
pub const TCA_TAPRIO_ATTR_SCHED_BASE_TIME: _bindgen_ty_141 = 3;
pub const TCA_TAPRIO_ATTR_SCHED_SINGLE_ENTRY: _bindgen_ty_141 = 4;
pub const TCA_TAPRIO_ATTR_SCHED_CLOCKID: _bindgen_ty_141 = 5;
pub const TCA_TAPRIO_PAD: _bindgen_ty_141 = 6;
pub const TCA_TAPRIO_ATTR_ADMIN_SCHED: _bindgen_ty_141 = 7;
pub const TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME: _bindgen_ty_141 = 8;
pub const TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME_EXTENSION: _bindgen_ty_141 = 9;
pub const TCA_TAPRIO_ATTR_FLAGS: _bindgen_ty_141 = 10;
pub const TCA_TAPRIO_ATTR_TXTIME_DELAY: _bindgen_ty_141 = 11;
pub const TCA_TAPRIO_ATTR_TC_ENTRY: _bindgen_ty_141 = 12;
pub const __TCA_TAPRIO_ATTR_MAX: _bindgen_ty_141 = 13;
pub type _bindgen_ty_141 = core::ffi::c_uint;
pub const TCA_ETS_UNSPEC: _bindgen_ty_142 = 0;
pub const TCA_ETS_NBANDS: _bindgen_ty_142 = 1;
pub const TCA_ETS_NSTRICT: _bindgen_ty_142 = 2;
pub const TCA_ETS_QUANTA: _bindgen_ty_142 = 3;
pub const TCA_ETS_QUANTA_BAND: _bindgen_ty_142 = 4;
pub const TCA_ETS_PRIOMAP: _bindgen_ty_142 = 5;
pub const TCA_ETS_PRIOMAP_BAND: _bindgen_ty_142 = 6;
pub const __TCA_ETS_MAX: _bindgen_ty_142 = 7;
pub type _bindgen_ty_142 = core::ffi::c_uint;
pub const TCA_ACT_UNSPEC: _bindgen_ty_143 = 0;
pub const TCA_ACT_KIND: _bindgen_ty_143 = 1;
pub const TCA_ACT_OPTIONS: _bindgen_ty_143 = 2;
pub const TCA_ACT_INDEX: _bindgen_ty_143 = 3;
pub const TCA_ACT_STATS: _bindgen_ty_143 = 4;
pub const TCA_ACT_PAD: _bindgen_ty_143 = 5;
pub const TCA_ACT_COOKIE: _bindgen_ty_143 = 6;
pub const TCA_ACT_FLAGS: _bindgen_ty_143 = 7;
pub const TCA_ACT_HW_STATS: _bindgen_ty_143 = 8;
pub const TCA_ACT_USED_HW_STATS: _bindgen_ty_143 = 9;
pub const TCA_ACT_IN_HW_COUNT: _bindgen_ty_143 = 10;
pub const __TCA_ACT_MAX: _bindgen_ty_143 = 11;
pub type _bindgen_ty_143 = core::ffi::c_uint;
pub const tca_id_TCA_ID_UNSPEC: tca_id = 0;
pub const tca_id_TCA_ID_POLICE: tca_id = 1;
pub const tca_id_TCA_ID_GACT: tca_id = 5;
pub const tca_id_TCA_ID_IPT: tca_id = 6;
pub const tca_id_TCA_ID_PEDIT: tca_id = 7;
pub const tca_id_TCA_ID_MIRRED: tca_id = 8;
pub const tca_id_TCA_ID_NAT: tca_id = 9;
pub const tca_id_TCA_ID_XT: tca_id = 10;
pub const tca_id_TCA_ID_SKBEDIT: tca_id = 11;
pub const tca_id_TCA_ID_VLAN: tca_id = 12;
pub const tca_id_TCA_ID_BPF: tca_id = 13;
pub const tca_id_TCA_ID_CONNMARK: tca_id = 14;
pub const tca_id_TCA_ID_SKBMOD: tca_id = 15;
pub const tca_id_TCA_ID_CSUM: tca_id = 16;
pub const tca_id_TCA_ID_TUNNEL_KEY: tca_id = 17;
pub const tca_id_TCA_ID_SIMP: tca_id = 22;
pub const tca_id_TCA_ID_IFE: tca_id = 25;
pub const tca_id_TCA_ID_SAMPLE: tca_id = 26;
pub const tca_id_TCA_ID_CTINFO: tca_id = 27;
pub const tca_id_TCA_ID_MPLS: tca_id = 28;
pub const tca_id_TCA_ID_CT: tca_id = 29;
pub const tca_id_TCA_ID_GATE: tca_id = 30;
pub const tca_id___TCA_ID_MAX: tca_id = 255;
pub type tca_id = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_police {
    pub index: __u32,
    pub action: core::ffi::c_int,
    pub limit: __u32,
    pub burst: __u32,
    pub mtu: __u32,
    pub rate: tc_ratespec,
    pub peakrate: tc_ratespec,
    pub refcnt: core::ffi::c_int,
    pub bindcnt: core::ffi::c_int,
    pub capab: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tcf_t {
    pub install: __u64,
    pub lastuse: __u64,
    pub expires: __u64,
    pub firstuse: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_cnt {
    pub refcnt: core::ffi::c_int,
    pub bindcnt: core::ffi::c_int,
}
pub const TCA_POLICE_UNSPEC: _bindgen_ty_144 = 0;
pub const TCA_POLICE_TBF: _bindgen_ty_144 = 1;
pub const TCA_POLICE_RATE: _bindgen_ty_144 = 2;
pub const TCA_POLICE_PEAKRATE: _bindgen_ty_144 = 3;
pub const TCA_POLICE_AVRATE: _bindgen_ty_144 = 4;
pub const TCA_POLICE_RESULT: _bindgen_ty_144 = 5;
pub const TCA_POLICE_TM: _bindgen_ty_144 = 6;
pub const TCA_POLICE_PAD: _bindgen_ty_144 = 7;
pub const TCA_POLICE_RATE64: _bindgen_ty_144 = 8;
pub const TCA_POLICE_PEAKRATE64: _bindgen_ty_144 = 9;
pub const TCA_POLICE_PKTRATE64: _bindgen_ty_144 = 10;
pub const TCA_POLICE_PKTBURST64: _bindgen_ty_144 = 11;
pub const __TCA_POLICE_MAX: _bindgen_ty_144 = 12;
pub type _bindgen_ty_144 = core::ffi::c_uint;
pub const TCA_U32_UNSPEC: _bindgen_ty_145 = 0;
pub const TCA_U32_CLASSID: _bindgen_ty_145 = 1;
pub const TCA_U32_HASH: _bindgen_ty_145 = 2;
pub const TCA_U32_LINK: _bindgen_ty_145 = 3;
pub const TCA_U32_DIVISOR: _bindgen_ty_145 = 4;
pub const TCA_U32_SEL: _bindgen_ty_145 = 5;
pub const TCA_U32_POLICE: _bindgen_ty_145 = 6;
pub const TCA_U32_ACT: _bindgen_ty_145 = 7;
pub const TCA_U32_INDEV: _bindgen_ty_145 = 8;
pub const TCA_U32_PCNT: _bindgen_ty_145 = 9;
pub const TCA_U32_MARK: _bindgen_ty_145 = 10;
pub const TCA_U32_FLAGS: _bindgen_ty_145 = 11;
pub const TCA_U32_PAD: _bindgen_ty_145 = 12;
pub const __TCA_U32_MAX: _bindgen_ty_145 = 13;
pub type _bindgen_ty_145 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_u32_key {
    pub mask: __be32,
    pub val: __be32,
    pub off: core::ffi::c_int,
    pub offmask: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default)]
pub struct tc_u32_sel {
    pub flags: core::ffi::c_uchar,
    pub offshift: core::ffi::c_uchar,
    pub nkeys: core::ffi::c_uchar,
    pub offmask: __be16,
    pub off: __u16,
    pub offoff: core::ffi::c_short,
    pub hoff: core::ffi::c_short,
    pub hmask: __be32,
    pub keys: __IncompleteArrayField<tc_u32_key>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_u32_mark {
    pub val: __u32,
    pub mask: __u32,
    pub success: __u32,
}
#[repr(C)]
#[derive(Default)]
pub struct tc_u32_pcnt {
    pub rcnt: __u64,
    pub rhit: __u64,
    pub kcnts: __IncompleteArrayField<__u64>,
}
pub const TCA_ROUTE4_UNSPEC: _bindgen_ty_146 = 0;
pub const TCA_ROUTE4_CLASSID: _bindgen_ty_146 = 1;
pub const TCA_ROUTE4_TO: _bindgen_ty_146 = 2;
pub const TCA_ROUTE4_FROM: _bindgen_ty_146 = 3;
pub const TCA_ROUTE4_IIF: _bindgen_ty_146 = 4;
pub const TCA_ROUTE4_POLICE: _bindgen_ty_146 = 5;
pub const TCA_ROUTE4_ACT: _bindgen_ty_146 = 6;
pub const __TCA_ROUTE4_MAX: _bindgen_ty_146 = 7;
pub type _bindgen_ty_146 = core::ffi::c_uint;
pub const TCA_FW_UNSPEC: _bindgen_ty_147 = 0;
pub const TCA_FW_CLASSID: _bindgen_ty_147 = 1;
pub const TCA_FW_POLICE: _bindgen_ty_147 = 2;
pub const TCA_FW_INDEV: _bindgen_ty_147 = 3;
pub const TCA_FW_ACT: _bindgen_ty_147 = 4;
pub const TCA_FW_MASK: _bindgen_ty_147 = 5;
pub const __TCA_FW_MAX: _bindgen_ty_147 = 6;
pub type _bindgen_ty_147 = core::ffi::c_uint;
pub const FLOW_KEY_SRC: _bindgen_ty_148 = 0;
pub const FLOW_KEY_DST: _bindgen_ty_148 = 1;
pub const FLOW_KEY_PROTO: _bindgen_ty_148 = 2;
pub const FLOW_KEY_PROTO_SRC: _bindgen_ty_148 = 3;
pub const FLOW_KEY_PROTO_DST: _bindgen_ty_148 = 4;
pub const FLOW_KEY_IIF: _bindgen_ty_148 = 5;
pub const FLOW_KEY_PRIORITY: _bindgen_ty_148 = 6;
pub const FLOW_KEY_MARK: _bindgen_ty_148 = 7;
pub const FLOW_KEY_NFCT: _bindgen_ty_148 = 8;
pub const FLOW_KEY_NFCT_SRC: _bindgen_ty_148 = 9;
pub const FLOW_KEY_NFCT_DST: _bindgen_ty_148 = 10;
pub const FLOW_KEY_NFCT_PROTO_SRC: _bindgen_ty_148 = 11;
pub const FLOW_KEY_NFCT_PROTO_DST: _bindgen_ty_148 = 12;
pub const FLOW_KEY_RTCLASSID: _bindgen_ty_148 = 13;
pub const FLOW_KEY_SKUID: _bindgen_ty_148 = 14;
pub const FLOW_KEY_SKGID: _bindgen_ty_148 = 15;
pub const FLOW_KEY_VLAN_TAG: _bindgen_ty_148 = 16;
pub const FLOW_KEY_RXHASH: _bindgen_ty_148 = 17;
pub const __FLOW_KEY_MAX: _bindgen_ty_148 = 18;
pub type _bindgen_ty_148 = core::ffi::c_uint;
pub const FLOW_MODE_MAP: _bindgen_ty_149 = 0;
pub const FLOW_MODE_HASH: _bindgen_ty_149 = 1;
pub type _bindgen_ty_149 = core::ffi::c_uint;
pub const TCA_FLOW_UNSPEC: _bindgen_ty_150 = 0;
pub const TCA_FLOW_KEYS: _bindgen_ty_150 = 1;
pub const TCA_FLOW_MODE: _bindgen_ty_150 = 2;
pub const TCA_FLOW_BASECLASS: _bindgen_ty_150 = 3;
pub const TCA_FLOW_RSHIFT: _bindgen_ty_150 = 4;
pub const TCA_FLOW_ADDEND: _bindgen_ty_150 = 5;
pub const TCA_FLOW_MASK: _bindgen_ty_150 = 6;
pub const TCA_FLOW_XOR: _bindgen_ty_150 = 7;
pub const TCA_FLOW_DIVISOR: _bindgen_ty_150 = 8;
pub const TCA_FLOW_ACT: _bindgen_ty_150 = 9;
pub const TCA_FLOW_POLICE: _bindgen_ty_150 = 10;
pub const TCA_FLOW_EMATCHES: _bindgen_ty_150 = 11;
pub const TCA_FLOW_PERTURB: _bindgen_ty_150 = 12;
pub const __TCA_FLOW_MAX: _bindgen_ty_150 = 13;
pub type _bindgen_ty_150 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_basic_pcnt {
    pub rcnt: __u64,
    pub rhit: __u64,
}
pub const TCA_BASIC_UNSPEC: _bindgen_ty_151 = 0;
pub const TCA_BASIC_CLASSID: _bindgen_ty_151 = 1;
pub const TCA_BASIC_EMATCHES: _bindgen_ty_151 = 2;
pub const TCA_BASIC_ACT: _bindgen_ty_151 = 3;
pub const TCA_BASIC_POLICE: _bindgen_ty_151 = 4;
pub const TCA_BASIC_PCNT: _bindgen_ty_151 = 5;
pub const TCA_BASIC_PAD: _bindgen_ty_151 = 6;
pub const __TCA_BASIC_MAX: _bindgen_ty_151 = 7;
pub type _bindgen_ty_151 = core::ffi::c_uint;
pub const TCA_CGROUP_UNSPEC: _bindgen_ty_152 = 0;
pub const TCA_CGROUP_ACT: _bindgen_ty_152 = 1;
pub const TCA_CGROUP_POLICE: _bindgen_ty_152 = 2;
pub const TCA_CGROUP_EMATCHES: _bindgen_ty_152 = 3;
pub const __TCA_CGROUP_MAX: _bindgen_ty_152 = 4;
pub type _bindgen_ty_152 = core::ffi::c_uint;
pub const TCA_BPF_UNSPEC: _bindgen_ty_153 = 0;
pub const TCA_BPF_ACT: _bindgen_ty_153 = 1;
pub const TCA_BPF_POLICE: _bindgen_ty_153 = 2;
pub const TCA_BPF_CLASSID: _bindgen_ty_153 = 3;
pub const TCA_BPF_OPS_LEN: _bindgen_ty_153 = 4;
pub const TCA_BPF_OPS: _bindgen_ty_153 = 5;
pub const TCA_BPF_FD: _bindgen_ty_153 = 6;
pub const TCA_BPF_NAME: _bindgen_ty_153 = 7;
pub const TCA_BPF_FLAGS: _bindgen_ty_153 = 8;
pub const TCA_BPF_FLAGS_GEN: _bindgen_ty_153 = 9;
pub const TCA_BPF_TAG: _bindgen_ty_153 = 10;
pub const TCA_BPF_ID: _bindgen_ty_153 = 11;
pub const __TCA_BPF_MAX: _bindgen_ty_153 = 12;
pub type _bindgen_ty_153 = core::ffi::c_uint;
pub const TCA_FLOWER_UNSPEC: _bindgen_ty_154 = 0;
pub const TCA_FLOWER_CLASSID: _bindgen_ty_154 = 1;
pub const TCA_FLOWER_INDEV: _bindgen_ty_154 = 2;
pub const TCA_FLOWER_ACT: _bindgen_ty_154 = 3;
pub const TCA_FLOWER_KEY_ETH_DST: _bindgen_ty_154 = 4;
pub const TCA_FLOWER_KEY_ETH_DST_MASK: _bindgen_ty_154 = 5;
pub const TCA_FLOWER_KEY_ETH_SRC: _bindgen_ty_154 = 6;
pub const TCA_FLOWER_KEY_ETH_SRC_MASK: _bindgen_ty_154 = 7;
pub const TCA_FLOWER_KEY_ETH_TYPE: _bindgen_ty_154 = 8;
pub const TCA_FLOWER_KEY_IP_PROTO: _bindgen_ty_154 = 9;
pub const TCA_FLOWER_KEY_IPV4_SRC: _bindgen_ty_154 = 10;
pub const TCA_FLOWER_KEY_IPV4_SRC_MASK: _bindgen_ty_154 = 11;
pub const TCA_FLOWER_KEY_IPV4_DST: _bindgen_ty_154 = 12;
pub const TCA_FLOWER_KEY_IPV4_DST_MASK: _bindgen_ty_154 = 13;
pub const TCA_FLOWER_KEY_IPV6_SRC: _bindgen_ty_154 = 14;
pub const TCA_FLOWER_KEY_IPV6_SRC_MASK: _bindgen_ty_154 = 15;
pub const TCA_FLOWER_KEY_IPV6_DST: _bindgen_ty_154 = 16;
pub const TCA_FLOWER_KEY_IPV6_DST_MASK: _bindgen_ty_154 = 17;
pub const TCA_FLOWER_KEY_TCP_SRC: _bindgen_ty_154 = 18;
pub const TCA_FLOWER_KEY_TCP_DST: _bindgen_ty_154 = 19;
pub const TCA_FLOWER_KEY_UDP_SRC: _bindgen_ty_154 = 20;
pub const TCA_FLOWER_KEY_UDP_DST: _bindgen_ty_154 = 21;
pub const TCA_FLOWER_FLAGS: _bindgen_ty_154 = 22;
pub const TCA_FLOWER_KEY_VLAN_ID: _bindgen_ty_154 = 23;
pub const TCA_FLOWER_KEY_VLAN_PRIO: _bindgen_ty_154 = 24;
pub const TCA_FLOWER_KEY_VLAN_ETH_TYPE: _bindgen_ty_154 = 25;
pub const TCA_FLOWER_KEY_ENC_KEY_ID: _bindgen_ty_154 = 26;
pub const TCA_FLOWER_KEY_ENC_IPV4_SRC: _bindgen_ty_154 = 27;
pub const TCA_FLOWER_KEY_ENC_IPV4_SRC_MASK: _bindgen_ty_154 = 28;
pub const TCA_FLOWER_KEY_ENC_IPV4_DST: _bindgen_ty_154 = 29;
pub const TCA_FLOWER_KEY_ENC_IPV4_DST_MASK: _bindgen_ty_154 = 30;
pub const TCA_FLOWER_KEY_ENC_IPV6_SRC: _bindgen_ty_154 = 31;
pub const TCA_FLOWER_KEY_ENC_IPV6_SRC_MASK: _bindgen_ty_154 = 32;
pub const TCA_FLOWER_KEY_ENC_IPV6_DST: _bindgen_ty_154 = 33;
pub const TCA_FLOWER_KEY_ENC_IPV6_DST_MASK: _bindgen_ty_154 = 34;
pub const TCA_FLOWER_KEY_TCP_SRC_MASK: _bindgen_ty_154 = 35;
pub const TCA_FLOWER_KEY_TCP_DST_MASK: _bindgen_ty_154 = 36;
pub const TCA_FLOWER_KEY_UDP_SRC_MASK: _bindgen_ty_154 = 37;
pub const TCA_FLOWER_KEY_UDP_DST_MASK: _bindgen_ty_154 = 38;
pub const TCA_FLOWER_KEY_SCTP_SRC_MASK: _bindgen_ty_154 = 39;
pub const TCA_FLOWER_KEY_SCTP_DST_MASK: _bindgen_ty_154 = 40;
pub const TCA_FLOWER_KEY_SCTP_SRC: _bindgen_ty_154 = 41;
pub const TCA_FLOWER_KEY_SCTP_DST: _bindgen_ty_154 = 42;
pub const TCA_FLOWER_KEY_ENC_UDP_SRC_PORT: _bindgen_ty_154 = 43;
pub const TCA_FLOWER_KEY_ENC_UDP_SRC_PORT_MASK: _bindgen_ty_154 = 44;
pub const TCA_FLOWER_KEY_ENC_UDP_DST_PORT: _bindgen_ty_154 = 45;
pub const TCA_FLOWER_KEY_ENC_UDP_DST_PORT_MASK: _bindgen_ty_154 = 46;
pub const TCA_FLOWER_KEY_FLAGS: _bindgen_ty_154 = 47;
pub const TCA_FLOWER_KEY_FLAGS_MASK: _bindgen_ty_154 = 48;
pub const TCA_FLOWER_KEY_ICMPV4_CODE: _bindgen_ty_154 = 49;
pub const TCA_FLOWER_KEY_ICMPV4_CODE_MASK: _bindgen_ty_154 = 50;
pub const TCA_FLOWER_KEY_ICMPV4_TYPE: _bindgen_ty_154 = 51;
pub const TCA_FLOWER_KEY_ICMPV4_TYPE_MASK: _bindgen_ty_154 = 52;
pub const TCA_FLOWER_KEY_ICMPV6_CODE: _bindgen_ty_154 = 53;
pub const TCA_FLOWER_KEY_ICMPV6_CODE_MASK: _bindgen_ty_154 = 54;
pub const TCA_FLOWER_KEY_ICMPV6_TYPE: _bindgen_ty_154 = 55;
pub const TCA_FLOWER_KEY_ICMPV6_TYPE_MASK: _bindgen_ty_154 = 56;
pub const TCA_FLOWER_KEY_ARP_SIP: _bindgen_ty_154 = 57;
pub const TCA_FLOWER_KEY_ARP_SIP_MASK: _bindgen_ty_154 = 58;
pub const TCA_FLOWER_KEY_ARP_TIP: _bindgen_ty_154 = 59;
pub const TCA_FLOWER_KEY_ARP_TIP_MASK: _bindgen_ty_154 = 60;
pub const TCA_FLOWER_KEY_ARP_OP: _bindgen_ty_154 = 61;
pub const TCA_FLOWER_KEY_ARP_OP_MASK: _bindgen_ty_154 = 62;
pub const TCA_FLOWER_KEY_ARP_SHA: _bindgen_ty_154 = 63;
pub const TCA_FLOWER_KEY_ARP_SHA_MASK: _bindgen_ty_154 = 64;
pub const TCA_FLOWER_KEY_ARP_THA: _bindgen_ty_154 = 65;
pub const TCA_FLOWER_KEY_ARP_THA_MASK: _bindgen_ty_154 = 66;
pub const TCA_FLOWER_KEY_MPLS_TTL: _bindgen_ty_154 = 67;
pub const TCA_FLOWER_KEY_MPLS_BOS: _bindgen_ty_154 = 68;
pub const TCA_FLOWER_KEY_MPLS_TC: _bindgen_ty_154 = 69;
pub const TCA_FLOWER_KEY_MPLS_LABEL: _bindgen_ty_154 = 70;
pub const TCA_FLOWER_KEY_TCP_FLAGS: _bindgen_ty_154 = 71;
pub const TCA_FLOWER_KEY_TCP_FLAGS_MASK: _bindgen_ty_154 = 72;
pub const TCA_FLOWER_KEY_IP_TOS: _bindgen_ty_154 = 73;
pub const TCA_FLOWER_KEY_IP_TOS_MASK: _bindgen_ty_154 = 74;
pub const TCA_FLOWER_KEY_IP_TTL: _bindgen_ty_154 = 75;
pub const TCA_FLOWER_KEY_IP_TTL_MASK: _bindgen_ty_154 = 76;
pub const TCA_FLOWER_KEY_CVLAN_ID: _bindgen_ty_154 = 77;
pub const TCA_FLOWER_KEY_CVLAN_PRIO: _bindgen_ty_154 = 78;
pub const TCA_FLOWER_KEY_CVLAN_ETH_TYPE: _bindgen_ty_154 = 79;
pub const TCA_FLOWER_KEY_ENC_IP_TOS: _bindgen_ty_154 = 80;
pub const TCA_FLOWER_KEY_ENC_IP_TOS_MASK: _bindgen_ty_154 = 81;
pub const TCA_FLOWER_KEY_ENC_IP_TTL: _bindgen_ty_154 = 82;
pub const TCA_FLOWER_KEY_ENC_IP_TTL_MASK: _bindgen_ty_154 = 83;
pub const TCA_FLOWER_KEY_ENC_OPTS: _bindgen_ty_154 = 84;
pub const TCA_FLOWER_KEY_ENC_OPTS_MASK: _bindgen_ty_154 = 85;
pub const TCA_FLOWER_IN_HW_COUNT: _bindgen_ty_154 = 86;
pub const TCA_FLOWER_KEY_PORT_SRC_MIN: _bindgen_ty_154 = 87;
pub const TCA_FLOWER_KEY_PORT_SRC_MAX: _bindgen_ty_154 = 88;
pub const TCA_FLOWER_KEY_PORT_DST_MIN: _bindgen_ty_154 = 89;
pub const TCA_FLOWER_KEY_PORT_DST_MAX: _bindgen_ty_154 = 90;
pub const TCA_FLOWER_KEY_CT_STATE: _bindgen_ty_154 = 91;
pub const TCA_FLOWER_KEY_CT_STATE_MASK: _bindgen_ty_154 = 92;
pub const TCA_FLOWER_KEY_CT_ZONE: _bindgen_ty_154 = 93;
pub const TCA_FLOWER_KEY_CT_ZONE_MASK: _bindgen_ty_154 = 94;
pub const TCA_FLOWER_KEY_CT_MARK: _bindgen_ty_154 = 95;
pub const TCA_FLOWER_KEY_CT_MARK_MASK: _bindgen_ty_154 = 96;
pub const TCA_FLOWER_KEY_CT_LABELS: _bindgen_ty_154 = 97;
pub const TCA_FLOWER_KEY_CT_LABELS_MASK: _bindgen_ty_154 = 98;
pub const TCA_FLOWER_KEY_MPLS_OPTS: _bindgen_ty_154 = 99;
pub const TCA_FLOWER_KEY_HASH: _bindgen_ty_154 = 100;
pub const TCA_FLOWER_KEY_HASH_MASK: _bindgen_ty_154 = 101;
pub const TCA_FLOWER_KEY_NUM_OF_VLANS: _bindgen_ty_154 = 102;
pub const TCA_FLOWER_KEY_PPPOE_SID: _bindgen_ty_154 = 103;
pub const TCA_FLOWER_KEY_PPP_PROTO: _bindgen_ty_154 = 104;
pub const TCA_FLOWER_KEY_L2TPV3_SID: _bindgen_ty_154 = 105;
pub const TCA_FLOWER_L2_MISS: _bindgen_ty_154 = 106;
pub const TCA_FLOWER_KEY_CFM: _bindgen_ty_154 = 107;
pub const TCA_FLOWER_KEY_SPI: _bindgen_ty_154 = 108;
pub const TCA_FLOWER_KEY_SPI_MASK: _bindgen_ty_154 = 109;
pub const TCA_FLOWER_KEY_ENC_FLAGS: _bindgen_ty_154 = 110;
pub const TCA_FLOWER_KEY_ENC_FLAGS_MASK: _bindgen_ty_154 = 111;
pub const __TCA_FLOWER_MAX: _bindgen_ty_154 = 112;
pub type _bindgen_ty_154 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_CT_FLAGS_NEW: _bindgen_ty_155 = 1;
pub const TCA_FLOWER_KEY_CT_FLAGS_ESTABLISHED: _bindgen_ty_155 = 2;
pub const TCA_FLOWER_KEY_CT_FLAGS_RELATED: _bindgen_ty_155 = 4;
pub const TCA_FLOWER_KEY_CT_FLAGS_TRACKED: _bindgen_ty_155 = 8;
pub const TCA_FLOWER_KEY_CT_FLAGS_INVALID: _bindgen_ty_155 = 16;
pub const TCA_FLOWER_KEY_CT_FLAGS_REPLY: _bindgen_ty_155 = 32;
pub const __TCA_FLOWER_KEY_CT_FLAGS_MAX: _bindgen_ty_155 = 33;
pub type _bindgen_ty_155 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_ENC_OPTS_UNSPEC: _bindgen_ty_156 = 0;
pub const TCA_FLOWER_KEY_ENC_OPTS_GENEVE: _bindgen_ty_156 = 1;
pub const TCA_FLOWER_KEY_ENC_OPTS_VXLAN: _bindgen_ty_156 = 2;
pub const TCA_FLOWER_KEY_ENC_OPTS_ERSPAN: _bindgen_ty_156 = 3;
pub const TCA_FLOWER_KEY_ENC_OPTS_GTP: _bindgen_ty_156 = 4;
pub const TCA_FLOWER_KEY_ENC_OPTS_PFCP: _bindgen_ty_156 = 5;
pub const __TCA_FLOWER_KEY_ENC_OPTS_MAX: _bindgen_ty_156 = 6;
pub type _bindgen_ty_156 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_ENC_OPT_GENEVE_UNSPEC: _bindgen_ty_157 = 0;
pub const TCA_FLOWER_KEY_ENC_OPT_GENEVE_CLASS: _bindgen_ty_157 = 1;
pub const TCA_FLOWER_KEY_ENC_OPT_GENEVE_TYPE: _bindgen_ty_157 = 2;
pub const TCA_FLOWER_KEY_ENC_OPT_GENEVE_DATA: _bindgen_ty_157 = 3;
pub const __TCA_FLOWER_KEY_ENC_OPT_GENEVE_MAX: _bindgen_ty_157 = 4;
pub type _bindgen_ty_157 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_ENC_OPT_VXLAN_UNSPEC: _bindgen_ty_158 = 0;
pub const TCA_FLOWER_KEY_ENC_OPT_VXLAN_GBP: _bindgen_ty_158 = 1;
pub const __TCA_FLOWER_KEY_ENC_OPT_VXLAN_MAX: _bindgen_ty_158 = 2;
pub type _bindgen_ty_158 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_ENC_OPT_ERSPAN_UNSPEC: _bindgen_ty_159 = 0;
pub const TCA_FLOWER_KEY_ENC_OPT_ERSPAN_VER: _bindgen_ty_159 = 1;
pub const TCA_FLOWER_KEY_ENC_OPT_ERSPAN_INDEX: _bindgen_ty_159 = 2;
pub const TCA_FLOWER_KEY_ENC_OPT_ERSPAN_DIR: _bindgen_ty_159 = 3;
pub const TCA_FLOWER_KEY_ENC_OPT_ERSPAN_HWID: _bindgen_ty_159 = 4;
pub const __TCA_FLOWER_KEY_ENC_OPT_ERSPAN_MAX: _bindgen_ty_159 = 5;
pub type _bindgen_ty_159 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_ENC_OPT_GTP_UNSPEC: _bindgen_ty_160 = 0;
pub const TCA_FLOWER_KEY_ENC_OPT_GTP_PDU_TYPE: _bindgen_ty_160 = 1;
pub const TCA_FLOWER_KEY_ENC_OPT_GTP_QFI: _bindgen_ty_160 = 2;
pub const __TCA_FLOWER_KEY_ENC_OPT_GTP_MAX: _bindgen_ty_160 = 3;
pub type _bindgen_ty_160 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_ENC_OPT_PFCP_UNSPEC: _bindgen_ty_161 = 0;
pub const TCA_FLOWER_KEY_ENC_OPT_PFCP_TYPE: _bindgen_ty_161 = 1;
pub const TCA_FLOWER_KEY_ENC_OPT_PFCP_SEID: _bindgen_ty_161 = 2;
pub const __TCA_FLOWER_KEY_ENC_OPT_PFCP_MAX: _bindgen_ty_161 = 3;
pub type _bindgen_ty_161 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_MPLS_OPTS_UNSPEC: _bindgen_ty_162 = 0;
pub const TCA_FLOWER_KEY_MPLS_OPTS_LSE: _bindgen_ty_162 = 1;
pub const __TCA_FLOWER_KEY_MPLS_OPTS_MAX: _bindgen_ty_162 = 2;
pub type _bindgen_ty_162 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_MPLS_OPT_LSE_UNSPEC: _bindgen_ty_163 = 0;
pub const TCA_FLOWER_KEY_MPLS_OPT_LSE_DEPTH: _bindgen_ty_163 = 1;
pub const TCA_FLOWER_KEY_MPLS_OPT_LSE_TTL: _bindgen_ty_163 = 2;
pub const TCA_FLOWER_KEY_MPLS_OPT_LSE_BOS: _bindgen_ty_163 = 3;
pub const TCA_FLOWER_KEY_MPLS_OPT_LSE_TC: _bindgen_ty_163 = 4;
pub const TCA_FLOWER_KEY_MPLS_OPT_LSE_LABEL: _bindgen_ty_163 = 5;
pub const __TCA_FLOWER_KEY_MPLS_OPT_LSE_MAX: _bindgen_ty_163 = 6;
pub type _bindgen_ty_163 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_FLAGS_IS_FRAGMENT: _bindgen_ty_164 = 1;
pub const TCA_FLOWER_KEY_FLAGS_FRAG_IS_FIRST: _bindgen_ty_164 = 2;
pub const TCA_FLOWER_KEY_FLAGS_TUNNEL_CSUM: _bindgen_ty_164 = 4;
pub const TCA_FLOWER_KEY_FLAGS_TUNNEL_DONT_FRAGMENT: _bindgen_ty_164 = 8;
pub const TCA_FLOWER_KEY_FLAGS_TUNNEL_OAM: _bindgen_ty_164 = 16;
pub const TCA_FLOWER_KEY_FLAGS_TUNNEL_CRIT_OPT: _bindgen_ty_164 = 32;
pub const __TCA_FLOWER_KEY_FLAGS_MAX: _bindgen_ty_164 = 33;
pub type _bindgen_ty_164 = core::ffi::c_uint;
pub const TCA_FLOWER_KEY_CFM_OPT_UNSPEC: _bindgen_ty_165 = 0;
pub const TCA_FLOWER_KEY_CFM_MD_LEVEL: _bindgen_ty_165 = 1;
pub const TCA_FLOWER_KEY_CFM_OPCODE: _bindgen_ty_165 = 2;
pub const __TCA_FLOWER_KEY_CFM_OPT_MAX: _bindgen_ty_165 = 3;
pub type _bindgen_ty_165 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tc_matchall_pcnt {
    pub rhit: __u64,
}
pub const TCA_MATCHALL_UNSPEC: _bindgen_ty_166 = 0;
pub const TCA_MATCHALL_CLASSID: _bindgen_ty_166 = 1;
pub const TCA_MATCHALL_ACT: _bindgen_ty_166 = 2;
pub const TCA_MATCHALL_FLAGS: _bindgen_ty_166 = 3;
pub const TCA_MATCHALL_PCNT: _bindgen_ty_166 = 4;
pub const TCA_MATCHALL_PAD: _bindgen_ty_166 = 5;
pub const __TCA_MATCHALL_MAX: _bindgen_ty_166 = 6;
pub type _bindgen_ty_166 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tcf_ematch_tree_hdr {
    pub nmatches: __u16,
    pub progid: __u16,
}
pub const TCA_EMATCH_TREE_UNSPEC: _bindgen_ty_167 = 0;
pub const TCA_EMATCH_TREE_HDR: _bindgen_ty_167 = 1;
pub const TCA_EMATCH_TREE_LIST: _bindgen_ty_167 = 2;
pub const __TCA_EMATCH_TREE_MAX: _bindgen_ty_167 = 3;
pub type _bindgen_ty_167 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tcf_ematch_hdr {
    pub matchid: __u16,
    pub kind: __u16,
    pub flags: __u16,
    pub pad: __u16,
}
pub const TCF_LAYER_LINK: _bindgen_ty_168 = 0;
pub const TCF_LAYER_NETWORK: _bindgen_ty_168 = 1;
pub const TCF_LAYER_TRANSPORT: _bindgen_ty_168 = 2;
pub const __TCF_LAYER_MAX: _bindgen_ty_168 = 3;
pub type _bindgen_ty_168 = core::ffi::c_uint;
pub const TCF_EM_PROG_TC: _bindgen_ty_169 = 0;
pub type _bindgen_ty_169 = core::ffi::c_uint;
pub const TCF_EM_OPND_EQ: _bindgen_ty_170 = 0;
pub const TCF_EM_OPND_GT: _bindgen_ty_170 = 1;
pub const TCF_EM_OPND_LT: _bindgen_ty_170 = 2;
pub type _bindgen_ty_170 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_control {
    pub thoff: u16_,
    pub addr_type: u16_,
    pub flags: u32_,
}
pub const flow_dissector_ctrl_flags_FLOW_DIS_IS_FRAGMENT: flow_dissector_ctrl_flags = 1;
pub const flow_dissector_ctrl_flags_FLOW_DIS_FIRST_FRAG: flow_dissector_ctrl_flags = 2;
pub const flow_dissector_ctrl_flags_FLOW_DIS_F_TUNNEL_CSUM: flow_dissector_ctrl_flags = 4;
pub const flow_dissector_ctrl_flags_FLOW_DIS_F_TUNNEL_DONT_FRAGMENT: flow_dissector_ctrl_flags = 8;
pub const flow_dissector_ctrl_flags_FLOW_DIS_F_TUNNEL_OAM: flow_dissector_ctrl_flags = 16;
pub const flow_dissector_ctrl_flags_FLOW_DIS_F_TUNNEL_CRIT_OPT: flow_dissector_ctrl_flags = 32;
pub const flow_dissector_ctrl_flags_FLOW_DIS_ENCAPSULATION: flow_dissector_ctrl_flags = 64;
pub type flow_dissector_ctrl_flags = core::ffi::c_uint;
pub const flow_dissect_ret_FLOW_DISSECT_RET_OUT_GOOD: flow_dissect_ret = 0;
pub const flow_dissect_ret_FLOW_DISSECT_RET_OUT_BAD: flow_dissect_ret = 1;
pub const flow_dissect_ret_FLOW_DISSECT_RET_PROTO_AGAIN: flow_dissect_ret = 2;
pub const flow_dissect_ret_FLOW_DISSECT_RET_IPPROTO_AGAIN: flow_dissect_ret = 3;
pub const flow_dissect_ret_FLOW_DISSECT_RET_CONTINUE: flow_dissect_ret = 4;
pub type flow_dissect_ret = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_basic {
    pub n_proto: __be16,
    pub ip_proto: u8_,
    pub padding: u8_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_tags {
    pub flow_label: u32_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flow_dissector_key_vlan {
    pub __bindgen_anon_1: flow_dissector_key_vlan__bindgen_ty_1,
    pub vlan_tpid: __be16,
    pub vlan_eth_type: __be16,
    pub padding: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flow_dissector_key_vlan__bindgen_ty_1 {
    pub __bindgen_anon_1: flow_dissector_key_vlan__bindgen_ty_1__bindgen_ty_1,
    pub vlan_tci: __be16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_vlan__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl flow_dissector_key_vlan__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn vlan_id(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
    }
    #[inline]
    pub fn set_vlan_id(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn vlan_dei(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_vlan_dei(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vlan_priority(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_vlan_priority(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vlan_id: u16_,
        vlan_dei: u16_,
        vlan_priority: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let vlan_id: u16 = unsafe { ::core::mem::transmute(vlan_id) };
            vlan_id as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let vlan_dei: u16 = unsafe { ::core::mem::transmute(vlan_dei) };
            vlan_dei as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let vlan_priority: u16 = unsafe { ::core::mem::transmute(vlan_priority) };
            vlan_priority as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for flow_dissector_key_vlan__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for flow_dissector_key_vlan {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_mpls_lse {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl flow_dissector_mpls_lse {
    #[inline]
    pub fn mpls_ttl(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mpls_ttl(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn mpls_bos(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mpls_bos(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mpls_tc(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mpls_tc(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mpls_label(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_mpls_label(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mpls_ttl: u32_,
        mpls_bos: u32_,
        mpls_tc: u32_,
        mpls_label: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let mpls_ttl: u32 = unsafe { ::core::mem::transmute(mpls_ttl) };
            mpls_ttl as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let mpls_bos: u32 = unsafe { ::core::mem::transmute(mpls_bos) };
            mpls_bos as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let mpls_tc: u32 = unsafe { ::core::mem::transmute(mpls_tc) };
            mpls_tc as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let mpls_label: u32 = unsafe { ::core::mem::transmute(mpls_label) };
            mpls_label as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_mpls {
    pub ls: [flow_dissector_mpls_lse; 7usize],
    pub used_lses: u8_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flow_dissector_key_enc_opts {
    pub data: [u8_; 255usize],
    pub len: u8_,
    pub dst_opt_type: u32_,
}
impl Default for flow_dissector_key_enc_opts {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_keyid {
    pub keyid: __be32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_ipv4_addrs {
    pub src: __be32,
    pub dst: __be32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flow_dissector_key_ipv6_addrs {
    pub src: in6_addr,
    pub dst: in6_addr,
}
impl Default for flow_dissector_key_ipv6_addrs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_tipc {
    pub key: __be32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flow_dissector_key_addrs {
    pub __bindgen_anon_1: flow_dissector_key_addrs__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flow_dissector_key_addrs__bindgen_ty_1 {
    pub v4addrs: flow_dissector_key_ipv4_addrs,
    pub v6addrs: flow_dissector_key_ipv6_addrs,
    pub tipckey: flow_dissector_key_tipc,
}
impl Default for flow_dissector_key_addrs__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for flow_dissector_key_addrs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_arp {
    pub sip: __u32,
    pub tip: __u32,
    pub op: __u8,
    pub sha: [core::ffi::c_uchar; 6usize],
    pub tha: [core::ffi::c_uchar; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flow_dissector_key_ports {
    pub __bindgen_anon_1: flow_dissector_key_ports__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flow_dissector_key_ports__bindgen_ty_1 {
    pub ports: __be32,
    pub __bindgen_anon_1: flow_dissector_key_ports__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_ports__bindgen_ty_1__bindgen_ty_1 {
    pub src: __be16,
    pub dst: __be16,
}
impl Default for flow_dissector_key_ports__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for flow_dissector_key_ports {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flow_dissector_key_ports_range {
    pub __bindgen_anon_1: flow_dissector_key_ports_range__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flow_dissector_key_ports_range__bindgen_ty_1 {
    pub tp: flow_dissector_key_ports,
    pub __bindgen_anon_1: flow_dissector_key_ports_range__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flow_dissector_key_ports_range__bindgen_ty_1__bindgen_ty_1 {
    pub tp_min: flow_dissector_key_ports,
    pub tp_max: flow_dissector_key_ports,
}
impl Default for flow_dissector_key_ports_range__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for flow_dissector_key_ports_range__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for flow_dissector_key_ports_range {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_icmp {
    pub __bindgen_anon_1: flow_dissector_key_icmp__bindgen_ty_1,
    pub id: u16_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_icmp__bindgen_ty_1 {
    pub type_: u8_,
    pub code: u8_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_eth_addrs {
    pub dst: [core::ffi::c_uchar; 6usize],
    pub src: [core::ffi::c_uchar; 6usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_tcp {
    pub flags: __be16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_ip {
    pub tos: __u8,
    pub ttl: __u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_meta {
    pub ingress_ifindex: core::ffi::c_int,
    pub ingress_iftype: u16_,
    pub l2_miss: u8_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_ct {
    pub ct_state: u16_,
    pub ct_zone: u16_,
    pub ct_mark: u32_,
    pub ct_labels: [u32_; 4usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_hash {
    pub hash: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_num_of_vlans {
    pub num_of_vlans: u8_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_pppoe {
    pub session_id: __be16,
    pub ppp_proto: __be16,
    pub type_: __be16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_l2tpv3 {
    pub session_id: __be32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_ipsec {
    pub spi: __be32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_dissector_key_cfm {
    pub mdl_ver: u8_,
    pub opcode: u8_,
}
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_CONTROL: flow_dissector_key_id = 0;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_BASIC: flow_dissector_key_id = 1;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_IPV4_ADDRS: flow_dissector_key_id = 2;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_IPV6_ADDRS: flow_dissector_key_id = 3;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_PORTS: flow_dissector_key_id = 4;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_PORTS_RANGE: flow_dissector_key_id = 5;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ICMP: flow_dissector_key_id = 6;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ETH_ADDRS: flow_dissector_key_id = 7;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_TIPC: flow_dissector_key_id = 8;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ARP: flow_dissector_key_id = 9;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_VLAN: flow_dissector_key_id = 10;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_FLOW_LABEL: flow_dissector_key_id = 11;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_GRE_KEYID: flow_dissector_key_id = 12;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_MPLS_ENTROPY: flow_dissector_key_id = 13;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ENC_KEYID: flow_dissector_key_id = 14;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS: flow_dissector_key_id = 15;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS: flow_dissector_key_id = 16;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ENC_CONTROL: flow_dissector_key_id = 17;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ENC_PORTS: flow_dissector_key_id = 18;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_MPLS: flow_dissector_key_id = 19;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_TCP: flow_dissector_key_id = 20;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_IP: flow_dissector_key_id = 21;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_CVLAN: flow_dissector_key_id = 22;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ENC_IP: flow_dissector_key_id = 23;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_ENC_OPTS: flow_dissector_key_id = 24;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_META: flow_dissector_key_id = 25;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_CT: flow_dissector_key_id = 26;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_HASH: flow_dissector_key_id = 27;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_NUM_OF_VLANS: flow_dissector_key_id = 28;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_PPPOE: flow_dissector_key_id = 29;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_L2TPV3: flow_dissector_key_id = 30;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_CFM: flow_dissector_key_id = 31;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_IPSEC: flow_dissector_key_id = 32;
pub const flow_dissector_key_id_FLOW_DISSECTOR_KEY_MAX: flow_dissector_key_id = 33;
pub type flow_dissector_key_id = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flow_dissector_key {
    pub key_id: flow_dissector_key_id,
    pub offset: usize,
}
impl Default for flow_dissector_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flow_dissector {
    pub used_keys: core::ffi::c_ulonglong,
    pub offset: [core::ffi::c_ushort; 33usize],
}
impl Default for flow_dissector {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_keys_basic {
    pub control: flow_dissector_key_control,
    pub basic: flow_dissector_key_basic,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct flow_keys {
    pub control: flow_dissector_key_control,
    pub basic: flow_dissector_key_basic,
    pub tags: flow_dissector_key_tags,
    pub vlan: flow_dissector_key_vlan,
    pub cvlan: flow_dissector_key_vlan,
    pub keyid: flow_dissector_key_keyid,
    pub ports: flow_dissector_key_ports,
    pub icmp: flow_dissector_key_icmp,
    pub addrs: flow_dissector_key_addrs,
}
impl Default for flow_keys {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn flow_get_u32_src(flow: *const flow_keys) -> __be32;
}
extern "C" {
    pub fn flow_get_u32_dst(flow: *const flow_keys) -> __be32;
}
extern "C" {
    pub static mut flow_keys_dissector: flow_dissector;
}
extern "C" {
    pub static mut flow_keys_basic_dissector: flow_dissector;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_keys_digest {
    pub data: [u8_; 16usize],
}
extern "C" {
    pub fn make_flow_keys_digest(digest: *mut flow_keys_digest, flow: *const flow_keys);
}
extern "C" {
    pub fn flow_hash_from_keys(keys: *mut flow_keys) -> u32_;
}
extern "C" {
    pub fn flow_hash_from_keys_seed(keys: *mut flow_keys, keyval: *const siphash_key_t) -> u32_;
}
extern "C" {
    pub fn skb_flow_get_icmp_tci(
        skb: *const sk_buff,
        key_icmp: *mut flow_dissector_key_icmp,
        data: *const core::ffi::c_void,
        thoff: core::ffi::c_int,
        hlen: core::ffi::c_int,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_flow_dissector {
    pub flow_keys: *mut bpf_flow_keys,
    pub skb: *const sk_buff,
    pub data: *const core::ffi::c_void,
    pub data_end: *const core::ffi::c_void,
}
impl Default for bpf_flow_dissector {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sockaddr_pkt {
    pub spkt_family: core::ffi::c_ushort,
    pub spkt_device: [core::ffi::c_uchar; 14usize],
    pub spkt_protocol: __be16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sockaddr_ll {
    pub sll_family: core::ffi::c_ushort,
    pub sll_protocol: __be16,
    pub sll_ifindex: core::ffi::c_int,
    pub sll_hatype: core::ffi::c_ushort,
    pub sll_pkttype: core::ffi::c_uchar,
    pub sll_halen: core::ffi::c_uchar,
    pub sll_addr: [core::ffi::c_uchar; 8usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tpacket_stats {
    pub tp_packets: core::ffi::c_uint,
    pub tp_drops: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tpacket_stats_v3 {
    pub tp_packets: core::ffi::c_uint,
    pub tp_drops: core::ffi::c_uint,
    pub tp_freeze_q_cnt: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tpacket_rollover_stats {
    pub tp_all: __u64,
    pub tp_huge: __u64,
    pub tp_failed: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tpacket_stats_u {
    pub stats1: tpacket_stats,
    pub stats3: tpacket_stats_v3,
}
impl Default for tpacket_stats_u {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tpacket_auxdata {
    pub tp_status: __u32,
    pub tp_len: __u32,
    pub tp_snaplen: __u32,
    pub tp_mac: __u16,
    pub tp_net: __u16,
    pub tp_vlan_tci: __u16,
    pub tp_vlan_tpid: __u16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tpacket_hdr {
    pub tp_status: core::ffi::c_ulong,
    pub tp_len: core::ffi::c_uint,
    pub tp_snaplen: core::ffi::c_uint,
    pub tp_mac: core::ffi::c_ushort,
    pub tp_net: core::ffi::c_ushort,
    pub tp_sec: core::ffi::c_uint,
    pub tp_usec: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tpacket2_hdr {
    pub tp_status: __u32,
    pub tp_len: __u32,
    pub tp_snaplen: __u32,
    pub tp_mac: __u16,
    pub tp_net: __u16,
    pub tp_sec: __u32,
    pub tp_nsec: __u32,
    pub tp_vlan_tci: __u16,
    pub tp_vlan_tpid: __u16,
    pub tp_padding: [__u8; 4usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tpacket_hdr_variant1 {
    pub tp_rxhash: __u32,
    pub tp_vlan_tci: __u32,
    pub tp_vlan_tpid: __u16,
    pub tp_padding: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tpacket3_hdr {
    pub tp_next_offset: __u32,
    pub tp_sec: __u32,
    pub tp_nsec: __u32,
    pub tp_snaplen: __u32,
    pub tp_len: __u32,
    pub tp_status: __u32,
    pub tp_mac: __u16,
    pub tp_net: __u16,
    pub __bindgen_anon_1: tpacket3_hdr__bindgen_ty_1,
    pub tp_padding: [__u8; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tpacket3_hdr__bindgen_ty_1 {
    pub hv1: tpacket_hdr_variant1,
}
impl Default for tpacket3_hdr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tpacket3_hdr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tpacket_bd_ts {
    pub ts_sec: core::ffi::c_uint,
    pub __bindgen_anon_1: tpacket_bd_ts__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tpacket_bd_ts__bindgen_ty_1 {
    pub ts_usec: core::ffi::c_uint,
    pub ts_nsec: core::ffi::c_uint,
}
impl Default for tpacket_bd_ts__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tpacket_bd_ts {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tpacket_hdr_v1 {
    pub block_status: __u32,
    pub num_pkts: __u32,
    pub offset_to_first_pkt: __u32,
    pub blk_len: __u32,
    pub seq_num: __u64,
    pub ts_first_pkt: tpacket_bd_ts,
    pub ts_last_pkt: tpacket_bd_ts,
}
impl Default for tpacket_hdr_v1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tpacket_bd_header_u {
    pub bh1: tpacket_hdr_v1,
}
impl Default for tpacket_bd_header_u {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tpacket_block_desc {
    pub version: __u32,
    pub offset_to_priv: __u32,
    pub hdr: tpacket_bd_header_u,
}
impl Default for tpacket_block_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const tpacket_versions_TPACKET_V1: tpacket_versions = 0;
pub const tpacket_versions_TPACKET_V2: tpacket_versions = 1;
pub const tpacket_versions_TPACKET_V3: tpacket_versions = 2;
pub type tpacket_versions = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tpacket_req {
    pub tp_block_size: core::ffi::c_uint,
    pub tp_block_nr: core::ffi::c_uint,
    pub tp_frame_size: core::ffi::c_uint,
    pub tp_frame_nr: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tpacket_req3 {
    pub tp_block_size: core::ffi::c_uint,
    pub tp_block_nr: core::ffi::c_uint,
    pub tp_frame_size: core::ffi::c_uint,
    pub tp_frame_nr: core::ffi::c_uint,
    pub tp_retire_blk_tov: core::ffi::c_uint,
    pub tp_sizeof_priv: core::ffi::c_uint,
    pub tp_feature_req_word: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tpacket_req_u {
    pub req: tpacket_req,
    pub req3: tpacket_req3,
}
impl Default for tpacket_req_u {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct packet_mreq {
    pub mr_ifindex: core::ffi::c_int,
    pub mr_type: core::ffi::c_ushort,
    pub mr_alen: core::ffi::c_ushort,
    pub mr_address: [core::ffi::c_uchar; 8usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fanout_args {
    pub id: __u16,
    pub type_flags: __u16,
    pub max_num_members: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flowi_tunnel {
    pub tun_id: __be64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flowi_common {
    pub flowic_oif: core::ffi::c_int,
    pub flowic_iif: core::ffi::c_int,
    pub flowic_l3mdev: core::ffi::c_int,
    pub flowic_mark: __u32,
    pub flowic_tos: __u8,
    pub flowic_scope: __u8,
    pub flowic_proto: __u8,
    pub flowic_flags: __u8,
    pub flowic_secid: __u32,
    pub flowic_uid: kuid_t,
    pub flowic_multipath_hash: __u32,
    pub flowic_tun_key: flowi_tunnel,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flowi_uli {
    pub ports: flowi_uli__bindgen_ty_1,
    pub icmpt: flowi_uli__bindgen_ty_2,
    pub gre_key: __be32,
    pub mht: flowi_uli__bindgen_ty_3,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flowi_uli__bindgen_ty_1 {
    pub dport: __be16,
    pub sport: __be16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flowi_uli__bindgen_ty_2 {
    pub type_: __u8,
    pub code: __u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flowi_uli__bindgen_ty_3 {
    pub type_: __u8,
}
impl Default for flowi_uli {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flowi4 {
    pub __fl_common: flowi_common,
    pub saddr: __be32,
    pub daddr: __be32,
    pub uli: flowi_uli,
}
impl Default for flowi4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flowi6 {
    pub __fl_common: flowi_common,
    pub daddr: in6_addr,
    pub saddr: in6_addr,
    pub flowlabel: __be32,
    pub uli: flowi_uli,
    pub mp_hash: __u32,
}
impl Default for flowi6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flowi {
    pub u: flowi__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flowi__bindgen_ty_1 {
    pub __fl_common: flowi_common,
    pub ip4: flowi4,
    pub ip6: flowi6,
}
impl Default for flowi__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for flowi {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __get_hash_from_flowi6(fl6: *const flowi6, keys: *mut flow_keys) -> __u32;
}
pub const ip_conntrack_info_IP_CT_ESTABLISHED: ip_conntrack_info = 0;
pub const ip_conntrack_info_IP_CT_RELATED: ip_conntrack_info = 1;
pub const ip_conntrack_info_IP_CT_NEW: ip_conntrack_info = 2;
pub const ip_conntrack_info_IP_CT_IS_REPLY: ip_conntrack_info = 3;
pub const ip_conntrack_info_IP_CT_ESTABLISHED_REPLY: ip_conntrack_info = 3;
pub const ip_conntrack_info_IP_CT_RELATED_REPLY: ip_conntrack_info = 4;
pub const ip_conntrack_info_IP_CT_NUMBER: ip_conntrack_info = 5;
pub const ip_conntrack_info_IP_CT_UNTRACKED: ip_conntrack_info = 7;
pub type ip_conntrack_info = core::ffi::c_uint;
pub const ip_conntrack_status_IPS_EXPECTED_BIT: ip_conntrack_status = 0;
pub const ip_conntrack_status_IPS_EXPECTED: ip_conntrack_status = 1;
pub const ip_conntrack_status_IPS_SEEN_REPLY_BIT: ip_conntrack_status = 1;
pub const ip_conntrack_status_IPS_SEEN_REPLY: ip_conntrack_status = 2;
pub const ip_conntrack_status_IPS_ASSURED_BIT: ip_conntrack_status = 2;
pub const ip_conntrack_status_IPS_ASSURED: ip_conntrack_status = 4;
pub const ip_conntrack_status_IPS_CONFIRMED_BIT: ip_conntrack_status = 3;
pub const ip_conntrack_status_IPS_CONFIRMED: ip_conntrack_status = 8;
pub const ip_conntrack_status_IPS_SRC_NAT_BIT: ip_conntrack_status = 4;
pub const ip_conntrack_status_IPS_SRC_NAT: ip_conntrack_status = 16;
pub const ip_conntrack_status_IPS_DST_NAT_BIT: ip_conntrack_status = 5;
pub const ip_conntrack_status_IPS_DST_NAT: ip_conntrack_status = 32;
pub const ip_conntrack_status_IPS_NAT_MASK: ip_conntrack_status = 48;
pub const ip_conntrack_status_IPS_SEQ_ADJUST_BIT: ip_conntrack_status = 6;
pub const ip_conntrack_status_IPS_SEQ_ADJUST: ip_conntrack_status = 64;
pub const ip_conntrack_status_IPS_SRC_NAT_DONE_BIT: ip_conntrack_status = 7;
pub const ip_conntrack_status_IPS_SRC_NAT_DONE: ip_conntrack_status = 128;
pub const ip_conntrack_status_IPS_DST_NAT_DONE_BIT: ip_conntrack_status = 8;
pub const ip_conntrack_status_IPS_DST_NAT_DONE: ip_conntrack_status = 256;
pub const ip_conntrack_status_IPS_NAT_DONE_MASK: ip_conntrack_status = 384;
pub const ip_conntrack_status_IPS_DYING_BIT: ip_conntrack_status = 9;
pub const ip_conntrack_status_IPS_DYING: ip_conntrack_status = 512;
pub const ip_conntrack_status_IPS_FIXED_TIMEOUT_BIT: ip_conntrack_status = 10;
pub const ip_conntrack_status_IPS_FIXED_TIMEOUT: ip_conntrack_status = 1024;
pub const ip_conntrack_status_IPS_TEMPLATE_BIT: ip_conntrack_status = 11;
pub const ip_conntrack_status_IPS_TEMPLATE: ip_conntrack_status = 2048;
pub const ip_conntrack_status_IPS_UNTRACKED_BIT: ip_conntrack_status = 12;
pub const ip_conntrack_status_IPS_UNTRACKED: ip_conntrack_status = 4096;
pub const ip_conntrack_status_IPS_NAT_CLASH_BIT: ip_conntrack_status = 12;
pub const ip_conntrack_status_IPS_NAT_CLASH: ip_conntrack_status = 4096;
pub const ip_conntrack_status_IPS_HELPER_BIT: ip_conntrack_status = 13;
pub const ip_conntrack_status_IPS_HELPER: ip_conntrack_status = 8192;
pub const ip_conntrack_status_IPS_OFFLOAD_BIT: ip_conntrack_status = 14;
pub const ip_conntrack_status_IPS_OFFLOAD: ip_conntrack_status = 16384;
pub const ip_conntrack_status_IPS_HW_OFFLOAD_BIT: ip_conntrack_status = 15;
pub const ip_conntrack_status_IPS_HW_OFFLOAD: ip_conntrack_status = 32768;
pub const ip_conntrack_status_IPS_UNCHANGEABLE_MASK: ip_conntrack_status = 56313;
pub const ip_conntrack_status___IPS_MAX_BIT: ip_conntrack_status = 16;
pub type ip_conntrack_status = core::ffi::c_uint;
pub const ip_conntrack_events_IPCT_NEW: ip_conntrack_events = 0;
pub const ip_conntrack_events_IPCT_RELATED: ip_conntrack_events = 1;
pub const ip_conntrack_events_IPCT_DESTROY: ip_conntrack_events = 2;
pub const ip_conntrack_events_IPCT_REPLY: ip_conntrack_events = 3;
pub const ip_conntrack_events_IPCT_ASSURED: ip_conntrack_events = 4;
pub const ip_conntrack_events_IPCT_PROTOINFO: ip_conntrack_events = 5;
pub const ip_conntrack_events_IPCT_HELPER: ip_conntrack_events = 6;
pub const ip_conntrack_events_IPCT_MARK: ip_conntrack_events = 7;
pub const ip_conntrack_events_IPCT_SEQADJ: ip_conntrack_events = 8;
pub const ip_conntrack_events_IPCT_NATSEQADJ: ip_conntrack_events = 8;
pub const ip_conntrack_events_IPCT_SECMARK: ip_conntrack_events = 9;
pub const ip_conntrack_events_IPCT_LABEL: ip_conntrack_events = 10;
pub const ip_conntrack_events_IPCT_SYNPROXY: ip_conntrack_events = 11;
pub const ip_conntrack_events___IPCT_MAX: ip_conntrack_events = 12;
pub type ip_conntrack_events = core::ffi::c_uint;
pub const ip_conntrack_expect_events_IPEXP_NEW: ip_conntrack_expect_events = 0;
pub const ip_conntrack_expect_events_IPEXP_DESTROY: ip_conntrack_expect_events = 1;
pub type ip_conntrack_expect_events = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ip_conntrack_stat {
    pub found: core::ffi::c_uint,
    pub invalid: core::ffi::c_uint,
    pub insert: core::ffi::c_uint,
    pub insert_failed: core::ffi::c_uint,
    pub clash_resolve: core::ffi::c_uint,
    pub drop: core::ffi::c_uint,
    pub early_drop: core::ffi::c_uint,
    pub error: core::ffi::c_uint,
    pub expect_new: core::ffi::c_uint,
    pub expect_create: core::ffi::c_uint,
    pub expect_delete: core::ffi::c_uint,
    pub search_restart: core::ffi::c_uint,
    pub chaintoolong: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nf_conntrack {
    pub use_: refcount_t,
}
extern "C" {
    pub fn nf_conntrack_destroy(nfct: *mut nf_conntrack);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct net_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn netdev_printk(
        level: *const core::ffi::c_char,
        dev: *const net_device,
        format: *const core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn netdev_emerg(dev: *const net_device, format: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn netdev_alert(dev: *const net_device, format: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn netdev_crit(dev: *const net_device, format: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn netdev_err(dev: *const net_device, format: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn netdev_warn(dev: *const net_device, format: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn netdev_notice(dev: *const net_device, format: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn netdev_info(dev: *const net_device, format: *const core::ffi::c_char, ...);
}
pub const skb_drop_reason_SKB_NOT_DROPPED_YET: skb_drop_reason = 0;
pub const skb_drop_reason_SKB_CONSUMED: skb_drop_reason = 1;
pub const skb_drop_reason_SKB_DROP_REASON_NOT_SPECIFIED: skb_drop_reason = 2;
pub const skb_drop_reason_SKB_DROP_REASON_NO_SOCKET: skb_drop_reason = 3;
pub const skb_drop_reason_SKB_DROP_REASON_PKT_TOO_SMALL: skb_drop_reason = 4;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_CSUM: skb_drop_reason = 5;
pub const skb_drop_reason_SKB_DROP_REASON_SOCKET_FILTER: skb_drop_reason = 6;
pub const skb_drop_reason_SKB_DROP_REASON_UDP_CSUM: skb_drop_reason = 7;
pub const skb_drop_reason_SKB_DROP_REASON_NETFILTER_DROP: skb_drop_reason = 8;
pub const skb_drop_reason_SKB_DROP_REASON_OTHERHOST: skb_drop_reason = 9;
pub const skb_drop_reason_SKB_DROP_REASON_IP_CSUM: skb_drop_reason = 10;
pub const skb_drop_reason_SKB_DROP_REASON_IP_INHDR: skb_drop_reason = 11;
pub const skb_drop_reason_SKB_DROP_REASON_IP_RPFILTER: skb_drop_reason = 12;
pub const skb_drop_reason_SKB_DROP_REASON_UNICAST_IN_L2_MULTICAST: skb_drop_reason = 13;
pub const skb_drop_reason_SKB_DROP_REASON_XFRM_POLICY: skb_drop_reason = 14;
pub const skb_drop_reason_SKB_DROP_REASON_IP_NOPROTO: skb_drop_reason = 15;
pub const skb_drop_reason_SKB_DROP_REASON_SOCKET_RCVBUFF: skb_drop_reason = 16;
pub const skb_drop_reason_SKB_DROP_REASON_PROTO_MEM: skb_drop_reason = 17;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_AUTH_HDR: skb_drop_reason = 18;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_MD5NOTFOUND: skb_drop_reason = 19;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_MD5UNEXPECTED: skb_drop_reason = 20;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_MD5FAILURE: skb_drop_reason = 21;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_AONOTFOUND: skb_drop_reason = 22;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_AOUNEXPECTED: skb_drop_reason = 23;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_AOKEYNOTFOUND: skb_drop_reason = 24;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_AOFAILURE: skb_drop_reason = 25;
pub const skb_drop_reason_SKB_DROP_REASON_SOCKET_BACKLOG: skb_drop_reason = 26;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_FLAGS: skb_drop_reason = 27;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_ABORT_ON_DATA: skb_drop_reason = 28;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_ZEROWINDOW: skb_drop_reason = 29;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_OLD_DATA: skb_drop_reason = 30;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_OVERWINDOW: skb_drop_reason = 31;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_OFOMERGE: skb_drop_reason = 32;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_RFC7323_PAWS: skb_drop_reason = 33;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_OLD_SEQUENCE: skb_drop_reason = 34;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_INVALID_SEQUENCE: skb_drop_reason = 35;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_INVALID_ACK_SEQUENCE: skb_drop_reason = 36;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_RESET: skb_drop_reason = 37;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_INVALID_SYN: skb_drop_reason = 38;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_CLOSE: skb_drop_reason = 39;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_FASTOPEN: skb_drop_reason = 40;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_OLD_ACK: skb_drop_reason = 41;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_TOO_OLD_ACK: skb_drop_reason = 42;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_ACK_UNSENT_DATA: skb_drop_reason = 43;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_OFO_QUEUE_PRUNE: skb_drop_reason = 44;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_OFO_DROP: skb_drop_reason = 45;
pub const skb_drop_reason_SKB_DROP_REASON_IP_OUTNOROUTES: skb_drop_reason = 46;
pub const skb_drop_reason_SKB_DROP_REASON_BPF_CGROUP_EGRESS: skb_drop_reason = 47;
pub const skb_drop_reason_SKB_DROP_REASON_IPV6DISABLED: skb_drop_reason = 48;
pub const skb_drop_reason_SKB_DROP_REASON_NEIGH_CREATEFAIL: skb_drop_reason = 49;
pub const skb_drop_reason_SKB_DROP_REASON_NEIGH_FAILED: skb_drop_reason = 50;
pub const skb_drop_reason_SKB_DROP_REASON_NEIGH_QUEUEFULL: skb_drop_reason = 51;
pub const skb_drop_reason_SKB_DROP_REASON_NEIGH_DEAD: skb_drop_reason = 52;
pub const skb_drop_reason_SKB_DROP_REASON_TC_EGRESS: skb_drop_reason = 53;
pub const skb_drop_reason_SKB_DROP_REASON_SECURITY_HOOK: skb_drop_reason = 54;
pub const skb_drop_reason_SKB_DROP_REASON_QDISC_DROP: skb_drop_reason = 55;
pub const skb_drop_reason_SKB_DROP_REASON_CPU_BACKLOG: skb_drop_reason = 56;
pub const skb_drop_reason_SKB_DROP_REASON_XDP: skb_drop_reason = 57;
pub const skb_drop_reason_SKB_DROP_REASON_TC_INGRESS: skb_drop_reason = 58;
pub const skb_drop_reason_SKB_DROP_REASON_UNHANDLED_PROTO: skb_drop_reason = 59;
pub const skb_drop_reason_SKB_DROP_REASON_SKB_CSUM: skb_drop_reason = 60;
pub const skb_drop_reason_SKB_DROP_REASON_SKB_GSO_SEG: skb_drop_reason = 61;
pub const skb_drop_reason_SKB_DROP_REASON_SKB_UCOPY_FAULT: skb_drop_reason = 62;
pub const skb_drop_reason_SKB_DROP_REASON_DEV_HDR: skb_drop_reason = 63;
pub const skb_drop_reason_SKB_DROP_REASON_DEV_READY: skb_drop_reason = 64;
pub const skb_drop_reason_SKB_DROP_REASON_FULL_RING: skb_drop_reason = 65;
pub const skb_drop_reason_SKB_DROP_REASON_NOMEM: skb_drop_reason = 66;
pub const skb_drop_reason_SKB_DROP_REASON_HDR_TRUNC: skb_drop_reason = 67;
pub const skb_drop_reason_SKB_DROP_REASON_TAP_FILTER: skb_drop_reason = 68;
pub const skb_drop_reason_SKB_DROP_REASON_TAP_TXFILTER: skb_drop_reason = 69;
pub const skb_drop_reason_SKB_DROP_REASON_ICMP_CSUM: skb_drop_reason = 70;
pub const skb_drop_reason_SKB_DROP_REASON_INVALID_PROTO: skb_drop_reason = 71;
pub const skb_drop_reason_SKB_DROP_REASON_IP_INADDRERRORS: skb_drop_reason = 72;
pub const skb_drop_reason_SKB_DROP_REASON_IP_INNOROUTES: skb_drop_reason = 73;
pub const skb_drop_reason_SKB_DROP_REASON_PKT_TOO_BIG: skb_drop_reason = 74;
pub const skb_drop_reason_SKB_DROP_REASON_DUP_FRAG: skb_drop_reason = 75;
pub const skb_drop_reason_SKB_DROP_REASON_FRAG_REASM_TIMEOUT: skb_drop_reason = 76;
pub const skb_drop_reason_SKB_DROP_REASON_FRAG_TOO_FAR: skb_drop_reason = 77;
pub const skb_drop_reason_SKB_DROP_REASON_TCP_MINTTL: skb_drop_reason = 78;
pub const skb_drop_reason_SKB_DROP_REASON_IPV6_BAD_EXTHDR: skb_drop_reason = 79;
pub const skb_drop_reason_SKB_DROP_REASON_IPV6_NDISC_FRAG: skb_drop_reason = 80;
pub const skb_drop_reason_SKB_DROP_REASON_IPV6_NDISC_HOP_LIMIT: skb_drop_reason = 81;
pub const skb_drop_reason_SKB_DROP_REASON_IPV6_NDISC_BAD_CODE: skb_drop_reason = 82;
pub const skb_drop_reason_SKB_DROP_REASON_IPV6_NDISC_BAD_OPTIONS: skb_drop_reason = 83;
pub const skb_drop_reason_SKB_DROP_REASON_IPV6_NDISC_NS_OTHERHOST: skb_drop_reason = 84;
pub const skb_drop_reason_SKB_DROP_REASON_QUEUE_PURGE: skb_drop_reason = 85;
pub const skb_drop_reason_SKB_DROP_REASON_TC_COOKIE_ERROR: skb_drop_reason = 86;
pub const skb_drop_reason_SKB_DROP_REASON_PACKET_SOCK_ERROR: skb_drop_reason = 87;
pub const skb_drop_reason_SKB_DROP_REASON_TC_CHAIN_NOTFOUND: skb_drop_reason = 88;
pub const skb_drop_reason_SKB_DROP_REASON_TC_RECLASSIFY_LOOP: skb_drop_reason = 89;
pub const skb_drop_reason_SKB_DROP_REASON_MAX: skb_drop_reason = 90;
pub const skb_drop_reason_SKB_DROP_REASON_SUBSYS_MASK: skb_drop_reason = 4294901760;
pub type skb_drop_reason = core::ffi::c_uint;
pub type netmem_ref = core::ffi::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ahash_request {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct napi_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ts_config {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sk_buff_head {
    pub __bindgen_anon_1: sk_buff_head__bindgen_ty_1,
    pub qlen: __u32,
    pub lock: spinlock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff_head__bindgen_ty_1 {
    pub __bindgen_anon_1: sk_buff_head__bindgen_ty_1__bindgen_ty_1,
    pub list: sk_buff_head__bindgen_ty_1_sk_buff_list,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sk_buff_head__bindgen_ty_1__bindgen_ty_1 {
    pub next: *mut sk_buff,
    pub prev: *mut sk_buff,
}
impl Default for sk_buff_head__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sk_buff_head__bindgen_ty_1_sk_buff_list {
    pub next: *mut sk_buff,
    pub prev: *mut sk_buff,
}
impl Default for sk_buff_head__bindgen_ty_1_sk_buff_list {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sk_buff_head__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sk_buff_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct skb_frag {
    pub netmem: netmem_ref,
    pub len: core::ffi::c_uint,
    pub offset: core::ffi::c_uint,
}
pub type skb_frag_t = skb_frag;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct skb_shared_hwtstamps {
    pub __bindgen_anon_1: skb_shared_hwtstamps__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union skb_shared_hwtstamps__bindgen_ty_1 {
    pub hwtstamp: ktime_t,
    pub netdev_data: *mut core::ffi::c_void,
}
impl Default for skb_shared_hwtstamps__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for skb_shared_hwtstamps {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const SKBTX_HW_TSTAMP: _bindgen_ty_171 = 1;
pub const SKBTX_SW_TSTAMP: _bindgen_ty_171 = 2;
pub const SKBTX_IN_PROGRESS: _bindgen_ty_171 = 4;
pub const SKBTX_HW_TSTAMP_USE_CYCLES: _bindgen_ty_171 = 8;
pub const SKBTX_WIFI_STATUS: _bindgen_ty_171 = 16;
pub const SKBTX_HW_TSTAMP_NETDEV: _bindgen_ty_171 = 32;
pub const SKBTX_SCHED_TSTAMP: _bindgen_ty_171 = 64;
pub type _bindgen_ty_171 = core::ffi::c_uint;
pub const SKBFL_ZEROCOPY_ENABLE: _bindgen_ty_172 = 1;
pub const SKBFL_SHARED_FRAG: _bindgen_ty_172 = 2;
pub const SKBFL_PURE_ZEROCOPY: _bindgen_ty_172 = 4;
pub const SKBFL_DONT_ORPHAN: _bindgen_ty_172 = 8;
pub const SKBFL_MANAGED_FRAG_REFS: _bindgen_ty_172 = 16;
pub type _bindgen_ty_172 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ubuf_info_ops {
    pub complete: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut sk_buff, arg2: *mut ubuf_info, zerocopy_success: bool_),
    >,
    pub link_skb: ::core::option::Option<
        unsafe extern "C" fn(skb: *mut sk_buff, uarg: *mut ubuf_info) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ubuf_info {
    pub ops: *const ubuf_info_ops,
    pub refcnt: refcount_t,
    pub flags: u8_,
}
impl Default for ubuf_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ubuf_info_msgzc {
    pub ubuf: ubuf_info,
    pub __bindgen_anon_1: ubuf_info_msgzc__bindgen_ty_1,
    pub mmp: ubuf_info_msgzc_mmpin,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ubuf_info_msgzc__bindgen_ty_1 {
    pub __bindgen_anon_1: ubuf_info_msgzc__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: ubuf_info_msgzc__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ubuf_info_msgzc__bindgen_ty_1__bindgen_ty_1 {
    pub desc: core::ffi::c_ulong,
    pub ctx: *mut core::ffi::c_void,
}
impl Default for ubuf_info_msgzc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ubuf_info_msgzc__bindgen_ty_1__bindgen_ty_2 {
    pub id: u32_,
    pub len: u16_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub bytelen: u32_,
}
impl ubuf_info_msgzc__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn zerocopy(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_zerocopy(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(zerocopy: u16_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let zerocopy: u16 = unsafe { ::core::mem::transmute(zerocopy) };
            zerocopy as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for ubuf_info_msgzc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ubuf_info_msgzc_mmpin {
    pub user: *mut user_struct,
    pub num_pg: core::ffi::c_uint,
}
impl Default for ubuf_info_msgzc_mmpin {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ubuf_info_msgzc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mm_account_pinned_pages(
        mmp: *mut ubuf_info_msgzc_mmpin,
        size: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mm_unaccount_pinned_pages(mmp: *mut ubuf_info_msgzc_mmpin);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xsk_tx_metadata_compl {
    pub tx_timestamp: *mut __u64,
}
impl Default for xsk_tx_metadata_compl {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct skb_shared_info {
    pub flags: __u8,
    pub meta_len: __u8,
    pub nr_frags: __u8,
    pub tx_flags: __u8,
    pub gso_size: core::ffi::c_ushort,
    pub gso_segs: core::ffi::c_ushort,
    pub frag_list: *mut sk_buff,
    pub __bindgen_anon_1: skb_shared_info__bindgen_ty_1,
    pub gso_type: core::ffi::c_uint,
    pub tskey: u32_,
    pub dataref: atomic_t,
    pub xdp_frags_size: core::ffi::c_uint,
    pub destructor_arg: *mut core::ffi::c_void,
    pub frags: [skb_frag_t; 17usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union skb_shared_info__bindgen_ty_1 {
    pub hwtstamps: skb_shared_hwtstamps,
    pub xsk_meta: xsk_tx_metadata_compl,
}
impl Default for skb_shared_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for skb_shared_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const SKB_FCLONE_UNAVAILABLE: _bindgen_ty_173 = 0;
pub const SKB_FCLONE_ORIG: _bindgen_ty_173 = 1;
pub const SKB_FCLONE_CLONE: _bindgen_ty_173 = 2;
pub type _bindgen_ty_173 = core::ffi::c_uint;
pub const SKB_GSO_TCPV4: _bindgen_ty_174 = 1;
pub const SKB_GSO_DODGY: _bindgen_ty_174 = 2;
pub const SKB_GSO_TCP_ECN: _bindgen_ty_174 = 4;
pub const SKB_GSO_TCP_FIXEDID: _bindgen_ty_174 = 8;
pub const SKB_GSO_TCPV6: _bindgen_ty_174 = 16;
pub const SKB_GSO_FCOE: _bindgen_ty_174 = 32;
pub const SKB_GSO_GRE: _bindgen_ty_174 = 64;
pub const SKB_GSO_GRE_CSUM: _bindgen_ty_174 = 128;
pub const SKB_GSO_IPXIP4: _bindgen_ty_174 = 256;
pub const SKB_GSO_IPXIP6: _bindgen_ty_174 = 512;
pub const SKB_GSO_UDP_TUNNEL: _bindgen_ty_174 = 1024;
pub const SKB_GSO_UDP_TUNNEL_CSUM: _bindgen_ty_174 = 2048;
pub const SKB_GSO_PARTIAL: _bindgen_ty_174 = 4096;
pub const SKB_GSO_TUNNEL_REMCSUM: _bindgen_ty_174 = 8192;
pub const SKB_GSO_SCTP: _bindgen_ty_174 = 16384;
pub const SKB_GSO_ESP: _bindgen_ty_174 = 32768;
pub const SKB_GSO_UDP: _bindgen_ty_174 = 65536;
pub const SKB_GSO_UDP_L4: _bindgen_ty_174 = 131072;
pub const SKB_GSO_FRAGLIST: _bindgen_ty_174 = 262144;
pub type _bindgen_ty_174 = core::ffi::c_uint;
pub type sk_buff_data_t = core::ffi::c_uint;
pub const skb_tstamp_type_SKB_CLOCK_REALTIME: skb_tstamp_type = 0;
pub const skb_tstamp_type_SKB_CLOCK_MONOTONIC: skb_tstamp_type = 1;
pub const skb_tstamp_type_SKB_CLOCK_TAI: skb_tstamp_type = 2;
pub const skb_tstamp_type___SKB_CLOCK_MAX: skb_tstamp_type = 2;
pub type skb_tstamp_type = core::ffi::c_uint;
#[repr(C)]
pub struct sk_buff {
    pub __bindgen_anon_1: sk_buff__bindgen_ty_1,
    pub sk: *mut sock,
    pub __bindgen_anon_2: sk_buff__bindgen_ty_2,
    pub cb: [core::ffi::c_char; 48usize],
    pub __bindgen_anon_3: sk_buff__bindgen_ty_3,
    pub _nfct: core::ffi::c_ulong,
    pub len: core::ffi::c_uint,
    pub data_len: core::ffi::c_uint,
    pub mac_len: __u16,
    pub hdr_len: __u16,
    pub queue_mapping: __u16,
    pub __cloned_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub active_extensions: __u8,
    pub __bindgen_anon_4: sk_buff__bindgen_ty_4,
    pub tail: sk_buff_data_t,
    pub end: sk_buff_data_t,
    pub head: *mut core::ffi::c_uchar,
    pub data: *mut core::ffi::c_uchar,
    pub truesize: core::ffi::c_uint,
    pub users: refcount_t,
    pub extensions: *mut skb_ext,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_1 {
    pub __bindgen_anon_1: sk_buff__bindgen_ty_1__bindgen_ty_1,
    pub rbnode: rb_node,
    pub list: list_head,
    pub ll_node: llist_node,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sk_buff__bindgen_ty_1__bindgen_ty_1 {
    pub next: *mut sk_buff,
    pub prev: *mut sk_buff,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub dev: *mut net_device,
    pub dev_scratch: core::ffi::c_ulong,
}
impl Default for sk_buff__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sk_buff__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sk_buff__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_2 {
    pub tstamp: ktime_t,
    pub skb_mstamp_ns: u64_,
}
impl Default for sk_buff__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_3 {
    pub __bindgen_anon_1: sk_buff__bindgen_ty_3__bindgen_ty_1,
    pub tcp_tsorted_anchor: list_head,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_3__bindgen_ty_1 {
    pub _skb_refdst: core::ffi::c_ulong,
    pub destructor: ::core::option::Option<unsafe extern "C" fn(skb: *mut sk_buff)>,
}
impl Default for sk_buff__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sk_buff__bindgen_ty_4 {
    pub __bindgen_anon_1: __BindgenUnionField<sk_buff__bindgen_ty_4__bindgen_ty_1>,
    pub headers: __BindgenUnionField<sk_buff__bindgen_ty_4__bindgen_ty_2>,
    pub bindgen_union_field: [u32; 14usize],
}
#[repr(C)]
pub struct sk_buff__bindgen_ty_4__bindgen_ty_1 {
    pub __pkt_type_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __mono_tc_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub tc_index: __u16,
    pub alloc_cpu: u16_,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
    pub priority: __u32,
    pub skb_iif: core::ffi::c_int,
    pub hash: __u32,
    pub __bindgen_anon_2: sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_3,
    pub secmark: __u32,
    pub __bindgen_anon_4: sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_5,
    pub inner_transport_header: __u16,
    pub inner_network_header: __u16,
    pub inner_mac_header: __u16,
    pub protocol: __be16,
    pub transport_header: __u16,
    pub network_header: __u16,
    pub mac_header: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
    pub csum: __wsum,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub csum_start: __u16,
    pub csum_offset: __u16,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2 {
    pub vlan_all: u32_,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub vlan_proto: __be16,
    pub vlan_tci: __u16,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_3 {
    pub napi_id: core::ffi::c_uint,
    pub sender_cpu: core::ffi::c_uint,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_4 {
    pub mark: __u32,
    pub reserved_tailroom: __u32,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_5 {
    pub inner_protocol: __be16,
    pub inner_ipproto: __u8,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_1__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_buff__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn pkt_type(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pkt_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_df(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ignore_df(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dst_pending_confirm(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dst_pending_confirm(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ip_summed(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ip_summed(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ooo_okay(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ooo_okay(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pkt_type: __u8,
        ignore_df: __u8,
        dst_pending_confirm: __u8,
        ip_summed: __u8,
        ooo_okay: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let pkt_type: u8 = unsafe { ::core::mem::transmute(pkt_type) };
            pkt_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ignore_df: u8 = unsafe { ::core::mem::transmute(ignore_df) };
            ignore_df as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dst_pending_confirm: u8 = unsafe { ::core::mem::transmute(dst_pending_confirm) };
            dst_pending_confirm as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let ip_summed: u8 = unsafe { ::core::mem::transmute(ip_summed) };
            ip_summed as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ooo_okay: u8 = unsafe { ::core::mem::transmute(ooo_okay) };
            ooo_okay as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn tstamp_type(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_tstamp_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tc_at_ingress(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tc_at_ingress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tc_skip_classify(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tc_skip_classify(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn remcsum_offload(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_remcsum_offload(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_complete_sw(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_complete_sw(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_level(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_csum_level(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn inner_protocol_type(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_inner_protocol_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn l4_hash(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_l4_hash(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sw_hash(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sw_hash(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_acked_valid(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wifi_acked_valid(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_acked(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wifi_acked(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_fcs(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_fcs(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn encapsulation(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_encapsulation(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn encap_hdr_csum(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_encap_hdr_csum(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_valid(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_valid(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ndisc_nodetype(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(17usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ndisc_nodetype(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn redirected(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_redirected(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nf_skip_egress(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(20usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nf_skip_egress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slow_gro(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(21usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_slow_gro(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        tstamp_type: __u8,
        tc_at_ingress: __u8,
        tc_skip_classify: __u8,
        remcsum_offload: __u8,
        csum_complete_sw: __u8,
        csum_level: __u8,
        inner_protocol_type: __u8,
        l4_hash: __u8,
        sw_hash: __u8,
        wifi_acked_valid: __u8,
        wifi_acked: __u8,
        no_fcs: __u8,
        encapsulation: __u8,
        encap_hdr_csum: __u8,
        csum_valid: __u8,
        ndisc_nodetype: __u8,
        redirected: __u8,
        nf_skip_egress: __u8,
        slow_gro: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let tstamp_type: u8 = unsafe { ::core::mem::transmute(tstamp_type) };
            tstamp_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tc_at_ingress: u8 = unsafe { ::core::mem::transmute(tc_at_ingress) };
            tc_at_ingress as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tc_skip_classify: u8 = unsafe { ::core::mem::transmute(tc_skip_classify) };
            tc_skip_classify as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let remcsum_offload: u8 = unsafe { ::core::mem::transmute(remcsum_offload) };
            remcsum_offload as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let csum_complete_sw: u8 = unsafe { ::core::mem::transmute(csum_complete_sw) };
            csum_complete_sw as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let csum_level: u8 = unsafe { ::core::mem::transmute(csum_level) };
            csum_level as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let inner_protocol_type: u8 = unsafe { ::core::mem::transmute(inner_protocol_type) };
            inner_protocol_type as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let l4_hash: u8 = unsafe { ::core::mem::transmute(l4_hash) };
            l4_hash as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let sw_hash: u8 = unsafe { ::core::mem::transmute(sw_hash) };
            sw_hash as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wifi_acked_valid: u8 = unsafe { ::core::mem::transmute(wifi_acked_valid) };
            wifi_acked_valid as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let wifi_acked: u8 = unsafe { ::core::mem::transmute(wifi_acked) };
            wifi_acked as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let no_fcs: u8 = unsafe { ::core::mem::transmute(no_fcs) };
            no_fcs as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let encapsulation: u8 = unsafe { ::core::mem::transmute(encapsulation) };
            encapsulation as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let encap_hdr_csum: u8 = unsafe { ::core::mem::transmute(encap_hdr_csum) };
            encap_hdr_csum as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let csum_valid: u8 = unsafe { ::core::mem::transmute(csum_valid) };
            csum_valid as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let ndisc_nodetype: u8 = unsafe { ::core::mem::transmute(ndisc_nodetype) };
            ndisc_nodetype as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let redirected: u8 = unsafe { ::core::mem::transmute(redirected) };
            redirected as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let nf_skip_egress: u8 = unsafe { ::core::mem::transmute(nf_skip_egress) };
            nf_skip_egress as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let slow_gro: u8 = unsafe { ::core::mem::transmute(slow_gro) };
            slow_gro as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct sk_buff__bindgen_ty_4__bindgen_ty_2 {
    pub __pkt_type_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __mono_tc_offset: __IncompleteArrayField<__u8>,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub tc_index: __u16,
    pub alloc_cpu: u16_,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1,
    pub priority: __u32,
    pub skb_iif: core::ffi::c_int,
    pub hash: __u32,
    pub __bindgen_anon_2: sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2,
    pub __bindgen_anon_3: sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_3,
    pub secmark: __u32,
    pub __bindgen_anon_4: sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_4,
    pub __bindgen_anon_5: sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_5,
    pub inner_transport_header: __u16,
    pub inner_network_header: __u16,
    pub inner_mac_header: __u16,
    pub protocol: __be16,
    pub transport_header: __u16,
    pub network_header: __u16,
    pub mac_header: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1 {
    pub csum: __wsum,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub csum_start: __u16,
    pub csum_offset: __u16,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2 {
    pub vlan_all: u32_,
    pub __bindgen_anon_1: sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 {
    pub vlan_proto: __be16,
    pub vlan_tci: __u16,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_3 {
    pub napi_id: core::ffi::c_uint,
    pub sender_cpu: core::ffi::c_uint,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_4 {
    pub mark: __u32,
    pub reserved_tailroom: __u32,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_5 {
    pub inner_protocol: __be16,
    pub inner_ipproto: __u8,
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_2__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sk_buff__bindgen_ty_4__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_buff__bindgen_ty_4__bindgen_ty_2 {
    #[inline]
    pub fn pkt_type(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pkt_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_df(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ignore_df(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dst_pending_confirm(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dst_pending_confirm(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ip_summed(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ip_summed(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ooo_okay(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ooo_okay(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pkt_type: __u8,
        ignore_df: __u8,
        dst_pending_confirm: __u8,
        ip_summed: __u8,
        ooo_okay: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let pkt_type: u8 = unsafe { ::core::mem::transmute(pkt_type) };
            pkt_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ignore_df: u8 = unsafe { ::core::mem::transmute(ignore_df) };
            ignore_df as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dst_pending_confirm: u8 = unsafe { ::core::mem::transmute(dst_pending_confirm) };
            dst_pending_confirm as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let ip_summed: u8 = unsafe { ::core::mem::transmute(ip_summed) };
            ip_summed as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ooo_okay: u8 = unsafe { ::core::mem::transmute(ooo_okay) };
            ooo_okay as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn tstamp_type(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_tstamp_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tc_at_ingress(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tc_at_ingress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tc_skip_classify(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tc_skip_classify(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn remcsum_offload(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_remcsum_offload(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_complete_sw(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_complete_sw(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_level(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_csum_level(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn inner_protocol_type(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_inner_protocol_type(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn l4_hash(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_l4_hash(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sw_hash(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sw_hash(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_acked_valid(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wifi_acked_valid(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_acked(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wifi_acked(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_fcs(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_fcs(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn encapsulation(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_encapsulation(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn encap_hdr_csum(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_encap_hdr_csum(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn csum_valid(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_csum_valid(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ndisc_nodetype(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(17usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_ndisc_nodetype(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn redirected(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_redirected(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nf_skip_egress(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(20usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nf_skip_egress(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slow_gro(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(21usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_slow_gro(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        tstamp_type: __u8,
        tc_at_ingress: __u8,
        tc_skip_classify: __u8,
        remcsum_offload: __u8,
        csum_complete_sw: __u8,
        csum_level: __u8,
        inner_protocol_type: __u8,
        l4_hash: __u8,
        sw_hash: __u8,
        wifi_acked_valid: __u8,
        wifi_acked: __u8,
        no_fcs: __u8,
        encapsulation: __u8,
        encap_hdr_csum: __u8,
        csum_valid: __u8,
        ndisc_nodetype: __u8,
        redirected: __u8,
        nf_skip_egress: __u8,
        slow_gro: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let tstamp_type: u8 = unsafe { ::core::mem::transmute(tstamp_type) };
            tstamp_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tc_at_ingress: u8 = unsafe { ::core::mem::transmute(tc_at_ingress) };
            tc_at_ingress as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tc_skip_classify: u8 = unsafe { ::core::mem::transmute(tc_skip_classify) };
            tc_skip_classify as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let remcsum_offload: u8 = unsafe { ::core::mem::transmute(remcsum_offload) };
            remcsum_offload as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let csum_complete_sw: u8 = unsafe { ::core::mem::transmute(csum_complete_sw) };
            csum_complete_sw as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let csum_level: u8 = unsafe { ::core::mem::transmute(csum_level) };
            csum_level as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let inner_protocol_type: u8 = unsafe { ::core::mem::transmute(inner_protocol_type) };
            inner_protocol_type as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let l4_hash: u8 = unsafe { ::core::mem::transmute(l4_hash) };
            l4_hash as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let sw_hash: u8 = unsafe { ::core::mem::transmute(sw_hash) };
            sw_hash as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wifi_acked_valid: u8 = unsafe { ::core::mem::transmute(wifi_acked_valid) };
            wifi_acked_valid as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let wifi_acked: u8 = unsafe { ::core::mem::transmute(wifi_acked) };
            wifi_acked as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let no_fcs: u8 = unsafe { ::core::mem::transmute(no_fcs) };
            no_fcs as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let encapsulation: u8 = unsafe { ::core::mem::transmute(encapsulation) };
            encapsulation as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let encap_hdr_csum: u8 = unsafe { ::core::mem::transmute(encap_hdr_csum) };
            encap_hdr_csum as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let csum_valid: u8 = unsafe { ::core::mem::transmute(csum_valid) };
            csum_valid as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let ndisc_nodetype: u8 = unsafe { ::core::mem::transmute(ndisc_nodetype) };
            ndisc_nodetype as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let redirected: u8 = unsafe { ::core::mem::transmute(redirected) };
            redirected as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let nf_skip_egress: u8 = unsafe { ::core::mem::transmute(nf_skip_egress) };
            nf_skip_egress as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let slow_gro: u8 = unsafe { ::core::mem::transmute(slow_gro) };
            slow_gro as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for sk_buff__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sk_buff {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_buff {
    #[inline]
    pub fn cloned(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cloned(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nohdr(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nohdr(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fclone(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_fclone(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn peeked(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_peeked(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn head_frag(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_head_frag(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pfmemalloc(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pfmemalloc(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pp_recycle(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pp_recycle(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cloned: __u8,
        nohdr: __u8,
        fclone: __u8,
        peeked: __u8,
        head_frag: __u8,
        pfmemalloc: __u8,
        pp_recycle: __u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cloned: u8 = unsafe { ::core::mem::transmute(cloned) };
            cloned as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let nohdr: u8 = unsafe { ::core::mem::transmute(nohdr) };
            nohdr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let fclone: u8 = unsafe { ::core::mem::transmute(fclone) };
            fclone as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let peeked: u8 = unsafe { ::core::mem::transmute(peeked) };
            peeked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let head_frag: u8 = unsafe { ::core::mem::transmute(head_frag) };
            head_frag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pfmemalloc: u8 = unsafe { ::core::mem::transmute(pfmemalloc) };
            pfmemalloc as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pp_recycle: u8 = unsafe { ::core::mem::transmute(pp_recycle) };
            pp_recycle as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dst_entry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sk_skb_reason_drop(sk: *mut sock, skb: *mut sk_buff, reason: skb_drop_reason);
}
extern "C" {
    pub fn skb_release_head_state(skb: *mut sk_buff);
}
extern "C" {
    pub fn kfree_skb_list_reason(segs: *mut sk_buff, reason: skb_drop_reason);
}
extern "C" {
    pub fn skb_dump(level: *const core::ffi::c_char, skb: *const sk_buff, full_pkt: bool_);
}
extern "C" {
    pub fn skb_tx_error(skb: *mut sk_buff);
}
extern "C" {
    pub fn consume_skb(skb: *mut sk_buff);
}
extern "C" {
    pub fn __consume_stateless_skb(skb: *mut sk_buff);
}
extern "C" {
    pub fn __kfree_skb(skb: *mut sk_buff);
}
extern "C" {
    pub fn kfree_skb_partial(skb: *mut sk_buff, head_stolen: bool_);
}
extern "C" {
    pub fn skb_try_coalesce(
        to: *mut sk_buff,
        from: *mut sk_buff,
        fragstolen: *mut bool_,
        delta_truesize: *mut core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn __alloc_skb(
        size: core::ffi::c_uint,
        priority: gfp_t,
        flags: core::ffi::c_int,
        node: core::ffi::c_int,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn __build_skb(data: *mut core::ffi::c_void, frag_size: core::ffi::c_uint) -> *mut sk_buff;
}
extern "C" {
    pub fn build_skb(data: *mut core::ffi::c_void, frag_size: core::ffi::c_uint) -> *mut sk_buff;
}
extern "C" {
    pub fn build_skb_around(
        skb: *mut sk_buff,
        data: *mut core::ffi::c_void,
        frag_size: core::ffi::c_uint,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_attempt_defer_free(skb: *mut sk_buff);
}
extern "C" {
    pub fn napi_build_skb(
        data: *mut core::ffi::c_void,
        frag_size: core::ffi::c_uint,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn slab_build_skb(data: *mut core::ffi::c_void) -> *mut sk_buff;
}
extern "C" {
    pub fn alloc_skb_with_frags(
        header_len: core::ffi::c_ulong,
        data_len: core::ffi::c_ulong,
        max_page_order: core::ffi::c_int,
        errcode: *mut core::ffi::c_int,
        gfp_mask: gfp_t,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn alloc_skb_for_msg(first: *mut sk_buff) -> *mut sk_buff;
}
#[repr(C)]
pub struct sk_buff_fclones {
    pub skb1: sk_buff,
    pub skb2: sk_buff,
    pub fclone_ref: refcount_t,
}
impl Default for sk_buff_fclones {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn skb_morph(dst: *mut sk_buff, src: *mut sk_buff) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_headers_offset_update(skb: *mut sk_buff, off: core::ffi::c_int);
}
extern "C" {
    pub fn skb_copy_ubufs(skb: *mut sk_buff, gfp_mask: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_clone(skb: *mut sk_buff, priority: gfp_t) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_copy_header(new: *mut sk_buff, old: *const sk_buff);
}
extern "C" {
    pub fn skb_copy(skb: *const sk_buff, priority: gfp_t) -> *mut sk_buff;
}
extern "C" {
    pub fn __pskb_copy_fclone(
        skb: *mut sk_buff,
        headroom: core::ffi::c_int,
        gfp_mask: gfp_t,
        fclone: bool_,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn pskb_expand_head(
        skb: *mut sk_buff,
        nhead: core::ffi::c_int,
        ntail: core::ffi::c_int,
        gfp_mask: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_realloc_headroom(skb: *mut sk_buff, headroom: core::ffi::c_uint) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_expand_head(skb: *mut sk_buff, headroom: core::ffi::c_uint) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_copy_expand(
        skb: *const sk_buff,
        newheadroom: core::ffi::c_int,
        newtailroom: core::ffi::c_int,
        priority: gfp_t,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_to_sgvec_nomark(
        skb: *mut sk_buff,
        sg: *mut scatterlist,
        offset: core::ffi::c_int,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_to_sgvec(
        skb: *mut sk_buff,
        sg: *mut scatterlist,
        offset: core::ffi::c_int,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_cow_data(
        skb: *mut sk_buff,
        tailbits: core::ffi::c_int,
        trailer: *mut *mut sk_buff,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __skb_pad(
        skb: *mut sk_buff,
        pad: core::ffi::c_int,
        free_on_error: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_append_pagefrags(
        skb: *mut sk_buff,
        page: *mut page,
        offset: core::ffi::c_int,
        size: usize,
        max_frags: usize,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct skb_seq_state {
    pub lower_offset: __u32,
    pub upper_offset: __u32,
    pub frag_idx: __u32,
    pub stepped_offset: __u32,
    pub root_skb: *mut sk_buff,
    pub cur_skb: *mut sk_buff,
    pub frag_data: *mut __u8,
    pub frag_off: __u32,
}
impl Default for skb_seq_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn skb_prepare_seq_read(
        skb: *mut sk_buff,
        from: core::ffi::c_uint,
        to: core::ffi::c_uint,
        st: *mut skb_seq_state,
    );
}
extern "C" {
    pub fn skb_seq_read(
        consumed: core::ffi::c_uint,
        data: *mut *const u8_,
        st: *mut skb_seq_state,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn skb_abort_seq_read(st: *mut skb_seq_state);
}
extern "C" {
    pub fn skb_find_text(
        skb: *mut sk_buff,
        from: core::ffi::c_uint,
        to: core::ffi::c_uint,
        config: *mut ts_config,
    ) -> core::ffi::c_uint;
}
pub const pkt_hash_types_PKT_HASH_TYPE_NONE: pkt_hash_types = 0;
pub const pkt_hash_types_PKT_HASH_TYPE_L2: pkt_hash_types = 1;
pub const pkt_hash_types_PKT_HASH_TYPE_L3: pkt_hash_types = 2;
pub const pkt_hash_types_PKT_HASH_TYPE_L4: pkt_hash_types = 3;
pub type pkt_hash_types = core::ffi::c_uint;
extern "C" {
    pub fn __skb_get_hash_symmetric_net(net: *const net, skb: *const sk_buff) -> u32_;
}
extern "C" {
    pub fn __skb_get_hash_net(net: *const net, skb: *mut sk_buff);
}
extern "C" {
    pub fn skb_get_poff(skb: *const sk_buff) -> u32_;
}
extern "C" {
    pub fn __skb_get_poff(
        skb: *const sk_buff,
        data: *const core::ffi::c_void,
        keys: *const flow_keys_basic,
        hlen: core::ffi::c_int,
    ) -> u32_;
}
extern "C" {
    pub fn __skb_flow_get_ports(
        skb: *const sk_buff,
        thoff: core::ffi::c_int,
        ip_proto: u8_,
        data: *const core::ffi::c_void,
        hlen_proto: core::ffi::c_int,
    ) -> __be32;
}
extern "C" {
    pub fn skb_flow_dissector_init(
        flow_dissector: *mut flow_dissector,
        key: *const flow_dissector_key,
        key_count: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bpf_flow_dissect(
        prog: *mut bpf_prog,
        ctx: *mut bpf_flow_dissector,
        proto: __be16,
        nhoff: core::ffi::c_int,
        hlen: core::ffi::c_int,
        flags: core::ffi::c_uint,
    ) -> u32_;
}
extern "C" {
    pub fn __skb_flow_dissect(
        net: *const net,
        skb: *const sk_buff,
        flow_dissector: *mut flow_dissector,
        target_container: *mut core::ffi::c_void,
        data: *const core::ffi::c_void,
        proto: __be16,
        nhoff: core::ffi::c_int,
        hlen: core::ffi::c_int,
        flags: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn skb_flow_dissect_meta(
        skb: *const sk_buff,
        flow_dissector: *mut flow_dissector,
        target_container: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn skb_flow_dissect_ct(
        skb: *const sk_buff,
        flow_dissector: *mut flow_dissector,
        target_container: *mut core::ffi::c_void,
        ctinfo_map: *mut u16_,
        mapsize: usize,
        post_ct: bool_,
        zone: u16_,
    );
}
extern "C" {
    pub fn skb_flow_dissect_tunnel_info(
        skb: *const sk_buff,
        flow_dissector: *mut flow_dissector,
        target_container: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn skb_flow_dissect_hash(
        skb: *const sk_buff,
        flow_dissector: *mut flow_dissector,
        target_container: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn skb_get_hash_perturb(skb: *const sk_buff, perturb: *const siphash_key_t) -> __u32;
}
extern "C" {
    pub static msg_zerocopy_ubuf_ops: ubuf_info_ops;
}
extern "C" {
    pub fn msg_zerocopy_realloc(sk: *mut sock, size: usize, uarg: *mut ubuf_info)
        -> *mut ubuf_info;
}
extern "C" {
    pub fn msg_zerocopy_put_abort(uarg: *mut ubuf_info, have_uref: bool_);
}
extern "C" {
    pub fn __zerocopy_sg_from_iter(
        msg: *mut msghdr,
        sk: *mut sock,
        skb: *mut sk_buff,
        from: *mut iov_iter,
        length: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn zerocopy_fill_skb_from_iter(
        skb: *mut sk_buff,
        from: *mut iov_iter,
        length: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_zerocopy_iter_stream(
        sk: *mut sock,
        skb: *mut sk_buff,
        msg: *mut msghdr,
        len: core::ffi::c_int,
        uarg: *mut ubuf_info,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __skb_zcopy_downgrade_managed(skb: *mut sk_buff);
}
extern "C" {
    pub fn __skb_unclone_keeptruesize(skb: *mut sk_buff, pri: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_append(old: *mut sk_buff, newsk: *mut sk_buff, list: *mut sk_buff_head);
}
extern "C" {
    pub fn skb_queue_head(list: *mut sk_buff_head, newsk: *mut sk_buff);
}
extern "C" {
    pub fn skb_queue_tail(list: *mut sk_buff_head, newsk: *mut sk_buff);
}
extern "C" {
    pub fn skb_unlink(skb: *mut sk_buff, list: *mut sk_buff_head);
}
extern "C" {
    pub fn skb_dequeue(list: *mut sk_buff_head) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_dequeue_tail(list: *mut sk_buff_head) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_add_rx_frag_netmem(
        skb: *mut sk_buff,
        i: core::ffi::c_int,
        netmem: netmem_ref,
        off: core::ffi::c_int,
        size: core::ffi::c_int,
        truesize: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn skb_coalesce_rx_frag(
        skb: *mut sk_buff,
        i: core::ffi::c_int,
        size: core::ffi::c_int,
        truesize: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn pskb_put(
        skb: *mut sk_buff,
        tail: *mut sk_buff,
        len: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn skb_put(skb: *mut sk_buff, len: core::ffi::c_uint) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn skb_push(skb: *mut sk_buff, len: core::ffi::c_uint) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn skb_pull(skb: *mut sk_buff, len: core::ffi::c_uint) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn skb_pull_data(skb: *mut sk_buff, len: usize) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __pskb_pull_tail(skb: *mut sk_buff, delta: core::ffi::c_int) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn skb_condense(skb: *mut sk_buff);
}
extern "C" {
    pub fn ___pskb_trim(skb: *mut sk_buff, len: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_trim(skb: *mut sk_buff, len: core::ffi::c_uint);
}
extern "C" {
    pub fn skb_queue_purge_reason(list: *mut sk_buff_head, reason: skb_drop_reason);
}
extern "C" {
    pub fn skb_rbtree_purge(root: *mut rb_root) -> core::ffi::c_uint;
}
extern "C" {
    pub fn skb_errqueue_purge(list: *mut sk_buff_head);
}
extern "C" {
    pub fn __netdev_alloc_frag_align(
        fragsz: core::ffi::c_uint,
        align_mask: core::ffi::c_uint,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __netdev_alloc_skb(
        dev: *mut net_device,
        length: core::ffi::c_uint,
        gfp_mask: gfp_t,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn __napi_alloc_frag_align(
        fragsz: core::ffi::c_uint,
        align_mask: core::ffi::c_uint,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn napi_alloc_skb(napi: *mut napi_struct, length: core::ffi::c_uint) -> *mut sk_buff;
}
extern "C" {
    pub fn napi_consume_skb(skb: *mut sk_buff, budget: core::ffi::c_int);
}
extern "C" {
    pub fn napi_skb_free_stolen_head(skb: *mut sk_buff);
}
extern "C" {
    pub fn __napi_kfree_skb(skb: *mut sk_buff, reason: skb_drop_reason);
}
extern "C" {
    pub fn skb_pp_cow_data(
        pool: *mut page_pool,
        pskb: *mut *mut sk_buff,
        headroom: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_cow_data_for_xdp(
        pool: *mut page_pool,
        pskb: *mut *mut sk_buff,
        prog: *mut bpf_prog,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_page_frag_refill(sz: core::ffi::c_uint, pfrag: *mut page_frag, prio: gfp_t)
        -> bool_;
}
extern "C" {
    pub fn csum_and_copy_from_iter_full(
        addr: *mut core::ffi::c_void,
        bytes: usize,
        csum: *mut __wsum,
        i: *mut iov_iter,
    ) -> bool_;
}
extern "C" {
    pub fn skb_pull_rcsum(skb: *mut sk_buff, len: core::ffi::c_uint) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn pskb_trim_rcsum_slow(skb: *mut sk_buff, len: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn __skb_wait_for_more_packets(
        sk: *mut sock,
        queue: *mut sk_buff_head,
        err: *mut core::ffi::c_int,
        timeo_p: *mut core::ffi::c_long,
        skb: *const sk_buff,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __skb_try_recv_from_queue(
        sk: *mut sock,
        queue: *mut sk_buff_head,
        flags: core::ffi::c_uint,
        off: *mut core::ffi::c_int,
        err: *mut core::ffi::c_int,
        last: *mut *mut sk_buff,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn __skb_try_recv_datagram(
        sk: *mut sock,
        queue: *mut sk_buff_head,
        flags: core::ffi::c_uint,
        off: *mut core::ffi::c_int,
        err: *mut core::ffi::c_int,
        last: *mut *mut sk_buff,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn __skb_recv_datagram(
        sk: *mut sock,
        sk_queue: *mut sk_buff_head,
        flags: core::ffi::c_uint,
        off: *mut core::ffi::c_int,
        err: *mut core::ffi::c_int,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_recv_datagram(
        sk: *mut sock,
        flags: core::ffi::c_uint,
        err: *mut core::ffi::c_int,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn datagram_poll(
        file: *mut file,
        sock: *mut socket,
        wait: *mut poll_table_struct,
    ) -> __poll_t;
}
extern "C" {
    pub fn skb_copy_datagram_iter(
        from: *const sk_buff,
        offset: core::ffi::c_int,
        to: *mut iov_iter,
        size: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_copy_and_csum_datagram_msg(
        skb: *mut sk_buff,
        hlen: core::ffi::c_int,
        msg: *mut msghdr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_copy_and_hash_datagram_iter(
        skb: *const sk_buff,
        offset: core::ffi::c_int,
        to: *mut iov_iter,
        len: core::ffi::c_int,
        hash: *mut ahash_request,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_copy_datagram_from_iter(
        skb: *mut sk_buff,
        offset: core::ffi::c_int,
        from: *mut iov_iter,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn zerocopy_sg_from_iter(skb: *mut sk_buff, frm: *mut iov_iter) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_free_datagram(sk: *mut sock, skb: *mut sk_buff);
}
extern "C" {
    pub fn skb_kill_datagram(
        sk: *mut sock,
        skb: *mut sk_buff,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_copy_bits(
        skb: *const sk_buff,
        offset: core::ffi::c_int,
        to: *mut core::ffi::c_void,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_store_bits(
        skb: *mut sk_buff,
        offset: core::ffi::c_int,
        from: *const core::ffi::c_void,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_copy_and_csum_bits(
        skb: *const sk_buff,
        offset: core::ffi::c_int,
        to: *mut u8_,
        len: core::ffi::c_int,
    ) -> __wsum;
}
extern "C" {
    pub fn skb_splice_bits(
        skb: *mut sk_buff,
        sk: *mut sock,
        offset: core::ffi::c_uint,
        pipe: *mut pipe_inode_info,
        len: core::ffi::c_uint,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_send_sock_locked(
        sk: *mut sock,
        skb: *mut sk_buff,
        offset: core::ffi::c_int,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_send_sock(
        sk: *mut sock,
        skb: *mut sk_buff,
        offset: core::ffi::c_int,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_copy_and_csum_dev(skb: *const sk_buff, to: *mut u8_);
}
extern "C" {
    pub fn skb_zerocopy_headlen(from: *const sk_buff) -> core::ffi::c_uint;
}
extern "C" {
    pub fn skb_zerocopy(
        to: *mut sk_buff,
        from: *mut sk_buff,
        len: core::ffi::c_int,
        hlen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_split(skb: *mut sk_buff, skb1: *mut sk_buff, len: u32_);
}
extern "C" {
    pub fn skb_shift(
        tgt: *mut sk_buff,
        skb: *mut sk_buff,
        shiftlen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_scrub_packet(skb: *mut sk_buff, xnet: bool_);
}
extern "C" {
    pub fn skb_segment(skb: *mut sk_buff, features: netdev_features_t) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_segment_list(
        skb: *mut sk_buff,
        features: netdev_features_t,
        offset: core::ffi::c_uint,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_vlan_untag(skb: *mut sk_buff) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_ensure_writable(skb: *mut sk_buff, write_len: core::ffi::c_uint)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_ensure_writable_head_tail(
        skb: *mut sk_buff,
        dev: *mut net_device,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __skb_vlan_pop(skb: *mut sk_buff, vlan_tci: *mut u16_) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_vlan_pop(skb: *mut sk_buff) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_vlan_push(skb: *mut sk_buff, vlan_proto: __be16, vlan_tci: u16_)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_eth_pop(skb: *mut sk_buff) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_eth_push(
        skb: *mut sk_buff,
        dst: *const core::ffi::c_uchar,
        src: *const core::ffi::c_uchar,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_mpls_push(
        skb: *mut sk_buff,
        mpls_lse: __be32,
        mpls_proto: __be16,
        mac_len: core::ffi::c_int,
        ethernet: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_mpls_pop(
        skb: *mut sk_buff,
        next_proto: __be16,
        mac_len: core::ffi::c_int,
        ethernet: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_mpls_update_lse(skb: *mut sk_buff, mpls_lse: __be32) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_mpls_dec_ttl(skb: *mut sk_buff) -> core::ffi::c_int;
}
extern "C" {
    pub fn pskb_extract(
        skb: *mut sk_buff,
        off: core::ffi::c_int,
        to_copy: core::ffi::c_int,
        gfp: gfp_t,
    ) -> *mut sk_buff;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct skb_checksum_ops {
    pub update: ::core::option::Option<
        unsafe extern "C" fn(
            mem: *const core::ffi::c_void,
            len: core::ffi::c_int,
            wsum: __wsum,
        ) -> __wsum,
    >,
    pub combine: ::core::option::Option<
        unsafe extern "C" fn(
            csum: __wsum,
            csum2: __wsum,
            offset: core::ffi::c_int,
            len: core::ffi::c_int,
        ) -> __wsum,
    >,
}
extern "C" {
    pub static mut crc32c_csum_stub: *const skb_checksum_ops;
}
extern "C" {
    pub fn __skb_checksum(
        skb: *const sk_buff,
        offset: core::ffi::c_int,
        len: core::ffi::c_int,
        csum: __wsum,
        ops: *const skb_checksum_ops,
    ) -> __wsum;
}
extern "C" {
    pub fn skb_checksum(
        skb: *const sk_buff,
        offset: core::ffi::c_int,
        len: core::ffi::c_int,
        csum: __wsum,
    ) -> __wsum;
}
extern "C" {
    pub fn skb_init();
}
extern "C" {
    pub static mut netstamp_needed_key: static_key_false;
}
extern "C" {
    pub fn skb_clone_sk(skb: *mut sk_buff) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_complete_tx_timestamp(skb: *mut sk_buff, hwtstamps: *mut skb_shared_hwtstamps);
}
extern "C" {
    pub fn __skb_tstamp_tx(
        orig_skb: *mut sk_buff,
        ack_skb: *const sk_buff,
        hwtstamps: *mut skb_shared_hwtstamps,
        sk: *mut sock,
        tstype: core::ffi::c_int,
    );
}
extern "C" {
    pub fn skb_tstamp_tx(orig_skb: *mut sk_buff, hwtstamps: *mut skb_shared_hwtstamps);
}
extern "C" {
    pub fn skb_complete_wifi_ack(skb: *mut sk_buff, acked: bool_);
}
extern "C" {
    pub fn __skb_checksum_complete_head(skb: *mut sk_buff, len: core::ffi::c_int) -> __sum16;
}
extern "C" {
    pub fn __skb_checksum_complete(skb: *mut sk_buff) -> __sum16;
}
pub const skb_ext_id_SKB_EXT_SEC_PATH: skb_ext_id = 0;
pub const skb_ext_id_SKB_EXT_NUM: skb_ext_id = 1;
pub type skb_ext_id = core::ffi::c_uint;
#[repr(C)]
#[repr(align(8))]
#[derive(Default)]
pub struct skb_ext {
    pub refcnt: refcount_t,
    pub offset: [u8_; 1usize],
    pub chunks: u8_,
    pub __bindgen_padding_0: [u8; 2usize],
    pub data: __IncompleteArrayField<core::ffi::c_char>,
}
extern "C" {
    pub fn __skb_ext_alloc(flags: gfp_t) -> *mut skb_ext;
}
extern "C" {
    pub fn __skb_ext_set(
        skb: *mut sk_buff,
        id: skb_ext_id,
        ext: *mut skb_ext,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn skb_ext_add(skb: *mut sk_buff, id: skb_ext_id) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __skb_ext_del(skb: *mut sk_buff, id: skb_ext_id);
}
extern "C" {
    pub fn __skb_ext_put(ext: *mut skb_ext);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sec_path {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __skb_warn_lro_forwarding(skb: *const sk_buff);
}
extern "C" {
    pub fn skb_partial_csum_set(skb: *mut sk_buff, start: u16_, off: u16_) -> bool_;
}
extern "C" {
    pub fn skb_checksum_setup(skb: *mut sk_buff, recalculate: bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn skb_checksum_trimmed(
        skb: *mut sk_buff,
        transport_len: core::ffi::c_uint,
        skb_chkf: ::core::option::Option<unsafe extern "C" fn(skb: *mut sk_buff) -> __sum16>,
    ) -> *mut sk_buff;
}
extern "C" {
    pub fn skb_splice_from_iter(
        skb: *mut sk_buff,
        iter: *mut iov_iter,
        maxsize: isize,
        gfp: gfp_t,
    ) -> isize;
}
extern "C" {
    pub fn eth_header_parse(
        skb: *const sk_buff,
        haddr: *mut core::ffi::c_uchar,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_format_mac(
        buf: *mut core::ffi::c_char,
        addr: *const core::ffi::c_uchar,
        len: core::ffi::c_int,
    ) -> isize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockptr_t {
    pub __bindgen_anon_1: sockptr_t__bindgen_ty_1,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sockptr_t__bindgen_ty_1 {
    pub kernel: *mut core::ffi::c_void,
    pub user: *mut core::ffi::c_void,
}
impl Default for sockptr_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sockptr_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sockptr_t {
    #[inline]
    pub fn is_kernel(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_kernel(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(is_kernel: bool_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_kernel: u8 = unsafe { ::core::mem::transmute(is_kernel) };
            is_kernel as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const socket_state_SS_FREE: socket_state = 0;
pub const socket_state_SS_UNCONNECTED: socket_state = 1;
pub const socket_state_SS_CONNECTING: socket_state = 2;
pub const socket_state_SS_CONNECTED: socket_state = 3;
pub const socket_state_SS_DISCONNECTING: socket_state = 4;
pub type socket_state = core::ffi::c_uint;
pub const sock_type_SOCK_STREAM: sock_type = 1;
pub const sock_type_SOCK_DGRAM: sock_type = 2;
pub const sock_type_SOCK_RAW: sock_type = 3;
pub const sock_type_SOCK_RDM: sock_type = 4;
pub const sock_type_SOCK_SEQPACKET: sock_type = 5;
pub const sock_type_SOCK_DCCP: sock_type = 6;
pub const sock_type_SOCK_PACKET: sock_type = 10;
pub type sock_type = core::ffi::c_uint;
pub const sock_shutdown_cmd_SHUT_RD: sock_shutdown_cmd = 0;
pub const sock_shutdown_cmd_SHUT_WR: sock_shutdown_cmd = 1;
pub const sock_shutdown_cmd_SHUT_RDWR: sock_shutdown_cmd = 2;
pub type sock_shutdown_cmd = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct socket_wq {
    pub wait: wait_queue_head_t,
    pub fasync_list: *mut fasync_struct,
    pub flags: core::ffi::c_ulong,
    pub rcu: callback_head,
}
impl Default for socket_wq {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct socket {
    pub state: socket_state,
    pub type_: core::ffi::c_short,
    pub flags: core::ffi::c_ulong,
    pub file: *mut file,
    pub sk: *mut sock,
    pub ops: *const proto_ops,
    pub __bindgen_padding_0: [u64; 3usize],
    pub wq: socket_wq,
}
impl Default for socket {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct read_descriptor_t {
    pub written: usize,
    pub count: usize,
    pub arg: read_descriptor_t__bindgen_ty_1,
    pub error: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union read_descriptor_t__bindgen_ty_1 {
    pub buf: *mut core::ffi::c_char,
    pub data: *mut core::ffi::c_void,
}
impl Default for read_descriptor_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for read_descriptor_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sk_read_actor_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut read_descriptor_t,
        arg2: *mut sk_buff,
        arg3: core::ffi::c_uint,
        arg4: usize,
    ) -> core::ffi::c_int,
>;
pub type skb_read_actor_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut sock, arg2: *mut sk_buff) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct proto_ops {
    pub family: core::ffi::c_int,
    pub owner: *mut module,
    pub release:
        ::core::option::Option<unsafe extern "C" fn(sock: *mut socket) -> core::ffi::c_int>,
    pub bind: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            myaddr: *mut sockaddr,
            sockaddr_len: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub connect: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            vaddr: *mut sockaddr,
            sockaddr_len: core::ffi::c_int,
            flags: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub socketpair: ::core::option::Option<
        unsafe extern "C" fn(sock1: *mut socket, sock2: *mut socket) -> core::ffi::c_int,
    >,
    pub accept: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            newsock: *mut socket,
            arg: *mut proto_accept_arg,
        ) -> core::ffi::c_int,
    >,
    pub getname: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            addr: *mut sockaddr,
            peer: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file,
            sock: *mut socket,
            wait: *mut poll_table_struct,
        ) -> __poll_t,
    >,
    pub ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            cmd: core::ffi::c_uint,
            arg: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub compat_ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            cmd: core::ffi::c_uint,
            arg: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub gettstamp: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            userstamp: *mut core::ffi::c_void,
            timeval: bool_,
            time32: bool_,
        ) -> core::ffi::c_int,
    >,
    pub listen: ::core::option::Option<
        unsafe extern "C" fn(sock: *mut socket, len: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub shutdown: ::core::option::Option<
        unsafe extern "C" fn(sock: *mut socket, flags: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub setsockopt: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            level: core::ffi::c_int,
            optname: core::ffi::c_int,
            optval: sockptr_t,
            optlen: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub getsockopt: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            level: core::ffi::c_int,
            optname: core::ffi::c_int,
            optval: *mut core::ffi::c_char,
            optlen: *mut core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub show_fdinfo:
        ::core::option::Option<unsafe extern "C" fn(m: *mut seq_file, sock: *mut socket)>,
    pub sendmsg: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            m: *mut msghdr,
            total_len: usize,
        ) -> core::ffi::c_int,
    >,
    pub recvmsg: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            m: *mut msghdr,
            total_len: usize,
            flags: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file,
            sock: *mut socket,
            vma: *mut vm_area_struct,
        ) -> core::ffi::c_int,
    >,
    pub splice_read: ::core::option::Option<
        unsafe extern "C" fn(
            sock: *mut socket,
            ppos: *mut loff_t,
            pipe: *mut pipe_inode_info,
            len: usize,
            flags: core::ffi::c_uint,
        ) -> isize,
    >,
    pub splice_eof: ::core::option::Option<unsafe extern "C" fn(sock: *mut socket)>,
    pub set_peek_off: ::core::option::Option<
        unsafe extern "C" fn(sk: *mut sock, val: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub peek_len:
        ::core::option::Option<unsafe extern "C" fn(sock: *mut socket) -> core::ffi::c_int>,
    pub read_sock: ::core::option::Option<
        unsafe extern "C" fn(
            sk: *mut sock,
            desc: *mut read_descriptor_t,
            recv_actor: sk_read_actor_t,
        ) -> core::ffi::c_int,
    >,
    pub read_skb: ::core::option::Option<
        unsafe extern "C" fn(sk: *mut sock, recv_actor: skb_read_actor_t) -> core::ffi::c_int,
    >,
    pub sendmsg_locked: ::core::option::Option<
        unsafe extern "C" fn(sk: *mut sock, msg: *mut msghdr, size: usize) -> core::ffi::c_int,
    >,
    pub set_rcvlowat: ::core::option::Option<
        unsafe extern "C" fn(sk: *mut sock, val: core::ffi::c_int) -> core::ffi::c_int,
    >,
}
impl Default for proto_ops {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct net_proto_family {
    pub family: core::ffi::c_int,
    pub create: ::core::option::Option<
        unsafe extern "C" fn(
            net: *mut net,
            sock: *mut socket,
            protocol: core::ffi::c_int,
            kern: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub owner: *mut module,
}
impl Default for net_proto_family {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const SOCK_WAKE_IO: _bindgen_ty_175 = 0;
pub const SOCK_WAKE_WAITD: _bindgen_ty_175 = 1;
pub const SOCK_WAKE_SPACE: _bindgen_ty_175 = 2;
pub const SOCK_WAKE_URG: _bindgen_ty_175 = 3;
pub type _bindgen_ty_175 = core::ffi::c_uint;
extern "C" {
    pub fn sock_wake_async(
        sk_wq: *mut socket_wq,
        how: core::ffi::c_int,
        band: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sock_register(fam: *const net_proto_family) -> core::ffi::c_int;
}
extern "C" {
    pub fn sock_unregister(family: core::ffi::c_int);
}
extern "C" {
    pub fn sock_is_registered(family: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn __sock_create(
        net: *mut net,
        family: core::ffi::c_int,
        type_: core::ffi::c_int,
        proto: core::ffi::c_int,
        res: *mut *mut socket,
        kern: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sock_create(
        family: core::ffi::c_int,
        type_: core::ffi::c_int,
        proto: core::ffi::c_int,
        res: *mut *mut socket,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sock_create_kern(
        net: *mut net,
        family: core::ffi::c_int,
        type_: core::ffi::c_int,
        proto: core::ffi::c_int,
        res: *mut *mut socket,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sock_create_lite(
        family: core::ffi::c_int,
        type_: core::ffi::c_int,
        proto: core::ffi::c_int,
        res: *mut *mut socket,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sock_alloc() -> *mut socket;
}
extern "C" {
    pub fn sock_release(sock: *mut socket);
}
extern "C" {
    pub fn sock_sendmsg(sock: *mut socket, msg: *mut msghdr) -> core::ffi::c_int;
}
extern "C" {
    pub fn sock_recvmsg(
        sock: *mut socket,
        msg: *mut msghdr,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sock_alloc_file(
        sock: *mut socket,
        flags: core::ffi::c_int,
        dname: *const core::ffi::c_char,
    ) -> *mut file;
}
extern "C" {
    pub fn sockfd_lookup(fd: core::ffi::c_int, err: *mut core::ffi::c_int) -> *mut socket;
}
extern "C" {
    pub fn sock_from_file(file: *mut file) -> *mut socket;
}
extern "C" {
    pub fn net_ratelimit() -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_sendmsg(
        sock: *mut socket,
        msg: *mut msghdr,
        vec: *mut kvec,
        num: usize,
        len: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_sendmsg_locked(
        sk: *mut sock,
        msg: *mut msghdr,
        vec: *mut kvec,
        num: usize,
        len: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_recvmsg(
        sock: *mut socket,
        msg: *mut msghdr,
        vec: *mut kvec,
        num: usize,
        len: usize,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_bind(
        sock: *mut socket,
        addr: *mut sockaddr,
        addrlen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_listen(sock: *mut socket, backlog: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_accept(
        sock: *mut socket,
        newsock: *mut *mut socket,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_connect(
        sock: *mut socket,
        addr: *mut sockaddr,
        addrlen: core::ffi::c_int,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_getsockname(sock: *mut socket, addr: *mut sockaddr) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_getpeername(sock: *mut socket, addr: *mut sockaddr) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_sock_shutdown(sock: *mut socket, how: sock_shutdown_cmd) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_sock_ip_overhead(sk: *mut sock) -> u32_;
}
extern "C" {
    pub fn fput(arg1: *mut file);
}
extern "C" {
    pub fn alloc_file_pseudo(
        arg1: *mut inode,
        arg2: *mut vfsmount,
        arg3: *const core::ffi::c_char,
        flags: core::ffi::c_int,
        arg4: *const file_operations,
    ) -> *mut file;
}
extern "C" {
    pub fn alloc_file_pseudo_noaccount(
        arg1: *mut inode,
        arg2: *mut vfsmount,
        arg3: *const core::ffi::c_char,
        flags: core::ffi::c_int,
        arg4: *const file_operations,
    ) -> *mut file;
}
extern "C" {
    pub fn alloc_file_clone(
        arg1: *mut file,
        flags: core::ffi::c_int,
        arg2: *const file_operations,
    ) -> *mut file;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fd {
    pub file: *mut file,
    pub flags: core::ffi::c_uint,
}
impl Default for fd {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn fget(fd: core::ffi::c_uint) -> *mut file;
}
extern "C" {
    pub fn fget_raw(fd: core::ffi::c_uint) -> *mut file;
}
extern "C" {
    pub fn fget_task(task: *mut task_struct, fd: core::ffi::c_uint) -> *mut file;
}
extern "C" {
    pub fn __fdget(fd: core::ffi::c_uint) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __fdget_raw(fd: core::ffi::c_uint) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __fdget_pos(fd: core::ffi::c_uint) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __f_unlock_pos(arg1: *mut file);
}
pub type class_fd_t = fd;
pub type class_fd_raw_t = fd;
extern "C" {
    pub fn f_dupfd(
        from: core::ffi::c_uint,
        file: *mut file,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn replace_fd(
        fd: core::ffi::c_uint,
        file: *mut file,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_close_on_exec(fd: core::ffi::c_uint, flag: core::ffi::c_int);
}
extern "C" {
    pub fn get_close_on_exec(fd: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn __get_unused_fd_flags(
        flags: core::ffi::c_uint,
        nofile: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_unused_fd_flags(flags: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_unused_fd(fd: core::ffi::c_uint);
}
pub type class_get_unused_fd_t = core::ffi::c_int;
extern "C" {
    pub fn fd_install(fd: core::ffi::c_uint, file: *mut file);
}
extern "C" {
    pub fn receive_fd(
        file: *mut file,
        ufd: *mut core::ffi::c_int,
        o_flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn receive_fd_replace(
        new_fd: core::ffi::c_int,
        file: *mut file,
        o_flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn flush_delayed_fput();
}
extern "C" {
    pub fn __fput_sync(arg1: *mut file);
}
extern "C" {
    pub static mut sysctl_nr_open_min: core::ffi::c_uint;
}
extern "C" {
    pub static mut sysctl_nr_open_max: core::ffi::c_uint;
}
pub const kernel_read_file_id_READING_UNKNOWN: kernel_read_file_id = 0;
pub const kernel_read_file_id_READING_FIRMWARE: kernel_read_file_id = 1;
pub const kernel_read_file_id_READING_MODULE: kernel_read_file_id = 2;
pub const kernel_read_file_id_READING_KEXEC_IMAGE: kernel_read_file_id = 3;
pub const kernel_read_file_id_READING_KEXEC_INITRAMFS: kernel_read_file_id = 4;
pub const kernel_read_file_id_READING_POLICY: kernel_read_file_id = 5;
pub const kernel_read_file_id_READING_X509_CERTIFICATE: kernel_read_file_id = 6;
pub const kernel_read_file_id_READING_MAX_ID: kernel_read_file_id = 7;
pub type kernel_read_file_id = core::ffi::c_uint;
extern "C" {
    pub static kernel_read_file_str: [*const core::ffi::c_char; 8usize];
}
extern "C" {
    pub fn kernel_read_file(
        file: *mut file,
        offset: loff_t,
        buf: *mut *mut core::ffi::c_void,
        buf_size: usize,
        file_size: *mut usize,
        id: kernel_read_file_id,
    ) -> isize;
}
extern "C" {
    pub fn kernel_read_file_from_path(
        path: *const core::ffi::c_char,
        offset: loff_t,
        buf: *mut *mut core::ffi::c_void,
        buf_size: usize,
        file_size: *mut usize,
        id: kernel_read_file_id,
    ) -> isize;
}
extern "C" {
    pub fn kernel_read_file_from_path_initns(
        path: *const core::ffi::c_char,
        offset: loff_t,
        buf: *mut *mut core::ffi::c_void,
        buf_size: usize,
        file_size: *mut usize,
        id: kernel_read_file_id,
    ) -> isize;
}
extern "C" {
    pub fn kernel_read_file_from_fd(
        fd: core::ffi::c_int,
        offset: loff_t,
        buf: *mut *mut core::ffi::c_void,
        buf_size: usize,
        file_size: *mut usize,
        id: kernel_read_file_id,
    ) -> isize;
}
pub const bpf_cond_pseudo_jmp_BPF_MAY_GOTO: bpf_cond_pseudo_jmp = 0;
pub type bpf_cond_pseudo_jmp = core::ffi::c_uint;
pub const BPF_REG_0: _bindgen_ty_176 = 0;
pub const BPF_REG_1: _bindgen_ty_176 = 1;
pub const BPF_REG_2: _bindgen_ty_176 = 2;
pub const BPF_REG_3: _bindgen_ty_176 = 3;
pub const BPF_REG_4: _bindgen_ty_176 = 4;
pub const BPF_REG_5: _bindgen_ty_176 = 5;
pub const BPF_REG_6: _bindgen_ty_176 = 6;
pub const BPF_REG_7: _bindgen_ty_176 = 7;
pub const BPF_REG_8: _bindgen_ty_176 = 8;
pub const BPF_REG_9: _bindgen_ty_176 = 9;
pub const BPF_REG_10: _bindgen_ty_176 = 10;
pub const __MAX_BPF_REG: _bindgen_ty_176 = 11;
pub type _bindgen_ty_176 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_insn {
    pub code: __u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub off: __s16,
    pub imm: __s32,
}
impl bpf_insn {
    #[inline]
    pub fn dst_reg(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_dst_reg(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn src_reg(&self) -> __u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_src_reg(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(dst_reg: __u8, src_reg: __u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let dst_reg: u8 = unsafe { ::core::mem::transmute(dst_reg) };
            dst_reg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let src_reg: u8 = unsafe { ::core::mem::transmute(src_reg) };
            src_reg as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default)]
pub struct bpf_lpm_trie_key {
    pub prefixlen: __u32,
    pub data: __IncompleteArrayField<__u8>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_lpm_trie_key_hdr {
    pub prefixlen: __u32,
}
#[repr(C)]
pub struct bpf_lpm_trie_key_u8 {
    pub __bindgen_anon_1: bpf_lpm_trie_key_u8__bindgen_ty_1,
    pub data: __IncompleteArrayField<__u8>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_lpm_trie_key_u8__bindgen_ty_1 {
    pub hdr: bpf_lpm_trie_key_hdr,
    pub prefixlen: __u32,
}
impl Default for bpf_lpm_trie_key_u8__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_lpm_trie_key_u8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_cgroup_storage_key {
    pub cgroup_inode_id: __u64,
    pub attach_type: __u32,
}
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_ORDER_UNSPEC: bpf_cgroup_iter_order = 0;
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_SELF_ONLY: bpf_cgroup_iter_order = 1;
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_DESCENDANTS_PRE: bpf_cgroup_iter_order = 2;
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_DESCENDANTS_POST: bpf_cgroup_iter_order = 3;
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_ANCESTORS_UP: bpf_cgroup_iter_order = 4;
pub type bpf_cgroup_iter_order = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_iter_link_info {
    pub map: bpf_iter_link_info__bindgen_ty_1,
    pub cgroup: bpf_iter_link_info__bindgen_ty_2,
    pub task: bpf_iter_link_info__bindgen_ty_3,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_iter_link_info__bindgen_ty_1 {
    pub map_fd: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_iter_link_info__bindgen_ty_2 {
    pub order: bpf_cgroup_iter_order,
    pub cgroup_fd: __u32,
    pub cgroup_id: __u64,
}
impl Default for bpf_iter_link_info__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_iter_link_info__bindgen_ty_3 {
    pub tid: __u32,
    pub pid: __u32,
    pub pid_fd: __u32,
}
impl Default for bpf_iter_link_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const bpf_cmd_BPF_MAP_CREATE: bpf_cmd = 0;
pub const bpf_cmd_BPF_MAP_LOOKUP_ELEM: bpf_cmd = 1;
pub const bpf_cmd_BPF_MAP_UPDATE_ELEM: bpf_cmd = 2;
pub const bpf_cmd_BPF_MAP_DELETE_ELEM: bpf_cmd = 3;
pub const bpf_cmd_BPF_MAP_GET_NEXT_KEY: bpf_cmd = 4;
pub const bpf_cmd_BPF_PROG_LOAD: bpf_cmd = 5;
pub const bpf_cmd_BPF_OBJ_PIN: bpf_cmd = 6;
pub const bpf_cmd_BPF_OBJ_GET: bpf_cmd = 7;
pub const bpf_cmd_BPF_PROG_ATTACH: bpf_cmd = 8;
pub const bpf_cmd_BPF_PROG_DETACH: bpf_cmd = 9;
pub const bpf_cmd_BPF_PROG_TEST_RUN: bpf_cmd = 10;
pub const bpf_cmd_BPF_PROG_RUN: bpf_cmd = 10;
pub const bpf_cmd_BPF_PROG_GET_NEXT_ID: bpf_cmd = 11;
pub const bpf_cmd_BPF_MAP_GET_NEXT_ID: bpf_cmd = 12;
pub const bpf_cmd_BPF_PROG_GET_FD_BY_ID: bpf_cmd = 13;
pub const bpf_cmd_BPF_MAP_GET_FD_BY_ID: bpf_cmd = 14;
pub const bpf_cmd_BPF_OBJ_GET_INFO_BY_FD: bpf_cmd = 15;
pub const bpf_cmd_BPF_PROG_QUERY: bpf_cmd = 16;
pub const bpf_cmd_BPF_RAW_TRACEPOINT_OPEN: bpf_cmd = 17;
pub const bpf_cmd_BPF_BTF_LOAD: bpf_cmd = 18;
pub const bpf_cmd_BPF_BTF_GET_FD_BY_ID: bpf_cmd = 19;
pub const bpf_cmd_BPF_TASK_FD_QUERY: bpf_cmd = 20;
pub const bpf_cmd_BPF_MAP_LOOKUP_AND_DELETE_ELEM: bpf_cmd = 21;
pub const bpf_cmd_BPF_MAP_FREEZE: bpf_cmd = 22;
pub const bpf_cmd_BPF_BTF_GET_NEXT_ID: bpf_cmd = 23;
pub const bpf_cmd_BPF_MAP_LOOKUP_BATCH: bpf_cmd = 24;
pub const bpf_cmd_BPF_MAP_LOOKUP_AND_DELETE_BATCH: bpf_cmd = 25;
pub const bpf_cmd_BPF_MAP_UPDATE_BATCH: bpf_cmd = 26;
pub const bpf_cmd_BPF_MAP_DELETE_BATCH: bpf_cmd = 27;
pub const bpf_cmd_BPF_LINK_CREATE: bpf_cmd = 28;
pub const bpf_cmd_BPF_LINK_UPDATE: bpf_cmd = 29;
pub const bpf_cmd_BPF_LINK_GET_FD_BY_ID: bpf_cmd = 30;
pub const bpf_cmd_BPF_LINK_GET_NEXT_ID: bpf_cmd = 31;
pub const bpf_cmd_BPF_ENABLE_STATS: bpf_cmd = 32;
pub const bpf_cmd_BPF_ITER_CREATE: bpf_cmd = 33;
pub const bpf_cmd_BPF_LINK_DETACH: bpf_cmd = 34;
pub const bpf_cmd_BPF_PROG_BIND_MAP: bpf_cmd = 35;
pub const bpf_cmd_BPF_TOKEN_CREATE: bpf_cmd = 36;
pub const bpf_cmd___MAX_BPF_CMD: bpf_cmd = 37;
pub type bpf_cmd = core::ffi::c_uint;
pub const bpf_map_type_BPF_MAP_TYPE_UNSPEC: bpf_map_type = 0;
pub const bpf_map_type_BPF_MAP_TYPE_HASH: bpf_map_type = 1;
pub const bpf_map_type_BPF_MAP_TYPE_ARRAY: bpf_map_type = 2;
pub const bpf_map_type_BPF_MAP_TYPE_PROG_ARRAY: bpf_map_type = 3;
pub const bpf_map_type_BPF_MAP_TYPE_PERF_EVENT_ARRAY: bpf_map_type = 4;
pub const bpf_map_type_BPF_MAP_TYPE_PERCPU_HASH: bpf_map_type = 5;
pub const bpf_map_type_BPF_MAP_TYPE_PERCPU_ARRAY: bpf_map_type = 6;
pub const bpf_map_type_BPF_MAP_TYPE_STACK_TRACE: bpf_map_type = 7;
pub const bpf_map_type_BPF_MAP_TYPE_CGROUP_ARRAY: bpf_map_type = 8;
pub const bpf_map_type_BPF_MAP_TYPE_LRU_HASH: bpf_map_type = 9;
pub const bpf_map_type_BPF_MAP_TYPE_LRU_PERCPU_HASH: bpf_map_type = 10;
pub const bpf_map_type_BPF_MAP_TYPE_LPM_TRIE: bpf_map_type = 11;
pub const bpf_map_type_BPF_MAP_TYPE_ARRAY_OF_MAPS: bpf_map_type = 12;
pub const bpf_map_type_BPF_MAP_TYPE_HASH_OF_MAPS: bpf_map_type = 13;
pub const bpf_map_type_BPF_MAP_TYPE_DEVMAP: bpf_map_type = 14;
pub const bpf_map_type_BPF_MAP_TYPE_SOCKMAP: bpf_map_type = 15;
pub const bpf_map_type_BPF_MAP_TYPE_CPUMAP: bpf_map_type = 16;
pub const bpf_map_type_BPF_MAP_TYPE_XSKMAP: bpf_map_type = 17;
pub const bpf_map_type_BPF_MAP_TYPE_SOCKHASH: bpf_map_type = 18;
pub const bpf_map_type_BPF_MAP_TYPE_CGROUP_STORAGE_DEPRECATED: bpf_map_type = 19;
pub const bpf_map_type_BPF_MAP_TYPE_CGROUP_STORAGE: bpf_map_type = 19;
pub const bpf_map_type_BPF_MAP_TYPE_REUSEPORT_SOCKARRAY: bpf_map_type = 20;
pub const bpf_map_type_BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE_DEPRECATED: bpf_map_type = 21;
pub const bpf_map_type_BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE: bpf_map_type = 21;
pub const bpf_map_type_BPF_MAP_TYPE_QUEUE: bpf_map_type = 22;
pub const bpf_map_type_BPF_MAP_TYPE_STACK: bpf_map_type = 23;
pub const bpf_map_type_BPF_MAP_TYPE_SK_STORAGE: bpf_map_type = 24;
pub const bpf_map_type_BPF_MAP_TYPE_DEVMAP_HASH: bpf_map_type = 25;
pub const bpf_map_type_BPF_MAP_TYPE_STRUCT_OPS: bpf_map_type = 26;
pub const bpf_map_type_BPF_MAP_TYPE_RINGBUF: bpf_map_type = 27;
pub const bpf_map_type_BPF_MAP_TYPE_INODE_STORAGE: bpf_map_type = 28;
pub const bpf_map_type_BPF_MAP_TYPE_TASK_STORAGE: bpf_map_type = 29;
pub const bpf_map_type_BPF_MAP_TYPE_BLOOM_FILTER: bpf_map_type = 30;
pub const bpf_map_type_BPF_MAP_TYPE_USER_RINGBUF: bpf_map_type = 31;
pub const bpf_map_type_BPF_MAP_TYPE_CGRP_STORAGE: bpf_map_type = 32;
pub const bpf_map_type_BPF_MAP_TYPE_ARENA: bpf_map_type = 33;
pub const bpf_map_type___MAX_BPF_MAP_TYPE: bpf_map_type = 34;
pub type bpf_map_type = core::ffi::c_uint;
pub const bpf_prog_type_BPF_PROG_TYPE_UNSPEC: bpf_prog_type = 0;
pub const bpf_prog_type_BPF_PROG_TYPE_SOCKET_FILTER: bpf_prog_type = 1;
pub const bpf_prog_type_BPF_PROG_TYPE_KPROBE: bpf_prog_type = 2;
pub const bpf_prog_type_BPF_PROG_TYPE_SCHED_CLS: bpf_prog_type = 3;
pub const bpf_prog_type_BPF_PROG_TYPE_SCHED_ACT: bpf_prog_type = 4;
pub const bpf_prog_type_BPF_PROG_TYPE_TRACEPOINT: bpf_prog_type = 5;
pub const bpf_prog_type_BPF_PROG_TYPE_XDP: bpf_prog_type = 6;
pub const bpf_prog_type_BPF_PROG_TYPE_PERF_EVENT: bpf_prog_type = 7;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SKB: bpf_prog_type = 8;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SOCK: bpf_prog_type = 9;
pub const bpf_prog_type_BPF_PROG_TYPE_LWT_IN: bpf_prog_type = 10;
pub const bpf_prog_type_BPF_PROG_TYPE_LWT_OUT: bpf_prog_type = 11;
pub const bpf_prog_type_BPF_PROG_TYPE_LWT_XMIT: bpf_prog_type = 12;
pub const bpf_prog_type_BPF_PROG_TYPE_SOCK_OPS: bpf_prog_type = 13;
pub const bpf_prog_type_BPF_PROG_TYPE_SK_SKB: bpf_prog_type = 14;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_DEVICE: bpf_prog_type = 15;
pub const bpf_prog_type_BPF_PROG_TYPE_SK_MSG: bpf_prog_type = 16;
pub const bpf_prog_type_BPF_PROG_TYPE_RAW_TRACEPOINT: bpf_prog_type = 17;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SOCK_ADDR: bpf_prog_type = 18;
pub const bpf_prog_type_BPF_PROG_TYPE_LWT_SEG6LOCAL: bpf_prog_type = 19;
pub const bpf_prog_type_BPF_PROG_TYPE_LIRC_MODE2: bpf_prog_type = 20;
pub const bpf_prog_type_BPF_PROG_TYPE_SK_REUSEPORT: bpf_prog_type = 21;
pub const bpf_prog_type_BPF_PROG_TYPE_FLOW_DISSECTOR: bpf_prog_type = 22;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SYSCTL: bpf_prog_type = 23;
pub const bpf_prog_type_BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE: bpf_prog_type = 24;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SOCKOPT: bpf_prog_type = 25;
pub const bpf_prog_type_BPF_PROG_TYPE_TRACING: bpf_prog_type = 26;
pub const bpf_prog_type_BPF_PROG_TYPE_STRUCT_OPS: bpf_prog_type = 27;
pub const bpf_prog_type_BPF_PROG_TYPE_EXT: bpf_prog_type = 28;
pub const bpf_prog_type_BPF_PROG_TYPE_LSM: bpf_prog_type = 29;
pub const bpf_prog_type_BPF_PROG_TYPE_SK_LOOKUP: bpf_prog_type = 30;
pub const bpf_prog_type_BPF_PROG_TYPE_SYSCALL: bpf_prog_type = 31;
pub const bpf_prog_type_BPF_PROG_TYPE_NETFILTER: bpf_prog_type = 32;
pub const bpf_prog_type___MAX_BPF_PROG_TYPE: bpf_prog_type = 33;
pub type bpf_prog_type = core::ffi::c_uint;
pub const bpf_attach_type_BPF_CGROUP_INET_INGRESS: bpf_attach_type = 0;
pub const bpf_attach_type_BPF_CGROUP_INET_EGRESS: bpf_attach_type = 1;
pub const bpf_attach_type_BPF_CGROUP_INET_SOCK_CREATE: bpf_attach_type = 2;
pub const bpf_attach_type_BPF_CGROUP_SOCK_OPS: bpf_attach_type = 3;
pub const bpf_attach_type_BPF_SK_SKB_STREAM_PARSER: bpf_attach_type = 4;
pub const bpf_attach_type_BPF_SK_SKB_STREAM_VERDICT: bpf_attach_type = 5;
pub const bpf_attach_type_BPF_CGROUP_DEVICE: bpf_attach_type = 6;
pub const bpf_attach_type_BPF_SK_MSG_VERDICT: bpf_attach_type = 7;
pub const bpf_attach_type_BPF_CGROUP_INET4_BIND: bpf_attach_type = 8;
pub const bpf_attach_type_BPF_CGROUP_INET6_BIND: bpf_attach_type = 9;
pub const bpf_attach_type_BPF_CGROUP_INET4_CONNECT: bpf_attach_type = 10;
pub const bpf_attach_type_BPF_CGROUP_INET6_CONNECT: bpf_attach_type = 11;
pub const bpf_attach_type_BPF_CGROUP_INET4_POST_BIND: bpf_attach_type = 12;
pub const bpf_attach_type_BPF_CGROUP_INET6_POST_BIND: bpf_attach_type = 13;
pub const bpf_attach_type_BPF_CGROUP_UDP4_SENDMSG: bpf_attach_type = 14;
pub const bpf_attach_type_BPF_CGROUP_UDP6_SENDMSG: bpf_attach_type = 15;
pub const bpf_attach_type_BPF_LIRC_MODE2: bpf_attach_type = 16;
pub const bpf_attach_type_BPF_FLOW_DISSECTOR: bpf_attach_type = 17;
pub const bpf_attach_type_BPF_CGROUP_SYSCTL: bpf_attach_type = 18;
pub const bpf_attach_type_BPF_CGROUP_UDP4_RECVMSG: bpf_attach_type = 19;
pub const bpf_attach_type_BPF_CGROUP_UDP6_RECVMSG: bpf_attach_type = 20;
pub const bpf_attach_type_BPF_CGROUP_GETSOCKOPT: bpf_attach_type = 21;
pub const bpf_attach_type_BPF_CGROUP_SETSOCKOPT: bpf_attach_type = 22;
pub const bpf_attach_type_BPF_TRACE_RAW_TP: bpf_attach_type = 23;
pub const bpf_attach_type_BPF_TRACE_FENTRY: bpf_attach_type = 24;
pub const bpf_attach_type_BPF_TRACE_FEXIT: bpf_attach_type = 25;
pub const bpf_attach_type_BPF_MODIFY_RETURN: bpf_attach_type = 26;
pub const bpf_attach_type_BPF_LSM_MAC: bpf_attach_type = 27;
pub const bpf_attach_type_BPF_TRACE_ITER: bpf_attach_type = 28;
pub const bpf_attach_type_BPF_CGROUP_INET4_GETPEERNAME: bpf_attach_type = 29;
pub const bpf_attach_type_BPF_CGROUP_INET6_GETPEERNAME: bpf_attach_type = 30;
pub const bpf_attach_type_BPF_CGROUP_INET4_GETSOCKNAME: bpf_attach_type = 31;
pub const bpf_attach_type_BPF_CGROUP_INET6_GETSOCKNAME: bpf_attach_type = 32;
pub const bpf_attach_type_BPF_XDP_DEVMAP: bpf_attach_type = 33;
pub const bpf_attach_type_BPF_CGROUP_INET_SOCK_RELEASE: bpf_attach_type = 34;
pub const bpf_attach_type_BPF_XDP_CPUMAP: bpf_attach_type = 35;
pub const bpf_attach_type_BPF_SK_LOOKUP: bpf_attach_type = 36;
pub const bpf_attach_type_BPF_XDP: bpf_attach_type = 37;
pub const bpf_attach_type_BPF_SK_SKB_VERDICT: bpf_attach_type = 38;
pub const bpf_attach_type_BPF_SK_REUSEPORT_SELECT: bpf_attach_type = 39;
pub const bpf_attach_type_BPF_SK_REUSEPORT_SELECT_OR_MIGRATE: bpf_attach_type = 40;
pub const bpf_attach_type_BPF_PERF_EVENT: bpf_attach_type = 41;
pub const bpf_attach_type_BPF_TRACE_KPROBE_MULTI: bpf_attach_type = 42;
pub const bpf_attach_type_BPF_LSM_CGROUP: bpf_attach_type = 43;
pub const bpf_attach_type_BPF_STRUCT_OPS: bpf_attach_type = 44;
pub const bpf_attach_type_BPF_NETFILTER: bpf_attach_type = 45;
pub const bpf_attach_type_BPF_TCX_INGRESS: bpf_attach_type = 46;
pub const bpf_attach_type_BPF_TCX_EGRESS: bpf_attach_type = 47;
pub const bpf_attach_type_BPF_TRACE_UPROBE_MULTI: bpf_attach_type = 48;
pub const bpf_attach_type_BPF_CGROUP_UNIX_CONNECT: bpf_attach_type = 49;
pub const bpf_attach_type_BPF_CGROUP_UNIX_SENDMSG: bpf_attach_type = 50;
pub const bpf_attach_type_BPF_CGROUP_UNIX_RECVMSG: bpf_attach_type = 51;
pub const bpf_attach_type_BPF_CGROUP_UNIX_GETPEERNAME: bpf_attach_type = 52;
pub const bpf_attach_type_BPF_CGROUP_UNIX_GETSOCKNAME: bpf_attach_type = 53;
pub const bpf_attach_type_BPF_NETKIT_PRIMARY: bpf_attach_type = 54;
pub const bpf_attach_type_BPF_NETKIT_PEER: bpf_attach_type = 55;
pub const bpf_attach_type_BPF_TRACE_KPROBE_SESSION: bpf_attach_type = 56;
pub const bpf_attach_type___MAX_BPF_ATTACH_TYPE: bpf_attach_type = 57;
pub type bpf_attach_type = core::ffi::c_uint;
pub const bpf_link_type_BPF_LINK_TYPE_UNSPEC: bpf_link_type = 0;
pub const bpf_link_type_BPF_LINK_TYPE_RAW_TRACEPOINT: bpf_link_type = 1;
pub const bpf_link_type_BPF_LINK_TYPE_TRACING: bpf_link_type = 2;
pub const bpf_link_type_BPF_LINK_TYPE_CGROUP: bpf_link_type = 3;
pub const bpf_link_type_BPF_LINK_TYPE_ITER: bpf_link_type = 4;
pub const bpf_link_type_BPF_LINK_TYPE_NETNS: bpf_link_type = 5;
pub const bpf_link_type_BPF_LINK_TYPE_XDP: bpf_link_type = 6;
pub const bpf_link_type_BPF_LINK_TYPE_PERF_EVENT: bpf_link_type = 7;
pub const bpf_link_type_BPF_LINK_TYPE_KPROBE_MULTI: bpf_link_type = 8;
pub const bpf_link_type_BPF_LINK_TYPE_STRUCT_OPS: bpf_link_type = 9;
pub const bpf_link_type_BPF_LINK_TYPE_NETFILTER: bpf_link_type = 10;
pub const bpf_link_type_BPF_LINK_TYPE_TCX: bpf_link_type = 11;
pub const bpf_link_type_BPF_LINK_TYPE_UPROBE_MULTI: bpf_link_type = 12;
pub const bpf_link_type_BPF_LINK_TYPE_NETKIT: bpf_link_type = 13;
pub const bpf_link_type_BPF_LINK_TYPE_SOCKMAP: bpf_link_type = 14;
pub const bpf_link_type___MAX_BPF_LINK_TYPE: bpf_link_type = 15;
pub type bpf_link_type = core::ffi::c_uint;
pub const bpf_perf_event_type_BPF_PERF_EVENT_UNSPEC: bpf_perf_event_type = 0;
pub const bpf_perf_event_type_BPF_PERF_EVENT_UPROBE: bpf_perf_event_type = 1;
pub const bpf_perf_event_type_BPF_PERF_EVENT_URETPROBE: bpf_perf_event_type = 2;
pub const bpf_perf_event_type_BPF_PERF_EVENT_KPROBE: bpf_perf_event_type = 3;
pub const bpf_perf_event_type_BPF_PERF_EVENT_KRETPROBE: bpf_perf_event_type = 4;
pub const bpf_perf_event_type_BPF_PERF_EVENT_TRACEPOINT: bpf_perf_event_type = 5;
pub const bpf_perf_event_type_BPF_PERF_EVENT_EVENT: bpf_perf_event_type = 6;
pub type bpf_perf_event_type = core::ffi::c_uint;
pub const BPF_F_KPROBE_MULTI_RETURN: _bindgen_ty_177 = 1;
pub type _bindgen_ty_177 = core::ffi::c_uint;
pub const BPF_F_UPROBE_MULTI_RETURN: _bindgen_ty_178 = 1;
pub type _bindgen_ty_178 = core::ffi::c_uint;
pub const bpf_addr_space_cast_BPF_ADDR_SPACE_CAST: bpf_addr_space_cast = 1;
pub type bpf_addr_space_cast = core::ffi::c_uint;
pub const BPF_ANY: _bindgen_ty_179 = 0;
pub const BPF_NOEXIST: _bindgen_ty_179 = 1;
pub const BPF_EXIST: _bindgen_ty_179 = 2;
pub const BPF_F_LOCK: _bindgen_ty_179 = 4;
pub type _bindgen_ty_179 = core::ffi::c_uint;
pub const BPF_F_NO_PREALLOC: _bindgen_ty_180 = 1;
pub const BPF_F_NO_COMMON_LRU: _bindgen_ty_180 = 2;
pub const BPF_F_NUMA_NODE: _bindgen_ty_180 = 4;
pub const BPF_F_RDONLY: _bindgen_ty_180 = 8;
pub const BPF_F_WRONLY: _bindgen_ty_180 = 16;
pub const BPF_F_STACK_BUILD_ID: _bindgen_ty_180 = 32;
pub const BPF_F_ZERO_SEED: _bindgen_ty_180 = 64;
pub const BPF_F_RDONLY_PROG: _bindgen_ty_180 = 128;
pub const BPF_F_WRONLY_PROG: _bindgen_ty_180 = 256;
pub const BPF_F_CLONE: _bindgen_ty_180 = 512;
pub const BPF_F_MMAPABLE: _bindgen_ty_180 = 1024;
pub const BPF_F_PRESERVE_ELEMS: _bindgen_ty_180 = 2048;
pub const BPF_F_INNER_MAP: _bindgen_ty_180 = 4096;
pub const BPF_F_LINK: _bindgen_ty_180 = 8192;
pub const BPF_F_PATH_FD: _bindgen_ty_180 = 16384;
pub const BPF_F_VTYPE_BTF_OBJ_FD: _bindgen_ty_180 = 32768;
pub const BPF_F_TOKEN_FD: _bindgen_ty_180 = 65536;
pub const BPF_F_SEGV_ON_FAULT: _bindgen_ty_180 = 131072;
pub const BPF_F_NO_USER_CONV: _bindgen_ty_180 = 262144;
pub type _bindgen_ty_180 = core::ffi::c_uint;
pub const bpf_stats_type_BPF_STATS_RUN_TIME: bpf_stats_type = 0;
pub type bpf_stats_type = core::ffi::c_uint;
pub const bpf_stack_build_id_status_BPF_STACK_BUILD_ID_EMPTY: bpf_stack_build_id_status = 0;
pub const bpf_stack_build_id_status_BPF_STACK_BUILD_ID_VALID: bpf_stack_build_id_status = 1;
pub const bpf_stack_build_id_status_BPF_STACK_BUILD_ID_IP: bpf_stack_build_id_status = 2;
pub type bpf_stack_build_id_status = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_stack_build_id {
    pub status: __s32,
    pub build_id: [core::ffi::c_uchar; 20usize],
    pub __bindgen_anon_1: bpf_stack_build_id__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_stack_build_id__bindgen_ty_1 {
    pub offset: __u64,
    pub ip: __u64,
}
impl Default for bpf_stack_build_id__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_stack_build_id {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_2,
    pub batch: bpf_attr__bindgen_ty_3,
    pub __bindgen_anon_3: bpf_attr__bindgen_ty_4,
    pub __bindgen_anon_4: bpf_attr__bindgen_ty_5,
    pub __bindgen_anon_5: bpf_attr__bindgen_ty_6,
    pub test: bpf_attr__bindgen_ty_7,
    pub __bindgen_anon_6: bpf_attr__bindgen_ty_8,
    pub info: bpf_attr__bindgen_ty_9,
    pub query: bpf_attr__bindgen_ty_10,
    pub raw_tracepoint: bpf_attr__bindgen_ty_11,
    pub __bindgen_anon_7: bpf_attr__bindgen_ty_12,
    pub task_fd_query: bpf_attr__bindgen_ty_13,
    pub link_create: bpf_attr__bindgen_ty_14,
    pub link_update: bpf_attr__bindgen_ty_15,
    pub link_detach: bpf_attr__bindgen_ty_16,
    pub enable_stats: bpf_attr__bindgen_ty_17,
    pub iter_create: bpf_attr__bindgen_ty_18,
    pub prog_bind_map: bpf_attr__bindgen_ty_19,
    pub token_create: bpf_attr__bindgen_ty_20,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_1 {
    pub map_type: __u32,
    pub key_size: __u32,
    pub value_size: __u32,
    pub max_entries: __u32,
    pub map_flags: __u32,
    pub inner_map_fd: __u32,
    pub numa_node: __u32,
    pub map_name: [core::ffi::c_char; 16usize],
    pub map_ifindex: __u32,
    pub btf_fd: __u32,
    pub btf_key_type_id: __u32,
    pub btf_value_type_id: __u32,
    pub btf_vmlinux_value_type_id: __u32,
    pub map_extra: __u64,
    pub value_type_btf_obj_fd: __s32,
    pub map_token_fd: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_2 {
    pub map_fd: __u32,
    pub key: __u64,
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_2__bindgen_ty_1,
    pub flags: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_2__bindgen_ty_1 {
    pub value: __u64,
    pub next_key: __u64,
}
impl Default for bpf_attr__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_3 {
    pub in_batch: __u64,
    pub out_batch: __u64,
    pub keys: __u64,
    pub values: __u64,
    pub count: __u32,
    pub map_fd: __u32,
    pub elem_flags: __u64,
    pub flags: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_4 {
    pub prog_type: __u32,
    pub insn_cnt: __u32,
    pub insns: __u64,
    pub license: __u64,
    pub log_level: __u32,
    pub log_size: __u32,
    pub log_buf: __u64,
    pub kern_version: __u32,
    pub prog_flags: __u32,
    pub prog_name: [core::ffi::c_char; 16usize],
    pub prog_ifindex: __u32,
    pub expected_attach_type: __u32,
    pub prog_btf_fd: __u32,
    pub func_info_rec_size: __u32,
    pub func_info: __u64,
    pub func_info_cnt: __u32,
    pub line_info_rec_size: __u32,
    pub line_info: __u64,
    pub line_info_cnt: __u32,
    pub attach_btf_id: __u32,
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_4__bindgen_ty_1,
    pub core_relo_cnt: __u32,
    pub fd_array: __u64,
    pub core_relos: __u64,
    pub core_relo_rec_size: __u32,
    pub log_true_size: __u32,
    pub prog_token_fd: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_4__bindgen_ty_1 {
    pub attach_prog_fd: __u32,
    pub attach_btf_obj_fd: __u32,
}
impl Default for bpf_attr__bindgen_ty_4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_5 {
    pub pathname: __u64,
    pub bpf_fd: __u32,
    pub file_flags: __u32,
    pub path_fd: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_6 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_6__bindgen_ty_1,
    pub attach_bpf_fd: __u32,
    pub attach_type: __u32,
    pub attach_flags: __u32,
    pub replace_bpf_fd: __u32,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_6__bindgen_ty_2,
    pub expected_revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_6__bindgen_ty_1 {
    pub target_fd: __u32,
    pub target_ifindex: __u32,
}
impl Default for bpf_attr__bindgen_ty_6__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_6__bindgen_ty_2 {
    pub relative_fd: __u32,
    pub relative_id: __u32,
}
impl Default for bpf_attr__bindgen_ty_6__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_7 {
    pub prog_fd: __u32,
    pub retval: __u32,
    pub data_size_in: __u32,
    pub data_size_out: __u32,
    pub data_in: __u64,
    pub data_out: __u64,
    pub repeat: __u32,
    pub duration: __u32,
    pub ctx_size_in: __u32,
    pub ctx_size_out: __u32,
    pub ctx_in: __u64,
    pub ctx_out: __u64,
    pub flags: __u32,
    pub cpu: __u32,
    pub batch_size: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_8 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_8__bindgen_ty_1,
    pub next_id: __u32,
    pub open_flags: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_8__bindgen_ty_1 {
    pub start_id: __u32,
    pub prog_id: __u32,
    pub map_id: __u32,
    pub btf_id: __u32,
    pub link_id: __u32,
}
impl Default for bpf_attr__bindgen_ty_8__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_9 {
    pub bpf_fd: __u32,
    pub info_len: __u32,
    pub info: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_10 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_10__bindgen_ty_1,
    pub attach_type: __u32,
    pub query_flags: __u32,
    pub attach_flags: __u32,
    pub prog_ids: __u64,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_10__bindgen_ty_2,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub prog_attach_flags: __u64,
    pub link_ids: __u64,
    pub link_attach_flags: __u64,
    pub revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_10__bindgen_ty_1 {
    pub target_fd: __u32,
    pub target_ifindex: __u32,
}
impl Default for bpf_attr__bindgen_ty_10__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_10__bindgen_ty_2 {
    pub prog_cnt: __u32,
    pub count: __u32,
}
impl Default for bpf_attr__bindgen_ty_10__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_attr__bindgen_ty_10 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_11 {
    pub name: __u64,
    pub prog_fd: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub cookie: __u64,
}
impl bpf_attr__bindgen_ty_11 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_12 {
    pub btf: __u64,
    pub btf_log_buf: __u64,
    pub btf_size: __u32,
    pub btf_log_size: __u32,
    pub btf_log_level: __u32,
    pub btf_log_true_size: __u32,
    pub btf_flags: __u32,
    pub btf_token_fd: __s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_13 {
    pub pid: __u32,
    pub fd: __u32,
    pub flags: __u32,
    pub buf_len: __u32,
    pub buf: __u64,
    pub prog_id: __u32,
    pub fd_type: __u32,
    pub probe_offset: __u64,
    pub probe_addr: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_14__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_14__bindgen_ty_2,
    pub attach_type: __u32,
    pub flags: __u32,
    pub __bindgen_anon_3: bpf_attr__bindgen_ty_14__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_1 {
    pub prog_fd: __u32,
    pub map_fd: __u32,
}
impl Default for bpf_attr__bindgen_ty_14__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_2 {
    pub target_fd: __u32,
    pub target_ifindex: __u32,
}
impl Default for bpf_attr__bindgen_ty_14__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_3 {
    pub target_btf_id: __u32,
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1,
    pub perf_event: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2,
    pub kprobe_multi: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3,
    pub tracing: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4,
    pub netfilter: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5,
    pub tcx: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6,
    pub uprobe_multi: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7,
    pub netkit: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1 {
    pub iter_info: __u64,
    pub iter_info_len: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2 {
    pub bpf_cookie: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3 {
    pub flags: __u32,
    pub cnt: __u32,
    pub syms: __u64,
    pub addrs: __u64,
    pub cookies: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4 {
    pub target_btf_id: __u32,
    pub cookie: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5 {
    pub pf: __u32,
    pub hooknum: __u32,
    pub priority: __s32,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1,
    pub expected_revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1 {
    pub relative_fd: __u32,
    pub relative_id: __u32,
}
impl Default for bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7 {
    pub path: __u64,
    pub offsets: __u64,
    pub ref_ctr_offsets: __u64,
    pub cookies: __u64,
    pub cnt: __u32,
    pub flags: __u32,
    pub pid: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1,
    pub expected_revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1 {
    pub relative_fd: __u32,
    pub relative_id: __u32,
}
impl Default for bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_14__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_15 {
    pub link_fd: __u32,
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_15__bindgen_ty_1,
    pub flags: __u32,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_15__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_15__bindgen_ty_1 {
    pub new_prog_fd: __u32,
    pub new_map_fd: __u32,
}
impl Default for bpf_attr__bindgen_ty_15__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_15__bindgen_ty_2 {
    pub old_prog_fd: __u32,
    pub old_map_fd: __u32,
}
impl Default for bpf_attr__bindgen_ty_15__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_attr__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_16 {
    pub link_fd: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_17 {
    pub type_: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_18 {
    pub link_fd: __u32,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_19 {
    pub prog_fd: __u32,
    pub map_fd: __u32,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_20 {
    pub flags: __u32,
    pub bpffs_fd: __u32,
}
impl Default for bpf_attr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const bpf_func_id_BPF_FUNC_unspec: bpf_func_id = 0;
pub const bpf_func_id_BPF_FUNC_map_lookup_elem: bpf_func_id = 1;
pub const bpf_func_id_BPF_FUNC_map_update_elem: bpf_func_id = 2;
pub const bpf_func_id_BPF_FUNC_map_delete_elem: bpf_func_id = 3;
pub const bpf_func_id_BPF_FUNC_probe_read: bpf_func_id = 4;
pub const bpf_func_id_BPF_FUNC_ktime_get_ns: bpf_func_id = 5;
pub const bpf_func_id_BPF_FUNC_trace_printk: bpf_func_id = 6;
pub const bpf_func_id_BPF_FUNC_get_prandom_u32: bpf_func_id = 7;
pub const bpf_func_id_BPF_FUNC_get_smp_processor_id: bpf_func_id = 8;
pub const bpf_func_id_BPF_FUNC_skb_store_bytes: bpf_func_id = 9;
pub const bpf_func_id_BPF_FUNC_l3_csum_replace: bpf_func_id = 10;
pub const bpf_func_id_BPF_FUNC_l4_csum_replace: bpf_func_id = 11;
pub const bpf_func_id_BPF_FUNC_tail_call: bpf_func_id = 12;
pub const bpf_func_id_BPF_FUNC_clone_redirect: bpf_func_id = 13;
pub const bpf_func_id_BPF_FUNC_get_current_pid_tgid: bpf_func_id = 14;
pub const bpf_func_id_BPF_FUNC_get_current_uid_gid: bpf_func_id = 15;
pub const bpf_func_id_BPF_FUNC_get_current_comm: bpf_func_id = 16;
pub const bpf_func_id_BPF_FUNC_get_cgroup_classid: bpf_func_id = 17;
pub const bpf_func_id_BPF_FUNC_skb_vlan_push: bpf_func_id = 18;
pub const bpf_func_id_BPF_FUNC_skb_vlan_pop: bpf_func_id = 19;
pub const bpf_func_id_BPF_FUNC_skb_get_tunnel_key: bpf_func_id = 20;
pub const bpf_func_id_BPF_FUNC_skb_set_tunnel_key: bpf_func_id = 21;
pub const bpf_func_id_BPF_FUNC_perf_event_read: bpf_func_id = 22;
pub const bpf_func_id_BPF_FUNC_redirect: bpf_func_id = 23;
pub const bpf_func_id_BPF_FUNC_get_route_realm: bpf_func_id = 24;
pub const bpf_func_id_BPF_FUNC_perf_event_output: bpf_func_id = 25;
pub const bpf_func_id_BPF_FUNC_skb_load_bytes: bpf_func_id = 26;
pub const bpf_func_id_BPF_FUNC_get_stackid: bpf_func_id = 27;
pub const bpf_func_id_BPF_FUNC_csum_diff: bpf_func_id = 28;
pub const bpf_func_id_BPF_FUNC_skb_get_tunnel_opt: bpf_func_id = 29;
pub const bpf_func_id_BPF_FUNC_skb_set_tunnel_opt: bpf_func_id = 30;
pub const bpf_func_id_BPF_FUNC_skb_change_proto: bpf_func_id = 31;
pub const bpf_func_id_BPF_FUNC_skb_change_type: bpf_func_id = 32;
pub const bpf_func_id_BPF_FUNC_skb_under_cgroup: bpf_func_id = 33;
pub const bpf_func_id_BPF_FUNC_get_hash_recalc: bpf_func_id = 34;
pub const bpf_func_id_BPF_FUNC_get_current_task: bpf_func_id = 35;
pub const bpf_func_id_BPF_FUNC_probe_write_user: bpf_func_id = 36;
pub const bpf_func_id_BPF_FUNC_current_task_under_cgroup: bpf_func_id = 37;
pub const bpf_func_id_BPF_FUNC_skb_change_tail: bpf_func_id = 38;
pub const bpf_func_id_BPF_FUNC_skb_pull_data: bpf_func_id = 39;
pub const bpf_func_id_BPF_FUNC_csum_update: bpf_func_id = 40;
pub const bpf_func_id_BPF_FUNC_set_hash_invalid: bpf_func_id = 41;
pub const bpf_func_id_BPF_FUNC_get_numa_node_id: bpf_func_id = 42;
pub const bpf_func_id_BPF_FUNC_skb_change_head: bpf_func_id = 43;
pub const bpf_func_id_BPF_FUNC_xdp_adjust_head: bpf_func_id = 44;
pub const bpf_func_id_BPF_FUNC_probe_read_str: bpf_func_id = 45;
pub const bpf_func_id_BPF_FUNC_get_socket_cookie: bpf_func_id = 46;
pub const bpf_func_id_BPF_FUNC_get_socket_uid: bpf_func_id = 47;
pub const bpf_func_id_BPF_FUNC_set_hash: bpf_func_id = 48;
pub const bpf_func_id_BPF_FUNC_setsockopt: bpf_func_id = 49;
pub const bpf_func_id_BPF_FUNC_skb_adjust_room: bpf_func_id = 50;
pub const bpf_func_id_BPF_FUNC_redirect_map: bpf_func_id = 51;
pub const bpf_func_id_BPF_FUNC_sk_redirect_map: bpf_func_id = 52;
pub const bpf_func_id_BPF_FUNC_sock_map_update: bpf_func_id = 53;
pub const bpf_func_id_BPF_FUNC_xdp_adjust_meta: bpf_func_id = 54;
pub const bpf_func_id_BPF_FUNC_perf_event_read_value: bpf_func_id = 55;
pub const bpf_func_id_BPF_FUNC_perf_prog_read_value: bpf_func_id = 56;
pub const bpf_func_id_BPF_FUNC_getsockopt: bpf_func_id = 57;
pub const bpf_func_id_BPF_FUNC_override_return: bpf_func_id = 58;
pub const bpf_func_id_BPF_FUNC_sock_ops_cb_flags_set: bpf_func_id = 59;
pub const bpf_func_id_BPF_FUNC_msg_redirect_map: bpf_func_id = 60;
pub const bpf_func_id_BPF_FUNC_msg_apply_bytes: bpf_func_id = 61;
pub const bpf_func_id_BPF_FUNC_msg_cork_bytes: bpf_func_id = 62;
pub const bpf_func_id_BPF_FUNC_msg_pull_data: bpf_func_id = 63;
pub const bpf_func_id_BPF_FUNC_bind: bpf_func_id = 64;
pub const bpf_func_id_BPF_FUNC_xdp_adjust_tail: bpf_func_id = 65;
pub const bpf_func_id_BPF_FUNC_skb_get_xfrm_state: bpf_func_id = 66;
pub const bpf_func_id_BPF_FUNC_get_stack: bpf_func_id = 67;
pub const bpf_func_id_BPF_FUNC_skb_load_bytes_relative: bpf_func_id = 68;
pub const bpf_func_id_BPF_FUNC_fib_lookup: bpf_func_id = 69;
pub const bpf_func_id_BPF_FUNC_sock_hash_update: bpf_func_id = 70;
pub const bpf_func_id_BPF_FUNC_msg_redirect_hash: bpf_func_id = 71;
pub const bpf_func_id_BPF_FUNC_sk_redirect_hash: bpf_func_id = 72;
pub const bpf_func_id_BPF_FUNC_lwt_push_encap: bpf_func_id = 73;
pub const bpf_func_id_BPF_FUNC_lwt_seg6_store_bytes: bpf_func_id = 74;
pub const bpf_func_id_BPF_FUNC_lwt_seg6_adjust_srh: bpf_func_id = 75;
pub const bpf_func_id_BPF_FUNC_lwt_seg6_action: bpf_func_id = 76;
pub const bpf_func_id_BPF_FUNC_rc_repeat: bpf_func_id = 77;
pub const bpf_func_id_BPF_FUNC_rc_keydown: bpf_func_id = 78;
pub const bpf_func_id_BPF_FUNC_skb_cgroup_id: bpf_func_id = 79;
pub const bpf_func_id_BPF_FUNC_get_current_cgroup_id: bpf_func_id = 80;
pub const bpf_func_id_BPF_FUNC_get_local_storage: bpf_func_id = 81;
pub const bpf_func_id_BPF_FUNC_sk_select_reuseport: bpf_func_id = 82;
pub const bpf_func_id_BPF_FUNC_skb_ancestor_cgroup_id: bpf_func_id = 83;
pub const bpf_func_id_BPF_FUNC_sk_lookup_tcp: bpf_func_id = 84;
pub const bpf_func_id_BPF_FUNC_sk_lookup_udp: bpf_func_id = 85;
pub const bpf_func_id_BPF_FUNC_sk_release: bpf_func_id = 86;
pub const bpf_func_id_BPF_FUNC_map_push_elem: bpf_func_id = 87;
pub const bpf_func_id_BPF_FUNC_map_pop_elem: bpf_func_id = 88;
pub const bpf_func_id_BPF_FUNC_map_peek_elem: bpf_func_id = 89;
pub const bpf_func_id_BPF_FUNC_msg_push_data: bpf_func_id = 90;
pub const bpf_func_id_BPF_FUNC_msg_pop_data: bpf_func_id = 91;
pub const bpf_func_id_BPF_FUNC_rc_pointer_rel: bpf_func_id = 92;
pub const bpf_func_id_BPF_FUNC_spin_lock: bpf_func_id = 93;
pub const bpf_func_id_BPF_FUNC_spin_unlock: bpf_func_id = 94;
pub const bpf_func_id_BPF_FUNC_sk_fullsock: bpf_func_id = 95;
pub const bpf_func_id_BPF_FUNC_tcp_sock: bpf_func_id = 96;
pub const bpf_func_id_BPF_FUNC_skb_ecn_set_ce: bpf_func_id = 97;
pub const bpf_func_id_BPF_FUNC_get_listener_sock: bpf_func_id = 98;
pub const bpf_func_id_BPF_FUNC_skc_lookup_tcp: bpf_func_id = 99;
pub const bpf_func_id_BPF_FUNC_tcp_check_syncookie: bpf_func_id = 100;
pub const bpf_func_id_BPF_FUNC_sysctl_get_name: bpf_func_id = 101;
pub const bpf_func_id_BPF_FUNC_sysctl_get_current_value: bpf_func_id = 102;
pub const bpf_func_id_BPF_FUNC_sysctl_get_new_value: bpf_func_id = 103;
pub const bpf_func_id_BPF_FUNC_sysctl_set_new_value: bpf_func_id = 104;
pub const bpf_func_id_BPF_FUNC_strtol: bpf_func_id = 105;
pub const bpf_func_id_BPF_FUNC_strtoul: bpf_func_id = 106;
pub const bpf_func_id_BPF_FUNC_sk_storage_get: bpf_func_id = 107;
pub const bpf_func_id_BPF_FUNC_sk_storage_delete: bpf_func_id = 108;
pub const bpf_func_id_BPF_FUNC_send_signal: bpf_func_id = 109;
pub const bpf_func_id_BPF_FUNC_tcp_gen_syncookie: bpf_func_id = 110;
pub const bpf_func_id_BPF_FUNC_skb_output: bpf_func_id = 111;
pub const bpf_func_id_BPF_FUNC_probe_read_user: bpf_func_id = 112;
pub const bpf_func_id_BPF_FUNC_probe_read_kernel: bpf_func_id = 113;
pub const bpf_func_id_BPF_FUNC_probe_read_user_str: bpf_func_id = 114;
pub const bpf_func_id_BPF_FUNC_probe_read_kernel_str: bpf_func_id = 115;
pub const bpf_func_id_BPF_FUNC_tcp_send_ack: bpf_func_id = 116;
pub const bpf_func_id_BPF_FUNC_send_signal_thread: bpf_func_id = 117;
pub const bpf_func_id_BPF_FUNC_jiffies64: bpf_func_id = 118;
pub const bpf_func_id_BPF_FUNC_read_branch_records: bpf_func_id = 119;
pub const bpf_func_id_BPF_FUNC_get_ns_current_pid_tgid: bpf_func_id = 120;
pub const bpf_func_id_BPF_FUNC_xdp_output: bpf_func_id = 121;
pub const bpf_func_id_BPF_FUNC_get_netns_cookie: bpf_func_id = 122;
pub const bpf_func_id_BPF_FUNC_get_current_ancestor_cgroup_id: bpf_func_id = 123;
pub const bpf_func_id_BPF_FUNC_sk_assign: bpf_func_id = 124;
pub const bpf_func_id_BPF_FUNC_ktime_get_boot_ns: bpf_func_id = 125;
pub const bpf_func_id_BPF_FUNC_seq_printf: bpf_func_id = 126;
pub const bpf_func_id_BPF_FUNC_seq_write: bpf_func_id = 127;
pub const bpf_func_id_BPF_FUNC_sk_cgroup_id: bpf_func_id = 128;
pub const bpf_func_id_BPF_FUNC_sk_ancestor_cgroup_id: bpf_func_id = 129;
pub const bpf_func_id_BPF_FUNC_ringbuf_output: bpf_func_id = 130;
pub const bpf_func_id_BPF_FUNC_ringbuf_reserve: bpf_func_id = 131;
pub const bpf_func_id_BPF_FUNC_ringbuf_submit: bpf_func_id = 132;
pub const bpf_func_id_BPF_FUNC_ringbuf_discard: bpf_func_id = 133;
pub const bpf_func_id_BPF_FUNC_ringbuf_query: bpf_func_id = 134;
pub const bpf_func_id_BPF_FUNC_csum_level: bpf_func_id = 135;
pub const bpf_func_id_BPF_FUNC_skc_to_tcp6_sock: bpf_func_id = 136;
pub const bpf_func_id_BPF_FUNC_skc_to_tcp_sock: bpf_func_id = 137;
pub const bpf_func_id_BPF_FUNC_skc_to_tcp_timewait_sock: bpf_func_id = 138;
pub const bpf_func_id_BPF_FUNC_skc_to_tcp_request_sock: bpf_func_id = 139;
pub const bpf_func_id_BPF_FUNC_skc_to_udp6_sock: bpf_func_id = 140;
pub const bpf_func_id_BPF_FUNC_get_task_stack: bpf_func_id = 141;
pub const bpf_func_id_BPF_FUNC_load_hdr_opt: bpf_func_id = 142;
pub const bpf_func_id_BPF_FUNC_store_hdr_opt: bpf_func_id = 143;
pub const bpf_func_id_BPF_FUNC_reserve_hdr_opt: bpf_func_id = 144;
pub const bpf_func_id_BPF_FUNC_inode_storage_get: bpf_func_id = 145;
pub const bpf_func_id_BPF_FUNC_inode_storage_delete: bpf_func_id = 146;
pub const bpf_func_id_BPF_FUNC_d_path: bpf_func_id = 147;
pub const bpf_func_id_BPF_FUNC_copy_from_user: bpf_func_id = 148;
pub const bpf_func_id_BPF_FUNC_snprintf_btf: bpf_func_id = 149;
pub const bpf_func_id_BPF_FUNC_seq_printf_btf: bpf_func_id = 150;
pub const bpf_func_id_BPF_FUNC_skb_cgroup_classid: bpf_func_id = 151;
pub const bpf_func_id_BPF_FUNC_redirect_neigh: bpf_func_id = 152;
pub const bpf_func_id_BPF_FUNC_per_cpu_ptr: bpf_func_id = 153;
pub const bpf_func_id_BPF_FUNC_this_cpu_ptr: bpf_func_id = 154;
pub const bpf_func_id_BPF_FUNC_redirect_peer: bpf_func_id = 155;
pub const bpf_func_id_BPF_FUNC_task_storage_get: bpf_func_id = 156;
pub const bpf_func_id_BPF_FUNC_task_storage_delete: bpf_func_id = 157;
pub const bpf_func_id_BPF_FUNC_get_current_task_btf: bpf_func_id = 158;
pub const bpf_func_id_BPF_FUNC_bprm_opts_set: bpf_func_id = 159;
pub const bpf_func_id_BPF_FUNC_ktime_get_coarse_ns: bpf_func_id = 160;
pub const bpf_func_id_BPF_FUNC_ima_inode_hash: bpf_func_id = 161;
pub const bpf_func_id_BPF_FUNC_sock_from_file: bpf_func_id = 162;
pub const bpf_func_id_BPF_FUNC_check_mtu: bpf_func_id = 163;
pub const bpf_func_id_BPF_FUNC_for_each_map_elem: bpf_func_id = 164;
pub const bpf_func_id_BPF_FUNC_snprintf: bpf_func_id = 165;
pub const bpf_func_id_BPF_FUNC_sys_bpf: bpf_func_id = 166;
pub const bpf_func_id_BPF_FUNC_btf_find_by_name_kind: bpf_func_id = 167;
pub const bpf_func_id_BPF_FUNC_sys_close: bpf_func_id = 168;
pub const bpf_func_id_BPF_FUNC_timer_init: bpf_func_id = 169;
pub const bpf_func_id_BPF_FUNC_timer_set_callback: bpf_func_id = 170;
pub const bpf_func_id_BPF_FUNC_timer_start: bpf_func_id = 171;
pub const bpf_func_id_BPF_FUNC_timer_cancel: bpf_func_id = 172;
pub const bpf_func_id_BPF_FUNC_get_func_ip: bpf_func_id = 173;
pub const bpf_func_id_BPF_FUNC_get_attach_cookie: bpf_func_id = 174;
pub const bpf_func_id_BPF_FUNC_task_pt_regs: bpf_func_id = 175;
pub const bpf_func_id_BPF_FUNC_get_branch_snapshot: bpf_func_id = 176;
pub const bpf_func_id_BPF_FUNC_trace_vprintk: bpf_func_id = 177;
pub const bpf_func_id_BPF_FUNC_skc_to_unix_sock: bpf_func_id = 178;
pub const bpf_func_id_BPF_FUNC_kallsyms_lookup_name: bpf_func_id = 179;
pub const bpf_func_id_BPF_FUNC_find_vma: bpf_func_id = 180;
pub const bpf_func_id_BPF_FUNC_loop: bpf_func_id = 181;
pub const bpf_func_id_BPF_FUNC_strncmp: bpf_func_id = 182;
pub const bpf_func_id_BPF_FUNC_get_func_arg: bpf_func_id = 183;
pub const bpf_func_id_BPF_FUNC_get_func_ret: bpf_func_id = 184;
pub const bpf_func_id_BPF_FUNC_get_func_arg_cnt: bpf_func_id = 185;
pub const bpf_func_id_BPF_FUNC_get_retval: bpf_func_id = 186;
pub const bpf_func_id_BPF_FUNC_set_retval: bpf_func_id = 187;
pub const bpf_func_id_BPF_FUNC_xdp_get_buff_len: bpf_func_id = 188;
pub const bpf_func_id_BPF_FUNC_xdp_load_bytes: bpf_func_id = 189;
pub const bpf_func_id_BPF_FUNC_xdp_store_bytes: bpf_func_id = 190;
pub const bpf_func_id_BPF_FUNC_copy_from_user_task: bpf_func_id = 191;
pub const bpf_func_id_BPF_FUNC_skb_set_tstamp: bpf_func_id = 192;
pub const bpf_func_id_BPF_FUNC_ima_file_hash: bpf_func_id = 193;
pub const bpf_func_id_BPF_FUNC_kptr_xchg: bpf_func_id = 194;
pub const bpf_func_id_BPF_FUNC_map_lookup_percpu_elem: bpf_func_id = 195;
pub const bpf_func_id_BPF_FUNC_skc_to_mptcp_sock: bpf_func_id = 196;
pub const bpf_func_id_BPF_FUNC_dynptr_from_mem: bpf_func_id = 197;
pub const bpf_func_id_BPF_FUNC_ringbuf_reserve_dynptr: bpf_func_id = 198;
pub const bpf_func_id_BPF_FUNC_ringbuf_submit_dynptr: bpf_func_id = 199;
pub const bpf_func_id_BPF_FUNC_ringbuf_discard_dynptr: bpf_func_id = 200;
pub const bpf_func_id_BPF_FUNC_dynptr_read: bpf_func_id = 201;
pub const bpf_func_id_BPF_FUNC_dynptr_write: bpf_func_id = 202;
pub const bpf_func_id_BPF_FUNC_dynptr_data: bpf_func_id = 203;
pub const bpf_func_id_BPF_FUNC_tcp_raw_gen_syncookie_ipv4: bpf_func_id = 204;
pub const bpf_func_id_BPF_FUNC_tcp_raw_gen_syncookie_ipv6: bpf_func_id = 205;
pub const bpf_func_id_BPF_FUNC_tcp_raw_check_syncookie_ipv4: bpf_func_id = 206;
pub const bpf_func_id_BPF_FUNC_tcp_raw_check_syncookie_ipv6: bpf_func_id = 207;
pub const bpf_func_id_BPF_FUNC_ktime_get_tai_ns: bpf_func_id = 208;
pub const bpf_func_id_BPF_FUNC_user_ringbuf_drain: bpf_func_id = 209;
pub const bpf_func_id_BPF_FUNC_cgrp_storage_get: bpf_func_id = 210;
pub const bpf_func_id_BPF_FUNC_cgrp_storage_delete: bpf_func_id = 211;
pub const bpf_func_id___BPF_FUNC_MAX_ID: bpf_func_id = 212;
pub type bpf_func_id = core::ffi::c_uint;
pub const BPF_F_RECOMPUTE_CSUM: _bindgen_ty_181 = 1;
pub const BPF_F_INVALIDATE_HASH: _bindgen_ty_181 = 2;
pub type _bindgen_ty_181 = core::ffi::c_uint;
pub const BPF_F_HDR_FIELD_MASK: _bindgen_ty_182 = 15;
pub type _bindgen_ty_182 = core::ffi::c_uint;
pub const BPF_F_PSEUDO_HDR: _bindgen_ty_183 = 16;
pub const BPF_F_MARK_MANGLED_0: _bindgen_ty_183 = 32;
pub const BPF_F_MARK_ENFORCE: _bindgen_ty_183 = 64;
pub type _bindgen_ty_183 = core::ffi::c_uint;
pub const BPF_F_INGRESS: _bindgen_ty_184 = 1;
pub type _bindgen_ty_184 = core::ffi::c_uint;
pub const BPF_F_TUNINFO_IPV6: _bindgen_ty_185 = 1;
pub type _bindgen_ty_185 = core::ffi::c_uint;
pub const BPF_F_SKIP_FIELD_MASK: _bindgen_ty_186 = 255;
pub const BPF_F_USER_STACK: _bindgen_ty_186 = 256;
pub const BPF_F_FAST_STACK_CMP: _bindgen_ty_186 = 512;
pub const BPF_F_REUSE_STACKID: _bindgen_ty_186 = 1024;
pub const BPF_F_USER_BUILD_ID: _bindgen_ty_186 = 2048;
pub type _bindgen_ty_186 = core::ffi::c_uint;
pub const BPF_F_ZERO_CSUM_TX: _bindgen_ty_187 = 2;
pub const BPF_F_DONT_FRAGMENT: _bindgen_ty_187 = 4;
pub const BPF_F_SEQ_NUMBER: _bindgen_ty_187 = 8;
pub const BPF_F_NO_TUNNEL_KEY: _bindgen_ty_187 = 16;
pub type _bindgen_ty_187 = core::ffi::c_uint;
pub const BPF_F_TUNINFO_FLAGS: _bindgen_ty_188 = 16;
pub type _bindgen_ty_188 = core::ffi::c_uint;
pub const BPF_F_INDEX_MASK: _bindgen_ty_189 = 4294967295;
pub const BPF_F_CURRENT_CPU: _bindgen_ty_189 = 4294967295;
pub const BPF_F_CTXLEN_MASK: _bindgen_ty_189 = 4503595332403200;
pub type _bindgen_ty_189 = core::ffi::c_ulong;
pub const BPF_F_CURRENT_NETNS: _bindgen_ty_190 = -1;
pub type _bindgen_ty_190 = core::ffi::c_int;
pub const BPF_CSUM_LEVEL_QUERY: _bindgen_ty_191 = 0;
pub const BPF_CSUM_LEVEL_INC: _bindgen_ty_191 = 1;
pub const BPF_CSUM_LEVEL_DEC: _bindgen_ty_191 = 2;
pub const BPF_CSUM_LEVEL_RESET: _bindgen_ty_191 = 3;
pub type _bindgen_ty_191 = core::ffi::c_uint;
pub const BPF_F_ADJ_ROOM_FIXED_GSO: _bindgen_ty_192 = 1;
pub const BPF_F_ADJ_ROOM_ENCAP_L3_IPV4: _bindgen_ty_192 = 2;
pub const BPF_F_ADJ_ROOM_ENCAP_L3_IPV6: _bindgen_ty_192 = 4;
pub const BPF_F_ADJ_ROOM_ENCAP_L4_GRE: _bindgen_ty_192 = 8;
pub const BPF_F_ADJ_ROOM_ENCAP_L4_UDP: _bindgen_ty_192 = 16;
pub const BPF_F_ADJ_ROOM_NO_CSUM_RESET: _bindgen_ty_192 = 32;
pub const BPF_F_ADJ_ROOM_ENCAP_L2_ETH: _bindgen_ty_192 = 64;
pub const BPF_F_ADJ_ROOM_DECAP_L3_IPV4: _bindgen_ty_192 = 128;
pub const BPF_F_ADJ_ROOM_DECAP_L3_IPV6: _bindgen_ty_192 = 256;
pub type _bindgen_ty_192 = core::ffi::c_uint;
pub const BPF_ADJ_ROOM_ENCAP_L2_MASK: _bindgen_ty_193 = 255;
pub const BPF_ADJ_ROOM_ENCAP_L2_SHIFT: _bindgen_ty_193 = 56;
pub type _bindgen_ty_193 = core::ffi::c_uint;
pub const BPF_F_SYSCTL_BASE_NAME: _bindgen_ty_194 = 1;
pub type _bindgen_ty_194 = core::ffi::c_uint;
pub const BPF_LOCAL_STORAGE_GET_F_CREATE: _bindgen_ty_195 = 1;
pub const BPF_SK_STORAGE_GET_F_CREATE: _bindgen_ty_195 = 1;
pub type _bindgen_ty_195 = core::ffi::c_uint;
pub const BPF_F_GET_BRANCH_RECORDS_SIZE: _bindgen_ty_196 = 1;
pub type _bindgen_ty_196 = core::ffi::c_uint;
pub const BPF_RB_NO_WAKEUP: _bindgen_ty_197 = 1;
pub const BPF_RB_FORCE_WAKEUP: _bindgen_ty_197 = 2;
pub type _bindgen_ty_197 = core::ffi::c_uint;
pub const BPF_RB_AVAIL_DATA: _bindgen_ty_198 = 0;
pub const BPF_RB_RING_SIZE: _bindgen_ty_198 = 1;
pub const BPF_RB_CONS_POS: _bindgen_ty_198 = 2;
pub const BPF_RB_PROD_POS: _bindgen_ty_198 = 3;
pub type _bindgen_ty_198 = core::ffi::c_uint;
pub const BPF_RINGBUF_BUSY_BIT: _bindgen_ty_199 = 2147483648;
pub const BPF_RINGBUF_DISCARD_BIT: _bindgen_ty_199 = 1073741824;
pub const BPF_RINGBUF_HDR_SZ: _bindgen_ty_199 = 8;
pub type _bindgen_ty_199 = core::ffi::c_uint;
pub const BPF_SK_LOOKUP_F_REPLACE: _bindgen_ty_200 = 1;
pub const BPF_SK_LOOKUP_F_NO_REUSEPORT: _bindgen_ty_200 = 2;
pub type _bindgen_ty_200 = core::ffi::c_uint;
pub const bpf_adj_room_mode_BPF_ADJ_ROOM_NET: bpf_adj_room_mode = 0;
pub const bpf_adj_room_mode_BPF_ADJ_ROOM_MAC: bpf_adj_room_mode = 1;
pub type bpf_adj_room_mode = core::ffi::c_uint;
pub const bpf_hdr_start_off_BPF_HDR_START_MAC: bpf_hdr_start_off = 0;
pub const bpf_hdr_start_off_BPF_HDR_START_NET: bpf_hdr_start_off = 1;
pub type bpf_hdr_start_off = core::ffi::c_uint;
pub const bpf_lwt_encap_mode_BPF_LWT_ENCAP_SEG6: bpf_lwt_encap_mode = 0;
pub const bpf_lwt_encap_mode_BPF_LWT_ENCAP_SEG6_INLINE: bpf_lwt_encap_mode = 1;
pub const bpf_lwt_encap_mode_BPF_LWT_ENCAP_IP: bpf_lwt_encap_mode = 2;
pub type bpf_lwt_encap_mode = core::ffi::c_uint;
pub const BPF_F_BPRM_SECUREEXEC: _bindgen_ty_201 = 1;
pub type _bindgen_ty_201 = core::ffi::c_uint;
pub const BPF_F_BROADCAST: _bindgen_ty_202 = 8;
pub const BPF_F_EXCLUDE_INGRESS: _bindgen_ty_202 = 16;
pub type _bindgen_ty_202 = core::ffi::c_uint;
pub const BPF_SKB_TSTAMP_UNSPEC: _bindgen_ty_203 = 0;
pub const BPF_SKB_TSTAMP_DELIVERY_MONO: _bindgen_ty_203 = 1;
pub const BPF_SKB_CLOCK_REALTIME: _bindgen_ty_203 = 0;
pub const BPF_SKB_CLOCK_MONOTONIC: _bindgen_ty_203 = 1;
pub const BPF_SKB_CLOCK_TAI: _bindgen_ty_203 = 2;
pub type _bindgen_ty_203 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sk_buff {
    pub len: __u32,
    pub pkt_type: __u32,
    pub mark: __u32,
    pub queue_mapping: __u32,
    pub protocol: __u32,
    pub vlan_present: __u32,
    pub vlan_tci: __u32,
    pub vlan_proto: __u32,
    pub priority: __u32,
    pub ingress_ifindex: __u32,
    pub ifindex: __u32,
    pub tc_index: __u32,
    pub cb: [__u32; 5usize],
    pub hash: __u32,
    pub tc_classid: __u32,
    pub data: __u32,
    pub data_end: __u32,
    pub napi_id: __u32,
    pub family: __u32,
    pub remote_ip4: __u32,
    pub local_ip4: __u32,
    pub remote_ip6: [__u32; 4usize],
    pub local_ip6: [__u32; 4usize],
    pub remote_port: __u32,
    pub local_port: __u32,
    pub data_meta: __u32,
    pub __bindgen_anon_1: __sk_buff__bindgen_ty_1,
    pub tstamp: __u64,
    pub wire_len: __u32,
    pub gso_segs: __u32,
    pub __bindgen_anon_2: __sk_buff__bindgen_ty_2,
    pub gso_size: __u32,
    pub tstamp_type: __u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub hwtstamp: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sk_buff__bindgen_ty_1 {
    pub flow_keys: *mut bpf_flow_keys,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for __sk_buff__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl __sk_buff__bindgen_ty_1 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sk_buff__bindgen_ty_2 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for __sk_buff__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl __sk_buff__bindgen_ty_2 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
impl Default for __sk_buff {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl __sk_buff {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_tunnel_key {
    pub tunnel_id: __u32,
    pub __bindgen_anon_1: bpf_tunnel_key__bindgen_ty_1,
    pub tunnel_tos: __u8,
    pub tunnel_ttl: __u8,
    pub __bindgen_anon_2: bpf_tunnel_key__bindgen_ty_2,
    pub tunnel_label: __u32,
    pub __bindgen_anon_3: bpf_tunnel_key__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_tunnel_key__bindgen_ty_1 {
    pub remote_ipv4: __u32,
    pub remote_ipv6: [__u32; 4usize],
}
impl Default for bpf_tunnel_key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_tunnel_key__bindgen_ty_2 {
    pub tunnel_ext: __u16,
    pub tunnel_flags: __be16,
}
impl Default for bpf_tunnel_key__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_tunnel_key__bindgen_ty_3 {
    pub local_ipv4: __u32,
    pub local_ipv6: [__u32; 4usize],
}
impl Default for bpf_tunnel_key__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_tunnel_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_xfrm_state {
    pub reqid: __u32,
    pub spi: __u32,
    pub family: __u16,
    pub ext: __u16,
    pub __bindgen_anon_1: bpf_xfrm_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_xfrm_state__bindgen_ty_1 {
    pub remote_ipv4: __u32,
    pub remote_ipv6: [__u32; 4usize],
}
impl Default for bpf_xfrm_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_xfrm_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const bpf_ret_code_BPF_OK: bpf_ret_code = 0;
pub const bpf_ret_code_BPF_DROP: bpf_ret_code = 2;
pub const bpf_ret_code_BPF_REDIRECT: bpf_ret_code = 7;
pub const bpf_ret_code_BPF_LWT_REROUTE: bpf_ret_code = 128;
pub const bpf_ret_code_BPF_FLOW_DISSECTOR_CONTINUE: bpf_ret_code = 129;
pub type bpf_ret_code = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_sock {
    pub bound_dev_if: __u32,
    pub family: __u32,
    pub type_: __u32,
    pub protocol: __u32,
    pub mark: __u32,
    pub priority: __u32,
    pub src_ip4: __u32,
    pub src_ip6: [__u32; 4usize],
    pub src_port: __u32,
    pub dst_port: __be16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub dst_ip4: __u32,
    pub dst_ip6: [__u32; 4usize],
    pub state: __u32,
    pub rx_queue_mapping: __s32,
}
impl bpf_sock {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_tcp_sock {
    pub snd_cwnd: __u32,
    pub srtt_us: __u32,
    pub rtt_min: __u32,
    pub snd_ssthresh: __u32,
    pub rcv_nxt: __u32,
    pub snd_nxt: __u32,
    pub snd_una: __u32,
    pub mss_cache: __u32,
    pub ecn_flags: __u32,
    pub rate_delivered: __u32,
    pub rate_interval_us: __u32,
    pub packets_out: __u32,
    pub retrans_out: __u32,
    pub total_retrans: __u32,
    pub segs_in: __u32,
    pub data_segs_in: __u32,
    pub segs_out: __u32,
    pub data_segs_out: __u32,
    pub lost_out: __u32,
    pub sacked_out: __u32,
    pub bytes_received: __u64,
    pub bytes_acked: __u64,
    pub dsack_dups: __u32,
    pub delivered: __u32,
    pub delivered_ce: __u32,
    pub icsk_retransmits: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sock_tuple {
    pub __bindgen_anon_1: bpf_sock_tuple__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_tuple__bindgen_ty_1 {
    pub ipv4: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1,
    pub ipv6: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1 {
    pub saddr: __be32,
    pub daddr: __be32,
    pub sport: __be16,
    pub dport: __be16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2 {
    pub saddr: [__be32; 4usize],
    pub daddr: [__be32; 4usize],
    pub sport: __be16,
    pub dport: __be16,
}
impl Default for bpf_sock_tuple__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_sock_tuple {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const tcx_action_base_TCX_NEXT: tcx_action_base = -1;
pub const tcx_action_base_TCX_PASS: tcx_action_base = 0;
pub const tcx_action_base_TCX_DROP: tcx_action_base = 2;
pub const tcx_action_base_TCX_REDIRECT: tcx_action_base = 7;
pub type tcx_action_base = core::ffi::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_xdp_sock {
    pub queue_id: __u32,
}
pub const xdp_action_XDP_ABORTED: xdp_action = 0;
pub const xdp_action_XDP_DROP: xdp_action = 1;
pub const xdp_action_XDP_PASS: xdp_action = 2;
pub const xdp_action_XDP_TX: xdp_action = 3;
pub const xdp_action_XDP_REDIRECT: xdp_action = 4;
pub type xdp_action = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct xdp_md {
    pub data: __u32,
    pub data_end: __u32,
    pub data_meta: __u32,
    pub ingress_ifindex: __u32,
    pub rx_queue_index: __u32,
    pub egress_ifindex: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_devmap_val {
    pub ifindex: __u32,
    pub bpf_prog: bpf_devmap_val__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_devmap_val__bindgen_ty_1 {
    pub fd: core::ffi::c_int,
    pub id: __u32,
}
impl Default for bpf_devmap_val__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_devmap_val {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_cpumap_val {
    pub qsize: __u32,
    pub bpf_prog: bpf_cpumap_val__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_cpumap_val__bindgen_ty_1 {
    pub fd: core::ffi::c_int,
    pub id: __u32,
}
impl Default for bpf_cpumap_val__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_cpumap_val {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const sk_action_SK_DROP: sk_action = 0;
pub const sk_action_SK_PASS: sk_action = 1;
pub type sk_action = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sk_msg_md {
    pub __bindgen_anon_1: sk_msg_md__bindgen_ty_1,
    pub __bindgen_anon_2: sk_msg_md__bindgen_ty_2,
    pub family: __u32,
    pub remote_ip4: __u32,
    pub local_ip4: __u32,
    pub remote_ip6: [__u32; 4usize],
    pub local_ip6: [__u32; 4usize],
    pub remote_port: __u32,
    pub local_port: __u32,
    pub size: __u32,
    pub __bindgen_anon_3: sk_msg_md__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_msg_md__bindgen_ty_1 {
    pub data: *mut core::ffi::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for sk_msg_md__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_msg_md__bindgen_ty_1 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_msg_md__bindgen_ty_2 {
    pub data_end: *mut core::ffi::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for sk_msg_md__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_msg_md__bindgen_ty_2 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_msg_md__bindgen_ty_3 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for sk_msg_md__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_msg_md__bindgen_ty_3 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
impl Default for sk_msg_md {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sk_reuseport_md {
    pub __bindgen_anon_1: sk_reuseport_md__bindgen_ty_1,
    pub __bindgen_anon_2: sk_reuseport_md__bindgen_ty_2,
    pub len: __u32,
    pub eth_protocol: __u32,
    pub ip_protocol: __u32,
    pub bind_inany: __u32,
    pub hash: __u32,
    pub __bindgen_anon_3: sk_reuseport_md__bindgen_ty_3,
    pub __bindgen_anon_4: sk_reuseport_md__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_reuseport_md__bindgen_ty_1 {
    pub data: *mut core::ffi::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for sk_reuseport_md__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_reuseport_md__bindgen_ty_1 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_reuseport_md__bindgen_ty_2 {
    pub data_end: *mut core::ffi::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for sk_reuseport_md__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_reuseport_md__bindgen_ty_2 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_reuseport_md__bindgen_ty_3 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for sk_reuseport_md__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_reuseport_md__bindgen_ty_3 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sk_reuseport_md__bindgen_ty_4 {
    pub migrating_sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for sk_reuseport_md__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sk_reuseport_md__bindgen_ty_4 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
impl Default for sk_reuseport_md {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_prog_info {
    pub type_: __u32,
    pub id: __u32,
    pub tag: [__u8; 8usize],
    pub jited_prog_len: __u32,
    pub xlated_prog_len: __u32,
    pub jited_prog_insns: __u64,
    pub xlated_prog_insns: __u64,
    pub load_time: __u64,
    pub created_by_uid: __u32,
    pub nr_map_ids: __u32,
    pub map_ids: __u64,
    pub name: [core::ffi::c_char; 16usize],
    pub ifindex: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub netns_dev: __u64,
    pub netns_ino: __u64,
    pub nr_jited_ksyms: __u32,
    pub nr_jited_func_lens: __u32,
    pub jited_ksyms: __u64,
    pub jited_func_lens: __u64,
    pub btf_id: __u32,
    pub func_info_rec_size: __u32,
    pub func_info: __u64,
    pub nr_func_info: __u32,
    pub nr_line_info: __u32,
    pub line_info: __u64,
    pub jited_line_info: __u64,
    pub nr_jited_line_info: __u32,
    pub line_info_rec_size: __u32,
    pub jited_line_info_rec_size: __u32,
    pub nr_prog_tags: __u32,
    pub prog_tags: __u64,
    pub run_time_ns: __u64,
    pub run_cnt: __u64,
    pub recursion_misses: __u64,
    pub verified_insns: __u32,
    pub attach_btf_obj_id: __u32,
    pub attach_btf_id: __u32,
}
impl bpf_prog_info {
    #[inline]
    pub fn gpl_compatible(&self) -> __u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gpl_compatible(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(gpl_compatible: __u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let gpl_compatible: u32 = unsafe { ::core::mem::transmute(gpl_compatible) };
            gpl_compatible as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_map_info {
    pub type_: __u32,
    pub id: __u32,
    pub key_size: __u32,
    pub value_size: __u32,
    pub max_entries: __u32,
    pub map_flags: __u32,
    pub name: [core::ffi::c_char; 16usize],
    pub ifindex: __u32,
    pub btf_vmlinux_value_type_id: __u32,
    pub netns_dev: __u64,
    pub netns_ino: __u64,
    pub btf_id: __u32,
    pub btf_key_type_id: __u32,
    pub btf_value_type_id: __u32,
    pub btf_vmlinux_id: __u32,
    pub map_extra: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_btf_info {
    pub btf: __u64,
    pub btf_size: __u32,
    pub id: __u32,
    pub name: __u64,
    pub name_len: __u32,
    pub kernel_btf: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_link_info {
    pub type_: __u32,
    pub id: __u32,
    pub prog_id: __u32,
    pub __bindgen_anon_1: bpf_link_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link_info__bindgen_ty_1 {
    pub raw_tracepoint: bpf_link_info__bindgen_ty_1__bindgen_ty_1,
    pub tracing: bpf_link_info__bindgen_ty_1__bindgen_ty_2,
    pub cgroup: bpf_link_info__bindgen_ty_1__bindgen_ty_3,
    pub iter: bpf_link_info__bindgen_ty_1__bindgen_ty_4,
    pub netns: bpf_link_info__bindgen_ty_1__bindgen_ty_5,
    pub xdp: bpf_link_info__bindgen_ty_1__bindgen_ty_6,
    pub struct_ops: bpf_link_info__bindgen_ty_1__bindgen_ty_7,
    pub netfilter: bpf_link_info__bindgen_ty_1__bindgen_ty_8,
    pub kprobe_multi: bpf_link_info__bindgen_ty_1__bindgen_ty_9,
    pub uprobe_multi: bpf_link_info__bindgen_ty_1__bindgen_ty_10,
    pub perf_event: bpf_link_info__bindgen_ty_1__bindgen_ty_11,
    pub tcx: bpf_link_info__bindgen_ty_1__bindgen_ty_12,
    pub netkit: bpf_link_info__bindgen_ty_1__bindgen_ty_13,
    pub sockmap: bpf_link_info__bindgen_ty_1__bindgen_ty_14,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_1 {
    pub tp_name: __u64,
    pub tp_name_len: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_2 {
    pub attach_type: __u32,
    pub target_obj_id: __u32,
    pub target_btf_id: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_3 {
    pub cgroup_id: __u64,
    pub attach_type: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_4 {
    pub target_name: __u64,
    pub target_name_len: __u32,
    pub __bindgen_anon_1: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub map: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
    pub map_id: __u32,
}
impl Default for bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2 {
    pub cgroup: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1,
    pub task: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1 {
    pub cgroup_id: __u64,
    pub order: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2 {
    pub tid: __u32,
    pub pid: __u32,
}
impl Default for bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_link_info__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_5 {
    pub netns_ino: __u32,
    pub attach_type: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_6 {
    pub ifindex: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_7 {
    pub map_id: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_8 {
    pub pf: __u32,
    pub hooknum: __u32,
    pub priority: __s32,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_9 {
    pub addrs: __u64,
    pub count: __u32,
    pub flags: __u32,
    pub missed: __u64,
    pub cookies: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_10 {
    pub path: __u64,
    pub offsets: __u64,
    pub ref_ctr_offsets: __u64,
    pub cookies: __u64,
    pub path_size: __u32,
    pub count: __u32,
    pub flags: __u32,
    pub pid: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11 {
    pub type_: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_anon_1: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1 {
    pub uprobe: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1,
    pub kprobe: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2,
    pub tracepoint: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3,
    pub event: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1 {
    pub file_name: __u64,
    pub name_len: __u32,
    pub offset: __u32,
    pub cookie: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2 {
    pub func_name: __u64,
    pub name_len: __u32,
    pub offset: __u32,
    pub addr: __u64,
    pub missed: __u64,
    pub cookie: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3 {
    pub tp_name: __u64,
    pub name_len: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub cookie: __u64,
}
impl bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4 {
    pub config: __u64,
    pub type_: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub cookie: __u64,
}
impl bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
impl Default for bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_link_info__bindgen_ty_1__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_link_info__bindgen_ty_1__bindgen_ty_11 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_12 {
    pub ifindex: __u32,
    pub attach_type: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_13 {
    pub ifindex: __u32,
    pub attach_type: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_14 {
    pub map_id: __u32,
    pub attach_type: __u32,
}
impl Default for bpf_link_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_link_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sock_addr {
    pub user_family: __u32,
    pub user_ip4: __u32,
    pub user_ip6: [__u32; 4usize],
    pub user_port: __u32,
    pub family: __u32,
    pub type_: __u32,
    pub protocol: __u32,
    pub msg_src_ip4: __u32,
    pub msg_src_ip6: [__u32; 4usize],
    pub __bindgen_anon_1: bpf_sock_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_addr__bindgen_ty_1 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for bpf_sock_addr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_sock_addr__bindgen_ty_1 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
impl Default for bpf_sock_addr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sock_ops {
    pub op: __u32,
    pub __bindgen_anon_1: bpf_sock_ops__bindgen_ty_1,
    pub family: __u32,
    pub remote_ip4: __u32,
    pub local_ip4: __u32,
    pub remote_ip6: [__u32; 4usize],
    pub local_ip6: [__u32; 4usize],
    pub remote_port: __u32,
    pub local_port: __u32,
    pub is_fullsock: __u32,
    pub snd_cwnd: __u32,
    pub srtt_us: __u32,
    pub bpf_sock_ops_cb_flags: __u32,
    pub state: __u32,
    pub rtt_min: __u32,
    pub snd_ssthresh: __u32,
    pub rcv_nxt: __u32,
    pub snd_nxt: __u32,
    pub snd_una: __u32,
    pub mss_cache: __u32,
    pub ecn_flags: __u32,
    pub rate_delivered: __u32,
    pub rate_interval_us: __u32,
    pub packets_out: __u32,
    pub retrans_out: __u32,
    pub total_retrans: __u32,
    pub segs_in: __u32,
    pub data_segs_in: __u32,
    pub segs_out: __u32,
    pub data_segs_out: __u32,
    pub lost_out: __u32,
    pub sacked_out: __u32,
    pub sk_txhash: __u32,
    pub bytes_received: __u64,
    pub bytes_acked: __u64,
    pub __bindgen_anon_2: bpf_sock_ops__bindgen_ty_2,
    pub __bindgen_anon_3: bpf_sock_ops__bindgen_ty_3,
    pub __bindgen_anon_4: bpf_sock_ops__bindgen_ty_4,
    pub skb_len: __u32,
    pub skb_tcp_flags: __u32,
    pub skb_hwtstamp: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_ops__bindgen_ty_1 {
    pub args: [__u32; 4usize],
    pub reply: __u32,
    pub replylong: [__u32; 4usize],
}
impl Default for bpf_sock_ops__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_ops__bindgen_ty_2 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for bpf_sock_ops__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_sock_ops__bindgen_ty_2 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_ops__bindgen_ty_3 {
    pub skb_data: *mut core::ffi::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for bpf_sock_ops__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_sock_ops__bindgen_ty_3 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_ops__bindgen_ty_4 {
    pub skb_data_end: *mut core::ffi::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for bpf_sock_ops__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_sock_ops__bindgen_ty_4 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
impl Default for bpf_sock_ops {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BPF_SOCK_OPS_RTO_CB_FLAG: _bindgen_ty_204 = 1;
pub const BPF_SOCK_OPS_RETRANS_CB_FLAG: _bindgen_ty_204 = 2;
pub const BPF_SOCK_OPS_STATE_CB_FLAG: _bindgen_ty_204 = 4;
pub const BPF_SOCK_OPS_RTT_CB_FLAG: _bindgen_ty_204 = 8;
pub const BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG: _bindgen_ty_204 = 16;
pub const BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG: _bindgen_ty_204 = 32;
pub const BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG: _bindgen_ty_204 = 64;
pub const BPF_SOCK_OPS_ALL_CB_FLAGS: _bindgen_ty_204 = 127;
pub type _bindgen_ty_204 = core::ffi::c_uint;
pub const BPF_SOCK_OPS_VOID: _bindgen_ty_205 = 0;
pub const BPF_SOCK_OPS_TIMEOUT_INIT: _bindgen_ty_205 = 1;
pub const BPF_SOCK_OPS_RWND_INIT: _bindgen_ty_205 = 2;
pub const BPF_SOCK_OPS_TCP_CONNECT_CB: _bindgen_ty_205 = 3;
pub const BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB: _bindgen_ty_205 = 4;
pub const BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB: _bindgen_ty_205 = 5;
pub const BPF_SOCK_OPS_NEEDS_ECN: _bindgen_ty_205 = 6;
pub const BPF_SOCK_OPS_BASE_RTT: _bindgen_ty_205 = 7;
pub const BPF_SOCK_OPS_RTO_CB: _bindgen_ty_205 = 8;
pub const BPF_SOCK_OPS_RETRANS_CB: _bindgen_ty_205 = 9;
pub const BPF_SOCK_OPS_STATE_CB: _bindgen_ty_205 = 10;
pub const BPF_SOCK_OPS_TCP_LISTEN_CB: _bindgen_ty_205 = 11;
pub const BPF_SOCK_OPS_RTT_CB: _bindgen_ty_205 = 12;
pub const BPF_SOCK_OPS_PARSE_HDR_OPT_CB: _bindgen_ty_205 = 13;
pub const BPF_SOCK_OPS_HDR_OPT_LEN_CB: _bindgen_ty_205 = 14;
pub const BPF_SOCK_OPS_WRITE_HDR_OPT_CB: _bindgen_ty_205 = 15;
pub type _bindgen_ty_205 = core::ffi::c_uint;
pub const BPF_TCP_ESTABLISHED: _bindgen_ty_206 = 1;
pub const BPF_TCP_SYN_SENT: _bindgen_ty_206 = 2;
pub const BPF_TCP_SYN_RECV: _bindgen_ty_206 = 3;
pub const BPF_TCP_FIN_WAIT1: _bindgen_ty_206 = 4;
pub const BPF_TCP_FIN_WAIT2: _bindgen_ty_206 = 5;
pub const BPF_TCP_TIME_WAIT: _bindgen_ty_206 = 6;
pub const BPF_TCP_CLOSE: _bindgen_ty_206 = 7;
pub const BPF_TCP_CLOSE_WAIT: _bindgen_ty_206 = 8;
pub const BPF_TCP_LAST_ACK: _bindgen_ty_206 = 9;
pub const BPF_TCP_LISTEN: _bindgen_ty_206 = 10;
pub const BPF_TCP_CLOSING: _bindgen_ty_206 = 11;
pub const BPF_TCP_NEW_SYN_RECV: _bindgen_ty_206 = 12;
pub const BPF_TCP_BOUND_INACTIVE: _bindgen_ty_206 = 13;
pub const BPF_TCP_MAX_STATES: _bindgen_ty_206 = 14;
pub type _bindgen_ty_206 = core::ffi::c_uint;
pub const TCP_BPF_IW: _bindgen_ty_207 = 1001;
pub const TCP_BPF_SNDCWND_CLAMP: _bindgen_ty_207 = 1002;
pub const TCP_BPF_DELACK_MAX: _bindgen_ty_207 = 1003;
pub const TCP_BPF_RTO_MIN: _bindgen_ty_207 = 1004;
pub const TCP_BPF_SYN: _bindgen_ty_207 = 1005;
pub const TCP_BPF_SYN_IP: _bindgen_ty_207 = 1006;
pub const TCP_BPF_SYN_MAC: _bindgen_ty_207 = 1007;
pub type _bindgen_ty_207 = core::ffi::c_uint;
pub const BPF_LOAD_HDR_OPT_TCP_SYN: _bindgen_ty_208 = 1;
pub type _bindgen_ty_208 = core::ffi::c_uint;
pub const BPF_WRITE_HDR_TCP_CURRENT_MSS: _bindgen_ty_209 = 1;
pub const BPF_WRITE_HDR_TCP_SYNACK_COOKIE: _bindgen_ty_209 = 2;
pub type _bindgen_ty_209 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_perf_event_value {
    pub counter: __u64,
    pub enabled: __u64,
    pub running: __u64,
}
pub const BPF_DEVCG_ACC_MKNOD: _bindgen_ty_210 = 1;
pub const BPF_DEVCG_ACC_READ: _bindgen_ty_210 = 2;
pub const BPF_DEVCG_ACC_WRITE: _bindgen_ty_210 = 4;
pub type _bindgen_ty_210 = core::ffi::c_uint;
pub const BPF_DEVCG_DEV_BLOCK: _bindgen_ty_211 = 1;
pub const BPF_DEVCG_DEV_CHAR: _bindgen_ty_211 = 2;
pub type _bindgen_ty_211 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_cgroup_dev_ctx {
    pub access_type: __u32,
    pub major: __u32,
    pub minor: __u32,
}
#[repr(C)]
#[derive(Default)]
pub struct bpf_raw_tracepoint_args {
    pub args: __IncompleteArrayField<__u64>,
}
pub const BPF_FIB_LOOKUP_DIRECT: _bindgen_ty_212 = 1;
pub const BPF_FIB_LOOKUP_OUTPUT: _bindgen_ty_212 = 2;
pub const BPF_FIB_LOOKUP_SKIP_NEIGH: _bindgen_ty_212 = 4;
pub const BPF_FIB_LOOKUP_TBID: _bindgen_ty_212 = 8;
pub const BPF_FIB_LOOKUP_SRC: _bindgen_ty_212 = 16;
pub const BPF_FIB_LOOKUP_MARK: _bindgen_ty_212 = 32;
pub type _bindgen_ty_212 = core::ffi::c_uint;
pub const BPF_FIB_LKUP_RET_SUCCESS: _bindgen_ty_213 = 0;
pub const BPF_FIB_LKUP_RET_BLACKHOLE: _bindgen_ty_213 = 1;
pub const BPF_FIB_LKUP_RET_UNREACHABLE: _bindgen_ty_213 = 2;
pub const BPF_FIB_LKUP_RET_PROHIBIT: _bindgen_ty_213 = 3;
pub const BPF_FIB_LKUP_RET_NOT_FWDED: _bindgen_ty_213 = 4;
pub const BPF_FIB_LKUP_RET_FWD_DISABLED: _bindgen_ty_213 = 5;
pub const BPF_FIB_LKUP_RET_UNSUPP_LWT: _bindgen_ty_213 = 6;
pub const BPF_FIB_LKUP_RET_NO_NEIGH: _bindgen_ty_213 = 7;
pub const BPF_FIB_LKUP_RET_FRAG_NEEDED: _bindgen_ty_213 = 8;
pub const BPF_FIB_LKUP_RET_NO_SRC_ADDR: _bindgen_ty_213 = 9;
pub type _bindgen_ty_213 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_fib_lookup {
    pub family: __u8,
    pub l4_protocol: __u8,
    pub sport: __be16,
    pub dport: __be16,
    pub __bindgen_anon_1: bpf_fib_lookup__bindgen_ty_1,
    pub ifindex: __u32,
    pub __bindgen_anon_2: bpf_fib_lookup__bindgen_ty_2,
    pub __bindgen_anon_3: bpf_fib_lookup__bindgen_ty_3,
    pub __bindgen_anon_4: bpf_fib_lookup__bindgen_ty_4,
    pub __bindgen_anon_5: bpf_fib_lookup__bindgen_ty_5,
    pub __bindgen_anon_6: bpf_fib_lookup__bindgen_ty_6,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_1 {
    pub tot_len: __u16,
    pub mtu_result: __u16,
}
impl Default for bpf_fib_lookup__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_2 {
    pub tos: __u8,
    pub flowinfo: __be32,
    pub rt_metric: __u32,
}
impl Default for bpf_fib_lookup__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_3 {
    pub ipv4_src: __be32,
    pub ipv6_src: [__u32; 4usize],
}
impl Default for bpf_fib_lookup__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_4 {
    pub ipv4_dst: __be32,
    pub ipv6_dst: [__u32; 4usize],
}
impl Default for bpf_fib_lookup__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_5 {
    pub __bindgen_anon_1: bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1,
    pub tbid: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1 {
    pub h_vlan_proto: __be16,
    pub h_vlan_TCI: __be16,
}
impl Default for bpf_fib_lookup__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_6 {
    pub __bindgen_anon_1: bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1 {
    pub mark: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2 {
    pub smac: [__u8; 6usize],
    pub dmac: [__u8; 6usize],
}
impl Default for bpf_fib_lookup__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_fib_lookup {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_redir_neigh {
    pub nh_family: __u32,
    pub __bindgen_anon_1: bpf_redir_neigh__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_redir_neigh__bindgen_ty_1 {
    pub ipv4_nh: __be32,
    pub ipv6_nh: [__u32; 4usize],
}
impl Default for bpf_redir_neigh__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_redir_neigh {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const bpf_check_mtu_flags_BPF_MTU_CHK_SEGS: bpf_check_mtu_flags = 1;
pub type bpf_check_mtu_flags = core::ffi::c_uint;
pub const bpf_check_mtu_ret_BPF_MTU_CHK_RET_SUCCESS: bpf_check_mtu_ret = 0;
pub const bpf_check_mtu_ret_BPF_MTU_CHK_RET_FRAG_NEEDED: bpf_check_mtu_ret = 1;
pub const bpf_check_mtu_ret_BPF_MTU_CHK_RET_SEGS_TOOBIG: bpf_check_mtu_ret = 2;
pub type bpf_check_mtu_ret = core::ffi::c_uint;
pub const bpf_task_fd_type_BPF_FD_TYPE_RAW_TRACEPOINT: bpf_task_fd_type = 0;
pub const bpf_task_fd_type_BPF_FD_TYPE_TRACEPOINT: bpf_task_fd_type = 1;
pub const bpf_task_fd_type_BPF_FD_TYPE_KPROBE: bpf_task_fd_type = 2;
pub const bpf_task_fd_type_BPF_FD_TYPE_KRETPROBE: bpf_task_fd_type = 3;
pub const bpf_task_fd_type_BPF_FD_TYPE_UPROBE: bpf_task_fd_type = 4;
pub const bpf_task_fd_type_BPF_FD_TYPE_URETPROBE: bpf_task_fd_type = 5;
pub type bpf_task_fd_type = core::ffi::c_uint;
pub const BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG: _bindgen_ty_214 = 1;
pub const BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL: _bindgen_ty_214 = 2;
pub const BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP: _bindgen_ty_214 = 4;
pub type _bindgen_ty_214 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_flow_keys {
    pub nhoff: __u16,
    pub thoff: __u16,
    pub addr_proto: __u16,
    pub is_frag: __u8,
    pub is_first_frag: __u8,
    pub is_encap: __u8,
    pub ip_proto: __u8,
    pub n_proto: __be16,
    pub sport: __be16,
    pub dport: __be16,
    pub __bindgen_anon_1: bpf_flow_keys__bindgen_ty_1,
    pub flags: __u32,
    pub flow_label: __be32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_flow_keys__bindgen_ty_1 {
    pub __bindgen_anon_1: bpf_flow_keys__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_flow_keys__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_flow_keys__bindgen_ty_1__bindgen_ty_1 {
    pub ipv4_src: __be32,
    pub ipv4_dst: __be32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_flow_keys__bindgen_ty_1__bindgen_ty_2 {
    pub ipv6_src: [__u32; 4usize],
    pub ipv6_dst: [__u32; 4usize],
}
impl Default for bpf_flow_keys__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_flow_keys {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_func_info {
    pub insn_off: __u32,
    pub type_id: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_line_info {
    pub insn_off: __u32,
    pub file_name_off: __u32,
    pub line_off: __u32,
    pub line_col: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_spin_lock {
    pub val: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_timer {
    pub __opaque: [__u64; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_wq {
    pub __opaque: [__u64; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_dynptr {
    pub __opaque: [__u64; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_list_head {
    pub __opaque: [__u64; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_list_node {
    pub __opaque: [__u64; 3usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_rb_root {
    pub __opaque: [__u64; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_rb_node {
    pub __opaque: [__u64; 4usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_refcount {
    pub __opaque: [__u32; 1usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_sysctl {
    pub write: __u32,
    pub file_pos: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sockopt {
    pub __bindgen_anon_1: bpf_sockopt__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_sockopt__bindgen_ty_2,
    pub __bindgen_anon_3: bpf_sockopt__bindgen_ty_3,
    pub level: __s32,
    pub optname: __s32,
    pub optlen: __s32,
    pub retval: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sockopt__bindgen_ty_1 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for bpf_sockopt__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_sockopt__bindgen_ty_1 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sockopt__bindgen_ty_2 {
    pub optval: *mut core::ffi::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for bpf_sockopt__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_sockopt__bindgen_ty_2 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sockopt__bindgen_ty_3 {
    pub optval_end: *mut core::ffi::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for bpf_sockopt__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_sockopt__bindgen_ty_3 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
impl Default for bpf_sockopt {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_pidns_info {
    pub pid: __u32,
    pub tgid: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sk_lookup {
    pub __bindgen_anon_1: bpf_sk_lookup__bindgen_ty_1,
    pub family: __u32,
    pub protocol: __u32,
    pub remote_ip4: __u32,
    pub remote_ip6: [__u32; 4usize],
    pub remote_port: __be16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub local_ip4: __u32,
    pub local_ip6: [__u32; 4usize],
    pub local_port: __u32,
    pub ingress_ifindex: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sk_lookup__bindgen_ty_1 {
    pub __bindgen_anon_1: bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1,
    pub cookie: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl Default for bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
impl Default for bpf_sk_lookup__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_sk_lookup {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_sk_lookup {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_ptr {
    pub ptr: *mut core::ffi::c_void,
    pub type_id: __u32,
    pub flags: __u32,
}
impl Default for btf_ptr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BTF_F_COMPACT: _bindgen_ty_215 = 1;
pub const BTF_F_NONAME: _bindgen_ty_215 = 2;
pub const BTF_F_PTR_RAW: _bindgen_ty_215 = 4;
pub const BTF_F_ZERO: _bindgen_ty_215 = 8;
pub type _bindgen_ty_215 = core::ffi::c_uint;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_BYTE_OFFSET: bpf_core_relo_kind = 0;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_BYTE_SIZE: bpf_core_relo_kind = 1;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_EXISTS: bpf_core_relo_kind = 2;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_SIGNED: bpf_core_relo_kind = 3;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_LSHIFT_U64: bpf_core_relo_kind = 4;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_RSHIFT_U64: bpf_core_relo_kind = 5;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_ID_LOCAL: bpf_core_relo_kind = 6;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_ID_TARGET: bpf_core_relo_kind = 7;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_EXISTS: bpf_core_relo_kind = 8;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_SIZE: bpf_core_relo_kind = 9;
pub const bpf_core_relo_kind_BPF_CORE_ENUMVAL_EXISTS: bpf_core_relo_kind = 10;
pub const bpf_core_relo_kind_BPF_CORE_ENUMVAL_VALUE: bpf_core_relo_kind = 11;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_MATCHES: bpf_core_relo_kind = 12;
pub type bpf_core_relo_kind = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_core_relo {
    pub insn_off: __u32,
    pub type_id: __u32,
    pub access_str_off: __u32,
    pub kind: bpf_core_relo_kind,
}
impl Default for bpf_core_relo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BPF_F_TIMER_ABS: _bindgen_ty_216 = 1;
pub const BPF_F_TIMER_CPU_PIN: _bindgen_ty_216 = 2;
pub type _bindgen_ty_216 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_iter_num {
    pub __opaque: [__u64; 1usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sock_filter {
    pub code: __u16,
    pub jt: __u8,
    pub jf: __u8,
    pub k: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sock_fprog {
    pub len: core::ffi::c_ushort,
    pub filter: *mut sock_filter,
}
impl Default for sock_fprog {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut _text: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _stext: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _etext: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _data: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _sdata: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _edata: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __bss_start: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __bss_stop: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __init_begin: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __init_end: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _sinittext: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _einittext: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __start_ro_after_init: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __end_ro_after_init: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _end: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __per_cpu_load: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __per_cpu_start: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __per_cpu_end: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __kprobes_text_start: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __kprobes_text_end: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __entry_text_start: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __entry_text_end: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __start_rodata: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __end_rodata: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __irqentry_text_start: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __irqentry_text_end: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __softirqentry_text_start: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __softirqentry_text_end: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __start_once: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __end_once: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __ctors_start: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __ctors_end: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __start_opd: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __end_opd: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __noinstr_text_start: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __noinstr_text_end: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static __nosave_begin: core::ffi::c_void;
}
extern "C" {
    pub static __nosave_end: core::ffi::c_void;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct func_desc_t {
    pub addr: core::ffi::c_ulong,
}
extern "C" {
    pub static mut __brk_base: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __brk_limit: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __end_rodata_aligned: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __end_rodata_hpage_align: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __end_of_kernel_reserve: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _brk_start: core::ffi::c_ulong;
}
extern "C" {
    pub static mut _brk_end: core::ffi::c_ulong;
}
extern "C" {
    pub fn kallsyms_show_value(cred: *const cred) -> bool_;
}
extern "C" {
    pub fn kallsyms_sym_address(idx: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn kallsyms_on_each_symbol(
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut core::ffi::c_void,
                arg2: *const core::ffi::c_char,
                arg3: core::ffi::c_ulong,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kallsyms_on_each_match_symbol(
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut core::ffi::c_void,
                arg2: core::ffi::c_ulong,
            ) -> core::ffi::c_int,
        >,
        name: *const core::ffi::c_char,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kallsyms_lookup_name(name: *const core::ffi::c_char) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn kallsyms_lookup_size_offset(
        addr: core::ffi::c_ulong,
        symbolsize: *mut core::ffi::c_ulong,
        offset: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kallsyms_lookup(
        addr: core::ffi::c_ulong,
        symbolsize: *mut core::ffi::c_ulong,
        offset: *mut core::ffi::c_ulong,
        modname: *mut *mut core::ffi::c_char,
        namebuf: *mut core::ffi::c_char,
    ) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn sprint_symbol(
        buffer: *mut core::ffi::c_char,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sprint_symbol_build_id(
        buffer: *mut core::ffi::c_char,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sprint_symbol_no_offset(
        buffer: *mut core::ffi::c_char,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sprint_backtrace(
        buffer: *mut core::ffi::c_char,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sprint_backtrace_build_id(
        buffer: *mut core::ffi::c_char,
        address: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn lookup_symbol_name(
        addr: core::ffi::c_ulong,
        symname: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
pub type bpfptr_t = sockptr_t;
extern "C" {
    pub fn bsearch(
        key: *const core::ffi::c_void,
        base: *const core::ffi::c_void,
        num: usize,
        size: usize,
        cmp: cmp_func_t,
    ) -> *mut core::ffi::c_void;
}
#[repr(C)]
#[derive(Default)]
pub struct btf_id_set {
    pub cnt: u32_,
    pub ids: __IncompleteArrayField<u32_>,
}
#[repr(C)]
#[derive(Default)]
pub struct btf_id_set8 {
    pub cnt: u32_,
    pub flags: u32_,
    pub pairs: __IncompleteArrayField<btf_id_set8__bindgen_ty_1>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_id_set8__bindgen_ty_1 {
    pub id: u32_,
    pub flags: u32_,
}
pub const BTF_SOCK_TYPE_INET: _bindgen_ty_217 = 0;
pub const BTF_SOCK_TYPE_INET_CONN: _bindgen_ty_217 = 1;
pub const BTF_SOCK_TYPE_INET_REQ: _bindgen_ty_217 = 2;
pub const BTF_SOCK_TYPE_INET_TW: _bindgen_ty_217 = 3;
pub const BTF_SOCK_TYPE_REQ: _bindgen_ty_217 = 4;
pub const BTF_SOCK_TYPE_SOCK: _bindgen_ty_217 = 5;
pub const BTF_SOCK_TYPE_SOCK_COMMON: _bindgen_ty_217 = 6;
pub const BTF_SOCK_TYPE_TCP: _bindgen_ty_217 = 7;
pub const BTF_SOCK_TYPE_TCP_REQ: _bindgen_ty_217 = 8;
pub const BTF_SOCK_TYPE_TCP_TW: _bindgen_ty_217 = 9;
pub const BTF_SOCK_TYPE_TCP6: _bindgen_ty_217 = 10;
pub const BTF_SOCK_TYPE_UDP: _bindgen_ty_217 = 11;
pub const BTF_SOCK_TYPE_UDP6: _bindgen_ty_217 = 12;
pub const BTF_SOCK_TYPE_UNIX: _bindgen_ty_217 = 13;
pub const BTF_SOCK_TYPE_MPTCP: _bindgen_ty_217 = 14;
pub const BTF_SOCK_TYPE_SOCKET: _bindgen_ty_217 = 15;
pub const MAX_BTF_SOCK_TYPE: _bindgen_ty_217 = 16;
pub type _bindgen_ty_217 = core::ffi::c_uint;
extern "C" {
    pub static mut btf_sock_ids: [u32_; 0usize];
}
pub const BTF_TRACING_TYPE_TASK: _bindgen_ty_218 = 0;
pub const BTF_TRACING_TYPE_FILE: _bindgen_ty_218 = 1;
pub const BTF_TRACING_TYPE_VMA: _bindgen_ty_218 = 2;
pub const MAX_BTF_TRACING_TYPE: _bindgen_ty_218 = 3;
pub type _bindgen_ty_218 = core::ffi::c_uint;
extern "C" {
    pub static mut btf_tracing_ids: [u32_; 0usize];
}
extern "C" {
    pub static mut bpf_cgroup_btf_id: [u32_; 0usize];
}
extern "C" {
    pub static mut bpf_local_storage_map_btf_id: [u32_; 0usize];
}
extern "C" {
    pub static mut btf_bpf_map_id: [u32_; 0usize];
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_header {
    pub magic: __u16,
    pub version: __u8,
    pub flags: __u8,
    pub hdr_len: __u32,
    pub type_off: __u32,
    pub type_len: __u32,
    pub str_off: __u32,
    pub str_len: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_type {
    pub name_off: __u32,
    pub info: __u32,
    pub __bindgen_anon_1: btf_type__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btf_type__bindgen_ty_1 {
    pub size: __u32,
    pub type_: __u32,
}
impl Default for btf_type__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for btf_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BTF_KIND_UNKN: _bindgen_ty_219 = 0;
pub const BTF_KIND_INT: _bindgen_ty_219 = 1;
pub const BTF_KIND_PTR: _bindgen_ty_219 = 2;
pub const BTF_KIND_ARRAY: _bindgen_ty_219 = 3;
pub const BTF_KIND_STRUCT: _bindgen_ty_219 = 4;
pub const BTF_KIND_UNION: _bindgen_ty_219 = 5;
pub const BTF_KIND_ENUM: _bindgen_ty_219 = 6;
pub const BTF_KIND_FWD: _bindgen_ty_219 = 7;
pub const BTF_KIND_TYPEDEF: _bindgen_ty_219 = 8;
pub const BTF_KIND_VOLATILE: _bindgen_ty_219 = 9;
pub const BTF_KIND_CONST: _bindgen_ty_219 = 10;
pub const BTF_KIND_RESTRICT: _bindgen_ty_219 = 11;
pub const BTF_KIND_FUNC: _bindgen_ty_219 = 12;
pub const BTF_KIND_FUNC_PROTO: _bindgen_ty_219 = 13;
pub const BTF_KIND_VAR: _bindgen_ty_219 = 14;
pub const BTF_KIND_DATASEC: _bindgen_ty_219 = 15;
pub const BTF_KIND_FLOAT: _bindgen_ty_219 = 16;
pub const BTF_KIND_DECL_TAG: _bindgen_ty_219 = 17;
pub const BTF_KIND_TYPE_TAG: _bindgen_ty_219 = 18;
pub const BTF_KIND_ENUM64: _bindgen_ty_219 = 19;
pub const NR_BTF_KINDS: _bindgen_ty_219 = 20;
pub const BTF_KIND_MAX: _bindgen_ty_219 = 19;
pub type _bindgen_ty_219 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_enum {
    pub name_off: __u32,
    pub val: __s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_array {
    pub type_: __u32,
    pub index_type: __u32,
    pub nelems: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_member {
    pub name_off: __u32,
    pub type_: __u32,
    pub offset: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_param {
    pub name_off: __u32,
    pub type_: __u32,
}
pub const BTF_VAR_STATIC: _bindgen_ty_220 = 0;
pub const BTF_VAR_GLOBAL_ALLOCATED: _bindgen_ty_220 = 1;
pub const BTF_VAR_GLOBAL_EXTERN: _bindgen_ty_220 = 2;
pub type _bindgen_ty_220 = core::ffi::c_uint;
pub const btf_func_linkage_BTF_FUNC_STATIC: btf_func_linkage = 0;
pub const btf_func_linkage_BTF_FUNC_GLOBAL: btf_func_linkage = 1;
pub const btf_func_linkage_BTF_FUNC_EXTERN: btf_func_linkage = 2;
pub type btf_func_linkage = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_var {
    pub linkage: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_var_secinfo {
    pub type_: __u32,
    pub offset: __u32,
    pub size: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_decl_tag {
    pub component_idx: __s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_enum64 {
    pub name_off: __u32,
    pub val_lo32: __u32,
    pub val_hi32: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_show {
    _unused: [u8; 0],
}
pub type btf_kfunc_filter_t = ::core::option::Option<
    unsafe extern "C" fn(prog: *const bpf_prog, kfunc_id: u32_) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_kfunc_id_set {
    pub owner: *mut module,
    pub set: *mut btf_id_set8,
    pub filter: btf_kfunc_filter_t,
}
impl Default for btf_kfunc_id_set {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_id_dtor_kfunc {
    pub btf_id: u32_,
    pub kfunc_btf_id: u32_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_struct_meta {
    pub btf_id: u32_,
    pub record: *mut btf_record,
}
impl Default for btf_struct_meta {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct btf_struct_metas {
    pub cnt: u32_,
    pub types: __IncompleteArrayField<btf_struct_meta>,
}
impl Default for btf_struct_metas {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static btf_fops: file_operations;
}
extern "C" {
    pub fn btf_get_name(btf: *const btf) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn btf_get(btf: *mut btf);
}
extern "C" {
    pub fn btf_put(btf: *mut btf);
}
extern "C" {
    pub fn btf_header(btf: *const btf) -> *const btf_header;
}
extern "C" {
    pub fn btf_new_fd(attr: *const bpf_attr, uattr: bpfptr_t, uattr_sz: u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn btf_get_by_fd(fd: core::ffi::c_int) -> *mut btf;
}
extern "C" {
    pub fn btf_get_info_by_fd(
        btf: *const btf,
        attr: *const bpf_attr,
        uattr: *mut bpf_attr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn btf_type_id_size(
        btf: *const btf,
        type_id: *mut u32_,
        ret_size: *mut u32_,
    ) -> *const btf_type;
}
extern "C" {
    pub fn btf_type_seq_show(
        btf: *const btf,
        type_id: u32_,
        obj: *mut core::ffi::c_void,
        m: *mut seq_file,
    );
}
extern "C" {
    pub fn btf_type_seq_show_flags(
        btf: *const btf,
        type_id: u32_,
        obj: *mut core::ffi::c_void,
        m: *mut seq_file,
        flags: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn btf_type_snprintf_show(
        btf: *const btf,
        type_id: u32_,
        obj: *mut core::ffi::c_void,
        buf: *mut core::ffi::c_char,
        len: core::ffi::c_int,
        flags: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn btf_get_fd_by_id(id: u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn btf_obj_id(btf: *const btf) -> u32_;
}
extern "C" {
    pub fn btf_is_kernel(btf: *const btf) -> bool_;
}
extern "C" {
    pub fn btf_is_module(btf: *const btf) -> bool_;
}
extern "C" {
    pub fn btf_is_vmlinux(btf: *const btf) -> bool_;
}
extern "C" {
    pub fn btf_try_get_module(btf: *const btf) -> *mut module;
}
extern "C" {
    pub fn btf_nr_types(btf: *const btf) -> u32_;
}
extern "C" {
    pub fn btf_base_btf(btf: *const btf) -> *mut btf;
}
extern "C" {
    pub fn btf_member_is_reg_int(
        btf: *const btf,
        s: *const btf_type,
        m: *const btf_member,
        expected_offset: u32_,
        expected_size: u32_,
    ) -> bool_;
}
extern "C" {
    pub fn btf_parse_fields(
        btf: *const btf,
        t: *const btf_type,
        field_mask: u32_,
        value_size: u32_,
    ) -> *mut btf_record;
}
extern "C" {
    pub fn btf_check_and_fixup_fields(btf: *const btf, rec: *mut btf_record) -> core::ffi::c_int;
}
extern "C" {
    pub fn btf_type_is_void(t: *const btf_type) -> bool_;
}
extern "C" {
    pub fn btf_find_by_name_kind(btf: *const btf, name: *const core::ffi::c_char, kind: u8_)
        -> s32;
}
extern "C" {
    pub fn bpf_find_btf_id(name: *const core::ffi::c_char, kind: u32_, btf_p: *mut *mut btf)
        -> s32;
}
extern "C" {
    pub fn btf_type_skip_modifiers(btf: *const btf, id: u32_, res_id: *mut u32_)
        -> *const btf_type;
}
extern "C" {
    pub fn btf_type_resolve_ptr(btf: *const btf, id: u32_, res_id: *mut u32_) -> *const btf_type;
}
extern "C" {
    pub fn btf_type_resolve_func_ptr(
        btf: *const btf,
        id: u32_,
        res_id: *mut u32_,
    ) -> *const btf_type;
}
extern "C" {
    pub fn btf_resolve_size(
        btf: *const btf,
        type_: *const btf_type,
        type_size: *mut u32_,
    ) -> *const btf_type;
}
extern "C" {
    pub fn btf_type_str(t: *const btf_type) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn btf_param_match_suffix(
        btf: *const btf,
        arg: *const btf_param,
        suffix: *const core::ffi::c_char,
    ) -> bool_;
}
extern "C" {
    pub fn btf_ctx_arg_offset(
        btf: *const btf,
        func_proto: *const btf_type,
        arg_no: u32_,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_verifier_log {
    _unused: [u8; 0],
}
pub const btf_field_iter_kind_BTF_FIELD_ITER_IDS: btf_field_iter_kind = 0;
pub const btf_field_iter_kind_BTF_FIELD_ITER_STRS: btf_field_iter_kind = 1;
pub type btf_field_iter_kind = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_field_desc {
    pub t_off_cnt: core::ffi::c_int,
    pub t_offs: [core::ffi::c_int; 2usize],
    pub m_sz: core::ffi::c_int,
    pub m_off_cnt: core::ffi::c_int,
    pub m_offs: [core::ffi::c_int; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_field_iter {
    pub desc: btf_field_desc,
    pub p: *mut core::ffi::c_void,
    pub m_idx: core::ffi::c_int,
    pub off_idx: core::ffi::c_int,
    pub vlen: core::ffi::c_int,
}
impl Default for btf_field_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut rcu_trace_lock_map: lockdep_map;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct access_coordinate {
    pub read_bandwidth: core::ffi::c_uint,
    pub write_bandwidth: core::ffi::c_uint,
    pub read_latency: core::ffi::c_uint,
    pub write_latency: core::ffi::c_uint,
}
pub const access_coordinate_class_ACCESS_COORDINATE_LOCAL: access_coordinate_class = 0;
pub const access_coordinate_class_ACCESS_COORDINATE_CPU: access_coordinate_class = 1;
pub const access_coordinate_class_ACCESS_COORDINATE_MAX: access_coordinate_class = 2;
pub type access_coordinate_class = core::ffi::c_uint;
pub const cache_indexing_NODE_CACHE_DIRECT_MAP: cache_indexing = 0;
pub const cache_indexing_NODE_CACHE_INDEXED: cache_indexing = 1;
pub const cache_indexing_NODE_CACHE_OTHER: cache_indexing = 2;
pub type cache_indexing = core::ffi::c_uint;
pub const cache_write_policy_NODE_CACHE_WRITE_BACK: cache_write_policy = 0;
pub const cache_write_policy_NODE_CACHE_WRITE_THROUGH: cache_write_policy = 1;
pub const cache_write_policy_NODE_CACHE_WRITE_OTHER: cache_write_policy = 2;
pub type cache_write_policy = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct node_cache_attrs {
    pub indexing: cache_indexing,
    pub write_policy: cache_write_policy,
    pub size: u64_,
    pub line_size: u16_,
    pub level: u8_,
}
impl Default for node_cache_attrs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct node {
    pub dev: device,
    pub access_list: list_head,
}
impl Default for node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct memory_block {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut node_devices: [*mut node; 0usize];
}
extern "C" {
    pub fn unregister_node(node: *mut node);
}
extern "C" {
    pub fn node_dev_init();
}
extern "C" {
    pub fn __register_one_node(nid: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_one_node(nid: core::ffi::c_int);
}
extern "C" {
    pub fn register_cpu_under_node(
        cpu: core::ffi::c_uint,
        nid: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_cpu_under_node(
        cpu: core::ffi::c_uint,
        nid: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_memory_block_under_nodes(mem_blk: *mut memory_block);
}
extern "C" {
    pub fn register_memory_node_under_compute_node(
        mem_nid: core::ffi::c_uint,
        cpu_nid: core::ffi::c_uint,
        access: access_coordinate_class,
    ) -> core::ffi::c_int;
}
pub const cpuhp_state_CPUHP_INVALID: cpuhp_state = -1;
pub const cpuhp_state_CPUHP_OFFLINE: cpuhp_state = 0;
pub const cpuhp_state_CPUHP_CREATE_THREADS: cpuhp_state = 1;
pub const cpuhp_state_CPUHP_PERF_PREPARE: cpuhp_state = 2;
pub const cpuhp_state_CPUHP_PERF_X86_PREPARE: cpuhp_state = 3;
pub const cpuhp_state_CPUHP_PERF_X86_AMD_UNCORE_PREP: cpuhp_state = 4;
pub const cpuhp_state_CPUHP_PERF_POWER: cpuhp_state = 5;
pub const cpuhp_state_CPUHP_PERF_SUPERH: cpuhp_state = 6;
pub const cpuhp_state_CPUHP_X86_HPET_DEAD: cpuhp_state = 7;
pub const cpuhp_state_CPUHP_X86_MCE_DEAD: cpuhp_state = 8;
pub const cpuhp_state_CPUHP_VIRT_NET_DEAD: cpuhp_state = 9;
pub const cpuhp_state_CPUHP_IBMVNIC_DEAD: cpuhp_state = 10;
pub const cpuhp_state_CPUHP_SLUB_DEAD: cpuhp_state = 11;
pub const cpuhp_state_CPUHP_DEBUG_OBJ_DEAD: cpuhp_state = 12;
pub const cpuhp_state_CPUHP_MM_WRITEBACK_DEAD: cpuhp_state = 13;
pub const cpuhp_state_CPUHP_MM_VMSTAT_DEAD: cpuhp_state = 14;
pub const cpuhp_state_CPUHP_SOFTIRQ_DEAD: cpuhp_state = 15;
pub const cpuhp_state_CPUHP_NET_MVNETA_DEAD: cpuhp_state = 16;
pub const cpuhp_state_CPUHP_CPUIDLE_DEAD: cpuhp_state = 17;
pub const cpuhp_state_CPUHP_ARM64_FPSIMD_DEAD: cpuhp_state = 18;
pub const cpuhp_state_CPUHP_ARM_OMAP_WAKE_DEAD: cpuhp_state = 19;
pub const cpuhp_state_CPUHP_IRQ_POLL_DEAD: cpuhp_state = 20;
pub const cpuhp_state_CPUHP_BLOCK_SOFTIRQ_DEAD: cpuhp_state = 21;
pub const cpuhp_state_CPUHP_BIO_DEAD: cpuhp_state = 22;
pub const cpuhp_state_CPUHP_ACPI_CPUDRV_DEAD: cpuhp_state = 23;
pub const cpuhp_state_CPUHP_S390_PFAULT_DEAD: cpuhp_state = 24;
pub const cpuhp_state_CPUHP_BLK_MQ_DEAD: cpuhp_state = 25;
pub const cpuhp_state_CPUHP_FS_BUFF_DEAD: cpuhp_state = 26;
pub const cpuhp_state_CPUHP_PRINTK_DEAD: cpuhp_state = 27;
pub const cpuhp_state_CPUHP_MM_MEMCQ_DEAD: cpuhp_state = 28;
pub const cpuhp_state_CPUHP_PERCPU_CNT_DEAD: cpuhp_state = 29;
pub const cpuhp_state_CPUHP_RADIX_DEAD: cpuhp_state = 30;
pub const cpuhp_state_CPUHP_PAGE_ALLOC: cpuhp_state = 31;
pub const cpuhp_state_CPUHP_NET_DEV_DEAD: cpuhp_state = 32;
pub const cpuhp_state_CPUHP_PCI_XGENE_DEAD: cpuhp_state = 33;
pub const cpuhp_state_CPUHP_IOMMU_IOVA_DEAD: cpuhp_state = 34;
pub const cpuhp_state_CPUHP_AP_ARM_CACHE_B15_RAC_DEAD: cpuhp_state = 35;
pub const cpuhp_state_CPUHP_PADATA_DEAD: cpuhp_state = 36;
pub const cpuhp_state_CPUHP_AP_DTPM_CPU_DEAD: cpuhp_state = 37;
pub const cpuhp_state_CPUHP_RANDOM_PREPARE: cpuhp_state = 38;
pub const cpuhp_state_CPUHP_WORKQUEUE_PREP: cpuhp_state = 39;
pub const cpuhp_state_CPUHP_POWER_NUMA_PREPARE: cpuhp_state = 40;
pub const cpuhp_state_CPUHP_HRTIMERS_PREPARE: cpuhp_state = 41;
pub const cpuhp_state_CPUHP_PROFILE_PREPARE: cpuhp_state = 42;
pub const cpuhp_state_CPUHP_X2APIC_PREPARE: cpuhp_state = 43;
pub const cpuhp_state_CPUHP_SMPCFD_PREPARE: cpuhp_state = 44;
pub const cpuhp_state_CPUHP_RELAY_PREPARE: cpuhp_state = 45;
pub const cpuhp_state_CPUHP_MD_RAID5_PREPARE: cpuhp_state = 46;
pub const cpuhp_state_CPUHP_RCUTREE_PREP: cpuhp_state = 47;
pub const cpuhp_state_CPUHP_CPUIDLE_COUPLED_PREPARE: cpuhp_state = 48;
pub const cpuhp_state_CPUHP_POWERPC_PMAC_PREPARE: cpuhp_state = 49;
pub const cpuhp_state_CPUHP_POWERPC_MMU_CTX_PREPARE: cpuhp_state = 50;
pub const cpuhp_state_CPUHP_XEN_PREPARE: cpuhp_state = 51;
pub const cpuhp_state_CPUHP_XEN_EVTCHN_PREPARE: cpuhp_state = 52;
pub const cpuhp_state_CPUHP_ARM_SHMOBILE_SCU_PREPARE: cpuhp_state = 53;
pub const cpuhp_state_CPUHP_SH_SH3X_PREPARE: cpuhp_state = 54;
pub const cpuhp_state_CPUHP_TOPOLOGY_PREPARE: cpuhp_state = 55;
pub const cpuhp_state_CPUHP_NET_IUCV_PREPARE: cpuhp_state = 56;
pub const cpuhp_state_CPUHP_ARM_BL_PREPARE: cpuhp_state = 57;
pub const cpuhp_state_CPUHP_TRACE_RB_PREPARE: cpuhp_state = 58;
pub const cpuhp_state_CPUHP_MM_ZS_PREPARE: cpuhp_state = 59;
pub const cpuhp_state_CPUHP_MM_ZSWP_POOL_PREPARE: cpuhp_state = 60;
pub const cpuhp_state_CPUHP_KVM_PPC_BOOK3S_PREPARE: cpuhp_state = 61;
pub const cpuhp_state_CPUHP_ZCOMP_PREPARE: cpuhp_state = 62;
pub const cpuhp_state_CPUHP_TIMERS_PREPARE: cpuhp_state = 63;
pub const cpuhp_state_CPUHP_TMIGR_PREPARE: cpuhp_state = 64;
pub const cpuhp_state_CPUHP_MIPS_SOC_PREPARE: cpuhp_state = 65;
pub const cpuhp_state_CPUHP_BP_PREPARE_DYN: cpuhp_state = 66;
pub const cpuhp_state_CPUHP_BP_PREPARE_DYN_END: cpuhp_state = 86;
pub const cpuhp_state_CPUHP_BP_KICK_AP: cpuhp_state = 87;
pub const cpuhp_state_CPUHP_BRINGUP_CPU: cpuhp_state = 88;
pub const cpuhp_state_CPUHP_AP_IDLE_DEAD: cpuhp_state = 89;
pub const cpuhp_state_CPUHP_AP_OFFLINE: cpuhp_state = 90;
pub const cpuhp_state_CPUHP_AP_CACHECTRL_STARTING: cpuhp_state = 91;
pub const cpuhp_state_CPUHP_AP_SCHED_STARTING: cpuhp_state = 92;
pub const cpuhp_state_CPUHP_AP_RCUTREE_DYING: cpuhp_state = 93;
pub const cpuhp_state_CPUHP_AP_CPU_PM_STARTING: cpuhp_state = 94;
pub const cpuhp_state_CPUHP_AP_IRQ_GIC_STARTING: cpuhp_state = 95;
pub const cpuhp_state_CPUHP_AP_IRQ_HIP04_STARTING: cpuhp_state = 96;
pub const cpuhp_state_CPUHP_AP_IRQ_APPLE_AIC_STARTING: cpuhp_state = 97;
pub const cpuhp_state_CPUHP_AP_IRQ_ARMADA_XP_STARTING: cpuhp_state = 98;
pub const cpuhp_state_CPUHP_AP_IRQ_BCM2836_STARTING: cpuhp_state = 99;
pub const cpuhp_state_CPUHP_AP_IRQ_MIPS_GIC_STARTING: cpuhp_state = 100;
pub const cpuhp_state_CPUHP_AP_IRQ_LOONGARCH_STARTING: cpuhp_state = 101;
pub const cpuhp_state_CPUHP_AP_IRQ_SIFIVE_PLIC_STARTING: cpuhp_state = 102;
pub const cpuhp_state_CPUHP_AP_IRQ_RISCV_IMSIC_STARTING: cpuhp_state = 103;
pub const cpuhp_state_CPUHP_AP_ARM_MVEBU_COHERENCY: cpuhp_state = 104;
pub const cpuhp_state_CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING: cpuhp_state = 105;
pub const cpuhp_state_CPUHP_AP_PERF_X86_STARTING: cpuhp_state = 106;
pub const cpuhp_state_CPUHP_AP_PERF_X86_AMD_IBS_STARTING: cpuhp_state = 107;
pub const cpuhp_state_CPUHP_AP_PERF_X86_CSTATE_STARTING: cpuhp_state = 108;
pub const cpuhp_state_CPUHP_AP_PERF_XTENSA_STARTING: cpuhp_state = 109;
pub const cpuhp_state_CPUHP_AP_ARM_VFP_STARTING: cpuhp_state = 110;
pub const cpuhp_state_CPUHP_AP_ARM64_DEBUG_MONITORS_STARTING: cpuhp_state = 111;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_HW_BREAKPOINT_STARTING: cpuhp_state = 112;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_ACPI_STARTING: cpuhp_state = 113;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_STARTING: cpuhp_state = 114;
pub const cpuhp_state_CPUHP_AP_PERF_RISCV_STARTING: cpuhp_state = 115;
pub const cpuhp_state_CPUHP_AP_ARM_L2X0_STARTING: cpuhp_state = 116;
pub const cpuhp_state_CPUHP_AP_EXYNOS4_MCT_TIMER_STARTING: cpuhp_state = 117;
pub const cpuhp_state_CPUHP_AP_ARM_ARCH_TIMER_STARTING: cpuhp_state = 118;
pub const cpuhp_state_CPUHP_AP_ARM_ARCH_TIMER_EVTSTRM_STARTING: cpuhp_state = 119;
pub const cpuhp_state_CPUHP_AP_ARM_GLOBAL_TIMER_STARTING: cpuhp_state = 120;
pub const cpuhp_state_CPUHP_AP_JCORE_TIMER_STARTING: cpuhp_state = 121;
pub const cpuhp_state_CPUHP_AP_ARM_TWD_STARTING: cpuhp_state = 122;
pub const cpuhp_state_CPUHP_AP_QCOM_TIMER_STARTING: cpuhp_state = 123;
pub const cpuhp_state_CPUHP_AP_TEGRA_TIMER_STARTING: cpuhp_state = 124;
pub const cpuhp_state_CPUHP_AP_ARMADA_TIMER_STARTING: cpuhp_state = 125;
pub const cpuhp_state_CPUHP_AP_MIPS_GIC_TIMER_STARTING: cpuhp_state = 126;
pub const cpuhp_state_CPUHP_AP_ARC_TIMER_STARTING: cpuhp_state = 127;
pub const cpuhp_state_CPUHP_AP_REALTEK_TIMER_STARTING: cpuhp_state = 128;
pub const cpuhp_state_CPUHP_AP_RISCV_TIMER_STARTING: cpuhp_state = 129;
pub const cpuhp_state_CPUHP_AP_CLINT_TIMER_STARTING: cpuhp_state = 130;
pub const cpuhp_state_CPUHP_AP_CSKY_TIMER_STARTING: cpuhp_state = 131;
pub const cpuhp_state_CPUHP_AP_TI_GP_TIMER_STARTING: cpuhp_state = 132;
pub const cpuhp_state_CPUHP_AP_HYPERV_TIMER_STARTING: cpuhp_state = 133;
pub const cpuhp_state_CPUHP_AP_DUMMY_TIMER_STARTING: cpuhp_state = 134;
pub const cpuhp_state_CPUHP_AP_ARM_XEN_STARTING: cpuhp_state = 135;
pub const cpuhp_state_CPUHP_AP_ARM_XEN_RUNSTATE_STARTING: cpuhp_state = 136;
pub const cpuhp_state_CPUHP_AP_ARM_CORESIGHT_STARTING: cpuhp_state = 137;
pub const cpuhp_state_CPUHP_AP_ARM_CORESIGHT_CTI_STARTING: cpuhp_state = 138;
pub const cpuhp_state_CPUHP_AP_ARM64_ISNDEP_STARTING: cpuhp_state = 139;
pub const cpuhp_state_CPUHP_AP_SMPCFD_DYING: cpuhp_state = 140;
pub const cpuhp_state_CPUHP_AP_HRTIMERS_DYING: cpuhp_state = 141;
pub const cpuhp_state_CPUHP_AP_TICK_DYING: cpuhp_state = 142;
pub const cpuhp_state_CPUHP_AP_X86_TBOOT_DYING: cpuhp_state = 143;
pub const cpuhp_state_CPUHP_AP_ARM_CACHE_B15_RAC_DYING: cpuhp_state = 144;
pub const cpuhp_state_CPUHP_AP_ONLINE: cpuhp_state = 145;
pub const cpuhp_state_CPUHP_TEARDOWN_CPU: cpuhp_state = 146;
pub const cpuhp_state_CPUHP_AP_ONLINE_IDLE: cpuhp_state = 147;
pub const cpuhp_state_CPUHP_AP_HYPERV_ONLINE: cpuhp_state = 148;
pub const cpuhp_state_CPUHP_AP_KVM_ONLINE: cpuhp_state = 149;
pub const cpuhp_state_CPUHP_AP_SCHED_WAIT_EMPTY: cpuhp_state = 150;
pub const cpuhp_state_CPUHP_AP_SMPBOOT_THREADS: cpuhp_state = 151;
pub const cpuhp_state_CPUHP_AP_IRQ_AFFINITY_ONLINE: cpuhp_state = 152;
pub const cpuhp_state_CPUHP_AP_BLK_MQ_ONLINE: cpuhp_state = 153;
pub const cpuhp_state_CPUHP_AP_ARM_MVEBU_SYNC_CLOCKS: cpuhp_state = 154;
pub const cpuhp_state_CPUHP_AP_X86_INTEL_EPB_ONLINE: cpuhp_state = 155;
pub const cpuhp_state_CPUHP_AP_PERF_ONLINE: cpuhp_state = 156;
pub const cpuhp_state_CPUHP_AP_PERF_X86_ONLINE: cpuhp_state = 157;
pub const cpuhp_state_CPUHP_AP_PERF_X86_UNCORE_ONLINE: cpuhp_state = 158;
pub const cpuhp_state_CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE: cpuhp_state = 159;
pub const cpuhp_state_CPUHP_AP_PERF_X86_AMD_POWER_ONLINE: cpuhp_state = 160;
pub const cpuhp_state_CPUHP_AP_PERF_X86_RAPL_ONLINE: cpuhp_state = 161;
pub const cpuhp_state_CPUHP_AP_PERF_X86_CSTATE_ONLINE: cpuhp_state = 162;
pub const cpuhp_state_CPUHP_AP_PERF_S390_CF_ONLINE: cpuhp_state = 163;
pub const cpuhp_state_CPUHP_AP_PERF_S390_SF_ONLINE: cpuhp_state = 164;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_CCI_ONLINE: cpuhp_state = 165;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_CCN_ONLINE: cpuhp_state = 166;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_HISI_CPA_ONLINE: cpuhp_state = 167;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_HISI_DDRC_ONLINE: cpuhp_state = 168;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_HISI_HHA_ONLINE: cpuhp_state = 169;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_HISI_L3_ONLINE: cpuhp_state = 170;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_HISI_PA_ONLINE: cpuhp_state = 171;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_HISI_SLLC_ONLINE: cpuhp_state = 172;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_HISI_PCIE_PMU_ONLINE: cpuhp_state = 173;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_HNS3_PMU_ONLINE: cpuhp_state = 174;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_L2X0_ONLINE: cpuhp_state = 175;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_QCOM_L2_ONLINE: cpuhp_state = 176;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_QCOM_L3_ONLINE: cpuhp_state = 177;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_APM_XGENE_ONLINE: cpuhp_state = 178;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_CAVIUM_TX2_UNCORE_ONLINE: cpuhp_state = 179;
pub const cpuhp_state_CPUHP_AP_PERF_ARM_MARVELL_CN10K_DDR_ONLINE: cpuhp_state = 180;
pub const cpuhp_state_CPUHP_AP_PERF_POWERPC_NEST_IMC_ONLINE: cpuhp_state = 181;
pub const cpuhp_state_CPUHP_AP_PERF_POWERPC_CORE_IMC_ONLINE: cpuhp_state = 182;
pub const cpuhp_state_CPUHP_AP_PERF_POWERPC_THREAD_IMC_ONLINE: cpuhp_state = 183;
pub const cpuhp_state_CPUHP_AP_PERF_POWERPC_TRACE_IMC_ONLINE: cpuhp_state = 184;
pub const cpuhp_state_CPUHP_AP_PERF_POWERPC_HV_24x7_ONLINE: cpuhp_state = 185;
pub const cpuhp_state_CPUHP_AP_PERF_POWERPC_HV_GPCI_ONLINE: cpuhp_state = 186;
pub const cpuhp_state_CPUHP_AP_PERF_CSKY_ONLINE: cpuhp_state = 187;
pub const cpuhp_state_CPUHP_AP_TMIGR_ONLINE: cpuhp_state = 188;
pub const cpuhp_state_CPUHP_AP_WATCHDOG_ONLINE: cpuhp_state = 189;
pub const cpuhp_state_CPUHP_AP_WORKQUEUE_ONLINE: cpuhp_state = 190;
pub const cpuhp_state_CPUHP_AP_RANDOM_ONLINE: cpuhp_state = 191;
pub const cpuhp_state_CPUHP_AP_RCUTREE_ONLINE: cpuhp_state = 192;
pub const cpuhp_state_CPUHP_AP_BASE_CACHEINFO_ONLINE: cpuhp_state = 193;
pub const cpuhp_state_CPUHP_AP_ONLINE_DYN: cpuhp_state = 194;
pub const cpuhp_state_CPUHP_AP_ONLINE_DYN_END: cpuhp_state = 234;
pub const cpuhp_state_CPUHP_AP_X86_HPET_ONLINE: cpuhp_state = 235;
pub const cpuhp_state_CPUHP_AP_X86_KVM_CLK_ONLINE: cpuhp_state = 236;
pub const cpuhp_state_CPUHP_AP_ACTIVE: cpuhp_state = 237;
pub const cpuhp_state_CPUHP_ONLINE: cpuhp_state = 238;
pub type cpuhp_state = core::ffi::c_int;
extern "C" {
    pub fn __cpuhp_setup_state(
        state: cpuhp_state,
        name: *const core::ffi::c_char,
        invoke: bool_,
        startup: ::core::option::Option<
            unsafe extern "C" fn(cpu: core::ffi::c_uint) -> core::ffi::c_int,
        >,
        teardown: ::core::option::Option<
            unsafe extern "C" fn(cpu: core::ffi::c_uint) -> core::ffi::c_int,
        >,
        multi_instance: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cpuhp_setup_state_cpuslocked(
        state: cpuhp_state,
        name: *const core::ffi::c_char,
        invoke: bool_,
        startup: ::core::option::Option<
            unsafe extern "C" fn(cpu: core::ffi::c_uint) -> core::ffi::c_int,
        >,
        teardown: ::core::option::Option<
            unsafe extern "C" fn(cpu: core::ffi::c_uint) -> core::ffi::c_int,
        >,
        multi_instance: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cpuhp_state_add_instance(
        state: cpuhp_state,
        node: *mut hlist_node,
        invoke: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cpuhp_state_add_instance_cpuslocked(
        state: cpuhp_state,
        node: *mut hlist_node,
        invoke: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cpuhp_remove_state(state: cpuhp_state, invoke: bool_);
}
extern "C" {
    pub fn __cpuhp_remove_state_cpuslocked(state: cpuhp_state, invoke: bool_);
}
extern "C" {
    pub fn __cpuhp_state_remove_instance(
        state: cpuhp_state,
        node: *mut hlist_node,
        invoke: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cpuhp_online_idle(state: cpuhp_state);
}
extern "C" {
    pub fn cpuhp_ap_sync_alive();
}
extern "C" {
    pub fn arch_cpuhp_sync_state_poll();
}
extern "C" {
    pub fn arch_cpuhp_cleanup_kick_cpu(cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn arch_cpuhp_kick_ap_alive(
        cpu: core::ffi::c_uint,
        tidle: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_cpuhp_init_parallel_bringup() -> bool_;
}
extern "C" {
    pub fn cpuhp_ap_report_dead();
}
extern "C" {
    pub fn arch_cpuhp_cleanup_dead_cpu(cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn lockdep_is_cpus_held() -> core::ffi::c_int;
}
extern "C" {
    pub fn cpus_write_lock();
}
extern "C" {
    pub fn cpus_write_unlock();
}
extern "C" {
    pub fn cpus_read_lock();
}
extern "C" {
    pub fn cpus_read_unlock();
}
extern "C" {
    pub fn cpus_read_trylock() -> core::ffi::c_int;
}
extern "C" {
    pub fn lockdep_assert_cpus_held();
}
extern "C" {
    pub fn cpu_hotplug_disable_offlining();
}
extern "C" {
    pub fn cpu_hotplug_disable();
}
extern "C" {
    pub fn cpu_hotplug_enable();
}
extern "C" {
    pub fn clear_tasks_mm_cpumask(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn remove_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn cpu_device_down(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn smp_shutdown_nonboot_cpus(primary_cpu: core::ffi::c_uint);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_cpus_read_lock_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_cpus_read_lock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpu {
    pub node_id: core::ffi::c_int,
    pub hotpluggable: core::ffi::c_int,
    pub dev: device,
}
impl Default for cpu {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn boot_cpu_init();
}
extern "C" {
    pub fn boot_cpu_hotplug_init();
}
extern "C" {
    pub fn trap_init();
}
extern "C" {
    pub fn register_cpu(cpu: *mut cpu, num: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_cpu_device(cpu: core::ffi::c_uint) -> *mut device;
}
extern "C" {
    pub fn cpu_is_hotpluggable(cpu: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn arch_match_cpu_phys_id(cpu: core::ffi::c_int, phys_id: u64_) -> bool_;
}
extern "C" {
    pub fn arch_find_n_match_cpu_physical_id(
        cpun: *mut device_node,
        cpu: core::ffi::c_int,
        thread: *mut core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn cpu_add_dev_attr(attr: *mut device_attribute) -> core::ffi::c_int;
}
extern "C" {
    pub fn cpu_remove_dev_attr(attr: *mut device_attribute);
}
extern "C" {
    pub fn cpu_add_dev_attr_group(attrs: *mut attribute_group) -> core::ffi::c_int;
}
extern "C" {
    pub fn cpu_remove_dev_attr_group(attrs: *mut attribute_group);
}
extern "C" {
    pub fn cpu_show_meltdown(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_spectre_v1(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_spectre_v2(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_spec_store_bypass(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_l1tf(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_mds(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_tsx_async_abort(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_itlb_multihit(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_srbds(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_mmio_stale_data(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_retbleed(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_spec_rstack_overflow(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_gds(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_show_reg_file_data_sampling(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub fn cpu_device_create(
        parent: *mut device,
        drvdata: *mut core::ffi::c_void,
        groups: *mut *const attribute_group,
        fmt: *const core::ffi::c_char,
        ...
    ) -> *mut device;
}
extern "C" {
    pub fn arch_cpu_is_hotpluggable(cpu: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn arch_register_cpu(cpu: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_unregister_cpu(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn unregister_cpu(cpu: *mut cpu);
}
extern "C" {
    pub fn arch_cpu_probe(arg1: *const core::ffi::c_char, arg2: usize) -> isize;
}
extern "C" {
    pub fn arch_cpu_release(arg1: *const core::ffi::c_char, arg2: usize) -> isize;
}
extern "C" {
    pub static mut cpu_devices: cpu;
}
extern "C" {
    pub static mut cpuhp_tasks_frozen: bool_;
}
extern "C" {
    pub fn add_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn cpu_device_up(dev: *mut device) -> core::ffi::c_int;
}
extern "C" {
    pub fn notify_cpu_starting(cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn cpu_maps_update_begin();
}
extern "C" {
    pub fn cpu_maps_update_done();
}
extern "C" {
    pub fn bringup_hibernate_cpu(sleep_cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn bringup_nonboot_cpus(max_cpus: core::ffi::c_uint);
}
extern "C" {
    pub static cpu_subsys: bus_type;
}
extern "C" {
    pub fn freeze_secondary_cpus(primary: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn thaw_secondary_cpus();
}
extern "C" {
    pub fn cpu_startup_entry(state: cpuhp_state) -> !;
}
extern "C" {
    pub fn cpu_idle_poll_ctrl(enable: bool_);
}
extern "C" {
    pub fn cpu_in_idle(pc: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn arch_cpu_idle();
}
extern "C" {
    pub fn arch_cpu_idle_prepare();
}
extern "C" {
    pub fn arch_cpu_idle_enter();
}
extern "C" {
    pub fn arch_cpu_idle_exit();
}
extern "C" {
    pub fn arch_tick_broadcast_enter();
}
extern "C" {
    pub fn arch_tick_broadcast_exit();
}
extern "C" {
    pub fn arch_cpu_idle_dead() -> !;
}
extern "C" {
    pub fn arch_cpu_finalize_init();
}
extern "C" {
    pub fn play_idle_precise(duration_ns: u64_, latency_ns: u64_);
}
extern "C" {
    pub fn cpuhp_report_idle_dead();
}
extern "C" {
    pub fn cpu_mitigations_off() -> bool_;
}
extern "C" {
    pub fn cpu_mitigations_auto_nosmt() -> bool_;
}
extern "C" {
    pub fn text_poke_early(
        addr: *mut core::ffi::c_void,
        opcode: *const core::ffi::c_void,
        len: usize,
    );
}
extern "C" {
    pub fn apply_relocation(
        buf: *mut u8_,
        instr: *const u8_,
        instrlen: usize,
        repl: *mut u8_,
        repl_len: usize,
    );
}
extern "C" {
    pub fn text_poke(
        addr: *mut core::ffi::c_void,
        opcode: *const core::ffi::c_void,
        len: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn text_poke_sync();
}
extern "C" {
    pub fn text_poke_kgdb(
        addr: *mut core::ffi::c_void,
        opcode: *const core::ffi::c_void,
        len: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn text_poke_copy(
        addr: *mut core::ffi::c_void,
        opcode: *const core::ffi::c_void,
        len: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn text_poke_copy_locked(
        addr: *mut core::ffi::c_void,
        opcode: *const core::ffi::c_void,
        len: usize,
        core_ok: bool_,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn text_poke_set(
        addr: *mut core::ffi::c_void,
        c: core::ffi::c_int,
        len: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn poke_int3_handler(regs: *mut pt_regs) -> core::ffi::c_int;
}
extern "C" {
    pub fn text_poke_bp(
        addr: *mut core::ffi::c_void,
        opcode: *const core::ffi::c_void,
        len: usize,
        emulate: *const core::ffi::c_void,
    );
}
extern "C" {
    pub fn text_poke_queue(
        addr: *mut core::ffi::c_void,
        opcode: *const core::ffi::c_void,
        len: usize,
        emulate: *const core::ffi::c_void,
    );
}
extern "C" {
    pub fn text_poke_finish();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union text_poke_insn {
    pub text: [u8_; 5usize],
    pub __bindgen_anon_1: text_poke_insn__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct text_poke_insn__bindgen_ty_1 {
    pub opcode: u8_,
    pub disp: s32,
}
impl Default for text_poke_insn {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut after_bootmem: core::ffi::c_int;
}
extern "C" {
    pub static mut poking_mm: *mut mm_struct;
}
extern "C" {
    pub static mut poking_addr: core::ffi::c_ulong;
}
extern "C" {
    pub fn __static_call_fixup(
        tramp: *mut core::ffi::c_void,
        op: u8_,
        dest: *mut core::ffi::c_void,
    ) -> bool_;
}
extern "C" {
    pub fn arch_static_call_transform(
        site: *mut core::ffi::c_void,
        tramp: *mut core::ffi::c_void,
        func: *mut core::ffi::c_void,
        tail: bool_,
    );
}
extern "C" {
    pub fn static_call_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn static_call_force_reinit();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_call_mod {
    pub next: *mut static_call_mod,
    pub mod_: *mut module,
    pub sites: *mut static_call_site,
}
impl Default for static_call_mod {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct static_call_tramp_key {
    pub tramp: s32,
    pub key: s32,
}
extern "C" {
    pub fn __static_call_update(
        key: *mut static_call_key,
        tramp: *mut core::ffi::c_void,
        func: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn static_call_mod_init(mod_: *mut module) -> core::ffi::c_int;
}
extern "C" {
    pub fn static_call_text_reserved(
        start: *mut core::ffi::c_void,
        end: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __static_call_return0() -> core::ffi::c_long;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct taskstats {
    pub version: __u16,
    pub ac_exitcode: __u32,
    pub ac_flag: __u8,
    pub ac_nice: __u8,
    pub cpu_count: __u64,
    pub cpu_delay_total: __u64,
    pub blkio_count: __u64,
    pub blkio_delay_total: __u64,
    pub swapin_count: __u64,
    pub swapin_delay_total: __u64,
    pub cpu_run_real_total: __u64,
    pub cpu_run_virtual_total: __u64,
    pub ac_comm: [core::ffi::c_char; 32usize],
    pub ac_sched: __u8,
    pub ac_pad: [__u8; 3usize],
    pub __bindgen_padding_0: u32,
    pub ac_uid: __u32,
    pub ac_gid: __u32,
    pub ac_pid: __u32,
    pub ac_ppid: __u32,
    pub ac_btime: __u32,
    pub ac_etime: __u64,
    pub ac_utime: __u64,
    pub ac_stime: __u64,
    pub ac_minflt: __u64,
    pub ac_majflt: __u64,
    pub coremem: __u64,
    pub virtmem: __u64,
    pub hiwater_rss: __u64,
    pub hiwater_vm: __u64,
    pub read_char: __u64,
    pub write_char: __u64,
    pub read_syscalls: __u64,
    pub write_syscalls: __u64,
    pub read_bytes: __u64,
    pub write_bytes: __u64,
    pub cancelled_write_bytes: __u64,
    pub nvcsw: __u64,
    pub nivcsw: __u64,
    pub ac_utimescaled: __u64,
    pub ac_stimescaled: __u64,
    pub cpu_scaled_run_real_total: __u64,
    pub freepages_count: __u64,
    pub freepages_delay_total: __u64,
    pub thrashing_count: __u64,
    pub thrashing_delay_total: __u64,
    pub ac_btime64: __u64,
    pub compact_count: __u64,
    pub compact_delay_total: __u64,
    pub ac_tgid: __u32,
    pub ac_tgetime: __u64,
    pub ac_exe_dev: __u64,
    pub ac_exe_inode: __u64,
    pub wpcopy_count: __u64,
    pub wpcopy_delay_total: __u64,
    pub irq_count: __u64,
    pub irq_delay_total: __u64,
}
pub const TASKSTATS_CMD_UNSPEC: _bindgen_ty_221 = 0;
pub const TASKSTATS_CMD_GET: _bindgen_ty_221 = 1;
pub const TASKSTATS_CMD_NEW: _bindgen_ty_221 = 2;
pub const __TASKSTATS_CMD_MAX: _bindgen_ty_221 = 3;
pub type _bindgen_ty_221 = core::ffi::c_uint;
pub const TASKSTATS_TYPE_UNSPEC: _bindgen_ty_222 = 0;
pub const TASKSTATS_TYPE_PID: _bindgen_ty_222 = 1;
pub const TASKSTATS_TYPE_TGID: _bindgen_ty_222 = 2;
pub const TASKSTATS_TYPE_STATS: _bindgen_ty_222 = 3;
pub const TASKSTATS_TYPE_AGGR_PID: _bindgen_ty_222 = 4;
pub const TASKSTATS_TYPE_AGGR_TGID: _bindgen_ty_222 = 5;
pub const TASKSTATS_TYPE_NULL: _bindgen_ty_222 = 6;
pub const __TASKSTATS_TYPE_MAX: _bindgen_ty_222 = 7;
pub type _bindgen_ty_222 = core::ffi::c_uint;
pub const TASKSTATS_CMD_ATTR_UNSPEC: _bindgen_ty_223 = 0;
pub const TASKSTATS_CMD_ATTR_PID: _bindgen_ty_223 = 1;
pub const TASKSTATS_CMD_ATTR_TGID: _bindgen_ty_223 = 2;
pub const TASKSTATS_CMD_ATTR_REGISTER_CPUMASK: _bindgen_ty_223 = 3;
pub const TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK: _bindgen_ty_223 = 4;
pub const __TASKSTATS_CMD_ATTR_MAX: _bindgen_ty_223 = 5;
pub type _bindgen_ty_223 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cgroupstats {
    pub nr_sleeping: __u64,
    pub nr_running: __u64,
    pub nr_stopped: __u64,
    pub nr_uninterruptible: __u64,
    pub nr_io_wait: __u64,
}
pub const CGROUPSTATS_CMD_UNSPEC: _bindgen_ty_224 = 3;
pub const CGROUPSTATS_CMD_GET: _bindgen_ty_224 = 4;
pub const CGROUPSTATS_CMD_NEW: _bindgen_ty_224 = 5;
pub const __CGROUPSTATS_CMD_MAX: _bindgen_ty_224 = 6;
pub type _bindgen_ty_224 = core::ffi::c_uint;
pub const CGROUPSTATS_TYPE_UNSPEC: _bindgen_ty_225 = 0;
pub const CGROUPSTATS_TYPE_CGROUP_STATS: _bindgen_ty_225 = 1;
pub const __CGROUPSTATS_TYPE_MAX: _bindgen_ty_225 = 2;
pub type _bindgen_ty_225 = core::ffi::c_uint;
pub const CGROUPSTATS_CMD_ATTR_UNSPEC: _bindgen_ty_226 = 0;
pub const CGROUPSTATS_CMD_ATTR_FD: _bindgen_ty_226 = 1;
pub const __CGROUPSTATS_CMD_ATTR_MAX: _bindgen_ty_226 = 2;
pub type _bindgen_ty_226 = core::ffi::c_uint;
extern "C" {
    pub static _ctype: [core::ffi::c_uchar; 0usize];
}
pub const string_size_units_STRING_UNITS_10: string_size_units = 0;
pub const string_size_units_STRING_UNITS_2: string_size_units = 1;
pub const string_size_units_STRING_UNITS_MASK: string_size_units = 1;
pub const string_size_units_STRING_UNITS_NO_SPACE: string_size_units = 1073741824;
pub const string_size_units_STRING_UNITS_NO_BYTES: string_size_units = 2147483648;
pub type string_size_units = core::ffi::c_uint;
extern "C" {
    pub fn string_get_size(
        size: u64_,
        blk_size: u64_,
        units: string_size_units,
        buf: *mut core::ffi::c_char,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn parse_int_array_user(
        from: *const core::ffi::c_char,
        count: usize,
        array: *mut *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn string_unescape(
        src: *mut core::ffi::c_char,
        dst: *mut core::ffi::c_char,
        size: usize,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn string_escape_mem(
        src: *const core::ffi::c_char,
        isz: usize,
        dst: *mut core::ffi::c_char,
        osz: usize,
        flags: core::ffi::c_uint,
        only: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrdup_quotable(src: *const core::ffi::c_char, gfp: gfp_t) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kstrdup_quotable_cmdline(task: *mut task_struct, gfp: gfp_t) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kstrdup_quotable_file(file: *mut file, gfp: gfp_t) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kstrdup_and_replace(
        src: *const core::ffi::c_char,
        old: core::ffi::c_char,
        new: core::ffi::c_char,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kasprintf_strarray(
        gfp: gfp_t,
        prefix: *const core::ffi::c_char,
        n: usize,
    ) -> *mut *mut core::ffi::c_char;
}
extern "C" {
    pub fn kfree_strarray(array: *mut *mut core::ffi::c_char, n: usize);
}
extern "C" {
    pub fn devm_kasprintf_strarray(
        dev: *mut device,
        prefix: *const core::ffi::c_char,
        n: usize,
    ) -> *mut *mut core::ffi::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seq_file {
    pub buf: *mut core::ffi::c_char,
    pub size: usize,
    pub from: usize,
    pub count: usize,
    pub pad_until: usize,
    pub index: loff_t,
    pub read_pos: loff_t,
    pub lock: mutex,
    pub op: *const seq_operations,
    pub poll_event: core::ffi::c_int,
    pub file: *const file,
    pub private: *mut core::ffi::c_void,
}
impl Default for seq_file {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn seq_pad(m: *mut seq_file, c: core::ffi::c_char);
}
extern "C" {
    pub fn mangle_path(
        s: *mut core::ffi::c_char,
        p: *const core::ffi::c_char,
        esc: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn seq_open(arg1: *mut file, arg2: *const seq_operations) -> core::ffi::c_int;
}
extern "C" {
    pub fn seq_read(
        arg1: *mut file,
        arg2: *mut core::ffi::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn seq_read_iter(iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn seq_lseek(arg1: *mut file, arg2: loff_t, arg3: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn seq_release(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn seq_write(
        seq: *mut seq_file,
        data: *const core::ffi::c_void,
        len: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn seq_vprintf(m: *mut seq_file, fmt: *const core::ffi::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn seq_printf(m: *mut seq_file, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn seq_putc(m: *mut seq_file, c: core::ffi::c_char);
}
extern "C" {
    pub fn __seq_puts(m: *mut seq_file, s: *const core::ffi::c_char);
}
extern "C" {
    pub fn seq_put_decimal_ull_width(
        m: *mut seq_file,
        delimiter: *const core::ffi::c_char,
        num: core::ffi::c_ulonglong,
        width: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn seq_put_decimal_ull(
        m: *mut seq_file,
        delimiter: *const core::ffi::c_char,
        num: core::ffi::c_ulonglong,
    );
}
extern "C" {
    pub fn seq_put_decimal_ll(
        m: *mut seq_file,
        delimiter: *const core::ffi::c_char,
        num: core::ffi::c_longlong,
    );
}
extern "C" {
    pub fn seq_put_hex_ll(
        m: *mut seq_file,
        delimiter: *const core::ffi::c_char,
        v: core::ffi::c_ulonglong,
        width: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn seq_escape_mem(
        m: *mut seq_file,
        src: *const core::ffi::c_char,
        len: usize,
        flags: core::ffi::c_uint,
        esc: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn seq_hex_dump(
        m: *mut seq_file,
        prefix_str: *const core::ffi::c_char,
        prefix_type: core::ffi::c_int,
        rowsize: core::ffi::c_int,
        groupsize: core::ffi::c_int,
        buf: *const core::ffi::c_void,
        len: usize,
        ascii: bool_,
    );
}
extern "C" {
    pub fn seq_path(
        arg1: *mut seq_file,
        arg2: *const path,
        arg3: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn seq_file_path(
        arg1: *mut seq_file,
        arg2: *mut file,
        arg3: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn seq_dentry(
        arg1: *mut seq_file,
        arg2: *mut dentry,
        arg3: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn seq_path_root(
        m: *mut seq_file,
        path: *const path,
        root: *const path,
        esc: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn single_start(arg1: *mut seq_file, arg2: *mut loff_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn single_open(
        arg1: *mut file,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut seq_file,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg3: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn single_open_size(
        arg1: *mut file,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut seq_file,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg3: *mut core::ffi::c_void,
        arg4: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn single_release(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn __seq_open_private(
        arg1: *mut file,
        arg2: *const seq_operations,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn seq_open_private(
        arg1: *mut file,
        arg2: *const seq_operations,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn seq_release_private(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn seq_bprintf(m: *mut seq_file, f: *const core::ffi::c_char, binary: *const u32_);
}
extern "C" {
    pub fn seq_list_start(head: *mut list_head, pos: loff_t) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_start_head(head: *mut list_head, pos: loff_t) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_next(
        v: *mut core::ffi::c_void,
        head: *mut list_head,
        ppos: *mut loff_t,
    ) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_start_rcu(head: *mut list_head, pos: loff_t) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_start_head_rcu(head: *mut list_head, pos: loff_t) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_next_rcu(
        v: *mut core::ffi::c_void,
        head: *mut list_head,
        ppos: *mut loff_t,
    ) -> *mut list_head;
}
extern "C" {
    pub fn seq_hlist_start(head: *mut hlist_head, pos: loff_t) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_start_head(head: *mut hlist_head, pos: loff_t) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_next(
        v: *mut core::ffi::c_void,
        head: *mut hlist_head,
        ppos: *mut loff_t,
    ) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_start_rcu(head: *mut hlist_head, pos: loff_t) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_start_head_rcu(head: *mut hlist_head, pos: loff_t) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_next_rcu(
        v: *mut core::ffi::c_void,
        head: *mut hlist_head,
        ppos: *mut loff_t,
    ) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_start_percpu(
        head: *mut hlist_head,
        cpu: *mut core::ffi::c_int,
        pos: loff_t,
    ) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_next_percpu(
        v: *mut core::ffi::c_void,
        head: *mut hlist_head,
        cpu: *mut core::ffi::c_int,
        pos: *mut loff_t,
    ) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_file_init();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct proc_ns_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ns_common {
    pub stashed: *mut dentry,
    pub ops: *const proc_ns_operations,
    pub inum: core::ffi::c_uint,
    pub count: refcount_t,
}
impl Default for ns_common {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mnt_namespace {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uts_namespace {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipc_namespace {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nsproxy {
    pub count: refcount_t,
    pub uts_ns: *mut uts_namespace,
    pub ipc_ns: *mut ipc_namespace,
    pub mnt_ns: *mut mnt_namespace,
    pub pid_ns_for_children: *mut pid_namespace,
    pub net_ns: *mut net,
    pub time_ns: *mut time_namespace,
    pub time_ns_for_children: *mut time_namespace,
    pub cgroup_ns: *mut cgroup_namespace,
}
impl Default for nsproxy {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_nsproxy: nsproxy;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nsset {
    pub flags: core::ffi::c_uint,
    pub nsproxy: *mut nsproxy,
    pub fs: *mut fs_struct,
    pub cred: *const cred,
}
impl Default for nsset {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn copy_namespaces(flags: core::ffi::c_ulong, tsk: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn exit_task_namespaces(tsk: *mut task_struct);
}
extern "C" {
    pub fn switch_task_namespaces(tsk: *mut task_struct, new: *mut nsproxy);
}
extern "C" {
    pub fn exec_task_namespaces() -> core::ffi::c_int;
}
extern "C" {
    pub fn free_nsproxy(ns: *mut nsproxy);
}
extern "C" {
    pub fn unshare_nsproxy_namespaces(
        arg1: core::ffi::c_ulong,
        arg2: *mut *mut nsproxy,
        arg3: *mut cred,
        arg4: *mut fs_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn nsproxy_cache_init() -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct uid_gid_extent {
    pub first: u32_,
    pub lower_first: u32_,
    pub count: u32_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uid_gid_map {
    pub nr_extents: u32_,
    pub __bindgen_anon_1: uid_gid_map__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uid_gid_map__bindgen_ty_1 {
    pub extent: [uid_gid_extent; 5usize],
    pub __bindgen_anon_1: uid_gid_map__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uid_gid_map__bindgen_ty_1__bindgen_ty_1 {
    pub forward: *mut uid_gid_extent,
    pub reverse: *mut uid_gid_extent,
}
impl Default for uid_gid_map__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for uid_gid_map__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for uid_gid_map {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ucount_type_UCOUNT_USER_NAMESPACES: ucount_type = 0;
pub const ucount_type_UCOUNT_PID_NAMESPACES: ucount_type = 1;
pub const ucount_type_UCOUNT_UTS_NAMESPACES: ucount_type = 2;
pub const ucount_type_UCOUNT_IPC_NAMESPACES: ucount_type = 3;
pub const ucount_type_UCOUNT_NET_NAMESPACES: ucount_type = 4;
pub const ucount_type_UCOUNT_MNT_NAMESPACES: ucount_type = 5;
pub const ucount_type_UCOUNT_CGROUP_NAMESPACES: ucount_type = 6;
pub const ucount_type_UCOUNT_TIME_NAMESPACES: ucount_type = 7;
pub const ucount_type_UCOUNT_INOTIFY_INSTANCES: ucount_type = 8;
pub const ucount_type_UCOUNT_INOTIFY_WATCHES: ucount_type = 9;
pub const ucount_type_UCOUNT_COUNTS: ucount_type = 10;
pub type ucount_type = core::ffi::c_uint;
pub const rlimit_type_UCOUNT_RLIMIT_NPROC: rlimit_type = 0;
pub const rlimit_type_UCOUNT_RLIMIT_MSGQUEUE: rlimit_type = 1;
pub const rlimit_type_UCOUNT_RLIMIT_SIGPENDING: rlimit_type = 2;
pub const rlimit_type_UCOUNT_RLIMIT_MEMLOCK: rlimit_type = 3;
pub const rlimit_type_UCOUNT_RLIMIT_COUNTS: rlimit_type = 4;
pub type rlimit_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct binfmt_misc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ucounts {
    pub node: hlist_node,
    pub ns: *mut user_namespace,
    pub uid: kuid_t,
    pub count: atomic_t,
    pub ucount: [atomic_long_t; 10usize],
    pub rlimit: [atomic_long_t; 4usize],
}
impl Default for ucounts {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_ucounts: ucounts;
}
extern "C" {
    pub fn setup_userns_sysctls(ns: *mut user_namespace) -> bool_;
}
extern "C" {
    pub fn retire_userns_sysctls(ns: *mut user_namespace);
}
extern "C" {
    pub fn inc_ucount(ns: *mut user_namespace, uid: kuid_t, type_: ucount_type) -> *mut ucounts;
}
extern "C" {
    pub fn dec_ucount(ucounts: *mut ucounts, type_: ucount_type);
}
extern "C" {
    pub fn alloc_ucounts(ns: *mut user_namespace, uid: kuid_t) -> *mut ucounts;
}
extern "C" {
    pub fn get_ucounts(ucounts: *mut ucounts) -> *mut ucounts;
}
extern "C" {
    pub fn put_ucounts(ucounts: *mut ucounts);
}
extern "C" {
    pub fn inc_rlimit_ucounts(
        ucounts: *mut ucounts,
        type_: rlimit_type,
        v: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn dec_rlimit_ucounts(
        ucounts: *mut ucounts,
        type_: rlimit_type,
        v: core::ffi::c_long,
    ) -> bool_;
}
extern "C" {
    pub fn inc_rlimit_get_ucounts(ucounts: *mut ucounts, type_: rlimit_type) -> core::ffi::c_long;
}
extern "C" {
    pub fn dec_rlimit_put_ucounts(ucounts: *mut ucounts, type_: rlimit_type);
}
extern "C" {
    pub fn is_rlimit_overlimit(
        ucounts: *mut ucounts,
        type_: rlimit_type,
        max: core::ffi::c_ulong,
    ) -> bool_;
}
pub const irqreturn_IRQ_NONE: irqreturn = 0;
pub const irqreturn_IRQ_HANDLED: irqreturn = 1;
pub const irqreturn_IRQ_WAKE_THREAD: irqreturn = 2;
pub type irqreturn = core::ffi::c_uint;
pub use self::irqreturn as irqreturn_t;
extern "C" {
    pub fn irq_init_percpu_irqstack(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn fixup_irqs();
}
extern "C" {
    pub static mut x86_platform_ipi_callback: ::core::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn native_init_IRQ();
}
extern "C" {
    pub fn __handle_irq(desc: *mut irq_desc, regs: *mut pt_regs);
}
extern "C" {
    pub fn init_ISA_irqs();
}
extern "C" {
    pub fn arch_trigger_cpumask_backtrace(mask: *const cpumask, exclude_cpu: core::ffi::c_int);
}
pub const IRQC_IS_HARDIRQ: _bindgen_ty_227 = 0;
pub const IRQC_IS_NESTED: _bindgen_ty_227 = 1;
pub type _bindgen_ty_227 = core::ffi::c_uint;
pub type irq_handler_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: core::ffi::c_int, arg2: *mut core::ffi::c_void) -> irqreturn_t,
>;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct irqaction {
    pub handler: irq_handler_t,
    pub dev_id: *mut core::ffi::c_void,
    pub percpu_dev_id: *mut core::ffi::c_void,
    pub next: *mut irqaction,
    pub thread_fn: irq_handler_t,
    pub thread: *mut task_struct,
    pub secondary: *mut irqaction,
    pub irq: core::ffi::c_uint,
    pub flags: core::ffi::c_uint,
    pub thread_flags: core::ffi::c_ulong,
    pub thread_mask: core::ffi::c_ulong,
    pub name: *const core::ffi::c_char,
    pub dir: *mut proc_dir_entry,
}
impl Default for irqaction {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn no_action(cpl: core::ffi::c_int, dev_id: *mut core::ffi::c_void) -> irqreturn_t;
}
extern "C" {
    pub fn request_threaded_irq(
        irq: core::ffi::c_uint,
        handler: irq_handler_t,
        thread_fn: irq_handler_t,
        flags: core::ffi::c_ulong,
        name: *const core::ffi::c_char,
        dev: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn request_any_context_irq(
        irq: core::ffi::c_uint,
        handler: irq_handler_t,
        flags: core::ffi::c_ulong,
        name: *const core::ffi::c_char,
        dev_id: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __request_percpu_irq(
        irq: core::ffi::c_uint,
        handler: irq_handler_t,
        flags: core::ffi::c_ulong,
        devname: *const core::ffi::c_char,
        percpu_dev_id: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn request_nmi(
        irq: core::ffi::c_uint,
        handler: irq_handler_t,
        flags: core::ffi::c_ulong,
        name: *const core::ffi::c_char,
        dev: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn request_percpu_nmi(
        irq: core::ffi::c_uint,
        handler: irq_handler_t,
        devname: *const core::ffi::c_char,
        dev: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn free_irq(
        arg1: core::ffi::c_uint,
        arg2: *mut core::ffi::c_void,
    ) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn free_percpu_irq(arg1: core::ffi::c_uint, arg2: *mut core::ffi::c_void);
}
extern "C" {
    pub fn free_nmi(
        irq: core::ffi::c_uint,
        dev_id: *mut core::ffi::c_void,
    ) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn free_percpu_nmi(irq: core::ffi::c_uint, percpu_dev_id: *mut core::ffi::c_void);
}
extern "C" {
    pub fn devm_request_threaded_irq(
        dev: *mut device,
        irq: core::ffi::c_uint,
        handler: irq_handler_t,
        thread_fn: irq_handler_t,
        irqflags: core::ffi::c_ulong,
        devname: *const core::ffi::c_char,
        dev_id: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn devm_request_any_context_irq(
        dev: *mut device,
        irq: core::ffi::c_uint,
        handler: irq_handler_t,
        irqflags: core::ffi::c_ulong,
        devname: *const core::ffi::c_char,
        dev_id: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn devm_free_irq(dev: *mut device, irq: core::ffi::c_uint, dev_id: *mut core::ffi::c_void);
}
extern "C" {
    pub fn irq_has_action(irq: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn disable_irq_nosync(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn disable_hardirq(irq: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn disable_irq(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn disable_percpu_irq(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn enable_irq(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn enable_percpu_irq(irq: core::ffi::c_uint, type_: core::ffi::c_uint);
}
extern "C" {
    pub fn irq_percpu_is_enabled(irq: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn irq_wake_thread(irq: core::ffi::c_uint, dev_id: *mut core::ffi::c_void);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_disable_irq_t {
    pub lock: *mut core::ffi::c_int,
}
impl Default for class_disable_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn disable_nmi_nosync(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn disable_percpu_nmi(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn enable_nmi(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn enable_percpu_nmi(irq: core::ffi::c_uint, type_: core::ffi::c_uint);
}
extern "C" {
    pub fn prepare_percpu_nmi(irq: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn teardown_percpu_nmi(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn irq_inject_interrupt(irq: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn suspend_device_irqs();
}
extern "C" {
    pub fn resume_device_irqs();
}
extern "C" {
    pub fn rearm_wake_irq(irq: core::ffi::c_uint);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irq_affinity_notify {
    pub irq: core::ffi::c_uint,
    pub kref: kref,
    pub work: work_struct,
    pub notify: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut irq_affinity_notify, mask: *const cpumask_t),
    >,
    pub release: ::core::option::Option<unsafe extern "C" fn(ref_: *mut kref)>,
}
impl Default for irq_affinity_notify {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irq_affinity {
    pub pre_vectors: core::ffi::c_uint,
    pub post_vectors: core::ffi::c_uint,
    pub nr_sets: core::ffi::c_uint,
    pub set_size: [core::ffi::c_uint; 4usize],
    pub calc_sets: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut irq_affinity, nvecs: core::ffi::c_uint),
    >,
    pub priv_: *mut core::ffi::c_void,
}
impl Default for irq_affinity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct irq_affinity_desc {
    pub mask: cpumask,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl irq_affinity_desc {
    #[inline]
    pub fn is_managed(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_managed(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(is_managed: core::ffi::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_managed: u32 = unsafe { ::core::mem::transmute(is_managed) };
            is_managed as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut irq_default_affinity: cpumask_var_t;
}
extern "C" {
    pub fn irq_set_affinity(irq: core::ffi::c_uint, cpumask: *const cpumask) -> core::ffi::c_int;
}
extern "C" {
    pub fn irq_force_affinity(irq: core::ffi::c_uint, cpumask: *const cpumask) -> core::ffi::c_int;
}
extern "C" {
    pub fn irq_can_set_affinity(irq: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn irq_select_affinity(irq: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn __irq_apply_affinity_hint(
        irq: core::ffi::c_uint,
        m: *const cpumask,
        setaffinity: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn irq_update_affinity_desc(
        irq: core::ffi::c_uint,
        affinity: *mut irq_affinity_desc,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn irq_set_affinity_notifier(
        irq: core::ffi::c_uint,
        notify: *mut irq_affinity_notify,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn irq_create_affinity_masks(
        nvec: core::ffi::c_uint,
        affd: *mut irq_affinity,
    ) -> *mut irq_affinity_desc;
}
extern "C" {
    pub fn irq_calc_affinity_vectors(
        minvec: core::ffi::c_uint,
        maxvec: core::ffi::c_uint,
        affd: *const irq_affinity,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn irq_set_irq_wake(irq: core::ffi::c_uint, on: core::ffi::c_uint) -> core::ffi::c_int;
}
pub const irqchip_irq_state_IRQCHIP_STATE_PENDING: irqchip_irq_state = 0;
pub const irqchip_irq_state_IRQCHIP_STATE_ACTIVE: irqchip_irq_state = 1;
pub const irqchip_irq_state_IRQCHIP_STATE_MASKED: irqchip_irq_state = 2;
pub const irqchip_irq_state_IRQCHIP_STATE_LINE_LEVEL: irqchip_irq_state = 3;
pub type irqchip_irq_state = core::ffi::c_uint;
extern "C" {
    pub fn irq_get_irqchip_state(
        irq: core::ffi::c_uint,
        which: irqchip_irq_state,
        state: *mut bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn irq_set_irqchip_state(
        irq: core::ffi::c_uint,
        which: irqchip_irq_state,
        state: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut force_irqthreads_key: static_key_false;
}
pub const HI_SOFTIRQ: _bindgen_ty_228 = 0;
pub const TIMER_SOFTIRQ: _bindgen_ty_228 = 1;
pub const NET_TX_SOFTIRQ: _bindgen_ty_228 = 2;
pub const NET_RX_SOFTIRQ: _bindgen_ty_228 = 3;
pub const BLOCK_SOFTIRQ: _bindgen_ty_228 = 4;
pub const IRQ_POLL_SOFTIRQ: _bindgen_ty_228 = 5;
pub const TASKLET_SOFTIRQ: _bindgen_ty_228 = 6;
pub const SCHED_SOFTIRQ: _bindgen_ty_228 = 7;
pub const HRTIMER_SOFTIRQ: _bindgen_ty_228 = 8;
pub const RCU_SOFTIRQ: _bindgen_ty_228 = 9;
pub const NR_SOFTIRQS: _bindgen_ty_228 = 10;
pub type _bindgen_ty_228 = core::ffi::c_uint;
extern "C" {
    pub static softirq_to_name: [*const core::ffi::c_char; 10usize];
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct softirq_action {
    pub action: ::core::option::Option<unsafe extern "C" fn(arg1: *mut softirq_action)>,
}
extern "C" {
    pub fn do_softirq();
}
extern "C" {
    pub fn __do_softirq();
}
extern "C" {
    pub fn open_softirq(
        nr: core::ffi::c_int,
        action: ::core::option::Option<unsafe extern "C" fn(arg1: *mut softirq_action)>,
    );
}
extern "C" {
    pub fn softirq_init();
}
extern "C" {
    pub fn __raise_softirq_irqoff(nr: core::ffi::c_uint);
}
extern "C" {
    pub fn raise_softirq_irqoff(nr: core::ffi::c_uint);
}
extern "C" {
    pub fn raise_softirq(nr: core::ffi::c_uint);
}
extern "C" {
    pub static mut ksoftirqd: *mut task_struct;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tasklet_struct {
    pub next: *mut tasklet_struct,
    pub state: core::ffi::c_ulong,
    pub count: atomic_t,
    pub use_callback: bool_,
    pub __bindgen_anon_1: tasklet_struct__bindgen_ty_1,
    pub data: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tasklet_struct__bindgen_ty_1 {
    pub func: ::core::option::Option<unsafe extern "C" fn(data: core::ffi::c_ulong)>,
    pub callback: ::core::option::Option<unsafe extern "C" fn(t: *mut tasklet_struct)>,
}
impl Default for tasklet_struct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tasklet_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TASKLET_STATE_SCHED: _bindgen_ty_229 = 0;
pub const TASKLET_STATE_RUN: _bindgen_ty_229 = 1;
pub type _bindgen_ty_229 = core::ffi::c_uint;
extern "C" {
    pub fn tasklet_unlock(t: *mut tasklet_struct);
}
extern "C" {
    pub fn tasklet_unlock_wait(t: *mut tasklet_struct);
}
extern "C" {
    pub fn tasklet_unlock_spin_wait(t: *mut tasklet_struct);
}
extern "C" {
    pub fn __tasklet_schedule(t: *mut tasklet_struct);
}
extern "C" {
    pub fn __tasklet_hi_schedule(t: *mut tasklet_struct);
}
extern "C" {
    pub fn tasklet_kill(t: *mut tasklet_struct);
}
extern "C" {
    pub fn tasklet_init(
        t: *mut tasklet_struct,
        func: ::core::option::Option<unsafe extern "C" fn(arg1: core::ffi::c_ulong)>,
        data: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn tasklet_setup(
        t: *mut tasklet_struct,
        callback: ::core::option::Option<unsafe extern "C" fn(arg1: *mut tasklet_struct)>,
    );
}
extern "C" {
    pub fn probe_irq_on() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn probe_irq_off(arg1: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn probe_irq_mask(arg1: core::ffi::c_ulong) -> core::ffi::c_uint;
}
extern "C" {
    pub fn init_irq_proc();
}
extern "C" {
    pub fn show_interrupts(p: *mut seq_file, v: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_show_interrupts(p: *mut seq_file, prec: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn early_irq_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_probe_nr_irqs() -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_early_irq_init() -> core::ffi::c_int;
}
pub const cpu_usage_stat_CPUTIME_USER: cpu_usage_stat = 0;
pub const cpu_usage_stat_CPUTIME_NICE: cpu_usage_stat = 1;
pub const cpu_usage_stat_CPUTIME_SYSTEM: cpu_usage_stat = 2;
pub const cpu_usage_stat_CPUTIME_SOFTIRQ: cpu_usage_stat = 3;
pub const cpu_usage_stat_CPUTIME_IRQ: cpu_usage_stat = 4;
pub const cpu_usage_stat_CPUTIME_IDLE: cpu_usage_stat = 5;
pub const cpu_usage_stat_CPUTIME_IOWAIT: cpu_usage_stat = 6;
pub const cpu_usage_stat_CPUTIME_STEAL: cpu_usage_stat = 7;
pub const cpu_usage_stat_CPUTIME_GUEST: cpu_usage_stat = 8;
pub const cpu_usage_stat_CPUTIME_GUEST_NICE: cpu_usage_stat = 9;
pub const cpu_usage_stat_NR_STATS: cpu_usage_stat = 10;
pub type cpu_usage_stat = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_cpustat {
    pub cpustat: [u64_; 10usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_stat {
    pub irqs_sum: core::ffi::c_ulong,
    pub softirqs: [core::ffi::c_uint; 10usize],
}
extern "C" {
    pub static mut kstat: kernel_stat;
}
extern "C" {
    pub static mut kernel_cpustat: kernel_cpustat;
}
extern "C" {
    pub fn nr_context_switches_cpu(cpu: core::ffi::c_int) -> core::ffi::c_ulonglong;
}
extern "C" {
    pub fn nr_context_switches() -> core::ffi::c_ulonglong;
}
extern "C" {
    pub fn kstat_irqs_cpu(irq: core::ffi::c_uint, cpu: core::ffi::c_int) -> core::ffi::c_uint;
}
extern "C" {
    pub fn kstat_incr_irq_this_cpu(irq: core::ffi::c_uint);
}
extern "C" {
    pub fn kstat_irqs_usr(irq: core::ffi::c_uint) -> core::ffi::c_uint;
}
extern "C" {
    pub fn account_user_time(arg1: *mut task_struct, arg2: u64_);
}
extern "C" {
    pub fn account_guest_time(arg1: *mut task_struct, arg2: u64_);
}
extern "C" {
    pub fn account_system_time(arg1: *mut task_struct, arg2: core::ffi::c_int, arg3: u64_);
}
extern "C" {
    pub fn account_system_index_time(arg1: *mut task_struct, arg2: u64_, arg3: cpu_usage_stat);
}
extern "C" {
    pub fn account_steal_time(arg1: u64_);
}
extern "C" {
    pub fn account_idle_time(arg1: u64_);
}
extern "C" {
    pub fn get_idle_time(kcs: *mut kernel_cpustat, cpu: core::ffi::c_int) -> u64_;
}
extern "C" {
    pub fn account_process_tick(arg1: *mut task_struct, user: core::ffi::c_int);
}
extern "C" {
    pub fn account_idle_ticks(ticks: core::ffi::c_ulong);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct u64_stats_sync {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct local_t {
    pub a: atomic_long_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct local64_t {
    pub a: local_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct u64_stats_t {
    pub v: local64_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cgroup_bpf {}
extern "C" {
    pub fn kthread_create_on_node(
        threadfn: ::core::option::Option<
            unsafe extern "C" fn(data: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
        node: core::ffi::c_int,
        namefmt: *const core::ffi::c_char,
        ...
    ) -> *mut task_struct;
}
extern "C" {
    pub fn kthread_create_on_cpu(
        threadfn: ::core::option::Option<
            unsafe extern "C" fn(data: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
        cpu: core::ffi::c_uint,
        namefmt: *const core::ffi::c_char,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn get_kthread_comm(buf: *mut core::ffi::c_char, buf_size: usize, tsk: *mut task_struct);
}
extern "C" {
    pub fn set_kthread_struct(p: *mut task_struct) -> bool_;
}
extern "C" {
    pub fn kthread_set_per_cpu(k: *mut task_struct, cpu: core::ffi::c_int);
}
extern "C" {
    pub fn kthread_is_per_cpu(k: *mut task_struct) -> bool_;
}
extern "C" {
    pub fn free_kthread_struct(k: *mut task_struct);
}
extern "C" {
    pub fn kthread_bind(k: *mut task_struct, cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn kthread_bind_mask(k: *mut task_struct, mask: *const cpumask);
}
extern "C" {
    pub fn kthread_stop(k: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn kthread_stop_put(k: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn kthread_should_stop() -> bool_;
}
extern "C" {
    pub fn kthread_should_park() -> bool_;
}
extern "C" {
    pub fn kthread_should_stop_or_park() -> bool_;
}
extern "C" {
    pub fn kthread_freezable_should_stop(was_frozen: *mut bool_) -> bool_;
}
extern "C" {
    pub fn kthread_func(k: *mut task_struct) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kthread_data(k: *mut task_struct) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kthread_probe_data(k: *mut task_struct) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kthread_park(k: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn kthread_unpark(k: *mut task_struct);
}
extern "C" {
    pub fn kthread_parkme();
}
extern "C" {
    pub fn kthread_exit(result: core::ffi::c_long) -> !;
}
extern "C" {
    pub fn kthread_complete_and_exit(arg1: *mut completion, arg2: core::ffi::c_long) -> !;
}
extern "C" {
    pub fn kthreadd(unused: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub static mut kthreadd_task: *mut task_struct;
}
extern "C" {
    pub fn tsk_fork_get_node(tsk: *mut task_struct) -> core::ffi::c_int;
}
pub type kthread_work_func_t =
    ::core::option::Option<unsafe extern "C" fn(work: *mut kthread_work)>;
extern "C" {
    pub fn kthread_delayed_work_timer_fn(t: *mut timer_list);
}
pub const KTW_FREEZABLE: _bindgen_ty_230 = 1;
pub type _bindgen_ty_230 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kthread_worker {
    pub flags: core::ffi::c_uint,
    pub lock: raw_spinlock_t,
    pub work_list: list_head,
    pub delayed_work_list: list_head,
    pub task: *mut task_struct,
    pub current_work: *mut kthread_work,
}
impl Default for kthread_worker {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kthread_work {
    pub node: list_head,
    pub func: kthread_work_func_t,
    pub worker: *mut kthread_worker,
    pub canceling: core::ffi::c_int,
}
impl Default for kthread_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kthread_delayed_work {
    pub work: kthread_work,
    pub timer: timer_list,
}
impl Default for kthread_delayed_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __kthread_init_worker(
        worker: *mut kthread_worker,
        name: *const core::ffi::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn kthread_worker_fn(worker_ptr: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn kthread_create_worker(
        flags: core::ffi::c_uint,
        namefmt: *const core::ffi::c_char,
        ...
    ) -> *mut kthread_worker;
}
extern "C" {
    pub fn kthread_create_worker_on_cpu(
        cpu: core::ffi::c_int,
        flags: core::ffi::c_uint,
        namefmt: *const core::ffi::c_char,
        ...
    ) -> *mut kthread_worker;
}
extern "C" {
    pub fn kthread_queue_work(worker: *mut kthread_worker, work: *mut kthread_work) -> bool_;
}
extern "C" {
    pub fn kthread_queue_delayed_work(
        worker: *mut kthread_worker,
        dwork: *mut kthread_delayed_work,
        delay: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn kthread_mod_delayed_work(
        worker: *mut kthread_worker,
        dwork: *mut kthread_delayed_work,
        delay: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn kthread_flush_work(work: *mut kthread_work);
}
extern "C" {
    pub fn kthread_flush_worker(worker: *mut kthread_worker);
}
extern "C" {
    pub fn kthread_cancel_work_sync(work: *mut kthread_work) -> bool_;
}
extern "C" {
    pub fn kthread_cancel_delayed_work_sync(work: *mut kthread_delayed_work) -> bool_;
}
extern "C" {
    pub fn kthread_destroy_worker(worker: *mut kthread_worker);
}
extern "C" {
    pub fn kthread_use_mm(mm: *mut mm_struct);
}
extern "C" {
    pub fn kthread_unuse_mm(mm: *mut mm_struct);
}
extern "C" {
    pub fn kthread_associate_blkcg(css: *mut cgroup_subsys_state);
}
extern "C" {
    pub fn kthread_blkcg() -> *mut cgroup_subsys_state;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct psi_group {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cgroup_taskset {
    _unused: [u8; 0],
}
pub const cgroup_subsys_id_cpuset_cgrp_id: cgroup_subsys_id = 0;
pub const cgroup_subsys_id_cpu_cgrp_id: cgroup_subsys_id = 1;
pub const cgroup_subsys_id_cpuacct_cgrp_id: cgroup_subsys_id = 2;
pub const cgroup_subsys_id_io_cgrp_id: cgroup_subsys_id = 3;
pub const cgroup_subsys_id_devices_cgrp_id: cgroup_subsys_id = 4;
pub const cgroup_subsys_id_freezer_cgrp_id: cgroup_subsys_id = 5;
pub const cgroup_subsys_id_net_cls_cgrp_id: cgroup_subsys_id = 6;
pub const cgroup_subsys_id_perf_event_cgrp_id: cgroup_subsys_id = 7;
pub const cgroup_subsys_id_net_prio_cgrp_id: cgroup_subsys_id = 8;
pub const cgroup_subsys_id_hugetlb_cgrp_id: cgroup_subsys_id = 9;
pub const cgroup_subsys_id_pids_cgrp_id: cgroup_subsys_id = 10;
pub const cgroup_subsys_id_rdma_cgrp_id: cgroup_subsys_id = 11;
pub const cgroup_subsys_id_misc_cgrp_id: cgroup_subsys_id = 12;
pub const cgroup_subsys_id_debug_cgrp_id: cgroup_subsys_id = 13;
pub const cgroup_subsys_id_CGROUP_SUBSYS_COUNT: cgroup_subsys_id = 14;
pub type cgroup_subsys_id = core::ffi::c_uint;
pub const CSS_NO_REF: _bindgen_ty_231 = 1;
pub const CSS_ONLINE: _bindgen_ty_231 = 2;
pub const CSS_RELEASED: _bindgen_ty_231 = 4;
pub const CSS_VISIBLE: _bindgen_ty_231 = 8;
pub const CSS_DYING: _bindgen_ty_231 = 16;
pub type _bindgen_ty_231 = core::ffi::c_uint;
pub const CGRP_NOTIFY_ON_RELEASE: _bindgen_ty_232 = 0;
pub const CGRP_CPUSET_CLONE_CHILDREN: _bindgen_ty_232 = 1;
pub const CGRP_FREEZE: _bindgen_ty_232 = 2;
pub const CGRP_FROZEN: _bindgen_ty_232 = 3;
pub const CGRP_KILL: _bindgen_ty_232 = 4;
pub type _bindgen_ty_232 = core::ffi::c_uint;
pub const CGRP_ROOT_NOPREFIX: _bindgen_ty_233 = 2;
pub const CGRP_ROOT_XATTR: _bindgen_ty_233 = 4;
pub const CGRP_ROOT_NS_DELEGATE: _bindgen_ty_233 = 8;
pub const CGRP_ROOT_FAVOR_DYNMODS: _bindgen_ty_233 = 16;
pub const CGRP_ROOT_CPUSET_V2_MODE: _bindgen_ty_233 = 65536;
pub const CGRP_ROOT_MEMORY_LOCAL_EVENTS: _bindgen_ty_233 = 131072;
pub const CGRP_ROOT_MEMORY_RECURSIVE_PROT: _bindgen_ty_233 = 262144;
pub const CGRP_ROOT_MEMORY_HUGETLB_ACCOUNTING: _bindgen_ty_233 = 524288;
pub const CGRP_ROOT_PIDS_LOCAL_EVENTS: _bindgen_ty_233 = 1048576;
pub type _bindgen_ty_233 = core::ffi::c_uint;
pub const CFTYPE_ONLY_ON_ROOT: _bindgen_ty_234 = 1;
pub const CFTYPE_NOT_ON_ROOT: _bindgen_ty_234 = 2;
pub const CFTYPE_NS_DELEGATABLE: _bindgen_ty_234 = 4;
pub const CFTYPE_NO_PREFIX: _bindgen_ty_234 = 8;
pub const CFTYPE_WORLD_WRITABLE: _bindgen_ty_234 = 16;
pub const CFTYPE_DEBUG: _bindgen_ty_234 = 32;
pub const __CFTYPE_ONLY_ON_DFL: _bindgen_ty_234 = 65536;
pub const __CFTYPE_NOT_ON_DFL: _bindgen_ty_234 = 131072;
pub const __CFTYPE_ADDED: _bindgen_ty_234 = 262144;
pub type _bindgen_ty_234 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cgroup_file {
    pub kn: *mut kernfs_node,
    pub notified_at: core::ffi::c_ulong,
    pub notify_timer: timer_list,
}
impl Default for cgroup_file {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cgroup_subsys_state {
    pub cgroup: *mut cgroup,
    pub ss: *mut cgroup_subsys,
    pub refcnt: percpu_ref,
    pub sibling: list_head,
    pub children: list_head,
    pub rstat_css_node: list_head,
    pub id: core::ffi::c_int,
    pub flags: core::ffi::c_uint,
    pub serial_nr: u64_,
    pub online_cnt: atomic_t,
    pub destroy_work: work_struct,
    pub destroy_rwork: rcu_work,
    pub parent: *mut cgroup_subsys_state,
}
impl Default for cgroup_subsys_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct css_set {
    pub subsys: [*mut cgroup_subsys_state; 14usize],
    pub refcount: refcount_t,
    pub dom_cset: *mut css_set,
    pub dfl_cgrp: *mut cgroup,
    pub nr_tasks: core::ffi::c_int,
    pub tasks: list_head,
    pub mg_tasks: list_head,
    pub dying_tasks: list_head,
    pub task_iters: list_head,
    pub e_cset_node: [list_head; 14usize],
    pub threaded_csets: list_head,
    pub threaded_csets_node: list_head,
    pub hlist: hlist_node,
    pub cgrp_links: list_head,
    pub mg_src_preload_node: list_head,
    pub mg_dst_preload_node: list_head,
    pub mg_node: list_head,
    pub mg_src_cgrp: *mut cgroup,
    pub mg_dst_cgrp: *mut cgroup,
    pub mg_dst_cset: *mut css_set,
    pub dead: bool_,
    pub callback_head: callback_head,
}
impl Default for css_set {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cgroup_base_stat {
    pub cputime: task_cputime,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cgroup_rstat_cpu {
    pub bsync: u64_stats_sync,
    pub bstat: cgroup_base_stat,
    pub last_bstat: cgroup_base_stat,
    pub subtree_bstat: cgroup_base_stat,
    pub last_subtree_bstat: cgroup_base_stat,
    pub updated_children: *mut cgroup,
    pub updated_next: *mut cgroup,
}
impl Default for cgroup_rstat_cpu {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cgroup_freezer_state {
    pub freeze: bool_,
    pub e_freeze: core::ffi::c_int,
    pub nr_frozen_descendants: core::ffi::c_int,
    pub nr_frozen_tasks: core::ffi::c_int,
}
#[repr(C)]
#[repr(align(64))]
pub struct cgroup {
    pub self_: cgroup_subsys_state,
    pub flags: core::ffi::c_ulong,
    pub level: core::ffi::c_int,
    pub max_depth: core::ffi::c_int,
    pub nr_descendants: core::ffi::c_int,
    pub nr_dying_descendants: core::ffi::c_int,
    pub max_descendants: core::ffi::c_int,
    pub nr_populated_csets: core::ffi::c_int,
    pub nr_populated_domain_children: core::ffi::c_int,
    pub nr_populated_threaded_children: core::ffi::c_int,
    pub nr_threaded_children: core::ffi::c_int,
    pub kn: *mut kernfs_node,
    pub procs_file: cgroup_file,
    pub events_file: cgroup_file,
    pub psi_files: __IncompleteArrayField<cgroup_file>,
    pub subtree_control: u16_,
    pub subtree_ss_mask: u16_,
    pub old_subtree_control: u16_,
    pub old_subtree_ss_mask: u16_,
    pub subsys: [*mut cgroup_subsys_state; 14usize],
    pub root: *mut cgroup_root,
    pub cset_links: list_head,
    pub e_csets: [list_head; 14usize],
    pub dom_cgrp: *mut cgroup,
    pub old_dom_cgrp: *mut cgroup,
    pub rstat_cpu: *mut cgroup_rstat_cpu,
    pub rstat_css_list: list_head,
    pub __bindgen_padding_0: [u64; 7usize],
    pub _pad_: cacheline_padding,
    pub rstat_flush_next: *mut cgroup,
    pub last_bstat: cgroup_base_stat,
    pub bstat: cgroup_base_stat,
    pub prev_cputime: prev_cputime,
    pub pidlists: list_head,
    pub pidlist_mutex: mutex,
    pub offline_waitq: wait_queue_head_t,
    pub release_agent_work: work_struct,
    pub psi: *mut psi_group,
    pub bpf: cgroup_bpf,
    pub freezer: cgroup_freezer_state,
    pub ancestors: __IncompleteArrayField<*mut cgroup>,
}
impl Default for cgroup {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
pub struct cgroup_root {
    pub kf_root: *mut kernfs_root,
    pub subsys_mask: core::ffi::c_uint,
    pub hierarchy_id: core::ffi::c_int,
    pub root_list: list_head,
    pub rcu: callback_head,
    pub __bindgen_padding_0: [u64; 2usize],
    pub cgrp: cgroup,
    pub cgrp_ancestor_storage: *mut cgroup,
    pub nr_cgrps: atomic_t,
    pub flags: core::ffi::c_uint,
    pub release_agent_path: [core::ffi::c_char; 4096usize],
    pub name: [core::ffi::c_char; 64usize],
}
impl Default for cgroup_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cftype {
    pub name: [core::ffi::c_char; 64usize],
    pub private: core::ffi::c_ulong,
    pub max_write_len: usize,
    pub flags: core::ffi::c_uint,
    pub file_offset: core::ffi::c_uint,
    pub ss: *mut cgroup_subsys,
    pub node: list_head,
    pub kf_ops: *mut kernfs_ops,
    pub open:
        ::core::option::Option<unsafe extern "C" fn(of: *mut kernfs_open_file) -> core::ffi::c_int>,
    pub release: ::core::option::Option<unsafe extern "C" fn(of: *mut kernfs_open_file)>,
    pub read_u64: ::core::option::Option<
        unsafe extern "C" fn(css: *mut cgroup_subsys_state, cft: *mut cftype) -> u64_,
    >,
    pub read_s64: ::core::option::Option<
        unsafe extern "C" fn(css: *mut cgroup_subsys_state, cft: *mut cftype) -> s64,
    >,
    pub seq_show: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, v: *mut core::ffi::c_void) -> core::ffi::c_int,
    >,
    pub seq_start: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, ppos: *mut loff_t) -> *mut core::ffi::c_void,
    >,
    pub seq_next: ::core::option::Option<
        unsafe extern "C" fn(
            sf: *mut seq_file,
            v: *mut core::ffi::c_void,
            ppos: *mut loff_t,
        ) -> *mut core::ffi::c_void,
    >,
    pub seq_stop:
        ::core::option::Option<unsafe extern "C" fn(sf: *mut seq_file, v: *mut core::ffi::c_void)>,
    pub write_u64: ::core::option::Option<
        unsafe extern "C" fn(
            css: *mut cgroup_subsys_state,
            cft: *mut cftype,
            val: u64_,
        ) -> core::ffi::c_int,
    >,
    pub write_s64: ::core::option::Option<
        unsafe extern "C" fn(
            css: *mut cgroup_subsys_state,
            cft: *mut cftype,
            val: s64,
        ) -> core::ffi::c_int,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            buf: *mut core::ffi::c_char,
            nbytes: usize,
            off: loff_t,
        ) -> isize,
    >,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(of: *mut kernfs_open_file, pt: *mut poll_table_struct) -> __poll_t,
    >,
    pub lockdep_key: lock_class_key,
}
impl Default for cftype {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cgroup_subsys {
    pub css_alloc: ::core::option::Option<
        unsafe extern "C" fn(parent_css: *mut cgroup_subsys_state) -> *mut cgroup_subsys_state,
    >,
    pub css_online: ::core::option::Option<
        unsafe extern "C" fn(css: *mut cgroup_subsys_state) -> core::ffi::c_int,
    >,
    pub css_offline: ::core::option::Option<unsafe extern "C" fn(css: *mut cgroup_subsys_state)>,
    pub css_released: ::core::option::Option<unsafe extern "C" fn(css: *mut cgroup_subsys_state)>,
    pub css_free: ::core::option::Option<unsafe extern "C" fn(css: *mut cgroup_subsys_state)>,
    pub css_reset: ::core::option::Option<unsafe extern "C" fn(css: *mut cgroup_subsys_state)>,
    pub css_rstat_flush: ::core::option::Option<
        unsafe extern "C" fn(css: *mut cgroup_subsys_state, cpu: core::ffi::c_int),
    >,
    pub css_extra_stat_show: ::core::option::Option<
        unsafe extern "C" fn(seq: *mut seq_file, css: *mut cgroup_subsys_state) -> core::ffi::c_int,
    >,
    pub css_local_stat_show: ::core::option::Option<
        unsafe extern "C" fn(seq: *mut seq_file, css: *mut cgroup_subsys_state) -> core::ffi::c_int,
    >,
    pub can_attach:
        ::core::option::Option<unsafe extern "C" fn(tset: *mut cgroup_taskset) -> core::ffi::c_int>,
    pub cancel_attach: ::core::option::Option<unsafe extern "C" fn(tset: *mut cgroup_taskset)>,
    pub attach: ::core::option::Option<unsafe extern "C" fn(tset: *mut cgroup_taskset)>,
    pub post_attach: ::core::option::Option<unsafe extern "C" fn()>,
    pub can_fork: ::core::option::Option<
        unsafe extern "C" fn(task: *mut task_struct, cset: *mut css_set) -> core::ffi::c_int,
    >,
    pub cancel_fork:
        ::core::option::Option<unsafe extern "C" fn(task: *mut task_struct, cset: *mut css_set)>,
    pub fork: ::core::option::Option<unsafe extern "C" fn(task: *mut task_struct)>,
    pub exit: ::core::option::Option<unsafe extern "C" fn(task: *mut task_struct)>,
    pub release: ::core::option::Option<unsafe extern "C" fn(task: *mut task_struct)>,
    pub bind: ::core::option::Option<unsafe extern "C" fn(root_css: *mut cgroup_subsys_state)>,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub id: core::ffi::c_int,
    pub name: *const core::ffi::c_char,
    pub legacy_name: *const core::ffi::c_char,
    pub root: *mut cgroup_root,
    pub css_idr: idr,
    pub cfts: list_head,
    pub dfl_cftypes: *mut cftype,
    pub legacy_cftypes: *mut cftype,
    pub depends_on: core::ffi::c_uint,
}
impl Default for cgroup_subsys {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl cgroup_subsys {
    #[inline]
    pub fn early_init(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_early_init(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn implicit_on_dfl(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_implicit_on_dfl(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn threaded(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_threaded(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        early_init: bool_,
        implicit_on_dfl: bool_,
        threaded: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let early_init: u8 = unsafe { ::core::mem::transmute(early_init) };
            early_init as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let implicit_on_dfl: u8 = unsafe { ::core::mem::transmute(implicit_on_dfl) };
            implicit_on_dfl as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let threaded: u8 = unsafe { ::core::mem::transmute(threaded) };
            threaded as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut cgroup_threadgroup_rwsem: percpu_rw_semaphore;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sock_cgroup_data {
    pub cgroup: *mut cgroup,
    pub classid: u32_,
    pub prioidx: u16_,
}
impl Default for sock_cgroup_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const CSS_TASK_ITER_PROCS: _bindgen_ty_235 = 1;
pub const CSS_TASK_ITER_THREADED: _bindgen_ty_235 = 2;
pub const CSS_TASK_ITER_SKIPPED: _bindgen_ty_235 = 65536;
pub type _bindgen_ty_235 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct css_task_iter {
    pub ss: *mut cgroup_subsys,
    pub flags: core::ffi::c_uint,
    pub cset_pos: *mut list_head,
    pub cset_head: *mut list_head,
    pub tcset_pos: *mut list_head,
    pub tcset_head: *mut list_head,
    pub task_pos: *mut list_head,
    pub cur_tasks_head: *mut list_head,
    pub cur_cset: *mut css_set,
    pub cur_dcset: *mut css_set,
    pub cur_task: *mut task_struct,
    pub iters_node: list_head,
}
impl Default for css_task_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut cgroup_fs_type: file_system_type;
}
extern "C" {
    pub static mut cgrp_dfl_root: cgroup_root;
}
extern "C" {
    pub static mut init_css_set: css_set;
}
extern "C" {
    pub static mut css_set_lock: spinlock_t;
}
extern "C" {
    pub static mut cpuset_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut cpu_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut cpuacct_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut io_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut devices_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut freezer_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut net_cls_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut perf_event_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut net_prio_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut hugetlb_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut pids_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut rdma_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut misc_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut debug_cgrp_subsys: cgroup_subsys;
}
extern "C" {
    pub static mut cpuset_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut cpuset_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut cpu_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut cpu_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut cpuacct_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut cpuacct_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut io_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut io_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut devices_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut devices_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut freezer_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut freezer_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut net_cls_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut net_cls_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut perf_event_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut perf_event_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut net_prio_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut net_prio_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut hugetlb_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut hugetlb_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut pids_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut pids_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut rdma_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut rdma_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut misc_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut misc_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub static mut debug_cgrp_subsys_enabled_key: static_key_true;
}
extern "C" {
    pub static mut debug_cgrp_subsys_on_dfl_key: static_key_true;
}
extern "C" {
    pub fn css_has_online_children(css: *mut cgroup_subsys_state) -> bool_;
}
extern "C" {
    pub fn css_from_id(id: core::ffi::c_int, ss: *mut cgroup_subsys) -> *mut cgroup_subsys_state;
}
extern "C" {
    pub fn cgroup_e_css(cgroup: *mut cgroup, ss: *mut cgroup_subsys) -> *mut cgroup_subsys_state;
}
extern "C" {
    pub fn cgroup_get_e_css(
        cgroup: *mut cgroup,
        ss: *mut cgroup_subsys,
    ) -> *mut cgroup_subsys_state;
}
extern "C" {
    pub fn css_tryget_online_from_dir(
        dentry: *mut dentry,
        ss: *mut cgroup_subsys,
    ) -> *mut cgroup_subsys_state;
}
extern "C" {
    pub fn cgroup_get_from_path(path: *const core::ffi::c_char) -> *mut cgroup;
}
extern "C" {
    pub fn cgroup_get_from_fd(fd: core::ffi::c_int) -> *mut cgroup;
}
extern "C" {
    pub fn cgroup_v1v2_get_from_fd(fd: core::ffi::c_int) -> *mut cgroup;
}
extern "C" {
    pub fn cgroup_attach_task_all(
        from: *mut task_struct,
        arg1: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_transfer_tasks(to: *mut cgroup, from: *mut cgroup) -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_add_dfl_cftypes(ss: *mut cgroup_subsys, cfts: *mut cftype) -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_add_legacy_cftypes(ss: *mut cgroup_subsys, cfts: *mut cftype)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_rm_cftypes(cfts: *mut cftype) -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_file_notify(cfile: *mut cgroup_file);
}
extern "C" {
    pub fn cgroup_file_show(cfile: *mut cgroup_file, show: bool_);
}
extern "C" {
    pub fn cgroupstats_build(stats: *mut cgroupstats, dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_cgroup_show(
        m: *mut seq_file,
        ns: *mut pid_namespace,
        pid: *mut pid,
        tsk: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_fork(p: *mut task_struct);
}
extern "C" {
    pub fn cgroup_can_fork(p: *mut task_struct, kargs: *mut kernel_clone_args) -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_cancel_fork(p: *mut task_struct, kargs: *mut kernel_clone_args);
}
extern "C" {
    pub fn cgroup_post_fork(p: *mut task_struct, kargs: *mut kernel_clone_args);
}
extern "C" {
    pub fn cgroup_exit(p: *mut task_struct);
}
extern "C" {
    pub fn cgroup_release(p: *mut task_struct);
}
extern "C" {
    pub fn cgroup_free(p: *mut task_struct);
}
extern "C" {
    pub fn cgroup_init_early() -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_parse_float(
        input: *const core::ffi::c_char,
        dec_shift: core::ffi::c_uint,
        v: *mut s64,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn css_next_child(
        pos: *mut cgroup_subsys_state,
        parent: *mut cgroup_subsys_state,
    ) -> *mut cgroup_subsys_state;
}
extern "C" {
    pub fn css_next_descendant_pre(
        pos: *mut cgroup_subsys_state,
        css: *mut cgroup_subsys_state,
    ) -> *mut cgroup_subsys_state;
}
extern "C" {
    pub fn css_rightmost_descendant(pos: *mut cgroup_subsys_state) -> *mut cgroup_subsys_state;
}
extern "C" {
    pub fn css_next_descendant_post(
        pos: *mut cgroup_subsys_state,
        css: *mut cgroup_subsys_state,
    ) -> *mut cgroup_subsys_state;
}
extern "C" {
    pub fn cgroup_taskset_first(
        tset: *mut cgroup_taskset,
        dst_cssp: *mut *mut cgroup_subsys_state,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn cgroup_taskset_next(
        tset: *mut cgroup_taskset,
        dst_cssp: *mut *mut cgroup_subsys_state,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn css_task_iter_start(
        css: *mut cgroup_subsys_state,
        flags: core::ffi::c_uint,
        it: *mut css_task_iter,
    );
}
extern "C" {
    pub fn css_task_iter_next(it: *mut css_task_iter) -> *mut task_struct;
}
extern "C" {
    pub fn css_task_iter_end(it: *mut css_task_iter);
}
extern "C" {
    pub static mut cgroup_mutex: mutex;
}
extern "C" {
    pub fn of_css(of: *mut kernfs_open_file) -> *mut cgroup_subsys_state;
}
extern "C" {
    pub fn cgroup_psi_enabled() -> bool_;
}
extern "C" {
    pub fn cgroup_path_from_kernfs_id(id: u64_, buf: *mut core::ffi::c_char, buflen: usize);
}
extern "C" {
    pub fn cgroup_get_from_id(id: u64_) -> *mut cgroup;
}
extern "C" {
    pub fn cgroup_rstat_updated(cgrp: *mut cgroup, cpu: core::ffi::c_int);
}
extern "C" {
    pub fn cgroup_rstat_flush(cgrp: *mut cgroup);
}
extern "C" {
    pub fn cgroup_rstat_flush_hold(cgrp: *mut cgroup);
}
extern "C" {
    pub fn cgroup_rstat_flush_release(cgrp: *mut cgroup);
}
extern "C" {
    pub fn cpuacct_charge(tsk: *mut task_struct, cputime: u64_);
}
extern "C" {
    pub fn cpuacct_account_field(tsk: *mut task_struct, index: core::ffi::c_int, val: u64_);
}
extern "C" {
    pub fn __cgroup_account_cputime(cgrp: *mut cgroup, delta_exec: u64_);
}
extern "C" {
    pub fn __cgroup_account_cputime_field(
        cgrp: *mut cgroup,
        index: cpu_usage_stat,
        delta_exec: u64_,
    );
}
extern "C" {
    pub fn cgroup_sk_alloc(skcd: *mut sock_cgroup_data);
}
extern "C" {
    pub fn cgroup_sk_clone(skcd: *mut sock_cgroup_data);
}
extern "C" {
    pub fn cgroup_sk_free(skcd: *mut sock_cgroup_data);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cgroup_namespace {
    pub ns: ns_common,
    pub user_ns: *mut user_namespace,
    pub ucounts: *mut ucounts,
    pub root_cset: *mut css_set,
}
impl Default for cgroup_namespace {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_cgroup_ns: cgroup_namespace;
}
extern "C" {
    pub fn free_cgroup_ns(ns: *mut cgroup_namespace);
}
extern "C" {
    pub fn copy_cgroup_ns(
        flags: core::ffi::c_ulong,
        user_ns: *mut user_namespace,
        old_ns: *mut cgroup_namespace,
    ) -> *mut cgroup_namespace;
}
extern "C" {
    pub fn cgroup_path_ns(
        cgrp: *mut cgroup,
        buf: *mut core::ffi::c_char,
        buflen: usize,
        ns: *mut cgroup_namespace,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cgroup_enter_frozen();
}
extern "C" {
    pub fn cgroup_leave_frozen(always_leave: bool_);
}
extern "C" {
    pub fn cgroup_update_frozen(cgrp: *mut cgroup);
}
extern "C" {
    pub fn cgroup_freeze(cgrp: *mut cgroup, freeze: bool_);
}
extern "C" {
    pub fn cgroup_freezer_migrate_task(task: *mut task_struct, src: *mut cgroup, dst: *mut cgroup);
}
extern "C" {
    pub fn task_get_cgroup1(tsk: *mut task_struct, hierarchy_id: core::ffi::c_int) -> *mut cgroup;
}
#[repr(C)]
#[repr(align(64))]
pub struct page_counter {
    pub usage: atomic_long_t,
    pub __bindgen_padding_0: [u64; 7usize],
    pub _pad1_: cacheline_padding,
    pub emin: core::ffi::c_ulong,
    pub min_usage: atomic_long_t,
    pub children_min_usage: atomic_long_t,
    pub elow: core::ffi::c_ulong,
    pub low_usage: atomic_long_t,
    pub children_low_usage: atomic_long_t,
    pub watermark: core::ffi::c_ulong,
    pub failcnt: core::ffi::c_ulong,
    pub _pad2_: cacheline_padding,
    pub min: core::ffi::c_ulong,
    pub low: core::ffi::c_ulong,
    pub high: core::ffi::c_ulong,
    pub max: core::ffi::c_ulong,
    pub parent: *mut page_counter,
}
impl Default for page_counter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn page_counter_cancel(counter: *mut page_counter, nr_pages: core::ffi::c_ulong);
}
extern "C" {
    pub fn page_counter_charge(counter: *mut page_counter, nr_pages: core::ffi::c_ulong);
}
extern "C" {
    pub fn page_counter_try_charge(
        counter: *mut page_counter,
        nr_pages: core::ffi::c_ulong,
        fail: *mut *mut page_counter,
    ) -> bool_;
}
extern "C" {
    pub fn page_counter_uncharge(counter: *mut page_counter, nr_pages: core::ffi::c_ulong);
}
extern "C" {
    pub fn page_counter_set_min(counter: *mut page_counter, nr_pages: core::ffi::c_ulong);
}
extern "C" {
    pub fn page_counter_set_low(counter: *mut page_counter, nr_pages: core::ffi::c_ulong);
}
extern "C" {
    pub fn page_counter_set_max(
        counter: *mut page_counter,
        nr_pages: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn page_counter_memparse(
        buf: *const core::ffi::c_char,
        max: *const core::ffi::c_char,
        nr_pages: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn page_counter_calculate_protection(
        root: *mut page_counter,
        counter: *mut page_counter,
        recursive_protection: bool_,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct eventfd_ctx {
    _unused: [u8; 0],
}
extern "C" {
    pub fn eventfd_ctx_put(ctx: *mut eventfd_ctx);
}
extern "C" {
    pub fn eventfd_fget(fd: core::ffi::c_int) -> *mut file;
}
extern "C" {
    pub fn eventfd_ctx_fdget(fd: core::ffi::c_int) -> *mut eventfd_ctx;
}
extern "C" {
    pub fn eventfd_ctx_fileget(file: *mut file) -> *mut eventfd_ctx;
}
extern "C" {
    pub fn eventfd_signal_mask(ctx: *mut eventfd_ctx, mask: __poll_t);
}
extern "C" {
    pub fn eventfd_ctx_remove_wait_queue(
        ctx: *mut eventfd_ctx,
        wait: *mut wait_queue_entry_t,
        cnt: *mut __u64,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn eventfd_ctx_do_read(ctx: *mut eventfd_ctx, cnt: *mut __u64);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vmpressure {
    pub scanned: core::ffi::c_ulong,
    pub reclaimed: core::ffi::c_ulong,
    pub tree_scanned: core::ffi::c_ulong,
    pub tree_reclaimed: core::ffi::c_ulong,
    pub sr_lock: spinlock_t,
    pub events: list_head,
    pub events_lock: mutex,
    pub work: work_struct,
}
impl Default for vmpressure {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fprop_global {
    pub events: percpu_counter,
    pub period: core::ffi::c_uint,
    pub sequence: seqcount_t,
}
impl Default for fprop_global {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn fprop_global_init(p: *mut fprop_global, gfp: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn fprop_global_destroy(p: *mut fprop_global);
}
extern "C" {
    pub fn fprop_new_period(p: *mut fprop_global, periods: core::ffi::c_int) -> bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fprop_local_percpu {
    pub events: percpu_counter,
    pub period: core::ffi::c_uint,
    pub lock: raw_spinlock_t,
}
impl Default for fprop_local_percpu {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn fprop_local_init_percpu(pl: *mut fprop_local_percpu, gfp: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn fprop_local_destroy_percpu(pl: *mut fprop_local_percpu);
}
extern "C" {
    pub fn __fprop_add_percpu(
        p: *mut fprop_global,
        pl: *mut fprop_local_percpu,
        nr: core::ffi::c_long,
    );
}
extern "C" {
    pub fn __fprop_add_percpu_max(
        p: *mut fprop_global,
        pl: *mut fprop_local_percpu,
        max_frac: core::ffi::c_int,
        nr: core::ffi::c_long,
    );
}
extern "C" {
    pub fn fprop_fraction_percpu(
        p: *mut fprop_global,
        pl: *mut fprop_local_percpu,
        numerator: *mut core::ffi::c_ulong,
        denominator: *mut core::ffi::c_ulong,
    );
}
pub const wb_state_WB_registered: wb_state = 0;
pub const wb_state_WB_writeback_running: wb_state = 1;
pub const wb_state_WB_has_dirty_io: wb_state = 2;
pub const wb_state_WB_start_all: wb_state = 3;
pub type wb_state = core::ffi::c_uint;
pub const wb_stat_item_WB_RECLAIMABLE: wb_stat_item = 0;
pub const wb_stat_item_WB_WRITEBACK: wb_stat_item = 1;
pub const wb_stat_item_WB_DIRTIED: wb_stat_item = 2;
pub const wb_stat_item_WB_WRITTEN: wb_stat_item = 3;
pub const wb_stat_item_NR_WB_STAT_ITEMS: wb_stat_item = 4;
pub type wb_stat_item = core::ffi::c_uint;
pub const wb_reason_WB_REASON_BACKGROUND: wb_reason = 0;
pub const wb_reason_WB_REASON_VMSCAN: wb_reason = 1;
pub const wb_reason_WB_REASON_SYNC: wb_reason = 2;
pub const wb_reason_WB_REASON_PERIODIC: wb_reason = 3;
pub const wb_reason_WB_REASON_LAPTOP_TIMER: wb_reason = 4;
pub const wb_reason_WB_REASON_FS_FREE_SPACE: wb_reason = 5;
pub const wb_reason_WB_REASON_FORKER_THREAD: wb_reason = 6;
pub const wb_reason_WB_REASON_FOREIGN_FLUSH: wb_reason = 7;
pub const wb_reason_WB_REASON_MAX: wb_reason = 8;
pub type wb_reason = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wb_completion {
    pub cnt: atomic_t,
    pub waitq: *mut wait_queue_head_t,
}
impl Default for wb_completion {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bdi_writeback {
    pub bdi: *mut backing_dev_info,
    pub state: core::ffi::c_ulong,
    pub last_old_flush: core::ffi::c_ulong,
    pub b_dirty: list_head,
    pub b_io: list_head,
    pub b_more_io: list_head,
    pub b_dirty_time: list_head,
    pub list_lock: spinlock_t,
    pub writeback_inodes: atomic_t,
    pub stat: [percpu_counter; 4usize],
    pub bw_time_stamp: core::ffi::c_ulong,
    pub dirtied_stamp: core::ffi::c_ulong,
    pub written_stamp: core::ffi::c_ulong,
    pub write_bandwidth: core::ffi::c_ulong,
    pub avg_write_bandwidth: core::ffi::c_ulong,
    pub dirty_ratelimit: core::ffi::c_ulong,
    pub balanced_dirty_ratelimit: core::ffi::c_ulong,
    pub completions: fprop_local_percpu,
    pub dirty_exceeded: core::ffi::c_int,
    pub start_all_reason: wb_reason,
    pub work_lock: spinlock_t,
    pub work_list: list_head,
    pub dwork: delayed_work,
    pub bw_dwork: delayed_work,
    pub bdi_node: list_head,
}
impl Default for bdi_writeback {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct backing_dev_info {
    pub id: u64_,
    pub rb_node: rb_node,
    pub bdi_list: list_head,
    pub ra_pages: core::ffi::c_ulong,
    pub io_pages: core::ffi::c_ulong,
    pub refcnt: kref,
    pub capabilities: core::ffi::c_uint,
    pub min_ratio: core::ffi::c_uint,
    pub max_ratio: core::ffi::c_uint,
    pub max_prop_frac: core::ffi::c_uint,
    pub tot_write_bandwidth: atomic_long_t,
    pub last_bdp_sleep: core::ffi::c_ulong,
    pub wb: bdi_writeback,
    pub wb_list: list_head,
    pub wb_waitq: wait_queue_head_t,
    pub dev: *mut device,
    pub dev_name: [core::ffi::c_char; 64usize],
    pub owner: *mut device,
    pub laptop_mode_wb_timer: timer_list,
    pub debug_dir: *mut dentry,
}
impl Default for backing_dev_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct wb_lock_cookie {
    pub locked: bool_,
    pub flags: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bio_set {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bio_integrity_payload {
    _unused: [u8; 0],
}
pub type bio_end_io_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut bio)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bio_crypt_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct block_device {
    pub bd_start_sect: sector_t,
    pub bd_nr_sectors: sector_t,
    pub bd_disk: *mut gendisk,
    pub bd_queue: *mut request_queue,
    pub bd_stats: *mut disk_stats,
    pub bd_stamp: core::ffi::c_ulong,
    pub __bd_flags: atomic_t,
    pub bd_dev: dev_t,
    pub bd_mapping: *mut address_space,
    pub bd_openers: atomic_t,
    pub bd_size_lock: spinlock_t,
    pub bd_claiming: *mut core::ffi::c_void,
    pub bd_holder: *mut core::ffi::c_void,
    pub bd_holder_ops: *mut blk_holder_ops,
    pub bd_holder_lock: mutex,
    pub bd_holders: core::ffi::c_int,
    pub bd_holder_dir: *mut kobject,
    pub bd_fsfreeze_count: atomic_t,
    pub bd_fsfreeze_mutex: mutex,
    pub bd_meta_info: *mut partition_meta_info,
    pub bd_writers: core::ffi::c_int,
    pub bd_device: device,
}
impl Default for block_device {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type blk_status_t = u8_;
pub type blk_short_t = u16_;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bio_issue {
    pub value: u64_,
}
pub type blk_opf_t = __u32;
pub type blk_qc_t = core::ffi::c_uint;
#[repr(C)]
pub struct bio {
    pub bi_next: *mut bio,
    pub bi_bdev: *mut block_device,
    pub bi_opf: blk_opf_t,
    pub bi_flags: core::ffi::c_ushort,
    pub bi_ioprio: core::ffi::c_ushort,
    pub bi_write_hint: rw_hint,
    pub bi_status: blk_status_t,
    pub __bi_remaining: atomic_t,
    pub bi_iter: bvec_iter,
    pub __bindgen_anon_1: bio__bindgen_ty_1,
    pub bi_end_io: bio_end_io_t,
    pub bi_private: *mut core::ffi::c_void,
    pub bi_blkg: *mut blkcg_gq,
    pub bi_issue: bio_issue,
    pub bi_iocost_cost: u64_,
    pub __bindgen_anon_2: bio__bindgen_ty_2,
    pub bi_vcnt: core::ffi::c_ushort,
    pub bi_max_vecs: core::ffi::c_ushort,
    pub __bi_cnt: atomic_t,
    pub bi_io_vec: *mut bio_vec,
    pub bi_pool: *mut bio_set,
    pub bi_inline_vecs: __IncompleteArrayField<bio_vec>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bio__bindgen_ty_1 {
    pub bi_cookie: blk_qc_t,
    pub __bi_nr_segments: core::ffi::c_uint,
}
impl Default for bio__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bio__bindgen_ty_2 {
    pub bi_integrity: *mut bio_integrity_payload,
}
impl Default for bio__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bio {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BIO_PAGE_PINNED: _bindgen_ty_236 = 0;
pub const BIO_CLONED: _bindgen_ty_236 = 1;
pub const BIO_BOUNCED: _bindgen_ty_236 = 2;
pub const BIO_QUIET: _bindgen_ty_236 = 3;
pub const BIO_CHAIN: _bindgen_ty_236 = 4;
pub const BIO_REFFED: _bindgen_ty_236 = 5;
pub const BIO_BPS_THROTTLED: _bindgen_ty_236 = 6;
pub const BIO_TRACE_COMPLETION: _bindgen_ty_236 = 7;
pub const BIO_CGROUP_ACCT: _bindgen_ty_236 = 8;
pub const BIO_QOS_THROTTLED: _bindgen_ty_236 = 9;
pub const BIO_QOS_MERGED: _bindgen_ty_236 = 10;
pub const BIO_REMAPPED: _bindgen_ty_236 = 11;
pub const BIO_ZONE_WRITE_PLUGGING: _bindgen_ty_236 = 12;
pub const BIO_EMULATES_ZONE_APPEND: _bindgen_ty_236 = 13;
pub const BIO_FLAG_LAST: _bindgen_ty_236 = 14;
pub type _bindgen_ty_236 = core::ffi::c_uint;
pub type blk_mq_req_flags_t = __u32;
pub const req_op_REQ_OP_READ: req_op = 0;
pub const req_op_REQ_OP_WRITE: req_op = 1;
pub const req_op_REQ_OP_FLUSH: req_op = 2;
pub const req_op_REQ_OP_DISCARD: req_op = 3;
pub const req_op_REQ_OP_SECURE_ERASE: req_op = 5;
pub const req_op_REQ_OP_ZONE_APPEND: req_op = 7;
pub const req_op_REQ_OP_WRITE_ZEROES: req_op = 9;
pub const req_op_REQ_OP_ZONE_OPEN: req_op = 10;
pub const req_op_REQ_OP_ZONE_CLOSE: req_op = 11;
pub const req_op_REQ_OP_ZONE_FINISH: req_op = 12;
pub const req_op_REQ_OP_ZONE_RESET: req_op = 13;
pub const req_op_REQ_OP_ZONE_RESET_ALL: req_op = 15;
pub const req_op_REQ_OP_DRV_IN: req_op = 34;
pub const req_op_REQ_OP_DRV_OUT: req_op = 35;
pub const req_op_REQ_OP_LAST: req_op = 36;
pub type req_op = core::ffi::c_uint;
pub const req_flag_bits___REQ_FAILFAST_DEV: req_flag_bits = 8;
pub const req_flag_bits___REQ_FAILFAST_TRANSPORT: req_flag_bits = 9;
pub const req_flag_bits___REQ_FAILFAST_DRIVER: req_flag_bits = 10;
pub const req_flag_bits___REQ_SYNC: req_flag_bits = 11;
pub const req_flag_bits___REQ_META: req_flag_bits = 12;
pub const req_flag_bits___REQ_PRIO: req_flag_bits = 13;
pub const req_flag_bits___REQ_NOMERGE: req_flag_bits = 14;
pub const req_flag_bits___REQ_IDLE: req_flag_bits = 15;
pub const req_flag_bits___REQ_INTEGRITY: req_flag_bits = 16;
pub const req_flag_bits___REQ_FUA: req_flag_bits = 17;
pub const req_flag_bits___REQ_PREFLUSH: req_flag_bits = 18;
pub const req_flag_bits___REQ_RAHEAD: req_flag_bits = 19;
pub const req_flag_bits___REQ_BACKGROUND: req_flag_bits = 20;
pub const req_flag_bits___REQ_NOWAIT: req_flag_bits = 21;
pub const req_flag_bits___REQ_POLLED: req_flag_bits = 22;
pub const req_flag_bits___REQ_ALLOC_CACHE: req_flag_bits = 23;
pub const req_flag_bits___REQ_SWAP: req_flag_bits = 24;
pub const req_flag_bits___REQ_DRV: req_flag_bits = 25;
pub const req_flag_bits___REQ_FS_PRIVATE: req_flag_bits = 26;
pub const req_flag_bits___REQ_ATOMIC: req_flag_bits = 27;
pub const req_flag_bits___REQ_NOUNMAP: req_flag_bits = 28;
pub const req_flag_bits___REQ_NR_BITS: req_flag_bits = 29;
pub type req_flag_bits = core::ffi::c_uint;
pub const stat_group_STAT_READ: stat_group = 0;
pub const stat_group_STAT_WRITE: stat_group = 1;
pub const stat_group_STAT_DISCARD: stat_group = 2;
pub const stat_group_STAT_FLUSH: stat_group = 3;
pub const stat_group_NR_STAT_GROUPS: stat_group = 4;
pub type stat_group = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct blk_rq_stat {
    pub mean: u64_,
    pub min: u64_,
    pub max: u64_,
    pub nr_samples: u32_,
    pub batch: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio_batch {
    pub nr: core::ffi::c_uchar,
    pub i: core::ffi::c_uchar,
    pub percpu_pvec_drained: bool_,
    pub folios: [*mut folio; 31usize],
}
impl Default for folio_batch {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __folio_batch_release(pvec: *mut folio_batch);
}
extern "C" {
    pub fn folio_batch_remove_exceptionals(fbatch: *mut folio_batch);
}
extern "C" {
    pub static mut dirty_throttle_leaks: core::ffi::c_int;
}
pub const writeback_sync_modes_WB_SYNC_NONE: writeback_sync_modes = 0;
pub const writeback_sync_modes_WB_SYNC_ALL: writeback_sync_modes = 1;
pub type writeback_sync_modes = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct writeback_control {
    pub nr_to_write: core::ffi::c_long,
    pub pages_skipped: core::ffi::c_long,
    pub range_start: loff_t,
    pub range_end: loff_t,
    pub sync_mode: writeback_sync_modes,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub swap_plug: *mut *mut swap_iocb,
    pub fbatch: folio_batch,
    pub index: core::ffi::c_ulong,
    pub saved_err: core::ffi::c_int,
}
impl Default for writeback_control {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl writeback_control {
    #[inline]
    pub fn for_kupdate(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_for_kupdate(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn for_background(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_for_background(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tagged_writepages(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tagged_writepages(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn for_reclaim(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_for_reclaim(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn range_cyclic(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_range_cyclic(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn for_sync(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_for_sync(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unpinned_netfs_wb(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unpinned_netfs_wb(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_cgroup_owner(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_cgroup_owner(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        for_kupdate: core::ffi::c_uint,
        for_background: core::ffi::c_uint,
        tagged_writepages: core::ffi::c_uint,
        for_reclaim: core::ffi::c_uint,
        range_cyclic: core::ffi::c_uint,
        for_sync: core::ffi::c_uint,
        unpinned_netfs_wb: core::ffi::c_uint,
        no_cgroup_owner: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let for_kupdate: u32 = unsafe { ::core::mem::transmute(for_kupdate) };
            for_kupdate as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let for_background: u32 = unsafe { ::core::mem::transmute(for_background) };
            for_background as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tagged_writepages: u32 = unsafe { ::core::mem::transmute(tagged_writepages) };
            tagged_writepages as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let for_reclaim: u32 = unsafe { ::core::mem::transmute(for_reclaim) };
            for_reclaim as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let range_cyclic: u32 = unsafe { ::core::mem::transmute(range_cyclic) };
            range_cyclic as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let for_sync: u32 = unsafe { ::core::mem::transmute(for_sync) };
            for_sync as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let unpinned_netfs_wb: u32 = unsafe { ::core::mem::transmute(unpinned_netfs_wb) };
            unpinned_netfs_wb as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let no_cgroup_owner: u32 = unsafe { ::core::mem::transmute(no_cgroup_owner) };
            no_cgroup_owner as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wb_domain {
    pub lock: spinlock_t,
    pub completions: fprop_global,
    pub period_timer: timer_list,
    pub period_time: core::ffi::c_ulong,
    pub dirty_limit_tstamp: core::ffi::c_ulong,
    pub dirty_limit: core::ffi::c_ulong,
}
impl Default for wb_domain {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn writeback_inodes_sb(arg1: *mut super_block, reason: wb_reason);
}
extern "C" {
    pub fn writeback_inodes_sb_nr(
        arg1: *mut super_block,
        nr: core::ffi::c_ulong,
        reason: wb_reason,
    );
}
extern "C" {
    pub fn try_to_writeback_inodes_sb(sb: *mut super_block, reason: wb_reason);
}
extern "C" {
    pub fn sync_inodes_sb(arg1: *mut super_block);
}
extern "C" {
    pub fn wakeup_flusher_threads(reason: wb_reason);
}
extern "C" {
    pub fn wakeup_flusher_threads_bdi(bdi: *mut backing_dev_info, reason: wb_reason);
}
extern "C" {
    pub fn inode_wait_for_writeback(inode: *mut inode);
}
extern "C" {
    pub fn inode_io_list_del(inode: *mut inode);
}
extern "C" {
    pub fn laptop_io_completion(info: *mut backing_dev_info);
}
extern "C" {
    pub fn laptop_sync_completion();
}
extern "C" {
    pub fn laptop_mode_timer_fn(t: *mut timer_list);
}
extern "C" {
    pub fn node_dirty_ok(pgdat: *mut pglist_data) -> bool_;
}
extern "C" {
    pub fn wb_domain_init(dom: *mut wb_domain, gfp: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub static mut global_wb_domain: wb_domain;
}
extern "C" {
    pub static mut dirty_writeback_interval: core::ffi::c_uint;
}
extern "C" {
    pub static mut dirty_expire_interval: core::ffi::c_uint;
}
extern "C" {
    pub static mut dirtytime_expire_interval: core::ffi::c_uint;
}
extern "C" {
    pub static mut laptop_mode: core::ffi::c_int;
}
extern "C" {
    pub fn dirtytime_interval_handler(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn global_dirty_limits(
        pbackground: *mut core::ffi::c_ulong,
        pdirty: *mut core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn wb_calc_thresh(wb: *mut bdi_writeback, thresh: core::ffi::c_ulong)
        -> core::ffi::c_ulong;
}
extern "C" {
    pub fn cgwb_calc_thresh(wb: *mut bdi_writeback) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn wb_update_bandwidth(wb: *mut bdi_writeback);
}
extern "C" {
    pub fn balance_dirty_pages_ratelimited(mapping: *mut address_space);
}
extern "C" {
    pub fn balance_dirty_pages_ratelimited_flags(
        mapping: *mut address_space,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wb_over_bg_thresh(wb: *mut bdi_writeback) -> bool_;
}
extern "C" {
    pub fn writeback_iter(
        mapping: *mut address_space,
        wbc: *mut writeback_control,
        folio: *mut folio,
        error: *mut core::ffi::c_int,
    ) -> *mut folio;
}
pub type writepage_t = ::core::option::Option<
    unsafe extern "C" fn(
        folio: *mut folio,
        wbc: *mut writeback_control,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn write_cache_pages(
        mapping: *mut address_space,
        wbc: *mut writeback_control,
        writepage: writepage_t,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_writepages(
        mapping: *mut address_space,
        wbc: *mut writeback_control,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn writeback_set_ratelimit();
}
extern "C" {
    pub fn tag_pages_for_writeback(
        mapping: *mut address_space,
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn filemap_dirty_folio(mapping: *mut address_space, folio: *mut folio) -> bool_;
}
extern "C" {
    pub fn folio_redirty_for_writepage(arg1: *mut writeback_control, arg2: *mut folio) -> bool_;
}
extern "C" {
    pub fn redirty_page_for_writepage(arg1: *mut writeback_control, arg2: *mut page) -> bool_;
}
extern "C" {
    pub fn sb_mark_inode_writeback(inode: *mut inode);
}
extern "C" {
    pub fn sb_clear_inode_writeback(inode: *mut inode);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct obj_cgroup {
    _unused: [u8; 0],
}
pub const memcg_stat_item_MEMCG_SWAP: memcg_stat_item = 47;
pub const memcg_stat_item_MEMCG_SOCK: memcg_stat_item = 48;
pub const memcg_stat_item_MEMCG_PERCPU_B: memcg_stat_item = 49;
pub const memcg_stat_item_MEMCG_VMALLOC: memcg_stat_item = 50;
pub const memcg_stat_item_MEMCG_KMEM: memcg_stat_item = 51;
pub const memcg_stat_item_MEMCG_ZSWAP_B: memcg_stat_item = 52;
pub const memcg_stat_item_MEMCG_ZSWAPPED: memcg_stat_item = 53;
pub const memcg_stat_item_MEMCG_NR_STAT: memcg_stat_item = 54;
pub type memcg_stat_item = core::ffi::c_uint;
pub const memcg_memory_event_MEMCG_LOW: memcg_memory_event = 0;
pub const memcg_memory_event_MEMCG_HIGH: memcg_memory_event = 1;
pub const memcg_memory_event_MEMCG_MAX: memcg_memory_event = 2;
pub const memcg_memory_event_MEMCG_OOM: memcg_memory_event = 3;
pub const memcg_memory_event_MEMCG_OOM_KILL: memcg_memory_event = 4;
pub const memcg_memory_event_MEMCG_OOM_GROUP_KILL: memcg_memory_event = 5;
pub const memcg_memory_event_MEMCG_SWAP_HIGH: memcg_memory_event = 6;
pub const memcg_memory_event_MEMCG_SWAP_MAX: memcg_memory_event = 7;
pub const memcg_memory_event_MEMCG_SWAP_FAIL: memcg_memory_event = 8;
pub const memcg_memory_event_MEMCG_NR_MEMORY_EVENTS: memcg_memory_event = 9;
pub type memcg_memory_event = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mem_cgroup_reclaim_cookie {
    pub pgdat: *mut pg_data_t,
    pub generation: core::ffi::c_uint,
}
impl Default for mem_cgroup_reclaim_cookie {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const objext_flags_OBJEXTS_ALLOC_FAIL: objext_flags = 1;
pub const objext_flags___NR_OBJEXTS_FLAGS: objext_flags = 2;
pub type objext_flags = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct slabobj_ext {}
extern "C" {
    pub fn mem_cgroup_charge_skmem(
        memcg: *mut mem_cgroup,
        nr_pages: core::ffi::c_uint,
        gfp_mask: gfp_t,
    ) -> bool_;
}
extern "C" {
    pub fn mem_cgroup_uncharge_skmem(memcg: *mut mem_cgroup, nr_pages: core::ffi::c_uint);
}
pub const cfi_mode_CFI_AUTO: cfi_mode = 0;
pub const cfi_mode_CFI_OFF: cfi_mode = 1;
pub const cfi_mode_CFI_KCFI: cfi_mode = 2;
pub const cfi_mode_CFI_FINEIBT: cfi_mode = 3;
pub type cfi_mode = core::ffi::c_uint;
extern "C" {
    pub static mut cfi_mode: cfi_mode;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_verifier_env {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_arena {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_iter_aux_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_local_storage_map {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_func_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ftrace_ops {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut btf_idr: idr;
}
extern "C" {
    pub static mut btf_idr_lock: spinlock_t;
}
extern "C" {
    pub static mut btf_kobj: *mut kobject;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_mem_alloc {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut bpf_global_ma: bpf_mem_alloc;
}
extern "C" {
    pub static mut bpf_global_percpu_ma: bpf_mem_alloc;
}
extern "C" {
    pub static mut bpf_global_ma_set: bool_;
}
pub type bpf_callback_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: u64_, arg2: u64_, arg3: u64_, arg4: u64_, arg5: u64_) -> u64_,
>;
pub type bpf_iter_init_seq_priv_t = ::core::option::Option<
    unsafe extern "C" fn(
        private_data: *mut core::ffi::c_void,
        aux: *mut bpf_iter_aux_info,
    ) -> core::ffi::c_int,
>;
pub type bpf_iter_fini_seq_priv_t =
    ::core::option::Option<unsafe extern "C" fn(private_data: *mut core::ffi::c_void)>;
pub type bpf_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const core::ffi::c_void,
        arg2: *const bpf_insn,
    ) -> core::ffi::c_uint,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_iter_seq_info {
    pub seq_ops: *const seq_operations,
    pub init_seq_private: bpf_iter_init_seq_priv_t,
    pub fini_seq_private: bpf_iter_fini_seq_priv_t,
    pub seq_priv_size: u32_,
}
impl Default for bpf_iter_seq_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_map_ops {
    pub map_alloc_check:
        ::core::option::Option<unsafe extern "C" fn(attr: *mut bpf_attr) -> core::ffi::c_int>,
    pub map_alloc:
        ::core::option::Option<unsafe extern "C" fn(attr: *mut bpf_attr) -> *mut bpf_map>,
    pub map_release:
        ::core::option::Option<unsafe extern "C" fn(map: *mut bpf_map, map_file: *mut file)>,
    pub map_free: ::core::option::Option<unsafe extern "C" fn(map: *mut bpf_map)>,
    pub map_get_next_key: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            key: *mut core::ffi::c_void,
            next_key: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub map_release_uref: ::core::option::Option<unsafe extern "C" fn(map: *mut bpf_map)>,
    pub map_lookup_elem_sys_only: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            key: *mut core::ffi::c_void,
        ) -> *mut core::ffi::c_void,
    >,
    pub map_lookup_batch: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            attr: *const bpf_attr,
            uattr: *mut bpf_attr,
        ) -> core::ffi::c_int,
    >,
    pub map_lookup_and_delete_elem: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            key: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
            flags: u64_,
        ) -> core::ffi::c_int,
    >,
    pub map_lookup_and_delete_batch: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            attr: *const bpf_attr,
            uattr: *mut bpf_attr,
        ) -> core::ffi::c_int,
    >,
    pub map_update_batch: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            map_file: *mut file,
            attr: *const bpf_attr,
            uattr: *mut bpf_attr,
        ) -> core::ffi::c_int,
    >,
    pub map_delete_batch: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            attr: *const bpf_attr,
            uattr: *mut bpf_attr,
        ) -> core::ffi::c_int,
    >,
    pub map_lookup_elem: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            key: *mut core::ffi::c_void,
        ) -> *mut core::ffi::c_void,
    >,
    pub map_update_elem: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            key: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
            flags: u64_,
        ) -> core::ffi::c_long,
    >,
    pub map_delete_elem: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, key: *mut core::ffi::c_void) -> core::ffi::c_long,
    >,
    pub map_push_elem: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            value: *mut core::ffi::c_void,
            flags: u64_,
        ) -> core::ffi::c_long,
    >,
    pub map_pop_elem: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, value: *mut core::ffi::c_void) -> core::ffi::c_long,
    >,
    pub map_peek_elem: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, value: *mut core::ffi::c_void) -> core::ffi::c_long,
    >,
    pub map_lookup_percpu_elem: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            key: *mut core::ffi::c_void,
            cpu: u32_,
        ) -> *mut core::ffi::c_void,
    >,
    pub map_fd_get_ptr: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            map_file: *mut file,
            fd: core::ffi::c_int,
        ) -> *mut core::ffi::c_void,
    >,
    pub map_fd_put_ptr: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, ptr: *mut core::ffi::c_void, need_defer: bool_),
    >,
    pub map_gen_lookup: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, insn_buf: *mut bpf_insn) -> core::ffi::c_int,
    >,
    pub map_fd_sys_lookup_elem:
        ::core::option::Option<unsafe extern "C" fn(ptr: *mut core::ffi::c_void) -> u32_>,
    pub map_seq_show_elem: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, key: *mut core::ffi::c_void, m: *mut seq_file),
    >,
    pub map_check_btf: ::core::option::Option<
        unsafe extern "C" fn(
            map: *const bpf_map,
            btf: *const btf,
            key_type: *const btf_type,
            value_type: *const btf_type,
        ) -> core::ffi::c_int,
    >,
    pub map_poke_track: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, aux: *mut bpf_prog_aux) -> core::ffi::c_int,
    >,
    pub map_poke_untrack:
        ::core::option::Option<unsafe extern "C" fn(map: *mut bpf_map, aux: *mut bpf_prog_aux)>,
    pub map_poke_run: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, key: u32_, old: *mut bpf_prog, new: *mut bpf_prog),
    >,
    pub map_direct_value_addr: ::core::option::Option<
        unsafe extern "C" fn(map: *const bpf_map, imm: *mut u64_, off: u32_) -> core::ffi::c_int,
    >,
    pub map_direct_value_meta: ::core::option::Option<
        unsafe extern "C" fn(map: *const bpf_map, imm: u64_, off: *mut u32_) -> core::ffi::c_int,
    >,
    pub map_mmap: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, vma: *mut vm_area_struct) -> core::ffi::c_int,
    >,
    pub map_poll: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            filp: *mut file,
            pts: *mut poll_table_struct,
        ) -> __poll_t,
    >,
    pub map_get_unmapped_area: ::core::option::Option<
        unsafe extern "C" fn(
            filep: *mut file,
            addr: core::ffi::c_ulong,
            len: core::ffi::c_ulong,
            pgoff: core::ffi::c_ulong,
            flags: core::ffi::c_ulong,
        ) -> core::ffi::c_ulong,
    >,
    pub map_local_storage_charge: ::core::option::Option<
        unsafe extern "C" fn(
            smap: *mut bpf_local_storage_map,
            owner: *mut core::ffi::c_void,
            size: u32_,
        ) -> core::ffi::c_int,
    >,
    pub map_local_storage_uncharge: ::core::option::Option<
        unsafe extern "C" fn(
            smap: *mut bpf_local_storage_map,
            owner: *mut core::ffi::c_void,
            size: u32_,
        ),
    >,
    pub map_owner_storage_ptr: ::core::option::Option<
        unsafe extern "C" fn(owner: *mut core::ffi::c_void) -> *mut *mut bpf_local_storage,
    >,
    pub map_redirect: ::core::option::Option<
        unsafe extern "C" fn(map: *mut bpf_map, key: u64_, flags: u64_) -> core::ffi::c_long,
    >,
    pub map_meta_equal: ::core::option::Option<
        unsafe extern "C" fn(meta0: *const bpf_map, meta1: *const bpf_map) -> bool_,
    >,
    pub map_set_for_each_callback_args: ::core::option::Option<
        unsafe extern "C" fn(
            env: *mut bpf_verifier_env,
            caller: *mut bpf_func_state,
            callee: *mut bpf_func_state,
        ) -> core::ffi::c_int,
    >,
    pub map_for_each_callback: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_map,
            callback_fn: bpf_callback_t,
            callback_ctx: *mut core::ffi::c_void,
            flags: u64_,
        ) -> core::ffi::c_long,
    >,
    pub map_mem_usage: ::core::option::Option<unsafe extern "C" fn(map: *const bpf_map) -> u64_>,
    pub map_btf_id: *mut core::ffi::c_int,
    pub iter_seq_info: *const bpf_iter_seq_info,
}
impl Default for bpf_map_ops {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BTF_FIELDS_MAX: _bindgen_ty_237 = 11;
pub type _bindgen_ty_237 = core::ffi::c_uint;
pub const btf_field_type_BPF_SPIN_LOCK: btf_field_type = 1;
pub const btf_field_type_BPF_TIMER: btf_field_type = 2;
pub const btf_field_type_BPF_KPTR_UNREF: btf_field_type = 4;
pub const btf_field_type_BPF_KPTR_REF: btf_field_type = 8;
pub const btf_field_type_BPF_KPTR_PERCPU: btf_field_type = 16;
pub const btf_field_type_BPF_KPTR: btf_field_type = 28;
pub const btf_field_type_BPF_LIST_HEAD: btf_field_type = 32;
pub const btf_field_type_BPF_LIST_NODE: btf_field_type = 64;
pub const btf_field_type_BPF_RB_ROOT: btf_field_type = 128;
pub const btf_field_type_BPF_RB_NODE: btf_field_type = 256;
pub const btf_field_type_BPF_GRAPH_NODE: btf_field_type = 320;
pub const btf_field_type_BPF_GRAPH_ROOT: btf_field_type = 160;
pub const btf_field_type_BPF_REFCOUNT: btf_field_type = 512;
pub const btf_field_type_BPF_WORKQUEUE: btf_field_type = 1024;
pub type btf_field_type = core::ffi::c_uint;
pub type btf_dtor_kfunc_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_field_kptr {
    pub btf: *mut btf,
    pub module: *mut module,
    pub dtor: btf_dtor_kfunc_t,
    pub btf_id: u32_,
}
impl Default for btf_field_kptr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_field_graph_root {
    pub btf: *mut btf,
    pub value_btf_id: u32_,
    pub node_offset: u32_,
    pub value_rec: *mut btf_record,
}
impl Default for btf_field_graph_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_field {
    pub offset: u32_,
    pub size: u32_,
    pub type_: btf_field_type,
    pub __bindgen_anon_1: btf_field__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btf_field__bindgen_ty_1 {
    pub kptr: btf_field_kptr,
    pub graph_root: btf_field_graph_root,
}
impl Default for btf_field__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for btf_field {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct btf_record {
    pub cnt: u32_,
    pub field_mask: u32_,
    pub spin_lock_off: core::ffi::c_int,
    pub timer_off: core::ffi::c_int,
    pub wq_off: core::ffi::c_int,
    pub refcount_off: core::ffi::c_int,
    pub fields: __IncompleteArrayField<btf_field>,
}
impl Default for btf_record {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_rb_node_kern {
    pub rb_node: rb_node,
    pub owner: *mut core::ffi::c_void,
}
impl Default for bpf_rb_node_kern {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_list_node_kern {
    pub list_head: list_head,
    pub owner: *mut core::ffi::c_void,
}
impl Default for bpf_list_node_kern {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_map {
    pub ops: *const bpf_map_ops,
    pub inner_map_meta: *mut bpf_map,
    pub security: *mut core::ffi::c_void,
    pub map_type: bpf_map_type,
    pub key_size: u32_,
    pub value_size: u32_,
    pub max_entries: u32_,
    pub map_extra: u64_,
    pub map_flags: u32_,
    pub id: u32_,
    pub record: *mut btf_record,
    pub numa_node: core::ffi::c_int,
    pub btf_key_type_id: u32_,
    pub btf_value_type_id: u32_,
    pub btf_vmlinux_value_type_id: u32_,
    pub btf: *mut btf,
    pub name: [core::ffi::c_char; 16usize],
    pub freeze_mutex: mutex,
    pub refcnt: atomic64_t,
    pub usercnt: atomic64_t,
    pub __bindgen_anon_1: bpf_map__bindgen_ty_1,
    pub writecnt: atomic64_t,
    pub owner: bpf_map__bindgen_ty_2,
    pub bypass_spec_v1: bool_,
    pub frozen: bool_,
    pub free_after_mult_rcu_gp: bool_,
    pub free_after_rcu_gp: bool_,
    pub sleepable_refcnt: atomic64_t,
    pub elem_count: *mut s64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_map__bindgen_ty_1 {
    pub work: work_struct,
    pub rcu: callback_head,
}
impl Default for bpf_map__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_map__bindgen_ty_2 {
    pub lock: spinlock_t,
    pub type_: bpf_prog_type,
    pub jited: bool_,
    pub xdp_has_frags: bool_,
}
impl Default for bpf_map__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_map {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn copy_map_value_locked(
        map: *mut bpf_map,
        dst: *mut core::ffi::c_void,
        src: *mut core::ffi::c_void,
        lock_src: bool_,
    );
}
extern "C" {
    pub fn bpf_timer_cancel_and_free(timer: *mut core::ffi::c_void);
}
extern "C" {
    pub fn bpf_wq_cancel_and_free(timer: *mut core::ffi::c_void);
}
extern "C" {
    pub fn bpf_list_head_free(
        field: *const btf_field,
        list_head: *mut core::ffi::c_void,
        spin_lock: *mut bpf_spin_lock,
    );
}
extern "C" {
    pub fn bpf_rb_root_free(
        field: *const btf_field,
        rb_root: *mut core::ffi::c_void,
        spin_lock: *mut bpf_spin_lock,
    );
}
extern "C" {
    pub fn bpf_arena_get_kern_vm_start(arena: *mut bpf_arena) -> u64_;
}
extern "C" {
    pub fn bpf_arena_get_user_vm_start(arena: *mut bpf_arena) -> u64_;
}
extern "C" {
    pub fn bpf_obj_name_cpy(
        dst: *mut core::ffi::c_char,
        src: *const core::ffi::c_char,
        size: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_offload_dev {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_map_dev_ops {
    pub map_get_next_key: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_offloaded_map,
            key: *mut core::ffi::c_void,
            next_key: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub map_lookup_elem: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_offloaded_map,
            key: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub map_update_elem: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_offloaded_map,
            key: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
            flags: u64_,
        ) -> core::ffi::c_int,
    >,
    pub map_delete_elem: ::core::option::Option<
        unsafe extern "C" fn(
            map: *mut bpf_offloaded_map,
            key: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_offloaded_map {
    pub map: bpf_map,
    pub netdev: *mut net_device,
    pub dev_ops: *const bpf_map_dev_ops,
    pub dev_priv: *mut core::ffi::c_void,
    pub offloads: list_head,
}
impl Default for bpf_offloaded_map {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn map_check_no_btf(
        map: *const bpf_map,
        btf: *const btf,
        key_type: *const btf_type,
        value_type: *const btf_type,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_map_meta_equal(meta0: *const bpf_map, meta1: *const bpf_map) -> bool_;
}
extern "C" {
    pub static bpf_map_offload_ops: bpf_map_ops;
}
pub const bpf_type_flag_PTR_MAYBE_NULL: bpf_type_flag = 256;
pub const bpf_type_flag_MEM_RDONLY: bpf_type_flag = 512;
pub const bpf_type_flag_MEM_RINGBUF: bpf_type_flag = 1024;
pub const bpf_type_flag_MEM_USER: bpf_type_flag = 2048;
pub const bpf_type_flag_MEM_PERCPU: bpf_type_flag = 4096;
pub const bpf_type_flag_OBJ_RELEASE: bpf_type_flag = 8192;
pub const bpf_type_flag_PTR_UNTRUSTED: bpf_type_flag = 16384;
pub const bpf_type_flag_MEM_UNINIT: bpf_type_flag = 32768;
pub const bpf_type_flag_DYNPTR_TYPE_LOCAL: bpf_type_flag = 65536;
pub const bpf_type_flag_DYNPTR_TYPE_RINGBUF: bpf_type_flag = 131072;
pub const bpf_type_flag_MEM_FIXED_SIZE: bpf_type_flag = 262144;
pub const bpf_type_flag_MEM_ALLOC: bpf_type_flag = 524288;
pub const bpf_type_flag_PTR_TRUSTED: bpf_type_flag = 1048576;
pub const bpf_type_flag_MEM_RCU: bpf_type_flag = 2097152;
pub const bpf_type_flag_NON_OWN_REF: bpf_type_flag = 4194304;
pub const bpf_type_flag_DYNPTR_TYPE_SKB: bpf_type_flag = 8388608;
pub const bpf_type_flag_DYNPTR_TYPE_XDP: bpf_type_flag = 16777216;
pub const bpf_type_flag___BPF_TYPE_FLAG_MAX: bpf_type_flag = 16777217;
pub const bpf_type_flag___BPF_TYPE_LAST_FLAG: bpf_type_flag = 16777216;
pub type bpf_type_flag = core::ffi::c_uint;
pub const bpf_arg_type_ARG_DONTCARE: bpf_arg_type = 0;
pub const bpf_arg_type_ARG_CONST_MAP_PTR: bpf_arg_type = 1;
pub const bpf_arg_type_ARG_PTR_TO_MAP_KEY: bpf_arg_type = 2;
pub const bpf_arg_type_ARG_PTR_TO_MAP_VALUE: bpf_arg_type = 3;
pub const bpf_arg_type_ARG_PTR_TO_MEM: bpf_arg_type = 4;
pub const bpf_arg_type_ARG_PTR_TO_ARENA: bpf_arg_type = 5;
pub const bpf_arg_type_ARG_CONST_SIZE: bpf_arg_type = 6;
pub const bpf_arg_type_ARG_CONST_SIZE_OR_ZERO: bpf_arg_type = 7;
pub const bpf_arg_type_ARG_PTR_TO_CTX: bpf_arg_type = 8;
pub const bpf_arg_type_ARG_ANYTHING: bpf_arg_type = 9;
pub const bpf_arg_type_ARG_PTR_TO_SPIN_LOCK: bpf_arg_type = 10;
pub const bpf_arg_type_ARG_PTR_TO_SOCK_COMMON: bpf_arg_type = 11;
pub const bpf_arg_type_ARG_PTR_TO_INT: bpf_arg_type = 12;
pub const bpf_arg_type_ARG_PTR_TO_LONG: bpf_arg_type = 13;
pub const bpf_arg_type_ARG_PTR_TO_SOCKET: bpf_arg_type = 14;
pub const bpf_arg_type_ARG_PTR_TO_BTF_ID: bpf_arg_type = 15;
pub const bpf_arg_type_ARG_PTR_TO_RINGBUF_MEM: bpf_arg_type = 16;
pub const bpf_arg_type_ARG_CONST_ALLOC_SIZE_OR_ZERO: bpf_arg_type = 17;
pub const bpf_arg_type_ARG_PTR_TO_BTF_ID_SOCK_COMMON: bpf_arg_type = 18;
pub const bpf_arg_type_ARG_PTR_TO_PERCPU_BTF_ID: bpf_arg_type = 19;
pub const bpf_arg_type_ARG_PTR_TO_FUNC: bpf_arg_type = 20;
pub const bpf_arg_type_ARG_PTR_TO_STACK: bpf_arg_type = 21;
pub const bpf_arg_type_ARG_PTR_TO_CONST_STR: bpf_arg_type = 22;
pub const bpf_arg_type_ARG_PTR_TO_TIMER: bpf_arg_type = 23;
pub const bpf_arg_type_ARG_PTR_TO_KPTR: bpf_arg_type = 24;
pub const bpf_arg_type_ARG_PTR_TO_DYNPTR: bpf_arg_type = 25;
pub const bpf_arg_type___BPF_ARG_TYPE_MAX: bpf_arg_type = 26;
pub const bpf_arg_type_ARG_PTR_TO_MAP_VALUE_OR_NULL: bpf_arg_type = 259;
pub const bpf_arg_type_ARG_PTR_TO_MEM_OR_NULL: bpf_arg_type = 260;
pub const bpf_arg_type_ARG_PTR_TO_CTX_OR_NULL: bpf_arg_type = 264;
pub const bpf_arg_type_ARG_PTR_TO_SOCKET_OR_NULL: bpf_arg_type = 270;
pub const bpf_arg_type_ARG_PTR_TO_STACK_OR_NULL: bpf_arg_type = 277;
pub const bpf_arg_type_ARG_PTR_TO_BTF_ID_OR_NULL: bpf_arg_type = 271;
pub const bpf_arg_type_ARG_PTR_TO_UNINIT_MEM: bpf_arg_type = 32772;
pub const bpf_arg_type_ARG_PTR_TO_FIXED_SIZE_MEM: bpf_arg_type = 262148;
pub const bpf_arg_type___BPF_ARG_TYPE_LIMIT: bpf_arg_type = 33554431;
pub type bpf_arg_type = core::ffi::c_uint;
pub const bpf_return_type_RET_INTEGER: bpf_return_type = 0;
pub const bpf_return_type_RET_VOID: bpf_return_type = 1;
pub const bpf_return_type_RET_PTR_TO_MAP_VALUE: bpf_return_type = 2;
pub const bpf_return_type_RET_PTR_TO_SOCKET: bpf_return_type = 3;
pub const bpf_return_type_RET_PTR_TO_TCP_SOCK: bpf_return_type = 4;
pub const bpf_return_type_RET_PTR_TO_SOCK_COMMON: bpf_return_type = 5;
pub const bpf_return_type_RET_PTR_TO_MEM: bpf_return_type = 6;
pub const bpf_return_type_RET_PTR_TO_MEM_OR_BTF_ID: bpf_return_type = 7;
pub const bpf_return_type_RET_PTR_TO_BTF_ID: bpf_return_type = 8;
pub const bpf_return_type___BPF_RET_TYPE_MAX: bpf_return_type = 9;
pub const bpf_return_type_RET_PTR_TO_MAP_VALUE_OR_NULL: bpf_return_type = 258;
pub const bpf_return_type_RET_PTR_TO_SOCKET_OR_NULL: bpf_return_type = 259;
pub const bpf_return_type_RET_PTR_TO_TCP_SOCK_OR_NULL: bpf_return_type = 260;
pub const bpf_return_type_RET_PTR_TO_SOCK_COMMON_OR_NULL: bpf_return_type = 261;
pub const bpf_return_type_RET_PTR_TO_RINGBUF_MEM_OR_NULL: bpf_return_type = 1286;
pub const bpf_return_type_RET_PTR_TO_DYNPTR_MEM_OR_NULL: bpf_return_type = 262;
pub const bpf_return_type_RET_PTR_TO_BTF_ID_OR_NULL: bpf_return_type = 264;
pub const bpf_return_type_RET_PTR_TO_BTF_ID_TRUSTED: bpf_return_type = 1048584;
pub const bpf_return_type___BPF_RET_TYPE_LIMIT: bpf_return_type = 33554431;
pub type bpf_return_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_func_proto {
    pub func: ::core::option::Option<
        unsafe extern "C" fn(r1: u64_, r2: u64_, r3: u64_, r4: u64_, r5: u64_) -> u64_,
    >,
    pub gpl_only: bool_,
    pub pkt_access: bool_,
    pub might_sleep: bool_,
    pub ret_type: bpf_return_type,
    pub __bindgen_anon_1: bpf_func_proto__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_func_proto__bindgen_ty_2,
    pub ret_btf_id: *mut core::ffi::c_int,
    pub allowed: ::core::option::Option<unsafe extern "C" fn(prog: *const bpf_prog) -> bool_>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_func_proto__bindgen_ty_1 {
    pub __bindgen_anon_1: bpf_func_proto__bindgen_ty_1__bindgen_ty_1,
    pub arg_type: [bpf_arg_type; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_func_proto__bindgen_ty_1__bindgen_ty_1 {
    pub arg1_type: bpf_arg_type,
    pub arg2_type: bpf_arg_type,
    pub arg3_type: bpf_arg_type,
    pub arg4_type: bpf_arg_type,
    pub arg5_type: bpf_arg_type,
}
impl Default for bpf_func_proto__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_func_proto__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_func_proto__bindgen_ty_2 {
    pub __bindgen_anon_1: bpf_func_proto__bindgen_ty_2__bindgen_ty_1,
    pub arg_btf_id: [*mut u32_; 5usize],
    pub __bindgen_anon_2: bpf_func_proto__bindgen_ty_2__bindgen_ty_2,
    pub arg_size: [usize; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_func_proto__bindgen_ty_2__bindgen_ty_1 {
    pub arg1_btf_id: *mut u32_,
    pub arg2_btf_id: *mut u32_,
    pub arg3_btf_id: *mut u32_,
    pub arg4_btf_id: *mut u32_,
    pub arg5_btf_id: *mut u32_,
}
impl Default for bpf_func_proto__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_func_proto__bindgen_ty_2__bindgen_ty_2 {
    pub arg1_size: usize,
    pub arg2_size: usize,
    pub arg3_size: usize,
    pub arg4_size: usize,
    pub arg5_size: usize,
}
impl Default for bpf_func_proto__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_func_proto {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_context {
    _unused: [u8; 0],
}
pub const bpf_access_type_BPF_READ: bpf_access_type = 1;
pub const bpf_access_type_BPF_WRITE: bpf_access_type = 2;
pub type bpf_access_type = core::ffi::c_uint;
pub const bpf_reg_type_NOT_INIT: bpf_reg_type = 0;
pub const bpf_reg_type_SCALAR_VALUE: bpf_reg_type = 1;
pub const bpf_reg_type_PTR_TO_CTX: bpf_reg_type = 2;
pub const bpf_reg_type_CONST_PTR_TO_MAP: bpf_reg_type = 3;
pub const bpf_reg_type_PTR_TO_MAP_VALUE: bpf_reg_type = 4;
pub const bpf_reg_type_PTR_TO_MAP_KEY: bpf_reg_type = 5;
pub const bpf_reg_type_PTR_TO_STACK: bpf_reg_type = 6;
pub const bpf_reg_type_PTR_TO_PACKET_META: bpf_reg_type = 7;
pub const bpf_reg_type_PTR_TO_PACKET: bpf_reg_type = 8;
pub const bpf_reg_type_PTR_TO_PACKET_END: bpf_reg_type = 9;
pub const bpf_reg_type_PTR_TO_FLOW_KEYS: bpf_reg_type = 10;
pub const bpf_reg_type_PTR_TO_SOCKET: bpf_reg_type = 11;
pub const bpf_reg_type_PTR_TO_SOCK_COMMON: bpf_reg_type = 12;
pub const bpf_reg_type_PTR_TO_TCP_SOCK: bpf_reg_type = 13;
pub const bpf_reg_type_PTR_TO_TP_BUFFER: bpf_reg_type = 14;
pub const bpf_reg_type_PTR_TO_XDP_SOCK: bpf_reg_type = 15;
pub const bpf_reg_type_PTR_TO_BTF_ID: bpf_reg_type = 16;
pub const bpf_reg_type_PTR_TO_MEM: bpf_reg_type = 17;
pub const bpf_reg_type_PTR_TO_ARENA: bpf_reg_type = 18;
pub const bpf_reg_type_PTR_TO_BUF: bpf_reg_type = 19;
pub const bpf_reg_type_PTR_TO_FUNC: bpf_reg_type = 20;
pub const bpf_reg_type_CONST_PTR_TO_DYNPTR: bpf_reg_type = 21;
pub const bpf_reg_type___BPF_REG_TYPE_MAX: bpf_reg_type = 22;
pub const bpf_reg_type_PTR_TO_MAP_VALUE_OR_NULL: bpf_reg_type = 260;
pub const bpf_reg_type_PTR_TO_SOCKET_OR_NULL: bpf_reg_type = 267;
pub const bpf_reg_type_PTR_TO_SOCK_COMMON_OR_NULL: bpf_reg_type = 268;
pub const bpf_reg_type_PTR_TO_TCP_SOCK_OR_NULL: bpf_reg_type = 269;
pub const bpf_reg_type_PTR_TO_BTF_ID_OR_NULL: bpf_reg_type = 272;
pub const bpf_reg_type___BPF_REG_TYPE_LIMIT: bpf_reg_type = 33554431;
pub type bpf_reg_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_insn_access_aux {
    pub reg_type: bpf_reg_type,
    pub __bindgen_anon_1: bpf_insn_access_aux__bindgen_ty_1,
    pub log: *mut bpf_verifier_log,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_insn_access_aux__bindgen_ty_1 {
    pub ctx_field_size: core::ffi::c_int,
    pub __bindgen_anon_1: bpf_insn_access_aux__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_insn_access_aux__bindgen_ty_1__bindgen_ty_1 {
    pub btf: *mut btf,
    pub btf_id: u32_,
}
impl Default for bpf_insn_access_aux__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_insn_access_aux__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_insn_access_aux {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_prog_ops {
    pub test_run: ::core::option::Option<
        unsafe extern "C" fn(
            prog: *mut bpf_prog,
            kattr: *const bpf_attr,
            uattr: *mut bpf_attr,
        ) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_reg_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_verifier_ops {
    pub get_func_proto: ::core::option::Option<
        unsafe extern "C" fn(func_id: bpf_func_id, prog: *const bpf_prog) -> *const bpf_func_proto,
    >,
    pub is_valid_access: ::core::option::Option<
        unsafe extern "C" fn(
            off: core::ffi::c_int,
            size: core::ffi::c_int,
            type_: bpf_access_type,
            prog: *const bpf_prog,
            info: *mut bpf_insn_access_aux,
        ) -> bool_,
    >,
    pub gen_prologue: ::core::option::Option<
        unsafe extern "C" fn(
            insn: *mut bpf_insn,
            direct_write: bool_,
            prog: *const bpf_prog,
        ) -> core::ffi::c_int,
    >,
    pub gen_ld_abs: ::core::option::Option<
        unsafe extern "C" fn(orig: *const bpf_insn, insn_buf: *mut bpf_insn) -> core::ffi::c_int,
    >,
    pub convert_ctx_access: ::core::option::Option<
        unsafe extern "C" fn(
            type_: bpf_access_type,
            src: *const bpf_insn,
            dst: *mut bpf_insn,
            prog: *mut bpf_prog,
            target_size: *mut u32_,
        ) -> u32_,
    >,
    pub btf_struct_access: ::core::option::Option<
        unsafe extern "C" fn(
            log: *mut bpf_verifier_log,
            reg: *const bpf_reg_state,
            off: core::ffi::c_int,
            size: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_prog_offload_ops {
    pub insn_hook: ::core::option::Option<
        unsafe extern "C" fn(
            env: *mut bpf_verifier_env,
            insn_idx: core::ffi::c_int,
            prev_insn_idx: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub finalize: ::core::option::Option<
        unsafe extern "C" fn(env: *mut bpf_verifier_env) -> core::ffi::c_int,
    >,
    pub replace_insn: ::core::option::Option<
        unsafe extern "C" fn(
            env: *mut bpf_verifier_env,
            off: u32_,
            insn: *mut bpf_insn,
        ) -> core::ffi::c_int,
    >,
    pub remove_insns: ::core::option::Option<
        unsafe extern "C" fn(env: *mut bpf_verifier_env, off: u32_, cnt: u32_) -> core::ffi::c_int,
    >,
    pub prepare:
        ::core::option::Option<unsafe extern "C" fn(prog: *mut bpf_prog) -> core::ffi::c_int>,
    pub translate:
        ::core::option::Option<unsafe extern "C" fn(prog: *mut bpf_prog) -> core::ffi::c_int>,
    pub destroy: ::core::option::Option<unsafe extern "C" fn(prog: *mut bpf_prog)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_prog_offload {
    pub prog: *mut bpf_prog,
    pub netdev: *mut net_device,
    pub offdev: *mut bpf_offload_dev,
    pub dev_priv: *mut core::ffi::c_void,
    pub offloads: list_head,
    pub dev_state: bool_,
    pub opt_failed: bool_,
    pub jited_image: *mut core::ffi::c_void,
    pub jited_len: u32_,
}
impl Default for bpf_prog_offload {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const bpf_cgroup_storage_type_BPF_CGROUP_STORAGE_SHARED: bpf_cgroup_storage_type = 0;
pub const bpf_cgroup_storage_type_BPF_CGROUP_STORAGE_PERCPU: bpf_cgroup_storage_type = 1;
pub const bpf_cgroup_storage_type___BPF_CGROUP_STORAGE_MAX: bpf_cgroup_storage_type = 2;
pub type bpf_cgroup_storage_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct btf_func_model {
    pub ret_size: u8_,
    pub ret_flags: u8_,
    pub nr_args: u8_,
    pub arg_size: [u8_; 12usize],
    pub arg_flags: [u8_; 12usize],
}
pub const BPF_MAX_TRAMP_LINKS: _bindgen_ty_238 = 38;
pub type _bindgen_ty_238 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_tramp_links {
    pub links: [*mut bpf_tramp_link; 38usize],
    pub nr_links: core::ffi::c_int,
}
impl Default for bpf_tramp_links {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn arch_prepare_bpf_trampoline(
        im: *mut bpf_tramp_image,
        image: *mut core::ffi::c_void,
        image_end: *mut core::ffi::c_void,
        m: *const btf_func_model,
        flags: u32_,
        tlinks: *mut bpf_tramp_links,
        func_addr: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_alloc_bpf_trampoline(size: core::ffi::c_uint) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn arch_free_bpf_trampoline(image: *mut core::ffi::c_void, size: core::ffi::c_uint);
}
extern "C" {
    pub fn arch_protect_bpf_trampoline(
        image: *mut core::ffi::c_void,
        size: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_bpf_trampoline_size(
        m: *const btf_func_model,
        flags: u32_,
        tlinks: *mut bpf_tramp_links,
        func_addr: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __bpf_prog_enter_sleepable_recur(
        prog: *mut bpf_prog,
        run_ctx: *mut bpf_tramp_run_ctx,
    ) -> u64_;
}
extern "C" {
    pub fn __bpf_prog_exit_sleepable_recur(
        prog: *mut bpf_prog,
        start: u64_,
        run_ctx: *mut bpf_tramp_run_ctx,
    );
}
extern "C" {
    pub fn __bpf_tramp_enter(tr: *mut bpf_tramp_image);
}
extern "C" {
    pub fn __bpf_tramp_exit(tr: *mut bpf_tramp_image);
}
pub type bpf_trampoline_enter_t = ::core::option::Option<
    unsafe extern "C" fn(prog: *mut bpf_prog, run_ctx: *mut bpf_tramp_run_ctx) -> u64_,
>;
pub type bpf_trampoline_exit_t = ::core::option::Option<
    unsafe extern "C" fn(prog: *mut bpf_prog, start: u64_, run_ctx: *mut bpf_tramp_run_ctx),
>;
extern "C" {
    pub fn bpf_trampoline_enter(prog: *const bpf_prog) -> bpf_trampoline_enter_t;
}
extern "C" {
    pub fn bpf_trampoline_exit(prog: *const bpf_prog) -> bpf_trampoline_exit_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_ksym {
    pub start: core::ffi::c_ulong,
    pub end: core::ffi::c_ulong,
    pub name: [core::ffi::c_char; 512usize],
    pub lnode: list_head,
    pub tnode: latch_tree_node,
    pub prog: bool_,
}
impl Default for bpf_ksym {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const bpf_tramp_prog_type_BPF_TRAMP_FENTRY: bpf_tramp_prog_type = 0;
pub const bpf_tramp_prog_type_BPF_TRAMP_FEXIT: bpf_tramp_prog_type = 1;
pub const bpf_tramp_prog_type_BPF_TRAMP_MODIFY_RETURN: bpf_tramp_prog_type = 2;
pub const bpf_tramp_prog_type_BPF_TRAMP_MAX: bpf_tramp_prog_type = 3;
pub const bpf_tramp_prog_type_BPF_TRAMP_REPLACE: bpf_tramp_prog_type = 4;
pub type bpf_tramp_prog_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_tramp_image {
    pub image: *mut core::ffi::c_void,
    pub size: core::ffi::c_int,
    pub ksym: bpf_ksym,
    pub pcref: percpu_ref,
    pub ip_after_call: *mut core::ffi::c_void,
    pub ip_epilogue: *mut core::ffi::c_void,
    pub __bindgen_anon_1: bpf_tramp_image__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_tramp_image__bindgen_ty_1 {
    pub rcu: callback_head,
    pub work: work_struct,
}
impl Default for bpf_tramp_image__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_tramp_image {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_trampoline {
    pub hlist: hlist_node,
    pub fops: *mut ftrace_ops,
    pub mutex: mutex,
    pub refcnt: refcount_t,
    pub flags: u32_,
    pub key: u64_,
    pub func: bpf_trampoline__bindgen_ty_1,
    pub extension_prog: *mut bpf_prog,
    pub progs_hlist: [hlist_head; 3usize],
    pub progs_cnt: [core::ffi::c_int; 3usize],
    pub cur_image: *mut bpf_tramp_image,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_trampoline__bindgen_ty_1 {
    pub model: btf_func_model,
    pub addr: *mut core::ffi::c_void,
    pub ftrace_managed: bool_,
}
impl Default for bpf_trampoline__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_trampoline {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attach_target_info {
    pub fmodel: btf_func_model,
    pub tgt_addr: core::ffi::c_long,
    pub tgt_mod: *mut module,
    pub tgt_name: *const core::ffi::c_char,
    pub tgt_type: *const btf_type,
}
impl Default for bpf_attach_target_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_dispatcher_prog {
    pub prog: *mut bpf_prog,
    pub users: refcount_t,
}
impl Default for bpf_dispatcher_prog {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_dispatcher {
    pub mutex: mutex,
    pub func: *mut core::ffi::c_void,
    pub progs: [bpf_dispatcher_prog; 48usize],
    pub num_progs: core::ffi::c_int,
    pub image: *mut core::ffi::c_void,
    pub rw_image: *mut core::ffi::c_void,
    pub image_off: u32_,
    pub ksym: bpf_ksym,
    pub sc_key: *mut static_call_key,
    pub sc_tramp: *mut core::ffi::c_void,
}
impl Default for bpf_dispatcher {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_dynptr_kern {
    pub data: *mut core::ffi::c_void,
    pub size: u32_,
    pub offset: u32_,
}
impl Default for bpf_dynptr_kern {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const bpf_dynptr_type_BPF_DYNPTR_TYPE_INVALID: bpf_dynptr_type = 0;
pub const bpf_dynptr_type_BPF_DYNPTR_TYPE_LOCAL: bpf_dynptr_type = 1;
pub const bpf_dynptr_type_BPF_DYNPTR_TYPE_RINGBUF: bpf_dynptr_type = 2;
pub const bpf_dynptr_type_BPF_DYNPTR_TYPE_SKB: bpf_dynptr_type = 3;
pub const bpf_dynptr_type_BPF_DYNPTR_TYPE_XDP: bpf_dynptr_type = 4;
pub type bpf_dynptr_type = core::ffi::c_uint;
extern "C" {
    pub fn bpf_dynptr_check_size(size: u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn __bpf_dynptr_size(ptr: *const bpf_dynptr_kern) -> u32_;
}
extern "C" {
    pub fn __bpf_dynptr_data(ptr: *const bpf_dynptr_kern, len: u32_) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn __bpf_dynptr_data_rw(ptr: *const bpf_dynptr_kern, len: u32_) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __bpf_dynptr_is_rdonly(ptr: *const bpf_dynptr_kern) -> bool_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_func_info_aux {
    pub linkage: u16_,
    pub unreliable: bool_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl bpf_func_info_aux {
    #[inline]
    pub fn called(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_called(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn verified(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_verified(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(called: bool_, verified: bool_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let called: u8 = unsafe { ::core::mem::transmute(called) };
            called as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let verified: u8 = unsafe { ::core::mem::transmute(verified) };
            verified as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const bpf_jit_poke_reason_BPF_POKE_REASON_TAIL_CALL: bpf_jit_poke_reason = 0;
pub type bpf_jit_poke_reason = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_jit_poke_descriptor {
    pub tailcall_target: *mut core::ffi::c_void,
    pub tailcall_bypass: *mut core::ffi::c_void,
    pub bypass_addr: *mut core::ffi::c_void,
    pub aux: *mut core::ffi::c_void,
    pub __bindgen_anon_1: bpf_jit_poke_descriptor__bindgen_ty_1,
    pub tailcall_target_stable: bool_,
    pub adj_off: u8_,
    pub reason: u16_,
    pub insn_idx: u32_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_jit_poke_descriptor__bindgen_ty_1 {
    pub tail_call: bpf_jit_poke_descriptor__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_jit_poke_descriptor__bindgen_ty_1__bindgen_ty_1 {
    pub map: *mut bpf_map,
    pub key: u32_,
}
impl Default for bpf_jit_poke_descriptor__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_jit_poke_descriptor__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_jit_poke_descriptor {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_ctx_arg_aux {
    pub offset: u32_,
    pub reg_type: bpf_reg_type,
    pub btf: *mut btf,
    pub btf_id: u32_,
}
impl Default for bpf_ctx_arg_aux {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btf_mod_pair {
    pub btf: *mut btf,
    pub module: *mut module,
}
impl Default for btf_mod_pair {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_kfunc_desc_tab {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_prog_aux {
    pub refcnt: atomic64_t,
    pub used_map_cnt: u32_,
    pub used_btf_cnt: u32_,
    pub max_ctx_offset: u32_,
    pub max_pkt_offset: u32_,
    pub max_tp_access: u32_,
    pub stack_depth: u32_,
    pub id: u32_,
    pub func_cnt: u32_,
    pub real_func_cnt: u32_,
    pub func_idx: u32_,
    pub attach_btf_id: u32_,
    pub ctx_arg_info_size: u32_,
    pub max_rdonly_access: u32_,
    pub max_rdwr_access: u32_,
    pub attach_btf: *mut btf,
    pub ctx_arg_info: *const bpf_ctx_arg_aux,
    pub dst_mutex: mutex,
    pub dst_prog: *mut bpf_prog,
    pub dst_trampoline: *mut bpf_trampoline,
    pub saved_dst_prog_type: bpf_prog_type,
    pub saved_dst_attach_type: bpf_attach_type,
    pub verifier_zext: bool_,
    pub dev_bound: bool_,
    pub offload_requested: bool_,
    pub attach_btf_trace: bool_,
    pub attach_tracing_prog: bool_,
    pub func_proto_unreliable: bool_,
    pub tail_call_reachable: bool_,
    pub xdp_has_frags: bool_,
    pub exception_cb: bool_,
    pub exception_boundary: bool_,
    pub arena: *mut bpf_arena,
    pub attach_func_proto: *const btf_type,
    pub attach_func_name: *const core::ffi::c_char,
    pub func: *mut *mut bpf_prog,
    pub jit_data: *mut core::ffi::c_void,
    pub poke_tab: *mut bpf_jit_poke_descriptor,
    pub kfunc_tab: *mut bpf_kfunc_desc_tab,
    pub kfunc_btf_tab: *mut bpf_kfunc_btf_tab,
    pub size_poke_tab: u32_,
    pub ksym: bpf_ksym,
    pub ops: *const bpf_prog_ops,
    pub used_maps: *mut *mut bpf_map,
    pub used_maps_mutex: mutex,
    pub used_btfs: *mut btf_mod_pair,
    pub prog: *mut bpf_prog,
    pub user: *mut user_struct,
    pub load_time: u64_,
    pub verified_insns: u32_,
    pub cgroup_atype: core::ffi::c_int,
    pub cgroup_storage: [*mut bpf_map; 2usize],
    pub name: [core::ffi::c_char; 16usize],
    pub bpf_exception_cb: ::core::option::Option<
        unsafe extern "C" fn(cookie: u64_, sp: u64_, bp: u64_, arg1: u64_, arg2: u64_) -> u64_,
    >,
    pub security: *mut core::ffi::c_void,
    pub token: *mut bpf_token,
    pub offload: *mut bpf_prog_offload,
    pub btf: *mut btf,
    pub func_info: *mut bpf_func_info,
    pub func_info_aux: *mut bpf_func_info_aux,
    pub linfo: *mut bpf_line_info,
    pub jited_linfo: *mut *mut core::ffi::c_void,
    pub func_info_cnt: u32_,
    pub nr_linfo: u32_,
    pub linfo_idx: u32_,
    pub mod_: *mut module,
    pub num_exentries: u32_,
    pub extable: *mut exception_table_entry,
    pub __bindgen_anon_1: bpf_prog_aux__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_prog_aux__bindgen_ty_1 {
    pub work: work_struct,
    pub rcu: callback_head,
}
impl Default for bpf_prog_aux__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_prog_aux {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct bpf_prog {
    pub pages: u16_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub type_: bpf_prog_type,
    pub expected_attach_type: bpf_attach_type,
    pub len: u32_,
    pub jited_len: u32_,
    pub tag: [u8_; 8usize],
    pub stats: *mut bpf_prog_stats,
    pub active: *mut core::ffi::c_int,
    pub bpf_func: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *const core::ffi::c_void,
            insn: *const bpf_insn,
        ) -> core::ffi::c_uint,
    >,
    pub aux: *mut bpf_prog_aux,
    pub orig_prog: *mut sock_fprog_kern,
    pub __bindgen_anon_1: bpf_prog__bindgen_ty_1,
}
#[repr(C)]
pub struct bpf_prog__bindgen_ty_1 {
    pub __bindgen_anon_1: __BindgenUnionField<bpf_prog__bindgen_ty_1__bindgen_ty_1>,
    pub __bindgen_anon_2: __BindgenUnionField<bpf_prog__bindgen_ty_1__bindgen_ty_2>,
    pub bindgen_union_field: [u32; 0usize],
}
#[repr(C)]
#[derive(Default)]
pub struct bpf_prog__bindgen_ty_1__bindgen_ty_1 {
    pub __empty_insns: bpf_prog__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub insns: __IncompleteArrayField<sock_filter>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_prog__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
#[repr(C)]
#[derive(Default)]
pub struct bpf_prog__bindgen_ty_1__bindgen_ty_2 {
    pub __empty_insnsi: bpf_prog__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub insnsi: __IncompleteArrayField<bpf_insn>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_prog__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {}
impl Default for bpf_prog__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_prog {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl bpf_prog {
    #[inline]
    pub fn jited(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_jited(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn jit_requested(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_jit_requested(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gpl_compatible(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_gpl_compatible(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cb_access(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_cb_access(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dst_needed(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dst_needed(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blinding_requested(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_blinding_requested(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blinded(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_blinded(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_func(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_func(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn kprobe_override(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_kprobe_override(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_callchain_buf(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_has_callchain_buf(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enforce_expected_attach_type(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_enforce_expected_attach_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn call_get_stack(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_call_get_stack(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn call_get_func_ip(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_call_get_func_ip(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tstamp_type_access(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tstamp_type_access(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sleepable(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_sleepable(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        jited: u16_,
        jit_requested: u16_,
        gpl_compatible: u16_,
        cb_access: u16_,
        dst_needed: u16_,
        blinding_requested: u16_,
        blinded: u16_,
        is_func: u16_,
        kprobe_override: u16_,
        has_callchain_buf: u16_,
        enforce_expected_attach_type: u16_,
        call_get_stack: u16_,
        call_get_func_ip: u16_,
        tstamp_type_access: u16_,
        sleepable: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let jited: u16 = unsafe { ::core::mem::transmute(jited) };
            jited as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let jit_requested: u16 = unsafe { ::core::mem::transmute(jit_requested) };
            jit_requested as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let gpl_compatible: u16 = unsafe { ::core::mem::transmute(gpl_compatible) };
            gpl_compatible as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let cb_access: u16 = unsafe { ::core::mem::transmute(cb_access) };
            cb_access as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dst_needed: u16 = unsafe { ::core::mem::transmute(dst_needed) };
            dst_needed as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let blinding_requested: u16 = unsafe { ::core::mem::transmute(blinding_requested) };
            blinding_requested as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let blinded: u16 = unsafe { ::core::mem::transmute(blinded) };
            blinded as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let is_func: u16 = unsafe { ::core::mem::transmute(is_func) };
            is_func as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let kprobe_override: u16 = unsafe { ::core::mem::transmute(kprobe_override) };
            kprobe_override as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let has_callchain_buf: u16 = unsafe { ::core::mem::transmute(has_callchain_buf) };
            has_callchain_buf as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let enforce_expected_attach_type: u16 =
                unsafe { ::core::mem::transmute(enforce_expected_attach_type) };
            enforce_expected_attach_type as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let call_get_stack: u16 = unsafe { ::core::mem::transmute(call_get_stack) };
            call_get_stack as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let call_get_func_ip: u16 = unsafe { ::core::mem::transmute(call_get_func_ip) };
            call_get_func_ip as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tstamp_type_access: u16 = unsafe { ::core::mem::transmute(tstamp_type_access) };
            tstamp_type_access as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let sleepable: u16 = unsafe { ::core::mem::transmute(sleepable) };
            sleepable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_array_aux {
    pub poke_progs: list_head,
    pub map: *mut bpf_map,
    pub poke_mutex: mutex,
    pub work: work_struct,
}
impl Default for bpf_array_aux {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_link {
    pub refcnt: atomic64_t,
    pub id: u32_,
    pub type_: bpf_link_type,
    pub ops: *const bpf_link_ops,
    pub prog: *mut bpf_prog,
    pub __bindgen_anon_1: bpf_link__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link__bindgen_ty_1 {
    pub rcu: callback_head,
    pub work: work_struct,
}
impl Default for bpf_link__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_link {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_link_ops {
    pub release: ::core::option::Option<unsafe extern "C" fn(link: *mut bpf_link)>,
    pub dealloc: ::core::option::Option<unsafe extern "C" fn(link: *mut bpf_link)>,
    pub dealloc_deferred: ::core::option::Option<unsafe extern "C" fn(link: *mut bpf_link)>,
    pub detach:
        ::core::option::Option<unsafe extern "C" fn(link: *mut bpf_link) -> core::ffi::c_int>,
    pub update_prog: ::core::option::Option<
        unsafe extern "C" fn(
            link: *mut bpf_link,
            new_prog: *mut bpf_prog,
            old_prog: *mut bpf_prog,
        ) -> core::ffi::c_int,
    >,
    pub show_fdinfo:
        ::core::option::Option<unsafe extern "C" fn(link: *const bpf_link, seq: *mut seq_file)>,
    pub fill_link_info: ::core::option::Option<
        unsafe extern "C" fn(link: *const bpf_link, info: *mut bpf_link_info) -> core::ffi::c_int,
    >,
    pub update_map: ::core::option::Option<
        unsafe extern "C" fn(
            link: *mut bpf_link,
            new_map: *mut bpf_map,
            old_map: *mut bpf_map,
        ) -> core::ffi::c_int,
    >,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(file: *mut file, pts: *mut poll_table_struct) -> __poll_t,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_tramp_link {
    pub link: bpf_link,
    pub tramp_hlist: hlist_node,
    pub cookie: u64_,
}
impl Default for bpf_tramp_link {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_shim_tramp_link {
    pub link: bpf_tramp_link,
    pub trampoline: *mut bpf_trampoline,
}
impl Default for bpf_shim_tramp_link {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_tracing_link {
    pub link: bpf_tramp_link,
    pub attach_type: bpf_attach_type,
    pub trampoline: *mut bpf_trampoline,
    pub tgt_prog: *mut bpf_prog,
}
impl Default for bpf_tracing_link {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_raw_tp_link {
    pub link: bpf_link,
    pub btp: *mut bpf_raw_event_map,
    pub cookie: u64_,
}
impl Default for bpf_raw_tp_link {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_link_primer {
    pub link: *mut bpf_link,
    pub file: *mut file,
    pub fd: core::ffi::c_int,
    pub id: u32_,
}
impl Default for bpf_link_primer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_mount_opts {
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub mode: umode_t,
    pub delegate_cmds: u64_,
    pub delegate_maps: u64_,
    pub delegate_progs: u64_,
    pub delegate_attachs: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_token {
    pub work: work_struct,
    pub refcnt: atomic64_t,
    pub userns: *mut user_namespace,
    pub allowed_cmds: u64_,
    pub allowed_maps: u64_,
    pub allowed_progs: u64_,
    pub allowed_attachs: u64_,
    pub security: *mut core::ffi::c_void,
}
impl Default for bpf_token {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_struct_ops_value {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_struct_ops {
    pub verifier_ops: *const bpf_verifier_ops,
    pub init: ::core::option::Option<unsafe extern "C" fn(btf: *mut btf) -> core::ffi::c_int>,
    pub check_member: ::core::option::Option<
        unsafe extern "C" fn(
            t: *const btf_type,
            member: *const btf_member,
            prog: *const bpf_prog,
        ) -> core::ffi::c_int,
    >,
    pub init_member: ::core::option::Option<
        unsafe extern "C" fn(
            t: *const btf_type,
            member: *const btf_member,
            kdata: *mut core::ffi::c_void,
            udata: *const core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub reg: ::core::option::Option<
        unsafe extern "C" fn(
            kdata: *mut core::ffi::c_void,
            link: *mut bpf_link,
        ) -> core::ffi::c_int,
    >,
    pub unreg: ::core::option::Option<
        unsafe extern "C" fn(kdata: *mut core::ffi::c_void, link: *mut bpf_link),
    >,
    pub update: ::core::option::Option<
        unsafe extern "C" fn(
            kdata: *mut core::ffi::c_void,
            old_kdata: *mut core::ffi::c_void,
            link: *mut bpf_link,
        ) -> core::ffi::c_int,
    >,
    pub validate: ::core::option::Option<
        unsafe extern "C" fn(kdata: *mut core::ffi::c_void) -> core::ffi::c_int,
    >,
    pub cfi_stubs: *mut core::ffi::c_void,
    pub owner: *mut module,
    pub name: *const core::ffi::c_char,
    pub func_models: [btf_func_model; 64usize],
}
impl Default for bpf_struct_ops {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_struct_ops_arg_info {
    pub info: *mut bpf_ctx_arg_aux,
    pub cnt: u32_,
}
impl Default for bpf_struct_ops_arg_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_struct_ops_desc {
    pub st_ops: *mut bpf_struct_ops,
    pub type_: *const btf_type,
    pub value_type: *const btf_type,
    pub type_id: u32_,
    pub value_id: u32_,
    pub arg_info: *mut bpf_struct_ops_arg_info,
}
impl Default for bpf_struct_ops_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const bpf_struct_ops_state_BPF_STRUCT_OPS_STATE_INIT: bpf_struct_ops_state = 0;
pub const bpf_struct_ops_state_BPF_STRUCT_OPS_STATE_INUSE: bpf_struct_ops_state = 1;
pub const bpf_struct_ops_state_BPF_STRUCT_OPS_STATE_TOBEFREE: bpf_struct_ops_state = 2;
pub const bpf_struct_ops_state_BPF_STRUCT_OPS_STATE_READY: bpf_struct_ops_state = 3;
pub type bpf_struct_ops_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_struct_ops_common_value {
    pub refcnt: refcount_t,
    pub state: bpf_struct_ops_state,
}
impl Default for bpf_struct_ops_common_value {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct bpf_array {
    pub map: bpf_map,
    pub elem_size: u32_,
    pub index_mask: u32_,
    pub aux: *mut bpf_array_aux,
    pub __bindgen_anon_1: bpf_array__bindgen_ty_1,
}
#[repr(C)]
pub struct bpf_array__bindgen_ty_1 {
    pub __bindgen_anon_1: __BindgenUnionField<bpf_array__bindgen_ty_1__bindgen_ty_1>,
    pub __bindgen_anon_2: __BindgenUnionField<bpf_array__bindgen_ty_1__bindgen_ty_2>,
    pub __bindgen_anon_3: __BindgenUnionField<bpf_array__bindgen_ty_1__bindgen_ty_3>,
    pub bindgen_union_field: [u64; 0usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default)]
pub struct bpf_array__bindgen_ty_1__bindgen_ty_1 {
    pub __empty_value: bpf_array__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub value: __IncompleteArrayField<core::ffi::c_char>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_array__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
#[repr(C)]
pub struct bpf_array__bindgen_ty_1__bindgen_ty_2 {
    pub __empty_ptrs: bpf_array__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub ptrs: __IncompleteArrayField<*mut core::ffi::c_void>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_array__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {}
impl Default for bpf_array__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct bpf_array__bindgen_ty_1__bindgen_ty_3 {
    pub __empty_pptrs: bpf_array__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
    pub pptrs: __IncompleteArrayField<*mut core::ffi::c_void>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_array__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1 {}
impl Default for bpf_array__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_array__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_array {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const BPF_MAX_LOOPS: _bindgen_ty_239 = 8388608;
pub type _bindgen_ty_239 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_event_entry {
    pub event: *mut perf_event,
    pub perf_file: *mut file,
    pub map_file: *mut file,
    pub rcu: callback_head,
}
impl Default for bpf_event_entry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn bpf_prog_map_compatible(map: *mut bpf_map, fp: *const bpf_prog) -> bool_;
}
extern "C" {
    pub fn bpf_prog_calc_tag(fp: *mut bpf_prog) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_get_trace_printk_proto() -> *const bpf_func_proto;
}
extern "C" {
    pub fn bpf_get_trace_vprintk_proto() -> *const bpf_func_proto;
}
pub type bpf_ctx_copy_t = ::core::option::Option<
    unsafe extern "C" fn(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        off: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong,
>;
pub type bpf_convert_ctx_access_t = ::core::option::Option<
    unsafe extern "C" fn(
        type_: bpf_access_type,
        src: *const bpf_insn,
        dst: *mut bpf_insn,
        prog: *mut bpf_prog,
        target_size: *mut u32_,
    ) -> u32_,
>;
extern "C" {
    pub fn bpf_event_output(
        map: *mut bpf_map,
        flags: u64_,
        meta: *mut core::ffi::c_void,
        meta_size: u64_,
        ctx: *mut core::ffi::c_void,
        ctx_size: u64_,
        ctx_copy: bpf_ctx_copy_t,
    ) -> u64_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_prog_array_item {
    pub prog: *mut bpf_prog,
    pub __bindgen_anon_1: bpf_prog_array_item__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_prog_array_item__bindgen_ty_1 {
    pub cgroup_storage: [*mut bpf_cgroup_storage; 2usize],
    pub bpf_cookie: u64_,
}
impl Default for bpf_prog_array_item__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for bpf_prog_array_item {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct bpf_prog_array {
    pub rcu: callback_head,
    pub items: __IncompleteArrayField<bpf_prog_array_item>,
}
impl Default for bpf_prog_array {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct bpf_empty_prog_array {
    pub hdr: bpf_prog_array,
    pub null_prog: *mut bpf_prog,
}
impl Default for bpf_empty_prog_array {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut bpf_empty_prog_array: bpf_empty_prog_array;
}
extern "C" {
    pub fn bpf_prog_array_alloc(prog_cnt: u32_, flags: gfp_t) -> *mut bpf_prog_array;
}
extern "C" {
    pub fn bpf_prog_array_free(progs: *mut bpf_prog_array);
}
extern "C" {
    pub fn bpf_prog_array_free_sleepable(progs: *mut bpf_prog_array);
}
extern "C" {
    pub fn bpf_prog_array_length(progs: *mut bpf_prog_array) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_prog_array_is_empty(array: *mut bpf_prog_array) -> bool_;
}
extern "C" {
    pub fn bpf_prog_array_copy_to_user(
        progs: *mut bpf_prog_array,
        prog_ids: *mut __u32,
        cnt: u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_prog_array_delete_safe(progs: *mut bpf_prog_array, old_prog: *mut bpf_prog);
}
extern "C" {
    pub fn bpf_prog_array_delete_safe_at(
        array: *mut bpf_prog_array,
        index: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_prog_array_update_at(
        array: *mut bpf_prog_array,
        index: core::ffi::c_int,
        prog: *mut bpf_prog,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_prog_array_copy_info(
        array: *mut bpf_prog_array,
        prog_ids: *mut u32_,
        request_cnt: u32_,
        prog_cnt: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_prog_array_copy(
        old_array: *mut bpf_prog_array,
        exclude_prog: *mut bpf_prog,
        include_prog: *mut bpf_prog,
        bpf_cookie: u64_,
        new_array: *mut *mut bpf_prog_array,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_run_ctx {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_cg_run_ctx {
    pub run_ctx: bpf_run_ctx,
    pub prog_item: *const bpf_prog_array_item,
    pub retval: core::ffi::c_int,
}
impl Default for bpf_cg_run_ctx {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_trace_run_ctx {
    pub run_ctx: bpf_run_ctx,
    pub bpf_cookie: u64_,
    pub is_uprobe: bool_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_tramp_run_ctx {
    pub run_ctx: bpf_run_ctx,
    pub bpf_cookie: u64_,
    pub saved_run_ctx: *mut bpf_run_ctx,
}
impl Default for bpf_tramp_run_ctx {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type bpf_prog_run_fn = ::core::option::Option<
    unsafe extern "C" fn(prog: *const bpf_prog, ctx: *const core::ffi::c_void) -> u32_,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xdp_frame {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_dtab_netdev {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_cpu_map_entry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __bpf_free_used_btfs(used_btfs: *mut btf_mod_pair, len: u32_);
}
extern "C" {
    pub fn __bpf_free_used_maps(aux: *mut bpf_prog_aux, used_maps: *mut *mut bpf_map, len: u32_);
}
extern "C" {
    pub fn bpf_prog_get_ok(arg1: *mut bpf_prog, arg2: *mut bpf_prog_type, arg3: bool_) -> bool_;
}
extern "C" {
    pub fn bpf_prog_offload_compile(prog: *mut bpf_prog) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_prog_dev_bound_destroy(prog: *mut bpf_prog);
}
extern "C" {
    pub fn bpf_prog_offload_info_fill(
        info: *mut bpf_prog_info,
        prog: *mut bpf_prog,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_map_offload_info_fill(
        info: *mut bpf_map_info,
        map: *mut bpf_map,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_map_offload_lookup_elem(
        map: *mut bpf_map,
        key: *mut core::ffi::c_void,
        value: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_map_offload_update_elem(
        map: *mut bpf_map,
        key: *mut core::ffi::c_void,
        value: *mut core::ffi::c_void,
        flags: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_map_offload_delete_elem(
        map: *mut bpf_map,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_map_offload_get_next_key(
        map: *mut bpf_map,
        key: *mut core::ffi::c_void,
        next_key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_offload_prog_map_match(prog: *mut bpf_prog, map: *mut bpf_map) -> bool_;
}
extern "C" {
    pub fn bpf_offload_dev_create(
        ops: *const bpf_prog_offload_ops,
        priv_: *mut core::ffi::c_void,
    ) -> *mut bpf_offload_dev;
}
extern "C" {
    pub fn bpf_offload_dev_destroy(offdev: *mut bpf_offload_dev);
}
extern "C" {
    pub fn bpf_offload_dev_priv(offdev: *mut bpf_offload_dev) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn bpf_offload_dev_netdev_register(
        offdev: *mut bpf_offload_dev,
        netdev: *mut net_device,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_offload_dev_netdev_unregister(offdev: *mut bpf_offload_dev, netdev: *mut net_device);
}
extern "C" {
    pub fn bpf_offload_dev_match(prog: *mut bpf_prog, netdev: *mut net_device) -> bool_;
}
extern "C" {
    pub fn unpriv_ebpf_notify(new_state: core::ffi::c_int);
}
extern "C" {
    pub static bpf_map_lookup_elem_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_map_update_elem_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_map_delete_elem_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_map_push_elem_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_map_pop_elem_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_map_peek_elem_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_map_lookup_percpu_elem_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_prandom_u32_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_smp_processor_id_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_numa_node_id_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_tail_call_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ktime_get_ns_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ktime_get_boot_ns_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ktime_get_tai_ns_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_current_pid_tgid_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_current_uid_gid_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_current_comm_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_stackid_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_stack_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_task_stack_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_stackid_proto_pe: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_stack_proto_pe: bpf_func_proto;
}
extern "C" {
    pub static bpf_sock_map_update_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_sock_hash_update_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_current_cgroup_id_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_current_ancestor_cgroup_id_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_cgroup_classid_curr_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_msg_redirect_hash_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_msg_redirect_map_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_sk_redirect_hash_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_sk_redirect_map_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_spin_lock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_spin_unlock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_local_storage_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_strtol_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_strtoul_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_tcp_sock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_jiffies64_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_ns_current_pid_tgid_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_event_output_data_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ringbuf_output_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ringbuf_reserve_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ringbuf_submit_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ringbuf_discard_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ringbuf_query_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ringbuf_reserve_dynptr_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ringbuf_submit_dynptr_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ringbuf_discard_dynptr_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_skc_to_tcp6_sock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_skc_to_tcp_sock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_skc_to_tcp_timewait_sock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_skc_to_tcp_request_sock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_skc_to_udp6_sock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_skc_to_unix_sock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_skc_to_mptcp_sock_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_copy_from_user_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_snprintf_btf_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_snprintf_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_per_cpu_ptr_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_this_cpu_ptr_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_ktime_get_coarse_ns_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_sock_from_file_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_socket_ptr_cookie_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_task_storage_get_recur_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_task_storage_get_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_task_storage_delete_recur_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_task_storage_delete_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_for_each_map_elem_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_btf_find_by_name_kind_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_sk_setsockopt_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_sk_getsockopt_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_unlocked_sk_setsockopt_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_unlocked_sk_getsockopt_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_find_vma_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_loop_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_copy_from_user_task_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_set_retval_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_get_retval_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_user_ringbuf_drain_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_cgrp_storage_get_proto: bpf_func_proto;
}
extern "C" {
    pub static bpf_cgrp_storage_delete_proto: bpf_func_proto;
}
extern "C" {
    pub fn tracing_prog_func_proto(
        func_id: bpf_func_id,
        prog: *const bpf_prog,
    ) -> *const bpf_func_proto;
}
extern "C" {
    pub fn bpf_user_rnd_init_once();
}
extern "C" {
    pub fn bpf_user_rnd_u32(r1: u64_, r2: u64_, r3: u64_, r4: u64_, r5: u64_) -> u64_;
}
extern "C" {
    pub fn bpf_get_raw_cpu_id(r1: u64_, r2: u64_, r3: u64_, r4: u64_, r5: u64_) -> u64_;
}
extern "C" {
    pub fn bpf_sock_common_is_valid_access(
        off: core::ffi::c_int,
        size: core::ffi::c_int,
        type_: bpf_access_type,
        info: *mut bpf_insn_access_aux,
    ) -> bool_;
}
extern "C" {
    pub fn bpf_sock_is_valid_access(
        off: core::ffi::c_int,
        size: core::ffi::c_int,
        type_: bpf_access_type,
        info: *mut bpf_insn_access_aux,
    ) -> bool_;
}
extern "C" {
    pub fn bpf_sock_convert_ctx_access(
        type_: bpf_access_type,
        si: *const bpf_insn,
        insn_buf: *mut bpf_insn,
        prog: *mut bpf_prog,
        target_size: *mut u32_,
    ) -> u32_;
}
extern "C" {
    pub fn bpf_dynptr_from_skb_rdonly(
        skb: *mut __sk_buff,
        flags: u64_,
        ptr: *mut bpf_dynptr,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sk_reuseport_kern {
    pub skb: *mut sk_buff,
    pub sk: *mut sock,
    pub selected_sk: *mut sock,
    pub migrating_sk: *mut sock,
    pub data_end: *mut core::ffi::c_void,
    pub hash: u32_,
    pub reuseport_id: u32_,
    pub bind_inany: bool_,
}
impl Default for sk_reuseport_kern {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn bpf_tcp_sock_is_valid_access(
        off: core::ffi::c_int,
        size: core::ffi::c_int,
        type_: bpf_access_type,
        info: *mut bpf_insn_access_aux,
    ) -> bool_;
}
extern "C" {
    pub fn bpf_tcp_sock_convert_ctx_access(
        type_: bpf_access_type,
        si: *const bpf_insn,
        insn_buf: *mut bpf_insn,
        prog: *mut bpf_prog,
        target_size: *mut u32_,
    ) -> u32_;
}
extern "C" {
    pub fn bpf_xdp_sock_is_valid_access(
        off: core::ffi::c_int,
        size: core::ffi::c_int,
        type_: bpf_access_type,
        info: *mut bpf_insn_access_aux,
    ) -> bool_;
}
extern "C" {
    pub fn bpf_xdp_sock_convert_ctx_access(
        type_: bpf_access_type,
        si: *const bpf_insn,
        insn_buf: *mut bpf_insn,
        prog: *mut bpf_prog,
        target_size: *mut u32_,
    ) -> u32_;
}
pub const bpf_text_poke_type_BPF_MOD_CALL: bpf_text_poke_type = 0;
pub const bpf_text_poke_type_BPF_MOD_JUMP: bpf_text_poke_type = 1;
pub type bpf_text_poke_type = core::ffi::c_uint;
extern "C" {
    pub fn bpf_arch_text_poke(
        ip: *mut core::ffi::c_void,
        t: bpf_text_poke_type,
        addr1: *mut core::ffi::c_void,
        addr2: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_arch_poke_desc_update(
        poke: *mut bpf_jit_poke_descriptor,
        new: *mut bpf_prog,
        old: *mut bpf_prog,
    );
}
extern "C" {
    pub fn bpf_arch_text_copy(
        dst: *mut core::ffi::c_void,
        src: *mut core::ffi::c_void,
        len: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn bpf_arch_text_invalidate(dst: *mut core::ffi::c_void, len: usize) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_bprintf_data {
    pub bin_args: *mut u32_,
    pub buf: *mut core::ffi::c_char,
    pub get_bin_args: bool_,
    pub get_buf: bool_,
}
impl Default for bpf_bprintf_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn bpf_bprintf_prepare(
        fmt: *mut core::ffi::c_char,
        fmt_size: u32_,
        raw_args: *const u64_,
        num_args: u32_,
        data: *mut bpf_bprintf_data,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bpf_bprintf_cleanup(data: *mut bpf_bprintf_data);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_key {
    pub key: *mut key,
    pub has_ref: bool_,
}
impl Default for bpf_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct lsm_ctx {
    pub id: __u64,
    pub flags: __u64,
    pub len: __u64,
    pub ctx_len: __u64,
    pub ctx: __IncompleteArrayField<__u8>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msg_msg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xattr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xfrm_sec_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fs_parameter {
    _unused: [u8; 0],
}
pub type fs_value_type = i32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct watch {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct watch_notification {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct audit_krule {
    _unused: [u8; 0],
}
pub const lsm_event_LSM_POLICY_CHANGE: lsm_event = 0;
pub type lsm_event = core::ffi::c_uint;
pub const lockdown_reason_LOCKDOWN_NONE: lockdown_reason = 0;
pub const lockdown_reason_LOCKDOWN_MODULE_SIGNATURE: lockdown_reason = 1;
pub const lockdown_reason_LOCKDOWN_DEV_MEM: lockdown_reason = 2;
pub const lockdown_reason_LOCKDOWN_EFI_TEST: lockdown_reason = 3;
pub const lockdown_reason_LOCKDOWN_KEXEC: lockdown_reason = 4;
pub const lockdown_reason_LOCKDOWN_HIBERNATION: lockdown_reason = 5;
pub const lockdown_reason_LOCKDOWN_PCI_ACCESS: lockdown_reason = 6;
pub const lockdown_reason_LOCKDOWN_IOPORT: lockdown_reason = 7;
pub const lockdown_reason_LOCKDOWN_MSR: lockdown_reason = 8;
pub const lockdown_reason_LOCKDOWN_ACPI_TABLES: lockdown_reason = 9;
pub const lockdown_reason_LOCKDOWN_DEVICE_TREE: lockdown_reason = 10;
pub const lockdown_reason_LOCKDOWN_PCMCIA_CIS: lockdown_reason = 11;
pub const lockdown_reason_LOCKDOWN_TIOCSSERIAL: lockdown_reason = 12;
pub const lockdown_reason_LOCKDOWN_MODULE_PARAMETERS: lockdown_reason = 13;
pub const lockdown_reason_LOCKDOWN_MMIOTRACE: lockdown_reason = 14;
pub const lockdown_reason_LOCKDOWN_DEBUGFS: lockdown_reason = 15;
pub const lockdown_reason_LOCKDOWN_XMON_WR: lockdown_reason = 16;
pub const lockdown_reason_LOCKDOWN_BPF_WRITE_USER: lockdown_reason = 17;
pub const lockdown_reason_LOCKDOWN_DBG_WRITE_KERNEL: lockdown_reason = 18;
pub const lockdown_reason_LOCKDOWN_RTAS_ERROR_INJECTION: lockdown_reason = 19;
pub const lockdown_reason_LOCKDOWN_INTEGRITY_MAX: lockdown_reason = 20;
pub const lockdown_reason_LOCKDOWN_KCORE: lockdown_reason = 21;
pub const lockdown_reason_LOCKDOWN_KPROBES: lockdown_reason = 22;
pub const lockdown_reason_LOCKDOWN_BPF_READ_KERNEL: lockdown_reason = 23;
pub const lockdown_reason_LOCKDOWN_DBG_READ_KERNEL: lockdown_reason = 24;
pub const lockdown_reason_LOCKDOWN_PERF: lockdown_reason = 25;
pub const lockdown_reason_LOCKDOWN_TRACEFS: lockdown_reason = 26;
pub const lockdown_reason_LOCKDOWN_XMON_RW: lockdown_reason = 27;
pub const lockdown_reason_LOCKDOWN_XFRM_SECRET: lockdown_reason = 28;
pub const lockdown_reason_LOCKDOWN_CONFIDENTIALITY_MAX: lockdown_reason = 29;
pub type lockdown_reason = core::ffi::c_uint;
extern "C" {
    pub static lockdown_reasons: [*const core::ffi::c_char; 30usize];
}
extern "C" {
    pub static mut lsm_active_cnt: u32_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lsm_id {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut lsm_idlist: [*const lsm_id; 0usize];
}
extern "C" {
    pub fn cap_capable(
        cred: *const cred,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
        opts: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_settime(ts: *const timespec64, tz: *const timezone) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_ptrace_access_check(
        child: *mut task_struct,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_ptrace_traceme(parent: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_capget(
        target: *const task_struct,
        effective: *mut kernel_cap_t,
        inheritable: *mut kernel_cap_t,
        permitted: *mut kernel_cap_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_capset(
        new: *mut cred,
        old: *const cred,
        effective: *const kernel_cap_t,
        inheritable: *const kernel_cap_t,
        permitted: *const kernel_cap_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_bprm_creds_from_file(bprm: *mut linux_binprm, file: *const file)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_inode_setxattr(
        dentry: *mut dentry,
        name: *const core::ffi::c_char,
        value: *const core::ffi::c_void,
        size: usize,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_inode_removexattr(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_inode_need_killpriv(dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_inode_killpriv(idmap: *mut mnt_idmap, dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_inode_getsecurity(
        idmap: *mut mnt_idmap,
        inode: *mut inode,
        name: *const core::ffi::c_char,
        buffer: *mut *mut core::ffi::c_void,
        alloc: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_mmap_addr(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_mmap_file(
        file: *mut file,
        reqprot: core::ffi::c_ulong,
        prot: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_task_fix_setuid(
        new: *mut cred,
        old: *const cred,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_task_prctl(
        option: core::ffi::c_int,
        arg2: core::ffi::c_ulong,
        arg3: core::ffi::c_ulong,
        arg4: core::ffi::c_ulong,
        arg5: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_task_setscheduler(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_task_setioprio(p: *mut task_struct, ioprio: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_task_setnice(p: *mut task_struct, nice: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_vm_enough_memory(mm: *mut mm_struct, pages: core::ffi::c_long) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xfrm_selector {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xfrm_policy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xfrm_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xfrm_user_sec_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sctp_association {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut mmap_min_addr: core::ffi::c_ulong;
}
extern "C" {
    pub static mut dac_mmap_min_addr: core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct request_sock {
    _unused: [u8; 0],
}
extern "C" {
    pub fn mmap_min_addr_handler(
        table: *const ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
pub type initxattrs = ::core::option::Option<
    unsafe extern "C" fn(
        inode: *mut inode,
        xattr_array: *const xattr,
        fs_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
pub const kernel_load_data_id_LOADING_UNKNOWN: kernel_load_data_id = 0;
pub const kernel_load_data_id_LOADING_FIRMWARE: kernel_load_data_id = 1;
pub const kernel_load_data_id_LOADING_MODULE: kernel_load_data_id = 2;
pub const kernel_load_data_id_LOADING_KEXEC_IMAGE: kernel_load_data_id = 3;
pub const kernel_load_data_id_LOADING_KEXEC_INITRAMFS: kernel_load_data_id = 4;
pub const kernel_load_data_id_LOADING_POLICY: kernel_load_data_id = 5;
pub const kernel_load_data_id_LOADING_X509_CERTIFICATE: kernel_load_data_id = 6;
pub const kernel_load_data_id_LOADING_MAX_ID: kernel_load_data_id = 7;
pub type kernel_load_data_id = core::ffi::c_uint;
extern "C" {
    pub static kernel_load_data_str: [*const core::ffi::c_char; 8usize];
}
extern "C" {
    pub fn call_blocking_lsm_notifier(
        event: lsm_event,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn register_blocking_lsm_notifier(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_blocking_lsm_notifier(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn early_security_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn lsm_name_to_attr(name: *const core::ffi::c_char) -> u64_;
}
extern "C" {
    pub fn security_binder_set_context_mgr(mgr: *const cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_binder_transaction(from: *const cred, to: *const cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_binder_transfer_binder(from: *const cred, to: *const cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_binder_transfer_file(
        from: *const cred,
        to: *const cred,
        file: *const file,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_ptrace_access_check(
        child: *mut task_struct,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_ptrace_traceme(parent: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_capget(
        target: *const task_struct,
        effective: *mut kernel_cap_t,
        inheritable: *mut kernel_cap_t,
        permitted: *mut kernel_cap_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_capset(
        new: *mut cred,
        old: *const cred,
        effective: *const kernel_cap_t,
        inheritable: *const kernel_cap_t,
        permitted: *const kernel_cap_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_capable(
        cred: *const cred,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
        opts: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_quotactl(
        cmds: core::ffi::c_int,
        type_: core::ffi::c_int,
        id: core::ffi::c_int,
        sb: *const super_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_quota_on(dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_syslog(type_: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_settime64(ts: *const timespec64, tz: *const timezone) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_vm_enough_memory_mm(
        mm: *mut mm_struct,
        pages: core::ffi::c_long,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_bprm_creds_for_exec(bprm: *mut linux_binprm) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_bprm_creds_from_file(
        bprm: *mut linux_binprm,
        file: *const file,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_bprm_check(bprm: *mut linux_binprm) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_bprm_committing_creds(bprm: *const linux_binprm);
}
extern "C" {
    pub fn security_bprm_committed_creds(bprm: *const linux_binprm);
}
extern "C" {
    pub fn security_fs_context_submount(
        fc: *mut fs_context,
        reference: *mut super_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_fs_context_dup(
        fc: *mut fs_context,
        src_fc: *mut fs_context,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_fs_context_parse_param(
        fc: *mut fs_context,
        param: *mut fs_parameter,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_alloc(sb: *mut super_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_delete(sb: *mut super_block);
}
extern "C" {
    pub fn security_sb_free(sb: *mut super_block);
}
extern "C" {
    pub fn security_free_mnt_opts(mnt_opts: *mut *mut core::ffi::c_void);
}
extern "C" {
    pub fn security_sb_eat_lsm_opts(
        options: *mut core::ffi::c_char,
        mnt_opts: *mut *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_mnt_opts_compat(
        sb: *mut super_block,
        mnt_opts: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_remount(
        sb: *mut super_block,
        mnt_opts: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_kern_mount(sb: *const super_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_show_options(m: *mut seq_file, sb: *mut super_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_statfs(dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_mount(
        dev_name: *const core::ffi::c_char,
        path: *const path,
        type_: *const core::ffi::c_char,
        flags: core::ffi::c_ulong,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_umount(mnt: *mut vfsmount, flags: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_pivotroot(old_path: *const path, new_path: *const path) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_set_mnt_opts(
        sb: *mut super_block,
        mnt_opts: *mut core::ffi::c_void,
        kern_flags: core::ffi::c_ulong,
        set_kern_flags: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sb_clone_mnt_opts(
        oldsb: *const super_block,
        newsb: *mut super_block,
        kern_flags: core::ffi::c_ulong,
        set_kern_flags: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_move_mount(from_path: *const path, to_path: *const path) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_dentry_init_security(
        dentry: *mut dentry,
        mode: core::ffi::c_int,
        name: *const qstr,
        xattr_name: *mut *const core::ffi::c_char,
        ctx: *mut *mut core::ffi::c_void,
        ctxlen: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_dentry_create_files_as(
        dentry: *mut dentry,
        mode: core::ffi::c_int,
        name: *mut qstr,
        old: *const cred,
        new: *mut cred,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_path_notify(
        path: *const path,
        mask: u64_,
        obj_type: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_alloc(inode: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_free(inode: *mut inode);
}
extern "C" {
    pub fn security_inode_init_security(
        inode: *mut inode,
        dir: *mut inode,
        qstr: *const qstr,
        initxattrs: initxattrs,
        fs_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_init_security_anon(
        inode: *mut inode,
        name: *const qstr,
        context_inode: *const inode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_create(
        dir: *mut inode,
        dentry: *mut dentry,
        mode: umode_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_post_create_tmpfile(idmap: *mut mnt_idmap, inode: *mut inode);
}
extern "C" {
    pub fn security_inode_link(
        old_dentry: *mut dentry,
        dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_unlink(dir: *mut inode, dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_symlink(
        dir: *mut inode,
        dentry: *mut dentry,
        old_name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_mkdir(
        dir: *mut inode,
        dentry: *mut dentry,
        mode: umode_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_rmdir(dir: *mut inode, dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_mknod(
        dir: *mut inode,
        dentry: *mut dentry,
        mode: umode_t,
        dev: dev_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_rename(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_readlink(dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_follow_link(
        dentry: *mut dentry,
        inode: *mut inode,
        rcu: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_permission(inode: *mut inode, mask: core::ffi::c_int)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_setattr(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        attr: *mut iattr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_post_setattr(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        ia_valid: core::ffi::c_int,
    );
}
extern "C" {
    pub fn security_inode_getattr(path: *const path) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_setxattr(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        name: *const core::ffi::c_char,
        value: *const core::ffi::c_void,
        size: usize,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_set_acl(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        acl_name: *const core::ffi::c_char,
        kacl: *mut posix_acl,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_post_set_acl(
        dentry: *mut dentry,
        acl_name: *const core::ffi::c_char,
        kacl: *mut posix_acl,
    );
}
extern "C" {
    pub fn security_inode_get_acl(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        acl_name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_remove_acl(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        acl_name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_post_remove_acl(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        acl_name: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn security_inode_post_setxattr(
        dentry: *mut dentry,
        name: *const core::ffi::c_char,
        value: *const core::ffi::c_void,
        size: usize,
        flags: core::ffi::c_int,
    );
}
extern "C" {
    pub fn security_inode_getxattr(
        dentry: *mut dentry,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_listxattr(dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_removexattr(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_post_removexattr(dentry: *mut dentry, name: *const core::ffi::c_char);
}
extern "C" {
    pub fn security_inode_need_killpriv(dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_killpriv(idmap: *mut mnt_idmap, dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_getsecurity(
        idmap: *mut mnt_idmap,
        inode: *mut inode,
        name: *const core::ffi::c_char,
        buffer: *mut *mut core::ffi::c_void,
        alloc: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_setsecurity(
        inode: *mut inode,
        name: *const core::ffi::c_char,
        value: *const core::ffi::c_void,
        size: usize,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_listsecurity(
        inode: *mut inode,
        buffer: *mut core::ffi::c_char,
        buffer_size: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_getsecid(inode: *mut inode, secid: *mut u32_);
}
extern "C" {
    pub fn security_inode_copy_up(src: *mut dentry, new: *mut *mut cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_copy_up_xattr(
        src: *mut dentry,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_kernfs_init_security(
        kn_dir: *mut kernfs_node,
        kn: *mut kernfs_node,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_permission(file: *mut file, mask: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_alloc(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_release(file: *mut file);
}
extern "C" {
    pub fn security_file_free(file: *mut file);
}
extern "C" {
    pub fn security_file_ioctl(
        file: *mut file,
        cmd: core::ffi::c_uint,
        arg: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_ioctl_compat(
        file: *mut file,
        cmd: core::ffi::c_uint,
        arg: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_mmap_file(
        file: *mut file,
        prot: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_mmap_addr(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_mprotect(
        vma: *mut vm_area_struct,
        reqprot: core::ffi::c_ulong,
        prot: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_lock(file: *mut file, cmd: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_fcntl(
        file: *mut file,
        cmd: core::ffi::c_uint,
        arg: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_set_fowner(file: *mut file);
}
extern "C" {
    pub fn security_file_send_sigiotask(
        tsk: *mut task_struct,
        fown: *mut fown_struct,
        sig: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_receive(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_open(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_post_open(file: *mut file, mask: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_file_truncate(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_alloc(
        task: *mut task_struct,
        clone_flags: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_free(task: *mut task_struct);
}
extern "C" {
    pub fn security_cred_alloc_blank(cred: *mut cred, gfp: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_cred_free(cred: *mut cred);
}
extern "C" {
    pub fn security_prepare_creds(new: *mut cred, old: *const cred, gfp: gfp_t)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn security_transfer_creds(new: *mut cred, old: *const cred);
}
extern "C" {
    pub fn security_cred_getsecid(c: *const cred, secid: *mut u32_);
}
extern "C" {
    pub fn security_kernel_act_as(new: *mut cred, secid: u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_kernel_create_files_as(new: *mut cred, inode: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_kernel_module_request(kmod_name: *mut core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_kernel_load_data(id: kernel_load_data_id, contents: bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_kernel_post_load_data(
        buf: *mut core::ffi::c_char,
        size: loff_t,
        id: kernel_load_data_id,
        description: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_kernel_read_file(
        file: *mut file,
        id: kernel_read_file_id,
        contents: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_kernel_post_read_file(
        file: *mut file,
        buf: *mut core::ffi::c_char,
        size: loff_t,
        id: kernel_read_file_id,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_fix_setuid(
        new: *mut cred,
        old: *const cred,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_fix_setgid(
        new: *mut cred,
        old: *const cred,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_fix_setgroups(new: *mut cred, old: *const cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_setpgid(p: *mut task_struct, pgid: pid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_getpgid(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_getsid(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_current_getsecid_subj(secid: *mut u32_);
}
extern "C" {
    pub fn security_task_getsecid_obj(p: *mut task_struct, secid: *mut u32_);
}
extern "C" {
    pub fn security_task_setnice(p: *mut task_struct, nice: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_setioprio(
        p: *mut task_struct,
        ioprio: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_getioprio(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_prlimit(
        cred: *const cred,
        tcred: *const cred,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_setrlimit(
        p: *mut task_struct,
        resource: core::ffi::c_uint,
        new_rlim: *mut rlimit,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_setscheduler(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_getscheduler(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_movememory(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_kill(
        p: *mut task_struct,
        info: *mut kernel_siginfo,
        sig: core::ffi::c_int,
        cred: *const cred,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_prctl(
        option: core::ffi::c_int,
        arg2: core::ffi::c_ulong,
        arg3: core::ffi::c_ulong,
        arg4: core::ffi::c_ulong,
        arg5: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_task_to_inode(p: *mut task_struct, inode: *mut inode);
}
extern "C" {
    pub fn security_create_user_ns(cred: *const cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_ipc_permission(
        ipcp: *mut kern_ipc_perm,
        flag: core::ffi::c_short,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_ipc_getsecid(ipcp: *mut kern_ipc_perm, secid: *mut u32_);
}
extern "C" {
    pub fn security_msg_msg_alloc(msg: *mut msg_msg) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_msg_msg_free(msg: *mut msg_msg);
}
extern "C" {
    pub fn security_msg_queue_alloc(msq: *mut kern_ipc_perm) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_msg_queue_free(msq: *mut kern_ipc_perm);
}
extern "C" {
    pub fn security_msg_queue_associate(
        msq: *mut kern_ipc_perm,
        msqflg: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_msg_queue_msgctl(
        msq: *mut kern_ipc_perm,
        cmd: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_msg_queue_msgsnd(
        msq: *mut kern_ipc_perm,
        msg: *mut msg_msg,
        msqflg: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_msg_queue_msgrcv(
        msq: *mut kern_ipc_perm,
        msg: *mut msg_msg,
        target: *mut task_struct,
        type_: core::ffi::c_long,
        mode: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_shm_alloc(shp: *mut kern_ipc_perm) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_shm_free(shp: *mut kern_ipc_perm);
}
extern "C" {
    pub fn security_shm_associate(
        shp: *mut kern_ipc_perm,
        shmflg: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_shm_shmctl(shp: *mut kern_ipc_perm, cmd: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_shm_shmat(
        shp: *mut kern_ipc_perm,
        shmaddr: *mut core::ffi::c_char,
        shmflg: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sem_alloc(sma: *mut kern_ipc_perm) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sem_free(sma: *mut kern_ipc_perm);
}
extern "C" {
    pub fn security_sem_associate(
        sma: *mut kern_ipc_perm,
        semflg: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sem_semctl(sma: *mut kern_ipc_perm, cmd: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sem_semop(
        sma: *mut kern_ipc_perm,
        sops: *mut sembuf,
        nsops: core::ffi::c_uint,
        alter: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_d_instantiate(dentry: *mut dentry, inode: *mut inode);
}
extern "C" {
    pub fn security_getselfattr(
        attr: core::ffi::c_uint,
        ctx: *mut lsm_ctx,
        size: *mut u32_,
        flags: u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_setselfattr(
        attr: core::ffi::c_uint,
        ctx: *mut lsm_ctx,
        size: u32_,
        flags: u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_getprocattr(
        p: *mut task_struct,
        lsmid: core::ffi::c_int,
        name: *const core::ffi::c_char,
        value: *mut *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_setprocattr(
        lsmid: core::ffi::c_int,
        name: *const core::ffi::c_char,
        value: *mut core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_netlink_send(sk: *mut sock, skb: *mut sk_buff) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_ismaclabel(name: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_secid_to_secctx(
        secid: u32_,
        secdata: *mut *mut core::ffi::c_char,
        seclen: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_secctx_to_secid(
        secdata: *const core::ffi::c_char,
        seclen: u32_,
        secid: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_release_secctx(secdata: *mut core::ffi::c_char, seclen: u32_);
}
extern "C" {
    pub fn security_inode_invalidate_secctx(inode: *mut inode);
}
extern "C" {
    pub fn security_inode_notifysecctx(
        inode: *mut inode,
        ctx: *mut core::ffi::c_void,
        ctxlen: u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_setsecctx(
        dentry: *mut dentry,
        ctx: *mut core::ffi::c_void,
        ctxlen: u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inode_getsecctx(
        inode: *mut inode,
        ctx: *mut *mut core::ffi::c_void,
        ctxlen: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_locked_down(what: lockdown_reason) -> core::ffi::c_int;
}
extern "C" {
    pub fn lsm_fill_user_ctx(
        uctx: *mut lsm_ctx,
        uctx_len: *mut u32_,
        val: *mut core::ffi::c_void,
        val_len: usize,
        id: u64_,
        flags: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_unix_stream_connect(
        sock: *mut sock,
        other: *mut sock,
        newsk: *mut sock,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_unix_may_send(sock: *mut socket, other: *mut socket) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_create(
        family: core::ffi::c_int,
        type_: core::ffi::c_int,
        protocol: core::ffi::c_int,
        kern: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_post_create(
        sock: *mut socket,
        family: core::ffi::c_int,
        type_: core::ffi::c_int,
        protocol: core::ffi::c_int,
        kern: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_socketpair(socka: *mut socket, sockb: *mut socket) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_bind(
        sock: *mut socket,
        address: *mut sockaddr,
        addrlen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_connect(
        sock: *mut socket,
        address: *mut sockaddr,
        addrlen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_listen(sock: *mut socket, backlog: core::ffi::c_int)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_accept(sock: *mut socket, newsock: *mut socket) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_sendmsg(
        sock: *mut socket,
        msg: *mut msghdr,
        size: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_recvmsg(
        sock: *mut socket,
        msg: *mut msghdr,
        size: core::ffi::c_int,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_getsockname(sock: *mut socket) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_getpeername(sock: *mut socket) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_getsockopt(
        sock: *mut socket,
        level: core::ffi::c_int,
        optname: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_setsockopt(
        sock: *mut socket,
        level: core::ffi::c_int,
        optname: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_shutdown(sock: *mut socket, how: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sock_rcv_skb(sk: *mut sock, skb: *mut sk_buff) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_getpeersec_stream(
        sock: *mut socket,
        optval: sockptr_t,
        optlen: sockptr_t,
        len: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_socket_getpeersec_dgram(
        sock: *mut socket,
        skb: *mut sk_buff,
        secid: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sk_alloc(
        sk: *mut sock,
        family: core::ffi::c_int,
        priority: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sk_free(sk: *mut sock);
}
extern "C" {
    pub fn security_sk_clone(sk: *const sock, newsk: *mut sock);
}
extern "C" {
    pub fn security_sk_classify_flow(sk: *const sock, flic: *mut flowi_common);
}
extern "C" {
    pub fn security_req_classify_flow(req: *const request_sock, flic: *mut flowi_common);
}
extern "C" {
    pub fn security_sock_graft(sk: *mut sock, parent: *mut socket);
}
extern "C" {
    pub fn security_inet_conn_request(
        sk: *const sock,
        skb: *mut sk_buff,
        req: *mut request_sock,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_inet_csk_clone(newsk: *mut sock, req: *const request_sock);
}
extern "C" {
    pub fn security_inet_conn_established(sk: *mut sock, skb: *mut sk_buff);
}
extern "C" {
    pub fn security_secmark_relabel_packet(secid: u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_secmark_refcount_inc();
}
extern "C" {
    pub fn security_secmark_refcount_dec();
}
extern "C" {
    pub fn security_tun_dev_alloc_security(
        security: *mut *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_tun_dev_free_security(security: *mut core::ffi::c_void);
}
extern "C" {
    pub fn security_tun_dev_create() -> core::ffi::c_int;
}
extern "C" {
    pub fn security_tun_dev_attach_queue(security: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_tun_dev_attach(
        sk: *mut sock,
        security: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_tun_dev_open(security: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sctp_assoc_request(
        asoc: *mut sctp_association,
        skb: *mut sk_buff,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sctp_bind_connect(
        sk: *mut sock,
        optname: core::ffi::c_int,
        address: *mut sockaddr,
        addrlen: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_sctp_sk_clone(asoc: *mut sctp_association, sk: *mut sock, newsk: *mut sock);
}
extern "C" {
    pub fn security_sctp_assoc_established(
        asoc: *mut sctp_association,
        skb: *mut sk_buff,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_mptcp_add_subflow(sk: *mut sock, ssk: *mut sock) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_key_alloc(
        key: *mut key,
        cred: *const cred,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_key_free(key: *mut key);
}
extern "C" {
    pub fn security_key_permission(
        key_ref: key_ref_t,
        cred: *const cred,
        need_perm: key_need_perm,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_key_getsecurity(
        key: *mut key,
        _buffer: *mut *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_key_post_create_or_update(
        keyring: *mut key,
        key: *mut key,
        payload: *const core::ffi::c_void,
        payload_len: usize,
        flags: core::ffi::c_ulong,
        create: bool_,
    );
}
extern "C" {
    pub fn security_audit_rule_init(
        field: u32_,
        op: u32_,
        rulestr: *mut core::ffi::c_char,
        lsmrule: *mut *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_audit_rule_known(krule: *mut audit_krule) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_audit_rule_match(
        secid: u32_,
        field: u32_,
        op: u32_,
        lsmrule: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_audit_rule_free(lsmrule: *mut core::ffi::c_void);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct perf_event_attr {
    _unused: [u8; 0],
}
extern "C" {
    pub fn security_perf_event_open(
        attr: *mut perf_event_attr,
        type_: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_perf_event_alloc(event: *mut perf_event) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_perf_event_free(event: *mut perf_event);
}
extern "C" {
    pub fn security_perf_event_read(event: *mut perf_event) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_perf_event_write(event: *mut perf_event) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_uring_override_creds(new: *const cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn security_uring_sqpoll() -> core::ffi::c_int;
}
extern "C" {
    pub fn security_uring_cmd(ioucmd: *mut io_uring_cmd) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_msghdr {
    pub msg_name: compat_uptr_t,
    pub msg_namelen: compat_int_t,
    pub msg_iov: compat_uptr_t,
    pub msg_iovlen: compat_size_t,
    pub msg_control: compat_uptr_t,
    pub msg_controllen: compat_size_t,
    pub msg_flags: compat_uint_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_mmsghdr {
    pub msg_hdr: compat_msghdr,
    pub msg_len: compat_uint_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct compat_cmsghdr {
    pub cmsg_len: compat_size_t,
    pub cmsg_level: compat_int_t,
    pub cmsg_type: compat_int_t,
}
#[repr(C)]
pub struct compat_rtentry {
    pub rt_pad1: u32_,
    pub rt_dst: sockaddr,
    pub rt_gateway: sockaddr,
    pub rt_genmask: sockaddr,
    pub rt_flags: core::ffi::c_ushort,
    pub rt_pad2: core::ffi::c_short,
    pub rt_pad3: u32_,
    pub rt_tos: core::ffi::c_uchar,
    pub rt_class: core::ffi::c_uchar,
    pub rt_pad4: core::ffi::c_short,
    pub rt_metric: core::ffi::c_short,
    pub rt_dev: compat_uptr_t,
    pub rt_mtu: u32_,
    pub rt_window: u32_,
    pub rt_irtt: core::ffi::c_ushort,
}
impl Default for compat_rtentry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __get_compat_msghdr(
        kmsg: *mut msghdr,
        msg: *mut compat_msghdr,
        save_addr: *mut *mut sockaddr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_compat_msghdr(
        arg1: *mut msghdr,
        arg2: *mut compat_msghdr,
        arg3: *mut *mut sockaddr,
        arg4: *mut *mut iovec,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_cmsg_compat(
        arg1: *mut msghdr,
        arg2: core::ffi::c_int,
        arg3: core::ffi::c_int,
        arg4: core::ffi::c_int,
        arg5: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cmsghdr_from_user_compat_to_kern(
        arg1: *mut msghdr,
        arg2: *mut sock,
        arg3: *mut core::ffi::c_uchar,
        arg4: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct compat_group_req {
    pub gr_interface: __u32,
    pub gr_group: __kernel_sockaddr_storage,
}
impl Default for compat_group_req {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct compat_group_source_req {
    pub gsr_interface: __u32,
    pub gsr_group: __kernel_sockaddr_storage,
    pub gsr_source: __kernel_sockaddr_storage,
}
impl Default for compat_group_source_req {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
pub struct compat_group_filter {
    pub __bindgen_anon_1: compat_group_filter__bindgen_ty_1,
}
#[repr(C)]
pub struct compat_group_filter__bindgen_ty_1 {
    pub __bindgen_anon_1: __BindgenUnionField<compat_group_filter__bindgen_ty_1__bindgen_ty_1>,
    pub __bindgen_anon_2: __BindgenUnionField<compat_group_filter__bindgen_ty_1__bindgen_ty_2>,
    pub bindgen_union_field: [u32; 67usize],
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct compat_group_filter__bindgen_ty_1__bindgen_ty_1 {
    pub gf_interface_aux: __u32,
    pub gf_group_aux: __kernel_sockaddr_storage,
    pub gf_fmode_aux: __u32,
    pub gf_numsrc_aux: __u32,
    pub gf_slist: [__kernel_sockaddr_storage; 1usize],
}
impl Default for compat_group_filter__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed(4))]
pub struct compat_group_filter__bindgen_ty_1__bindgen_ty_2 {
    pub gf_interface: __u32,
    pub gf_group: __kernel_sockaddr_storage,
    pub gf_fmode: __u32,
    pub gf_numsrc: __u32,
    pub gf_slist_flex: __IncompleteArrayField<__kernel_sockaddr_storage>,
}
impl Default for compat_group_filter__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for compat_group_filter__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for compat_group_filter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct scm_creds {
    pub pid: u32_,
    pub uid: kuid_t,
    pub gid: kgid_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct unix_edge {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct scm_fp_list {
    pub count: core::ffi::c_short,
    pub count_unix: core::ffi::c_short,
    pub max: core::ffi::c_short,
    pub inflight: bool_,
    pub dead: bool_,
    pub vertices: list_head,
    pub edges: *mut unix_edge,
    pub user: *mut user_struct,
    pub fp: [*mut file; 253usize],
}
impl Default for scm_fp_list {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct scm_cookie {
    pub pid: *mut pid,
    pub fp: *mut scm_fp_list,
    pub creds: scm_creds,
    pub secid: u32_,
}
impl Default for scm_cookie {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn scm_detach_fds(msg: *mut msghdr, scm: *mut scm_cookie);
}
extern "C" {
    pub fn scm_detach_fds_compat(msg: *mut msghdr, scm: *mut scm_cookie);
}
extern "C" {
    pub fn __scm_send(
        sock: *mut socket,
        msg: *mut msghdr,
        scm: *mut scm_cookie,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __scm_destroy(scm: *mut scm_cookie);
}
extern "C" {
    pub fn scm_fp_dup(fpl: *mut scm_fp_list) -> *mut scm_fp_list;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sockaddr_nl {
    pub nl_family: __kernel_sa_family_t,
    pub nl_pad: core::ffi::c_ushort,
    pub nl_pid: __u32,
    pub nl_groups: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nlmsghdr {
    pub nlmsg_len: __u32,
    pub nlmsg_type: __u16,
    pub nlmsg_flags: __u16,
    pub nlmsg_seq: __u32,
    pub nlmsg_pid: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nlmsgerr {
    pub error: core::ffi::c_int,
    pub msg: nlmsghdr,
}
pub const nlmsgerr_attrs_NLMSGERR_ATTR_UNUSED: nlmsgerr_attrs = 0;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MSG: nlmsgerr_attrs = 1;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_OFFS: nlmsgerr_attrs = 2;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_COOKIE: nlmsgerr_attrs = 3;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_POLICY: nlmsgerr_attrs = 4;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MISS_TYPE: nlmsgerr_attrs = 5;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MISS_NEST: nlmsgerr_attrs = 6;
pub const nlmsgerr_attrs___NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 7;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 6;
pub type nlmsgerr_attrs = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nl_pktinfo {
    pub group: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nl_mmap_req {
    pub nm_block_size: core::ffi::c_uint,
    pub nm_block_nr: core::ffi::c_uint,
    pub nm_frame_size: core::ffi::c_uint,
    pub nm_frame_nr: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nl_mmap_hdr {
    pub nm_status: core::ffi::c_uint,
    pub nm_len: core::ffi::c_uint,
    pub nm_group: __u32,
    pub nm_pid: __u32,
    pub nm_uid: __u32,
    pub nm_gid: __u32,
}
pub const NETLINK_UNCONNECTED: _bindgen_ty_240 = 0;
pub const NETLINK_CONNECTED: _bindgen_ty_240 = 1;
pub type _bindgen_ty_240 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nlattr {
    pub nla_len: __u16,
    pub nla_type: __u16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nla_bitfield32 {
    pub value: __u32,
    pub selector: __u32,
}
pub const netlink_attribute_type_NL_ATTR_TYPE_INVALID: netlink_attribute_type = 0;
pub const netlink_attribute_type_NL_ATTR_TYPE_FLAG: netlink_attribute_type = 1;
pub const netlink_attribute_type_NL_ATTR_TYPE_U8: netlink_attribute_type = 2;
pub const netlink_attribute_type_NL_ATTR_TYPE_U16: netlink_attribute_type = 3;
pub const netlink_attribute_type_NL_ATTR_TYPE_U32: netlink_attribute_type = 4;
pub const netlink_attribute_type_NL_ATTR_TYPE_U64: netlink_attribute_type = 5;
pub const netlink_attribute_type_NL_ATTR_TYPE_S8: netlink_attribute_type = 6;
pub const netlink_attribute_type_NL_ATTR_TYPE_S16: netlink_attribute_type = 7;
pub const netlink_attribute_type_NL_ATTR_TYPE_S32: netlink_attribute_type = 8;
pub const netlink_attribute_type_NL_ATTR_TYPE_S64: netlink_attribute_type = 9;
pub const netlink_attribute_type_NL_ATTR_TYPE_BINARY: netlink_attribute_type = 10;
pub const netlink_attribute_type_NL_ATTR_TYPE_STRING: netlink_attribute_type = 11;
pub const netlink_attribute_type_NL_ATTR_TYPE_NUL_STRING: netlink_attribute_type = 12;
pub const netlink_attribute_type_NL_ATTR_TYPE_NESTED: netlink_attribute_type = 13;
pub const netlink_attribute_type_NL_ATTR_TYPE_NESTED_ARRAY: netlink_attribute_type = 14;
pub const netlink_attribute_type_NL_ATTR_TYPE_BITFIELD32: netlink_attribute_type = 15;
pub const netlink_attribute_type_NL_ATTR_TYPE_SINT: netlink_attribute_type = 16;
pub const netlink_attribute_type_NL_ATTR_TYPE_UINT: netlink_attribute_type = 17;
pub type netlink_attribute_type = core::ffi::c_uint;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_UNSPEC: netlink_policy_type_attr = 0;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_TYPE: netlink_policy_type_attr = 1;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MIN_VALUE_S: netlink_policy_type_attr = 2;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MAX_VALUE_S: netlink_policy_type_attr = 3;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MIN_VALUE_U: netlink_policy_type_attr = 4;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MAX_VALUE_U: netlink_policy_type_attr = 5;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MIN_LENGTH: netlink_policy_type_attr = 6;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MAX_LENGTH: netlink_policy_type_attr = 7;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_POLICY_IDX: netlink_policy_type_attr = 8;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE: netlink_policy_type_attr = 9;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_BITFIELD32_MASK: netlink_policy_type_attr =
    10;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_PAD: netlink_policy_type_attr = 11;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MASK: netlink_policy_type_attr = 12;
pub const netlink_policy_type_attr___NL_POLICY_TYPE_ATTR_MAX: netlink_policy_type_attr = 13;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MAX: netlink_policy_type_attr = 12;
pub type netlink_policy_type_attr = core::ffi::c_uint;
extern "C" {
    pub fn do_trace_netlink_extack(msg: *const core::ffi::c_char);
}
pub const netlink_skb_flags_NETLINK_SKB_DST: netlink_skb_flags = 8;
pub type netlink_skb_flags = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netlink_skb_parms {
    pub creds: scm_creds,
    pub portid: __u32,
    pub dst_group: __u32,
    pub flags: __u32,
    pub sk: *mut sock,
    pub nsid_is_set: bool_,
    pub nsid: core::ffi::c_int,
}
impl Default for netlink_skb_parms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn netlink_table_grab();
}
extern "C" {
    pub fn netlink_table_ungrab();
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct netlink_kernel_cfg {
    pub groups: core::ffi::c_uint,
    pub flags: core::ffi::c_uint,
    pub input: ::core::option::Option<unsafe extern "C" fn(skb: *mut sk_buff)>,
    pub bind: ::core::option::Option<
        unsafe extern "C" fn(net: *mut net, group: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub unbind:
        ::core::option::Option<unsafe extern "C" fn(net: *mut net, group: core::ffi::c_int)>,
    pub release: ::core::option::Option<
        unsafe extern "C" fn(sk: *mut sock, groups: *mut core::ffi::c_ulong),
    >,
}
extern "C" {
    pub fn __netlink_kernel_create(
        net: *mut net,
        unit: core::ffi::c_int,
        module: *mut module,
        cfg: *mut netlink_kernel_cfg,
    ) -> *mut sock;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netlink_ext_ack {
    pub _msg: *const core::ffi::c_char,
    pub bad_attr: *const nlattr,
    pub policy: *mut nla_policy,
    pub miss_nest: *const nlattr,
    pub miss_type: u16_,
    pub cookie: [u8_; 20usize],
    pub cookie_len: u8_,
    pub _msg_buf: [core::ffi::c_char; 80usize],
}
impl Default for netlink_ext_ack {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn netlink_kernel_release(sk: *mut sock);
}
extern "C" {
    pub fn __netlink_change_ngroups(sk: *mut sock, groups: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn netlink_change_ngroups(sk: *mut sock, groups: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn __netlink_clear_multicast_users(sk: *mut sock, group: core::ffi::c_uint);
}
extern "C" {
    pub fn netlink_ack(
        in_skb: *mut sk_buff,
        nlh: *mut nlmsghdr,
        err: core::ffi::c_int,
        extack: *const netlink_ext_ack,
    );
}
extern "C" {
    pub fn netlink_has_listeners(sk: *mut sock, group: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn netlink_strict_get_check(skb: *mut sk_buff) -> bool_;
}
extern "C" {
    pub fn netlink_unicast(
        ssk: *mut sock,
        skb: *mut sk_buff,
        portid: __u32,
        nonblock: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn netlink_broadcast(
        ssk: *mut sock,
        skb: *mut sk_buff,
        portid: __u32,
        group: __u32,
        allocation: gfp_t,
    ) -> core::ffi::c_int;
}
pub type netlink_filter_fn = ::core::option::Option<
    unsafe extern "C" fn(
        dsk: *mut sock,
        skb: *mut sk_buff,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn netlink_broadcast_filtered(
        ssk: *mut sock,
        skb: *mut sk_buff,
        portid: __u32,
        group: __u32,
        allocation: gfp_t,
        filter: netlink_filter_fn,
        filter_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn netlink_set_err(
        ssk: *mut sock,
        portid: __u32,
        group: __u32,
        code: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn netlink_register_notifier(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn netlink_unregister_notifier(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn netlink_getsockbyfilp(filp: *mut file) -> *mut sock;
}
extern "C" {
    pub fn netlink_attachskb(
        sk: *mut sock,
        skb: *mut sk_buff,
        timeo: *mut core::ffi::c_long,
        ssk: *mut sock,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn netlink_detachskb(sk: *mut sock, skb: *mut sk_buff);
}
extern "C" {
    pub fn netlink_sendskb(sk: *mut sock, skb: *mut sk_buff) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netlink_callback {
    pub skb: *mut sk_buff,
    pub nlh: *const nlmsghdr,
    pub dump: ::core::option::Option<
        unsafe extern "C" fn(skb: *mut sk_buff, cb: *mut netlink_callback) -> core::ffi::c_int,
    >,
    pub done:
        ::core::option::Option<unsafe extern "C" fn(cb: *mut netlink_callback) -> core::ffi::c_int>,
    pub data: *mut core::ffi::c_void,
    pub module: *mut module,
    pub extack: *mut netlink_ext_ack,
    pub family: u16_,
    pub answer_flags: u16_,
    pub min_dump_alloc: u32_,
    pub prev_seq: core::ffi::c_uint,
    pub seq: core::ffi::c_uint,
    pub flags: core::ffi::c_int,
    pub strict_check: bool_,
    pub __bindgen_anon_1: netlink_callback__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union netlink_callback__bindgen_ty_1 {
    pub ctx: [u8_; 48usize],
    pub args: [core::ffi::c_long; 6usize],
}
impl Default for netlink_callback__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for netlink_callback {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netlink_notify {
    pub net: *mut net,
    pub portid: u32_,
    pub protocol: core::ffi::c_int,
}
impl Default for netlink_notify {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __nlmsg_put(
        skb: *mut sk_buff,
        portid: u32_,
        seq: u32_,
        type_: core::ffi::c_int,
        len: core::ffi::c_int,
        flags: core::ffi::c_int,
    ) -> *mut nlmsghdr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netlink_dump_control {
    pub start: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut netlink_callback) -> core::ffi::c_int,
    >,
    pub dump: ::core::option::Option<
        unsafe extern "C" fn(skb: *mut sk_buff, arg1: *mut netlink_callback) -> core::ffi::c_int,
    >,
    pub done: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut netlink_callback) -> core::ffi::c_int,
    >,
    pub extack: *mut netlink_ext_ack,
    pub data: *mut core::ffi::c_void,
    pub module: *mut module,
    pub min_dump_alloc: u32_,
    pub flags: core::ffi::c_int,
}
impl Default for netlink_dump_control {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __netlink_dump_start(
        ssk: *mut sock,
        skb: *mut sk_buff,
        nlh: *const nlmsghdr,
        control: *mut netlink_dump_control,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netlink_tap {
    pub dev: *mut net_device,
    pub module: *mut module,
    pub list: list_head,
}
impl Default for netlink_tap {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn netlink_add_tap(nt: *mut netlink_tap) -> core::ffi::c_int;
}
extern "C" {
    pub fn netlink_remove_tap(nt: *mut netlink_tap) -> core::ffi::c_int;
}
extern "C" {
    pub fn __netlink_ns_capable(
        nsp: *const netlink_skb_parms,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn netlink_ns_capable(
        skb: *const sk_buff,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn netlink_capable(skb: *const sk_buff, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn netlink_net_capable(skb: *const sk_buff, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn netlink_alloc_large_skb(
        size: core::ffi::c_uint,
        broadcast: core::ffi::c_int,
    ) -> *mut sk_buff;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_cmd {
    pub cmd: __u32,
    pub supported: __u32,
    pub advertising: __u32,
    pub speed: __u16,
    pub duplex: __u8,
    pub port: __u8,
    pub phy_address: __u8,
    pub transceiver: __u8,
    pub autoneg: __u8,
    pub mdio_support: __u8,
    pub maxtxpkt: __u32,
    pub maxrxpkt: __u32,
    pub speed_hi: __u16,
    pub eth_tp_mdix: __u8,
    pub eth_tp_mdix_ctrl: __u8,
    pub lp_advertising: __u32,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_drvinfo {
    pub cmd: __u32,
    pub driver: [core::ffi::c_char; 32usize],
    pub version: [core::ffi::c_char; 32usize],
    pub fw_version: [core::ffi::c_char; 32usize],
    pub bus_info: [core::ffi::c_char; 32usize],
    pub erom_version: [core::ffi::c_char; 32usize],
    pub reserved2: [core::ffi::c_char; 12usize],
    pub n_priv_flags: __u32,
    pub n_stats: __u32,
    pub testinfo_len: __u32,
    pub eedump_len: __u32,
    pub regdump_len: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_wolinfo {
    pub cmd: __u32,
    pub supported: __u32,
    pub wolopts: __u32,
    pub sopass: [__u8; 6usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_value {
    pub cmd: __u32,
    pub data: __u32,
}
pub const tunable_id_ETHTOOL_ID_UNSPEC: tunable_id = 0;
pub const tunable_id_ETHTOOL_RX_COPYBREAK: tunable_id = 1;
pub const tunable_id_ETHTOOL_TX_COPYBREAK: tunable_id = 2;
pub const tunable_id_ETHTOOL_PFC_PREVENTION_TOUT: tunable_id = 3;
pub const tunable_id_ETHTOOL_TX_COPYBREAK_BUF_SIZE: tunable_id = 4;
pub const tunable_id___ETHTOOL_TUNABLE_COUNT: tunable_id = 5;
pub type tunable_id = core::ffi::c_uint;
pub const tunable_type_id_ETHTOOL_TUNABLE_UNSPEC: tunable_type_id = 0;
pub const tunable_type_id_ETHTOOL_TUNABLE_U8: tunable_type_id = 1;
pub const tunable_type_id_ETHTOOL_TUNABLE_U16: tunable_type_id = 2;
pub const tunable_type_id_ETHTOOL_TUNABLE_U32: tunable_type_id = 3;
pub const tunable_type_id_ETHTOOL_TUNABLE_U64: tunable_type_id = 4;
pub const tunable_type_id_ETHTOOL_TUNABLE_STRING: tunable_type_id = 5;
pub const tunable_type_id_ETHTOOL_TUNABLE_S8: tunable_type_id = 6;
pub const tunable_type_id_ETHTOOL_TUNABLE_S16: tunable_type_id = 7;
pub const tunable_type_id_ETHTOOL_TUNABLE_S32: tunable_type_id = 8;
pub const tunable_type_id_ETHTOOL_TUNABLE_S64: tunable_type_id = 9;
pub type tunable_type_id = core::ffi::c_uint;
#[repr(C)]
pub struct ethtool_tunable {
    pub cmd: __u32,
    pub id: __u32,
    pub type_id: __u32,
    pub len: __u32,
    pub data: __IncompleteArrayField<*mut core::ffi::c_void>,
}
impl Default for ethtool_tunable {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const phy_tunable_id_ETHTOOL_PHY_ID_UNSPEC: phy_tunable_id = 0;
pub const phy_tunable_id_ETHTOOL_PHY_DOWNSHIFT: phy_tunable_id = 1;
pub const phy_tunable_id_ETHTOOL_PHY_FAST_LINK_DOWN: phy_tunable_id = 2;
pub const phy_tunable_id_ETHTOOL_PHY_EDPD: phy_tunable_id = 3;
pub const phy_tunable_id___ETHTOOL_PHY_TUNABLE_COUNT: phy_tunable_id = 4;
pub type phy_tunable_id = core::ffi::c_uint;
#[repr(C)]
#[derive(Default)]
pub struct ethtool_regs {
    pub cmd: __u32,
    pub version: __u32,
    pub len: __u32,
    pub data: __IncompleteArrayField<__u8>,
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_eeprom {
    pub cmd: __u32,
    pub magic: __u32,
    pub offset: __u32,
    pub len: __u32,
    pub data: __IncompleteArrayField<__u8>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_eee {
    pub cmd: __u32,
    pub supported: __u32,
    pub advertised: __u32,
    pub lp_advertised: __u32,
    pub eee_active: __u32,
    pub eee_enabled: __u32,
    pub tx_lpi_enabled: __u32,
    pub tx_lpi_timer: __u32,
    pub reserved: [__u32; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_modinfo {
    pub cmd: __u32,
    pub type_: __u32,
    pub eeprom_len: __u32,
    pub reserved: [__u32; 8usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_coalesce {
    pub cmd: __u32,
    pub rx_coalesce_usecs: __u32,
    pub rx_max_coalesced_frames: __u32,
    pub rx_coalesce_usecs_irq: __u32,
    pub rx_max_coalesced_frames_irq: __u32,
    pub tx_coalesce_usecs: __u32,
    pub tx_max_coalesced_frames: __u32,
    pub tx_coalesce_usecs_irq: __u32,
    pub tx_max_coalesced_frames_irq: __u32,
    pub stats_block_coalesce_usecs: __u32,
    pub use_adaptive_rx_coalesce: __u32,
    pub use_adaptive_tx_coalesce: __u32,
    pub pkt_rate_low: __u32,
    pub rx_coalesce_usecs_low: __u32,
    pub rx_max_coalesced_frames_low: __u32,
    pub tx_coalesce_usecs_low: __u32,
    pub tx_max_coalesced_frames_low: __u32,
    pub pkt_rate_high: __u32,
    pub rx_coalesce_usecs_high: __u32,
    pub rx_max_coalesced_frames_high: __u32,
    pub tx_coalesce_usecs_high: __u32,
    pub tx_max_coalesced_frames_high: __u32,
    pub rate_sample_interval: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_ringparam {
    pub cmd: __u32,
    pub rx_max_pending: __u32,
    pub rx_mini_max_pending: __u32,
    pub rx_jumbo_max_pending: __u32,
    pub tx_max_pending: __u32,
    pub rx_pending: __u32,
    pub rx_mini_pending: __u32,
    pub rx_jumbo_pending: __u32,
    pub tx_pending: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_channels {
    pub cmd: __u32,
    pub max_rx: __u32,
    pub max_tx: __u32,
    pub max_other: __u32,
    pub max_combined: __u32,
    pub rx_count: __u32,
    pub tx_count: __u32,
    pub other_count: __u32,
    pub combined_count: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_pauseparam {
    pub cmd: __u32,
    pub autoneg: __u32,
    pub rx_pause: __u32,
    pub tx_pause: __u32,
}
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_AUTONEG: ethtool_link_ext_state = 0;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_LINK_TRAINING_FAILURE:
    ethtool_link_ext_state = 1;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_LINK_LOGICAL_MISMATCH:
    ethtool_link_ext_state = 2;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_BAD_SIGNAL_INTEGRITY:
    ethtool_link_ext_state = 3;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_NO_CABLE: ethtool_link_ext_state = 4;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_CABLE_ISSUE: ethtool_link_ext_state = 5;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_EEPROM_ISSUE: ethtool_link_ext_state = 6;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_CALIBRATION_FAILURE:
    ethtool_link_ext_state = 7;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_POWER_BUDGET_EXCEEDED:
    ethtool_link_ext_state = 8;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_OVERHEAT: ethtool_link_ext_state = 9;
pub const ethtool_link_ext_state_ETHTOOL_LINK_EXT_STATE_MODULE: ethtool_link_ext_state = 10;
pub type ethtool_link_ext_state = core::ffi::c_uint;
pub const ethtool_link_ext_substate_autoneg_ETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED:
    ethtool_link_ext_substate_autoneg = 1;
pub const ethtool_link_ext_substate_autoneg_ETHTOOL_LINK_EXT_SUBSTATE_AN_ACK_NOT_RECEIVED:
    ethtool_link_ext_substate_autoneg = 2;
pub const ethtool_link_ext_substate_autoneg_ETHTOOL_LINK_EXT_SUBSTATE_AN_NEXT_PAGE_EXCHANGE_FAILED : ethtool_link_ext_substate_autoneg = 3 ;
pub const ethtool_link_ext_substate_autoneg_ETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED_FORCE_MODE : ethtool_link_ext_substate_autoneg = 4 ;
pub const ethtool_link_ext_substate_autoneg_ETHTOOL_LINK_EXT_SUBSTATE_AN_FEC_MISMATCH_DURING_OVERRIDE : ethtool_link_ext_substate_autoneg = 5 ;
pub const ethtool_link_ext_substate_autoneg_ETHTOOL_LINK_EXT_SUBSTATE_AN_NO_HCD:
    ethtool_link_ext_substate_autoneg = 6;
pub type ethtool_link_ext_substate_autoneg = core::ffi::c_uint;
pub const ethtool_link_ext_substate_link_training_ETHTOOL_LINK_EXT_SUBSTATE_LT_KR_FRAME_LOCK_NOT_ACQUIRED : ethtool_link_ext_substate_link_training = 1 ;
pub const ethtool_link_ext_substate_link_training_ETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_INHIBIT_TIMEOUT : ethtool_link_ext_substate_link_training = 2 ;
pub const ethtool_link_ext_substate_link_training_ETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_PARTNER_DID_NOT_SET_RECEIVER_READY : ethtool_link_ext_substate_link_training = 3 ;
pub const ethtool_link_ext_substate_link_training_ETHTOOL_LINK_EXT_SUBSTATE_LT_REMOTE_FAULT:
    ethtool_link_ext_substate_link_training = 4;
pub type ethtool_link_ext_substate_link_training = core::ffi::c_uint;
pub const ethtool_link_ext_substate_link_logical_mismatch_ETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_BLOCK_LOCK : ethtool_link_ext_substate_link_logical_mismatch = 1 ;
pub const ethtool_link_ext_substate_link_logical_mismatch_ETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_AM_LOCK : ethtool_link_ext_substate_link_logical_mismatch = 2 ;
pub const ethtool_link_ext_substate_link_logical_mismatch_ETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_GET_ALIGN_STATUS : ethtool_link_ext_substate_link_logical_mismatch = 3 ;
pub const ethtool_link_ext_substate_link_logical_mismatch_ETHTOOL_LINK_EXT_SUBSTATE_LLM_FC_FEC_IS_NOT_LOCKED : ethtool_link_ext_substate_link_logical_mismatch = 4 ;
pub const ethtool_link_ext_substate_link_logical_mismatch_ETHTOOL_LINK_EXT_SUBSTATE_LLM_RS_FEC_IS_NOT_LOCKED : ethtool_link_ext_substate_link_logical_mismatch = 5 ;
pub type ethtool_link_ext_substate_link_logical_mismatch = core::ffi::c_uint;
pub const ethtool_link_ext_substate_bad_signal_integrity_ETHTOOL_LINK_EXT_SUBSTATE_BSI_LARGE_NUMBER_OF_PHYSICAL_ERRORS : ethtool_link_ext_substate_bad_signal_integrity = 1 ;
pub const ethtool_link_ext_substate_bad_signal_integrity_ETHTOOL_LINK_EXT_SUBSTATE_BSI_UNSUPPORTED_RATE : ethtool_link_ext_substate_bad_signal_integrity = 2 ;
pub const ethtool_link_ext_substate_bad_signal_integrity_ETHTOOL_LINK_EXT_SUBSTATE_BSI_SERDES_REFERENCE_CLOCK_LOST : ethtool_link_ext_substate_bad_signal_integrity = 3 ;
pub const ethtool_link_ext_substate_bad_signal_integrity_ETHTOOL_LINK_EXT_SUBSTATE_BSI_SERDES_ALOS : ethtool_link_ext_substate_bad_signal_integrity = 4 ;
pub type ethtool_link_ext_substate_bad_signal_integrity = core::ffi::c_uint;
pub const ethtool_link_ext_substate_cable_issue_ETHTOOL_LINK_EXT_SUBSTATE_CI_UNSUPPORTED_CABLE:
    ethtool_link_ext_substate_cable_issue = 1;
pub const ethtool_link_ext_substate_cable_issue_ETHTOOL_LINK_EXT_SUBSTATE_CI_CABLE_TEST_FAILURE:
    ethtool_link_ext_substate_cable_issue = 2;
pub type ethtool_link_ext_substate_cable_issue = core::ffi::c_uint;
pub const ethtool_link_ext_substate_module_ETHTOOL_LINK_EXT_SUBSTATE_MODULE_CMIS_NOT_READY:
    ethtool_link_ext_substate_module = 1;
pub type ethtool_link_ext_substate_module = core::ffi::c_uint;
pub const ethtool_stringset_ETH_SS_TEST: ethtool_stringset = 0;
pub const ethtool_stringset_ETH_SS_STATS: ethtool_stringset = 1;
pub const ethtool_stringset_ETH_SS_PRIV_FLAGS: ethtool_stringset = 2;
pub const ethtool_stringset_ETH_SS_NTUPLE_FILTERS: ethtool_stringset = 3;
pub const ethtool_stringset_ETH_SS_FEATURES: ethtool_stringset = 4;
pub const ethtool_stringset_ETH_SS_RSS_HASH_FUNCS: ethtool_stringset = 5;
pub const ethtool_stringset_ETH_SS_TUNABLES: ethtool_stringset = 6;
pub const ethtool_stringset_ETH_SS_PHY_STATS: ethtool_stringset = 7;
pub const ethtool_stringset_ETH_SS_PHY_TUNABLES: ethtool_stringset = 8;
pub const ethtool_stringset_ETH_SS_LINK_MODES: ethtool_stringset = 9;
pub const ethtool_stringset_ETH_SS_MSG_CLASSES: ethtool_stringset = 10;
pub const ethtool_stringset_ETH_SS_WOL_MODES: ethtool_stringset = 11;
pub const ethtool_stringset_ETH_SS_SOF_TIMESTAMPING: ethtool_stringset = 12;
pub const ethtool_stringset_ETH_SS_TS_TX_TYPES: ethtool_stringset = 13;
pub const ethtool_stringset_ETH_SS_TS_RX_FILTERS: ethtool_stringset = 14;
pub const ethtool_stringset_ETH_SS_UDP_TUNNEL_TYPES: ethtool_stringset = 15;
pub const ethtool_stringset_ETH_SS_STATS_STD: ethtool_stringset = 16;
pub const ethtool_stringset_ETH_SS_STATS_ETH_PHY: ethtool_stringset = 17;
pub const ethtool_stringset_ETH_SS_STATS_ETH_MAC: ethtool_stringset = 18;
pub const ethtool_stringset_ETH_SS_STATS_ETH_CTRL: ethtool_stringset = 19;
pub const ethtool_stringset_ETH_SS_STATS_RMON: ethtool_stringset = 20;
pub const ethtool_stringset_ETH_SS_COUNT: ethtool_stringset = 21;
pub type ethtool_stringset = core::ffi::c_uint;
pub const ethtool_mac_stats_src_ETHTOOL_MAC_STATS_SRC_AGGREGATE: ethtool_mac_stats_src = 0;
pub const ethtool_mac_stats_src_ETHTOOL_MAC_STATS_SRC_EMAC: ethtool_mac_stats_src = 1;
pub const ethtool_mac_stats_src_ETHTOOL_MAC_STATS_SRC_PMAC: ethtool_mac_stats_src = 2;
pub type ethtool_mac_stats_src = core::ffi::c_uint;
pub const ethtool_module_power_mode_policy_ETHTOOL_MODULE_POWER_MODE_POLICY_HIGH:
    ethtool_module_power_mode_policy = 1;
pub const ethtool_module_power_mode_policy_ETHTOOL_MODULE_POWER_MODE_POLICY_AUTO:
    ethtool_module_power_mode_policy = 2;
pub type ethtool_module_power_mode_policy = core::ffi::c_uint;
pub const ethtool_module_power_mode_ETHTOOL_MODULE_POWER_MODE_LOW: ethtool_module_power_mode = 1;
pub const ethtool_module_power_mode_ETHTOOL_MODULE_POWER_MODE_HIGH: ethtool_module_power_mode = 2;
pub type ethtool_module_power_mode = core::ffi::c_uint;
pub const ethtool_c33_pse_ext_state_ETHTOOL_C33_PSE_EXT_STATE_ERROR_CONDITION:
    ethtool_c33_pse_ext_state = 1;
pub const ethtool_c33_pse_ext_state_ETHTOOL_C33_PSE_EXT_STATE_MR_MPS_VALID:
    ethtool_c33_pse_ext_state = 2;
pub const ethtool_c33_pse_ext_state_ETHTOOL_C33_PSE_EXT_STATE_MR_PSE_ENABLE:
    ethtool_c33_pse_ext_state = 3;
pub const ethtool_c33_pse_ext_state_ETHTOOL_C33_PSE_EXT_STATE_OPTION_DETECT_TED:
    ethtool_c33_pse_ext_state = 4;
pub const ethtool_c33_pse_ext_state_ETHTOOL_C33_PSE_EXT_STATE_OPTION_VPORT_LIM:
    ethtool_c33_pse_ext_state = 5;
pub const ethtool_c33_pse_ext_state_ETHTOOL_C33_PSE_EXT_STATE_OVLD_DETECTED:
    ethtool_c33_pse_ext_state = 6;
pub const ethtool_c33_pse_ext_state_ETHTOOL_C33_PSE_EXT_STATE_PD_DLL_POWER_TYPE:
    ethtool_c33_pse_ext_state = 7;
pub const ethtool_c33_pse_ext_state_ETHTOOL_C33_PSE_EXT_STATE_POWER_NOT_AVAILABLE:
    ethtool_c33_pse_ext_state = 8;
pub const ethtool_c33_pse_ext_state_ETHTOOL_C33_PSE_EXT_STATE_SHORT_DETECTED:
    ethtool_c33_pse_ext_state = 9;
pub type ethtool_c33_pse_ext_state = core::ffi::c_uint;
pub const ethtool_c33_pse_ext_substate_mr_mps_valid_ETHTOOL_C33_PSE_EXT_SUBSTATE_MR_MPS_VALID_DETECTED_UNDERLOAD : ethtool_c33_pse_ext_substate_mr_mps_valid = 1 ;
pub const ethtool_c33_pse_ext_substate_mr_mps_valid_ETHTOOL_C33_PSE_EXT_SUBSTATE_MR_MPS_VALID_CONNECTION_OPEN : ethtool_c33_pse_ext_substate_mr_mps_valid = 2 ;
pub type ethtool_c33_pse_ext_substate_mr_mps_valid = core::ffi::c_uint;
pub const ethtool_c33_pse_ext_substate_error_condition_ETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_NON_EXISTING_PORT : ethtool_c33_pse_ext_substate_error_condition = 1 ;
pub const ethtool_c33_pse_ext_substate_error_condition_ETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_UNDEFINED_PORT : ethtool_c33_pse_ext_substate_error_condition = 2 ;
pub const ethtool_c33_pse_ext_substate_error_condition_ETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_INTERNAL_HW_FAULT : ethtool_c33_pse_ext_substate_error_condition = 3 ;
pub const ethtool_c33_pse_ext_substate_error_condition_ETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_COMM_ERROR_AFTER_FORCE_ON : ethtool_c33_pse_ext_substate_error_condition = 4 ;
pub const ethtool_c33_pse_ext_substate_error_condition_ETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_UNKNOWN_PORT_STATUS : ethtool_c33_pse_ext_substate_error_condition = 5 ;
pub const ethtool_c33_pse_ext_substate_error_condition_ETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_HOST_CRASH_TURN_OFF : ethtool_c33_pse_ext_substate_error_condition = 6 ;
pub const ethtool_c33_pse_ext_substate_error_condition_ETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_HOST_CRASH_FORCE_SHUTDOWN : ethtool_c33_pse_ext_substate_error_condition = 7 ;
pub const ethtool_c33_pse_ext_substate_error_condition_ETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_CONFIG_CHANGE : ethtool_c33_pse_ext_substate_error_condition = 8 ;
pub const ethtool_c33_pse_ext_substate_error_condition_ETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_DETECTED_OVER_TEMP : ethtool_c33_pse_ext_substate_error_condition = 9 ;
pub type ethtool_c33_pse_ext_substate_error_condition = core::ffi::c_uint;
pub const ethtool_c33_pse_ext_substate_mr_pse_enable_ETHTOOL_C33_PSE_EXT_SUBSTATE_MR_PSE_ENABLE_DISABLE_PIN_ACTIVE : ethtool_c33_pse_ext_substate_mr_pse_enable = 1 ;
pub type ethtool_c33_pse_ext_substate_mr_pse_enable = core::ffi::c_uint;
pub const ethtool_c33_pse_ext_substate_option_detect_ted_ETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_DETECT_TED_DET_IN_PROCESS : ethtool_c33_pse_ext_substate_option_detect_ted = 1 ;
pub const ethtool_c33_pse_ext_substate_option_detect_ted_ETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_DETECT_TED_CONNECTION_CHECK_ERROR : ethtool_c33_pse_ext_substate_option_detect_ted = 2 ;
pub type ethtool_c33_pse_ext_substate_option_detect_ted = core::ffi::c_uint;
pub const ethtool_c33_pse_ext_substate_option_vport_lim_ETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_VPORT_LIM_HIGH_VOLTAGE : ethtool_c33_pse_ext_substate_option_vport_lim = 1 ;
pub const ethtool_c33_pse_ext_substate_option_vport_lim_ETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_VPORT_LIM_LOW_VOLTAGE : ethtool_c33_pse_ext_substate_option_vport_lim = 2 ;
pub const ethtool_c33_pse_ext_substate_option_vport_lim_ETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_VPORT_LIM_VOLTAGE_INJECTION : ethtool_c33_pse_ext_substate_option_vport_lim = 3 ;
pub type ethtool_c33_pse_ext_substate_option_vport_lim = core::ffi::c_uint;
pub const ethtool_c33_pse_ext_substate_ovld_detected_ETHTOOL_C33_PSE_EXT_SUBSTATE_OVLD_DETECTED_OVERLOAD : ethtool_c33_pse_ext_substate_ovld_detected = 1 ;
pub type ethtool_c33_pse_ext_substate_ovld_detected = core::ffi::c_uint;
pub const ethtool_c33_pse_ext_substate_power_not_available_ETHTOOL_C33_PSE_EXT_SUBSTATE_POWER_NOT_AVAILABLE_BUDGET_EXCEEDED : ethtool_c33_pse_ext_substate_power_not_available = 1 ;
pub const ethtool_c33_pse_ext_substate_power_not_available_ETHTOOL_C33_PSE_EXT_SUBSTATE_POWER_NOT_AVAILABLE_PORT_PW_LIMIT_EXCEEDS_CONTROLLER_BUDGET : ethtool_c33_pse_ext_substate_power_not_available = 2 ;
pub const ethtool_c33_pse_ext_substate_power_not_available_ETHTOOL_C33_PSE_EXT_SUBSTATE_POWER_NOT_AVAILABLE_PD_REQUEST_EXCEEDS_PORT_LIMIT : ethtool_c33_pse_ext_substate_power_not_available = 3 ;
pub const ethtool_c33_pse_ext_substate_power_not_available_ETHTOOL_C33_PSE_EXT_SUBSTATE_POWER_NOT_AVAILABLE_HW_PW_LIMIT : ethtool_c33_pse_ext_substate_power_not_available = 4 ;
pub type ethtool_c33_pse_ext_substate_power_not_available = core::ffi::c_uint;
pub const ethtool_c33_pse_ext_substate_short_detected_ETHTOOL_C33_PSE_EXT_SUBSTATE_SHORT_DETECTED_SHORT_CONDITION : ethtool_c33_pse_ext_substate_short_detected = 1 ;
pub type ethtool_c33_pse_ext_substate_short_detected = core::ffi::c_uint;
pub const ethtool_pse_types_ETHTOOL_PSE_UNKNOWN: ethtool_pse_types = 1;
pub const ethtool_pse_types_ETHTOOL_PSE_PODL: ethtool_pse_types = 2;
pub const ethtool_pse_types_ETHTOOL_PSE_C33: ethtool_pse_types = 4;
pub type ethtool_pse_types = core::ffi::c_uint;
pub const ethtool_c33_pse_admin_state_ETHTOOL_C33_PSE_ADMIN_STATE_UNKNOWN:
    ethtool_c33_pse_admin_state = 1;
pub const ethtool_c33_pse_admin_state_ETHTOOL_C33_PSE_ADMIN_STATE_DISABLED:
    ethtool_c33_pse_admin_state = 2;
pub const ethtool_c33_pse_admin_state_ETHTOOL_C33_PSE_ADMIN_STATE_ENABLED:
    ethtool_c33_pse_admin_state = 3;
pub type ethtool_c33_pse_admin_state = core::ffi::c_uint;
pub const ethtool_c33_pse_pw_d_status_ETHTOOL_C33_PSE_PW_D_STATUS_UNKNOWN:
    ethtool_c33_pse_pw_d_status = 1;
pub const ethtool_c33_pse_pw_d_status_ETHTOOL_C33_PSE_PW_D_STATUS_DISABLED:
    ethtool_c33_pse_pw_d_status = 2;
pub const ethtool_c33_pse_pw_d_status_ETHTOOL_C33_PSE_PW_D_STATUS_SEARCHING:
    ethtool_c33_pse_pw_d_status = 3;
pub const ethtool_c33_pse_pw_d_status_ETHTOOL_C33_PSE_PW_D_STATUS_DELIVERING:
    ethtool_c33_pse_pw_d_status = 4;
pub const ethtool_c33_pse_pw_d_status_ETHTOOL_C33_PSE_PW_D_STATUS_TEST:
    ethtool_c33_pse_pw_d_status = 5;
pub const ethtool_c33_pse_pw_d_status_ETHTOOL_C33_PSE_PW_D_STATUS_FAULT:
    ethtool_c33_pse_pw_d_status = 6;
pub const ethtool_c33_pse_pw_d_status_ETHTOOL_C33_PSE_PW_D_STATUS_OTHERFAULT:
    ethtool_c33_pse_pw_d_status = 7;
pub type ethtool_c33_pse_pw_d_status = core::ffi::c_uint;
pub const ethtool_podl_pse_admin_state_ETHTOOL_PODL_PSE_ADMIN_STATE_UNKNOWN:
    ethtool_podl_pse_admin_state = 1;
pub const ethtool_podl_pse_admin_state_ETHTOOL_PODL_PSE_ADMIN_STATE_DISABLED:
    ethtool_podl_pse_admin_state = 2;
pub const ethtool_podl_pse_admin_state_ETHTOOL_PODL_PSE_ADMIN_STATE_ENABLED:
    ethtool_podl_pse_admin_state = 3;
pub type ethtool_podl_pse_admin_state = core::ffi::c_uint;
pub const ethtool_podl_pse_pw_d_status_ETHTOOL_PODL_PSE_PW_D_STATUS_UNKNOWN:
    ethtool_podl_pse_pw_d_status = 1;
pub const ethtool_podl_pse_pw_d_status_ETHTOOL_PODL_PSE_PW_D_STATUS_DISABLED:
    ethtool_podl_pse_pw_d_status = 2;
pub const ethtool_podl_pse_pw_d_status_ETHTOOL_PODL_PSE_PW_D_STATUS_SEARCHING:
    ethtool_podl_pse_pw_d_status = 3;
pub const ethtool_podl_pse_pw_d_status_ETHTOOL_PODL_PSE_PW_D_STATUS_DELIVERING:
    ethtool_podl_pse_pw_d_status = 4;
pub const ethtool_podl_pse_pw_d_status_ETHTOOL_PODL_PSE_PW_D_STATUS_SLEEP:
    ethtool_podl_pse_pw_d_status = 5;
pub const ethtool_podl_pse_pw_d_status_ETHTOOL_PODL_PSE_PW_D_STATUS_IDLE:
    ethtool_podl_pse_pw_d_status = 6;
pub const ethtool_podl_pse_pw_d_status_ETHTOOL_PODL_PSE_PW_D_STATUS_ERROR:
    ethtool_podl_pse_pw_d_status = 7;
pub type ethtool_podl_pse_pw_d_status = core::ffi::c_uint;
pub const ethtool_mm_verify_status_ETHTOOL_MM_VERIFY_STATUS_UNKNOWN: ethtool_mm_verify_status = 0;
pub const ethtool_mm_verify_status_ETHTOOL_MM_VERIFY_STATUS_INITIAL: ethtool_mm_verify_status = 1;
pub const ethtool_mm_verify_status_ETHTOOL_MM_VERIFY_STATUS_VERIFYING: ethtool_mm_verify_status = 2;
pub const ethtool_mm_verify_status_ETHTOOL_MM_VERIFY_STATUS_SUCCEEDED: ethtool_mm_verify_status = 3;
pub const ethtool_mm_verify_status_ETHTOOL_MM_VERIFY_STATUS_FAILED: ethtool_mm_verify_status = 4;
pub const ethtool_mm_verify_status_ETHTOOL_MM_VERIFY_STATUS_DISABLED: ethtool_mm_verify_status = 5;
pub type ethtool_mm_verify_status = core::ffi::c_uint;
pub const ethtool_module_fw_flash_status_ETHTOOL_MODULE_FW_FLASH_STATUS_STARTED:
    ethtool_module_fw_flash_status = 1;
pub const ethtool_module_fw_flash_status_ETHTOOL_MODULE_FW_FLASH_STATUS_IN_PROGRESS:
    ethtool_module_fw_flash_status = 2;
pub const ethtool_module_fw_flash_status_ETHTOOL_MODULE_FW_FLASH_STATUS_COMPLETED:
    ethtool_module_fw_flash_status = 3;
pub const ethtool_module_fw_flash_status_ETHTOOL_MODULE_FW_FLASH_STATUS_ERROR:
    ethtool_module_fw_flash_status = 4;
pub type ethtool_module_fw_flash_status = core::ffi::c_uint;
#[repr(C)]
#[derive(Default)]
pub struct ethtool_gstrings {
    pub cmd: __u32,
    pub string_set: __u32,
    pub len: __u32,
    pub data: __IncompleteArrayField<__u8>,
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_sset_info {
    pub cmd: __u32,
    pub reserved: __u32,
    pub sset_mask: __u64,
    pub data: __IncompleteArrayField<__u32>,
}
pub const ethtool_test_flags_ETH_TEST_FL_OFFLINE: ethtool_test_flags = 1;
pub const ethtool_test_flags_ETH_TEST_FL_FAILED: ethtool_test_flags = 2;
pub const ethtool_test_flags_ETH_TEST_FL_EXTERNAL_LB: ethtool_test_flags = 4;
pub const ethtool_test_flags_ETH_TEST_FL_EXTERNAL_LB_DONE: ethtool_test_flags = 8;
pub type ethtool_test_flags = core::ffi::c_uint;
#[repr(C)]
#[derive(Default)]
pub struct ethtool_test {
    pub cmd: __u32,
    pub flags: __u32,
    pub reserved: __u32,
    pub len: __u32,
    pub data: __IncompleteArrayField<__u64>,
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_stats {
    pub cmd: __u32,
    pub n_stats: __u32,
    pub data: __IncompleteArrayField<__u64>,
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_perm_addr {
    pub cmd: __u32,
    pub size: __u32,
    pub data: __IncompleteArrayField<__u8>,
}
pub const ethtool_flags_ETH_FLAG_TXVLAN: ethtool_flags = 128;
pub const ethtool_flags_ETH_FLAG_RXVLAN: ethtool_flags = 256;
pub const ethtool_flags_ETH_FLAG_LRO: ethtool_flags = 32768;
pub const ethtool_flags_ETH_FLAG_NTUPLE: ethtool_flags = 134217728;
pub const ethtool_flags_ETH_FLAG_RXHASH: ethtool_flags = 268435456;
pub type ethtool_flags = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_tcpip4_spec {
    pub ip4src: __be32,
    pub ip4dst: __be32,
    pub psrc: __be16,
    pub pdst: __be16,
    pub tos: __u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_ah_espip4_spec {
    pub ip4src: __be32,
    pub ip4dst: __be32,
    pub spi: __be32,
    pub tos: __u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_usrip4_spec {
    pub ip4src: __be32,
    pub ip4dst: __be32,
    pub l4_4_bytes: __be32,
    pub tos: __u8,
    pub ip_ver: __u8,
    pub proto: __u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_tcpip6_spec {
    pub ip6src: [__be32; 4usize],
    pub ip6dst: [__be32; 4usize],
    pub psrc: __be16,
    pub pdst: __be16,
    pub tclass: __u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_ah_espip6_spec {
    pub ip6src: [__be32; 4usize],
    pub ip6dst: [__be32; 4usize],
    pub spi: __be32,
    pub tclass: __u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_usrip6_spec {
    pub ip6src: [__be32; 4usize],
    pub ip6dst: [__be32; 4usize],
    pub l4_4_bytes: __be32,
    pub tclass: __u8,
    pub l4_proto: __u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_flow_union {
    pub tcp_ip4_spec: ethtool_tcpip4_spec,
    pub udp_ip4_spec: ethtool_tcpip4_spec,
    pub sctp_ip4_spec: ethtool_tcpip4_spec,
    pub ah_ip4_spec: ethtool_ah_espip4_spec,
    pub esp_ip4_spec: ethtool_ah_espip4_spec,
    pub usr_ip4_spec: ethtool_usrip4_spec,
    pub tcp_ip6_spec: ethtool_tcpip6_spec,
    pub udp_ip6_spec: ethtool_tcpip6_spec,
    pub sctp_ip6_spec: ethtool_tcpip6_spec,
    pub ah_ip6_spec: ethtool_ah_espip6_spec,
    pub esp_ip6_spec: ethtool_ah_espip6_spec,
    pub usr_ip6_spec: ethtool_usrip6_spec,
    pub ether_spec: ethhdr,
    pub hdata: [__u8; 52usize],
}
impl Default for ethtool_flow_union {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_flow_ext {
    pub padding: [__u8; 2usize],
    pub h_dest: [core::ffi::c_uchar; 6usize],
    pub vlan_etype: __be16,
    pub vlan_tci: __be16,
    pub data: [__be32; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_rx_flow_spec {
    pub flow_type: __u32,
    pub h_u: ethtool_flow_union,
    pub h_ext: ethtool_flow_ext,
    pub m_u: ethtool_flow_union,
    pub m_ext: ethtool_flow_ext,
    pub ring_cookie: __u64,
    pub location: __u32,
}
impl Default for ethtool_rx_flow_spec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ethtool_rxnfc {
    pub cmd: __u32,
    pub flow_type: __u32,
    pub data: __u64,
    pub fs: ethtool_rx_flow_spec,
    pub __bindgen_anon_1: ethtool_rxnfc__bindgen_ty_1,
    pub rule_locs: __IncompleteArrayField<__u32>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_rxnfc__bindgen_ty_1 {
    pub rule_cnt: __u32,
    pub rss_context: __u32,
}
impl Default for ethtool_rxnfc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_rxnfc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_rxfh_indir {
    pub cmd: __u32,
    pub size: __u32,
    pub ring_index: __IncompleteArrayField<__u32>,
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_rxfh {
    pub cmd: __u32,
    pub rss_context: __u32,
    pub indir_size: __u32,
    pub key_size: __u32,
    pub hfunc: __u8,
    pub input_xfrm: __u8,
    pub rsvd8: [__u8; 2usize],
    pub rsvd32: __u32,
    pub rss_config: __IncompleteArrayField<__u32>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_rx_ntuple_flow_spec {
    pub flow_type: __u32,
    pub h_u: ethtool_rx_ntuple_flow_spec__bindgen_ty_1,
    pub m_u: ethtool_rx_ntuple_flow_spec__bindgen_ty_1,
    pub vlan_tag: __u16,
    pub vlan_tag_mask: __u16,
    pub data: __u64,
    pub data_mask: __u64,
    pub action: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_rx_ntuple_flow_spec__bindgen_ty_1 {
    pub tcp_ip4_spec: ethtool_tcpip4_spec,
    pub udp_ip4_spec: ethtool_tcpip4_spec,
    pub sctp_ip4_spec: ethtool_tcpip4_spec,
    pub ah_ip4_spec: ethtool_ah_espip4_spec,
    pub esp_ip4_spec: ethtool_ah_espip4_spec,
    pub usr_ip4_spec: ethtool_usrip4_spec,
    pub ether_spec: ethhdr,
    pub hdata: [__u8; 72usize],
}
impl Default for ethtool_rx_ntuple_flow_spec__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_rx_ntuple_flow_spec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_rx_ntuple {
    pub cmd: __u32,
    pub fs: ethtool_rx_ntuple_flow_spec,
}
impl Default for ethtool_rx_ntuple {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ethtool_flash_op_type_ETHTOOL_FLASH_ALL_REGIONS: ethtool_flash_op_type = 0;
pub type ethtool_flash_op_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_flash {
    pub cmd: __u32,
    pub region: __u32,
    pub data: [core::ffi::c_char; 128usize],
}
impl Default for ethtool_flash {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_dump {
    pub cmd: __u32,
    pub version: __u32,
    pub flag: __u32,
    pub len: __u32,
    pub data: __IncompleteArrayField<__u8>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_get_features_block {
    pub available: __u32,
    pub requested: __u32,
    pub active: __u32,
    pub never_changed: __u32,
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_gfeatures {
    pub cmd: __u32,
    pub size: __u32,
    pub features: __IncompleteArrayField<ethtool_get_features_block>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_set_features_block {
    pub valid: __u32,
    pub requested: __u32,
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_sfeatures {
    pub cmd: __u32,
    pub size: __u32,
    pub features: __IncompleteArrayField<ethtool_set_features_block>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_ts_info {
    pub cmd: __u32,
    pub so_timestamping: __u32,
    pub phc_index: __s32,
    pub tx_types: __u32,
    pub tx_reserved: [__u32; 3usize],
    pub rx_filters: __u32,
    pub rx_reserved: [__u32; 3usize],
}
pub const ethtool_sfeatures_retval_bits_ETHTOOL_F_UNSUPPORTED__BIT: ethtool_sfeatures_retval_bits =
    0;
pub const ethtool_sfeatures_retval_bits_ETHTOOL_F_WISH__BIT: ethtool_sfeatures_retval_bits = 1;
pub const ethtool_sfeatures_retval_bits_ETHTOOL_F_COMPAT__BIT: ethtool_sfeatures_retval_bits = 2;
pub type ethtool_sfeatures_retval_bits = core::ffi::c_uint;
#[repr(C)]
pub struct ethtool_per_queue_op {
    pub cmd: __u32,
    pub sub_command: __u32,
    pub queue_mask: [__u32; 128usize],
    pub data: __IncompleteArrayField<core::ffi::c_char>,
}
impl Default for ethtool_per_queue_op {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_fecparam {
    pub cmd: __u32,
    pub active_fec: __u32,
    pub fec: __u32,
    pub reserved: __u32,
}
pub const ethtool_fec_config_bits_ETHTOOL_FEC_NONE_BIT: ethtool_fec_config_bits = 0;
pub const ethtool_fec_config_bits_ETHTOOL_FEC_AUTO_BIT: ethtool_fec_config_bits = 1;
pub const ethtool_fec_config_bits_ETHTOOL_FEC_OFF_BIT: ethtool_fec_config_bits = 2;
pub const ethtool_fec_config_bits_ETHTOOL_FEC_RS_BIT: ethtool_fec_config_bits = 3;
pub const ethtool_fec_config_bits_ETHTOOL_FEC_BASER_BIT: ethtool_fec_config_bits = 4;
pub const ethtool_fec_config_bits_ETHTOOL_FEC_LLRS_BIT: ethtool_fec_config_bits = 5;
pub type ethtool_fec_config_bits = core::ffi::c_uint;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10baseT_Half_BIT:
    ethtool_link_mode_bit_indices = 0;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10baseT_Full_BIT:
    ethtool_link_mode_bit_indices = 1;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100baseT_Half_BIT:
    ethtool_link_mode_bit_indices = 2;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100baseT_Full_BIT:
    ethtool_link_mode_bit_indices = 3;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_1000baseT_Half_BIT:
    ethtool_link_mode_bit_indices = 4;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_1000baseT_Full_BIT:
    ethtool_link_mode_bit_indices = 5;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_Autoneg_BIT:
    ethtool_link_mode_bit_indices = 6;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_TP_BIT: ethtool_link_mode_bit_indices = 7;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_AUI_BIT: ethtool_link_mode_bit_indices =
    8;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_MII_BIT: ethtool_link_mode_bit_indices =
    9;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_FIBRE_BIT: ethtool_link_mode_bit_indices =
    10;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_BNC_BIT: ethtool_link_mode_bit_indices =
    11;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10000baseT_Full_BIT:
    ethtool_link_mode_bit_indices = 12;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_Pause_BIT: ethtool_link_mode_bit_indices =
    13;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_Asym_Pause_BIT:
    ethtool_link_mode_bit_indices = 14;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_2500baseX_Full_BIT:
    ethtool_link_mode_bit_indices = 15;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_Backplane_BIT:
    ethtool_link_mode_bit_indices = 16;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_1000baseKX_Full_BIT:
    ethtool_link_mode_bit_indices = 17;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT:
    ethtool_link_mode_bit_indices = 18;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10000baseKR_Full_BIT:
    ethtool_link_mode_bit_indices = 19;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10000baseR_FEC_BIT:
    ethtool_link_mode_bit_indices = 20;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_20000baseMLD2_Full_BIT:
    ethtool_link_mode_bit_indices = 21;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_20000baseKR2_Full_BIT:
    ethtool_link_mode_bit_indices = 22;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT:
    ethtool_link_mode_bit_indices = 23;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT:
    ethtool_link_mode_bit_indices = 24;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT:
    ethtool_link_mode_bit_indices = 25;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT:
    ethtool_link_mode_bit_indices = 26;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_56000baseKR4_Full_BIT:
    ethtool_link_mode_bit_indices = 27;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_56000baseCR4_Full_BIT:
    ethtool_link_mode_bit_indices = 28;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_56000baseSR4_Full_BIT:
    ethtool_link_mode_bit_indices = 29;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_56000baseLR4_Full_BIT:
    ethtool_link_mode_bit_indices = 30;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_25000baseCR_Full_BIT:
    ethtool_link_mode_bit_indices = 31;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_25000baseKR_Full_BIT:
    ethtool_link_mode_bit_indices = 32;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_25000baseSR_Full_BIT:
    ethtool_link_mode_bit_indices = 33;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_50000baseCR2_Full_BIT:
    ethtool_link_mode_bit_indices = 34;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_50000baseKR2_Full_BIT:
    ethtool_link_mode_bit_indices = 35;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseKR4_Full_BIT:
    ethtool_link_mode_bit_indices = 36;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseSR4_Full_BIT:
    ethtool_link_mode_bit_indices = 37;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseCR4_Full_BIT:
    ethtool_link_mode_bit_indices = 38;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseLR4_ER4_Full_BIT:
    ethtool_link_mode_bit_indices = 39;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_50000baseSR2_Full_BIT:
    ethtool_link_mode_bit_indices = 40;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_1000baseX_Full_BIT:
    ethtool_link_mode_bit_indices = 41;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10000baseCR_Full_BIT:
    ethtool_link_mode_bit_indices = 42;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10000baseSR_Full_BIT:
    ethtool_link_mode_bit_indices = 43;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10000baseLR_Full_BIT:
    ethtool_link_mode_bit_indices = 44;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10000baseLRM_Full_BIT:
    ethtool_link_mode_bit_indices = 45;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10000baseER_Full_BIT:
    ethtool_link_mode_bit_indices = 46;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_2500baseT_Full_BIT:
    ethtool_link_mode_bit_indices = 47;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_5000baseT_Full_BIT:
    ethtool_link_mode_bit_indices = 48;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_FEC_NONE_BIT:
    ethtool_link_mode_bit_indices = 49;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_FEC_RS_BIT:
    ethtool_link_mode_bit_indices = 50;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_FEC_BASER_BIT:
    ethtool_link_mode_bit_indices = 51;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_50000baseKR_Full_BIT:
    ethtool_link_mode_bit_indices = 52;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_50000baseSR_Full_BIT:
    ethtool_link_mode_bit_indices = 53;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_50000baseCR_Full_BIT:
    ethtool_link_mode_bit_indices = 54;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_50000baseLR_ER_FR_Full_BIT:
    ethtool_link_mode_bit_indices = 55;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_50000baseDR_Full_BIT:
    ethtool_link_mode_bit_indices = 56;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseKR2_Full_BIT:
    ethtool_link_mode_bit_indices = 57;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseSR2_Full_BIT:
    ethtool_link_mode_bit_indices = 58;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseCR2_Full_BIT:
    ethtool_link_mode_bit_indices = 59;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseLR2_ER2_FR2_Full_BIT:
    ethtool_link_mode_bit_indices = 60;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseDR2_Full_BIT:
    ethtool_link_mode_bit_indices = 61;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseKR4_Full_BIT:
    ethtool_link_mode_bit_indices = 62;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseSR4_Full_BIT:
    ethtool_link_mode_bit_indices = 63;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseLR4_ER4_FR4_Full_BIT:
    ethtool_link_mode_bit_indices = 64;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseDR4_Full_BIT:
    ethtool_link_mode_bit_indices = 65;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseCR4_Full_BIT:
    ethtool_link_mode_bit_indices = 66;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100baseT1_Full_BIT:
    ethtool_link_mode_bit_indices = 67;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_1000baseT1_Full_BIT:
    ethtool_link_mode_bit_indices = 68;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseKR8_Full_BIT:
    ethtool_link_mode_bit_indices = 69;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseSR8_Full_BIT:
    ethtool_link_mode_bit_indices = 70;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseLR8_ER8_FR8_Full_BIT:
    ethtool_link_mode_bit_indices = 71;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseDR8_Full_BIT:
    ethtool_link_mode_bit_indices = 72;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseCR8_Full_BIT:
    ethtool_link_mode_bit_indices = 73;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_FEC_LLRS_BIT:
    ethtool_link_mode_bit_indices = 74;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseKR_Full_BIT:
    ethtool_link_mode_bit_indices = 75;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseSR_Full_BIT:
    ethtool_link_mode_bit_indices = 76;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseLR_ER_FR_Full_BIT:
    ethtool_link_mode_bit_indices = 77;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseCR_Full_BIT:
    ethtool_link_mode_bit_indices = 78;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100000baseDR_Full_BIT:
    ethtool_link_mode_bit_indices = 79;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseKR2_Full_BIT:
    ethtool_link_mode_bit_indices = 80;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseSR2_Full_BIT:
    ethtool_link_mode_bit_indices = 81;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseLR2_ER2_FR2_Full_BIT:
    ethtool_link_mode_bit_indices = 82;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseDR2_Full_BIT:
    ethtool_link_mode_bit_indices = 83;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_200000baseCR2_Full_BIT:
    ethtool_link_mode_bit_indices = 84;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseKR4_Full_BIT:
    ethtool_link_mode_bit_indices = 85;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseSR4_Full_BIT:
    ethtool_link_mode_bit_indices = 86;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseLR4_ER4_FR4_Full_BIT:
    ethtool_link_mode_bit_indices = 87;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseDR4_Full_BIT:
    ethtool_link_mode_bit_indices = 88;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_400000baseCR4_Full_BIT:
    ethtool_link_mode_bit_indices = 89;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100baseFX_Half_BIT:
    ethtool_link_mode_bit_indices = 90;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_100baseFX_Full_BIT:
    ethtool_link_mode_bit_indices = 91;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10baseT1L_Full_BIT:
    ethtool_link_mode_bit_indices = 92;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_800000baseCR8_Full_BIT:
    ethtool_link_mode_bit_indices = 93;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_800000baseKR8_Full_BIT:
    ethtool_link_mode_bit_indices = 94;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_800000baseDR8_Full_BIT:
    ethtool_link_mode_bit_indices = 95;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_800000baseDR8_2_Full_BIT:
    ethtool_link_mode_bit_indices = 96;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_800000baseSR8_Full_BIT:
    ethtool_link_mode_bit_indices = 97;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_800000baseVR8_Full_BIT:
    ethtool_link_mode_bit_indices = 98;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10baseT1S_Full_BIT:
    ethtool_link_mode_bit_indices = 99;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10baseT1S_Half_BIT:
    ethtool_link_mode_bit_indices = 100;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10baseT1S_P2MP_Half_BIT:
    ethtool_link_mode_bit_indices = 101;
pub const ethtool_link_mode_bit_indices_ETHTOOL_LINK_MODE_10baseT1BRR_Full_BIT:
    ethtool_link_mode_bit_indices = 102;
pub const ethtool_link_mode_bit_indices___ETHTOOL_LINK_MODE_MASK_NBITS:
    ethtool_link_mode_bit_indices = 103;
pub type ethtool_link_mode_bit_indices = core::ffi::c_uint;
pub const ethtool_reset_flags_ETH_RESET_MGMT: ethtool_reset_flags = 1;
pub const ethtool_reset_flags_ETH_RESET_IRQ: ethtool_reset_flags = 2;
pub const ethtool_reset_flags_ETH_RESET_DMA: ethtool_reset_flags = 4;
pub const ethtool_reset_flags_ETH_RESET_FILTER: ethtool_reset_flags = 8;
pub const ethtool_reset_flags_ETH_RESET_OFFLOAD: ethtool_reset_flags = 16;
pub const ethtool_reset_flags_ETH_RESET_MAC: ethtool_reset_flags = 32;
pub const ethtool_reset_flags_ETH_RESET_PHY: ethtool_reset_flags = 64;
pub const ethtool_reset_flags_ETH_RESET_RAM: ethtool_reset_flags = 128;
pub const ethtool_reset_flags_ETH_RESET_AP: ethtool_reset_flags = 256;
pub const ethtool_reset_flags_ETH_RESET_DEDICATED: ethtool_reset_flags = 65535;
pub const ethtool_reset_flags_ETH_RESET_ALL: ethtool_reset_flags = 4294967295;
pub type ethtool_reset_flags = core::ffi::c_uint;
#[repr(C)]
#[derive(Default)]
pub struct ethtool_link_settings {
    pub cmd: __u32,
    pub speed: __u32,
    pub duplex: __u8,
    pub port: __u8,
    pub phy_address: __u8,
    pub autoneg: __u8,
    pub mdio_support: __u8,
    pub eth_tp_mdix: __u8,
    pub eth_tp_mdix_ctrl: __u8,
    pub link_mode_masks_nwords: __s8,
    pub transceiver: __u8,
    pub master_slave_cfg: __u8,
    pub master_slave_state: __u8,
    pub rate_matching: __u8,
    pub reserved: [__u32; 7usize],
    pub link_mode_masks: __IncompleteArrayField<__u32>,
}
pub const SOF_TIMESTAMPING_TX_HARDWARE: _bindgen_ty_241 = 1;
pub const SOF_TIMESTAMPING_TX_SOFTWARE: _bindgen_ty_241 = 2;
pub const SOF_TIMESTAMPING_RX_HARDWARE: _bindgen_ty_241 = 4;
pub const SOF_TIMESTAMPING_RX_SOFTWARE: _bindgen_ty_241 = 8;
pub const SOF_TIMESTAMPING_SOFTWARE: _bindgen_ty_241 = 16;
pub const SOF_TIMESTAMPING_SYS_HARDWARE: _bindgen_ty_241 = 32;
pub const SOF_TIMESTAMPING_RAW_HARDWARE: _bindgen_ty_241 = 64;
pub const SOF_TIMESTAMPING_OPT_ID: _bindgen_ty_241 = 128;
pub const SOF_TIMESTAMPING_TX_SCHED: _bindgen_ty_241 = 256;
pub const SOF_TIMESTAMPING_TX_ACK: _bindgen_ty_241 = 512;
pub const SOF_TIMESTAMPING_OPT_CMSG: _bindgen_ty_241 = 1024;
pub const SOF_TIMESTAMPING_OPT_TSONLY: _bindgen_ty_241 = 2048;
pub const SOF_TIMESTAMPING_OPT_STATS: _bindgen_ty_241 = 4096;
pub const SOF_TIMESTAMPING_OPT_PKTINFO: _bindgen_ty_241 = 8192;
pub const SOF_TIMESTAMPING_OPT_TX_SWHW: _bindgen_ty_241 = 16384;
pub const SOF_TIMESTAMPING_BIND_PHC: _bindgen_ty_241 = 32768;
pub const SOF_TIMESTAMPING_OPT_ID_TCP: _bindgen_ty_241 = 65536;
pub const SOF_TIMESTAMPING_LAST: _bindgen_ty_241 = 65536;
pub const SOF_TIMESTAMPING_MASK: _bindgen_ty_241 = 131071;
pub type _bindgen_ty_241 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct so_timestamping {
    pub flags: core::ffi::c_int,
    pub bind_phc: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct hwtstamp_config {
    pub flags: core::ffi::c_int,
    pub tx_type: core::ffi::c_int,
    pub rx_filter: core::ffi::c_int,
}
pub const hwtstamp_flags_HWTSTAMP_FLAG_BONDED_PHC_INDEX: hwtstamp_flags = 1;
pub const hwtstamp_flags_HWTSTAMP_FLAG_LAST: hwtstamp_flags = 1;
pub const hwtstamp_flags_HWTSTAMP_FLAG_MASK: hwtstamp_flags = 1;
pub type hwtstamp_flags = core::ffi::c_uint;
pub const hwtstamp_tx_types_HWTSTAMP_TX_OFF: hwtstamp_tx_types = 0;
pub const hwtstamp_tx_types_HWTSTAMP_TX_ON: hwtstamp_tx_types = 1;
pub const hwtstamp_tx_types_HWTSTAMP_TX_ONESTEP_SYNC: hwtstamp_tx_types = 2;
pub const hwtstamp_tx_types_HWTSTAMP_TX_ONESTEP_P2P: hwtstamp_tx_types = 3;
pub const hwtstamp_tx_types___HWTSTAMP_TX_CNT: hwtstamp_tx_types = 4;
pub type hwtstamp_tx_types = core::ffi::c_uint;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_NONE: hwtstamp_rx_filters = 0;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_ALL: hwtstamp_rx_filters = 1;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_SOME: hwtstamp_rx_filters = 2;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V1_L4_EVENT: hwtstamp_rx_filters = 3;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V1_L4_SYNC: hwtstamp_rx_filters = 4;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ: hwtstamp_rx_filters = 5;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V2_L4_EVENT: hwtstamp_rx_filters = 6;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V2_L4_SYNC: hwtstamp_rx_filters = 7;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ: hwtstamp_rx_filters = 8;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V2_L2_EVENT: hwtstamp_rx_filters = 9;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V2_L2_SYNC: hwtstamp_rx_filters = 10;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ: hwtstamp_rx_filters = 11;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V2_EVENT: hwtstamp_rx_filters = 12;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V2_SYNC: hwtstamp_rx_filters = 13;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_PTP_V2_DELAY_REQ: hwtstamp_rx_filters = 14;
pub const hwtstamp_rx_filters_HWTSTAMP_FILTER_NTP_ALL: hwtstamp_rx_filters = 15;
pub const hwtstamp_rx_filters___HWTSTAMP_FILTER_CNT: hwtstamp_rx_filters = 16;
pub type hwtstamp_rx_filters = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct scm_ts_pktinfo {
    pub if_index: __u32,
    pub pkt_length: __u32,
    pub reserved: [__u32; 2usize],
}
pub const txtime_flags_SOF_TXTIME_DEADLINE_MODE: txtime_flags = 1;
pub const txtime_flags_SOF_TXTIME_REPORT_ERRORS: txtime_flags = 2;
pub const txtime_flags_SOF_TXTIME_FLAGS_LAST: txtime_flags = 2;
pub const txtime_flags_SOF_TXTIME_FLAGS_MASK: txtime_flags = 3;
pub type txtime_flags = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sock_txtime {
    pub clockid: __kernel_clockid_t,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_ethtool_rx_flow_spec {
    pub flow_type: u32_,
    pub h_u: ethtool_flow_union,
    pub h_ext: ethtool_flow_ext,
    pub m_u: ethtool_flow_union,
    pub m_ext: ethtool_flow_ext,
    pub ring_cookie: compat_u64,
    pub location: u32_,
}
impl Default for compat_ethtool_rx_flow_spec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct compat_ethtool_rxnfc {
    pub cmd: u32_,
    pub flow_type: u32_,
    pub data: compat_u64,
    pub fs: compat_ethtool_rx_flow_spec,
    pub rule_cnt: u32_,
    pub rule_locs: __IncompleteArrayField<u32_>,
}
impl Default for compat_ethtool_rxnfc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ethtool_phys_id_state_ETHTOOL_ID_INACTIVE: ethtool_phys_id_state = 0;
pub const ethtool_phys_id_state_ETHTOOL_ID_ACTIVE: ethtool_phys_id_state = 1;
pub const ethtool_phys_id_state_ETHTOOL_ID_ON: ethtool_phys_id_state = 2;
pub const ethtool_phys_id_state_ETHTOOL_ID_OFF: ethtool_phys_id_state = 3;
pub type ethtool_phys_id_state = core::ffi::c_uint;
pub const ETH_RSS_HASH_TOP_BIT: _bindgen_ty_242 = 0;
pub const ETH_RSS_HASH_XOR_BIT: _bindgen_ty_242 = 1;
pub const ETH_RSS_HASH_CRC32_BIT: _bindgen_ty_242 = 2;
pub const ETH_RSS_HASH_FUNCS_COUNT: _bindgen_ty_242 = 3;
pub type _bindgen_ty_242 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_ethtool_ringparam {
    pub rx_buf_len: u32_,
    pub tcp_data_split: u8_,
    pub tx_push: u8_,
    pub rx_push: u8_,
    pub cqe_size: u32_,
    pub tx_push_buf_len: u32_,
    pub tx_push_buf_max_len: u32_,
}
pub const ethtool_supported_ring_param_ETHTOOL_RING_USE_RX_BUF_LEN: ethtool_supported_ring_param =
    1;
pub const ethtool_supported_ring_param_ETHTOOL_RING_USE_CQE_SIZE: ethtool_supported_ring_param = 2;
pub const ethtool_supported_ring_param_ETHTOOL_RING_USE_TX_PUSH: ethtool_supported_ring_param = 4;
pub const ethtool_supported_ring_param_ETHTOOL_RING_USE_RX_PUSH: ethtool_supported_ring_param = 8;
pub const ethtool_supported_ring_param_ETHTOOL_RING_USE_TX_PUSH_BUF_LEN:
    ethtool_supported_ring_param = 16;
pub const ethtool_supported_ring_param_ETHTOOL_RING_USE_TCP_DATA_SPLIT:
    ethtool_supported_ring_param = 32;
pub type ethtool_supported_ring_param = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_link_ext_state_info {
    pub link_ext_state: ethtool_link_ext_state,
    pub __bindgen_anon_1: ethtool_link_ext_state_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_link_ext_state_info__bindgen_ty_1 {
    pub autoneg: ethtool_link_ext_substate_autoneg,
    pub link_training: ethtool_link_ext_substate_link_training,
    pub link_logical_mismatch: ethtool_link_ext_substate_link_logical_mismatch,
    pub bad_signal_integrity: ethtool_link_ext_substate_bad_signal_integrity,
    pub cable_issue: ethtool_link_ext_substate_cable_issue,
    pub module: ethtool_link_ext_substate_module,
    pub __link_ext_substate: u32_,
}
impl Default for ethtool_link_ext_state_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_link_ext_state_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_link_ext_stats {
    pub link_down_events: u64_,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default)]
pub struct ethtool_rxfh_context {
    pub indir_size: u32_,
    pub key_size: u32_,
    pub priv_size: u16_,
    pub hfunc: u8_,
    pub input_xfrm: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub key_off: u32_,
    pub __bindgen_padding_0: [u8; 4usize],
    pub data: __IncompleteArrayField<u8_>,
}
impl ethtool_rxfh_context {
    #[inline]
    pub fn indir_configured(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_indir_configured(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn key_configured(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_key_configured(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        indir_configured: u8_,
        key_configured: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let indir_configured: u8 = unsafe { ::core::mem::transmute(indir_configured) };
            indir_configured as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let key_configured: u8 = unsafe { ::core::mem::transmute(key_configured) };
            key_configured as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ethtool_rxfh_context_lost(dev: *mut net_device, context_id: u32_);
}
#[repr(C)]
#[derive(Default)]
pub struct ethtool_link_ksettings {
    pub base: ethtool_link_settings,
    pub link_modes: ethtool_link_ksettings__bindgen_ty_1,
    pub lanes: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_link_ksettings__bindgen_ty_1 {
    pub supported: [core::ffi::c_ulong; 2usize],
    pub advertising: [core::ffi::c_ulong; 2usize],
    pub lp_advertising: [core::ffi::c_ulong; 2usize],
}
extern "C" {
    pub fn __ethtool_get_link_ksettings(
        dev: *mut net_device,
        link_ksettings: *mut ethtool_link_ksettings,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_keee {
    pub supported: [core::ffi::c_ulong; 2usize],
    pub advertised: [core::ffi::c_ulong; 2usize],
    pub lp_advertised: [core::ffi::c_ulong; 2usize],
    pub tx_lpi_timer: u32_,
    pub tx_lpi_enabled: bool_,
    pub eee_active: bool_,
    pub eee_enabled: bool_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_ethtool_coalesce {
    pub use_cqe_mode_tx: u8_,
    pub use_cqe_mode_rx: u8_,
    pub tx_aggr_max_bytes: u32_,
    pub tx_aggr_max_frames: u32_,
    pub tx_aggr_time_usecs: u32_,
}
extern "C" {
    pub fn ethtool_intersect_link_masks(
        dst: *mut ethtool_link_ksettings,
        src: *mut ethtool_link_ksettings,
    );
}
extern "C" {
    pub fn ethtool_convert_legacy_u32_to_link_mode(dst: *mut core::ffi::c_ulong, legacy_u32: u32_);
}
extern "C" {
    pub fn ethtool_convert_link_mode_to_legacy_u32(
        legacy_u32: *mut u32_,
        src: *const core::ffi::c_ulong,
    ) -> bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_eth_mac_stats {
    pub src: ethtool_mac_stats_src,
    pub __bindgen_anon_1: ethtool_eth_mac_stats__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_eth_mac_stats__bindgen_ty_1 {
    pub __bindgen_anon_1: ethtool_eth_mac_stats__bindgen_ty_1__bindgen_ty_1,
    pub stats: ethtool_eth_mac_stats__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_eth_mac_stats__bindgen_ty_1__bindgen_ty_1 {
    pub FramesTransmittedOK: u64_,
    pub SingleCollisionFrames: u64_,
    pub MultipleCollisionFrames: u64_,
    pub FramesReceivedOK: u64_,
    pub FrameCheckSequenceErrors: u64_,
    pub AlignmentErrors: u64_,
    pub OctetsTransmittedOK: u64_,
    pub FramesWithDeferredXmissions: u64_,
    pub LateCollisions: u64_,
    pub FramesAbortedDueToXSColls: u64_,
    pub FramesLostDueToIntMACXmitError: u64_,
    pub CarrierSenseErrors: u64_,
    pub OctetsReceivedOK: u64_,
    pub FramesLostDueToIntMACRcvError: u64_,
    pub MulticastFramesXmittedOK: u64_,
    pub BroadcastFramesXmittedOK: u64_,
    pub FramesWithExcessiveDeferral: u64_,
    pub MulticastFramesReceivedOK: u64_,
    pub BroadcastFramesReceivedOK: u64_,
    pub InRangeLengthErrors: u64_,
    pub OutOfRangeLengthField: u64_,
    pub FrameTooLongErrors: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_eth_mac_stats__bindgen_ty_1__bindgen_ty_2 {
    pub FramesTransmittedOK: u64_,
    pub SingleCollisionFrames: u64_,
    pub MultipleCollisionFrames: u64_,
    pub FramesReceivedOK: u64_,
    pub FrameCheckSequenceErrors: u64_,
    pub AlignmentErrors: u64_,
    pub OctetsTransmittedOK: u64_,
    pub FramesWithDeferredXmissions: u64_,
    pub LateCollisions: u64_,
    pub FramesAbortedDueToXSColls: u64_,
    pub FramesLostDueToIntMACXmitError: u64_,
    pub CarrierSenseErrors: u64_,
    pub OctetsReceivedOK: u64_,
    pub FramesLostDueToIntMACRcvError: u64_,
    pub MulticastFramesXmittedOK: u64_,
    pub BroadcastFramesXmittedOK: u64_,
    pub FramesWithExcessiveDeferral: u64_,
    pub MulticastFramesReceivedOK: u64_,
    pub BroadcastFramesReceivedOK: u64_,
    pub InRangeLengthErrors: u64_,
    pub OutOfRangeLengthField: u64_,
    pub FrameTooLongErrors: u64_,
}
impl Default for ethtool_eth_mac_stats__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_eth_mac_stats {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_eth_phy_stats {
    pub src: ethtool_mac_stats_src,
    pub __bindgen_anon_1: ethtool_eth_phy_stats__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_eth_phy_stats__bindgen_ty_1 {
    pub __bindgen_anon_1: ethtool_eth_phy_stats__bindgen_ty_1__bindgen_ty_1,
    pub stats: ethtool_eth_phy_stats__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_eth_phy_stats__bindgen_ty_1__bindgen_ty_1 {
    pub SymbolErrorDuringCarrier: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_eth_phy_stats__bindgen_ty_1__bindgen_ty_2 {
    pub SymbolErrorDuringCarrier: u64_,
}
impl Default for ethtool_eth_phy_stats__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_eth_phy_stats {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_eth_ctrl_stats {
    pub src: ethtool_mac_stats_src,
    pub __bindgen_anon_1: ethtool_eth_ctrl_stats__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_eth_ctrl_stats__bindgen_ty_1 {
    pub __bindgen_anon_1: ethtool_eth_ctrl_stats__bindgen_ty_1__bindgen_ty_1,
    pub stats: ethtool_eth_ctrl_stats__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_eth_ctrl_stats__bindgen_ty_1__bindgen_ty_1 {
    pub MACControlFramesTransmitted: u64_,
    pub MACControlFramesReceived: u64_,
    pub UnsupportedOpcodesReceived: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_eth_ctrl_stats__bindgen_ty_1__bindgen_ty_2 {
    pub MACControlFramesTransmitted: u64_,
    pub MACControlFramesReceived: u64_,
    pub UnsupportedOpcodesReceived: u64_,
}
impl Default for ethtool_eth_ctrl_stats__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_eth_ctrl_stats {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_pause_stats {
    pub src: ethtool_mac_stats_src,
    pub __bindgen_anon_1: ethtool_pause_stats__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_pause_stats__bindgen_ty_1 {
    pub __bindgen_anon_1: ethtool_pause_stats__bindgen_ty_1__bindgen_ty_1,
    pub stats: ethtool_pause_stats__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_pause_stats__bindgen_ty_1__bindgen_ty_1 {
    pub tx_pause_frames: u64_,
    pub rx_pause_frames: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_pause_stats__bindgen_ty_1__bindgen_ty_2 {
    pub tx_pause_frames: u64_,
    pub rx_pause_frames: u64_,
}
impl Default for ethtool_pause_stats__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_pause_stats {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_fec_stats {
    pub corrected_blocks: ethtool_fec_stats_ethtool_fec_stat,
    pub uncorrectable_blocks: ethtool_fec_stats_ethtool_fec_stat,
    pub corrected_bits: ethtool_fec_stats_ethtool_fec_stat,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_fec_stats_ethtool_fec_stat {
    pub total: u64_,
    pub lanes: [u64_; 8usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_rmon_hist_range {
    pub low: u16_,
    pub high: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_rmon_stats {
    pub src: ethtool_mac_stats_src,
    pub __bindgen_anon_1: ethtool_rmon_stats__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_rmon_stats__bindgen_ty_1 {
    pub __bindgen_anon_1: ethtool_rmon_stats__bindgen_ty_1__bindgen_ty_1,
    pub stats: ethtool_rmon_stats__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_rmon_stats__bindgen_ty_1__bindgen_ty_1 {
    pub undersize_pkts: u64_,
    pub oversize_pkts: u64_,
    pub fragments: u64_,
    pub jabbers: u64_,
    pub hist: [u64_; 10usize],
    pub hist_tx: [u64_; 10usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_rmon_stats__bindgen_ty_1__bindgen_ty_2 {
    pub undersize_pkts: u64_,
    pub oversize_pkts: u64_,
    pub fragments: u64_,
    pub jabbers: u64_,
    pub hist: [u64_; 10usize],
    pub hist_tx: [u64_; 10usize],
}
impl Default for ethtool_rmon_stats__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_rmon_stats {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_ts_stats {
    pub __bindgen_anon_1: ethtool_ts_stats__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_ts_stats__bindgen_ty_1 {
    pub __bindgen_anon_1: ethtool_ts_stats__bindgen_ty_1__bindgen_ty_1,
    pub tx_stats: ethtool_ts_stats__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_ts_stats__bindgen_ty_1__bindgen_ty_1 {
    pub pkts: u64_,
    pub lost: u64_,
    pub err: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_ts_stats__bindgen_ty_1__bindgen_ty_2 {
    pub pkts: u64_,
    pub lost: u64_,
    pub err: u64_,
}
impl Default for ethtool_ts_stats__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_ts_stats {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_module_eeprom {
    pub offset: u32_,
    pub length: u32_,
    pub page: u8_,
    pub bank: u8_,
    pub i2c_address: u8_,
    pub data: *mut u8_,
}
impl Default for ethtool_module_eeprom {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_module_power_mode_params {
    pub policy: ethtool_module_power_mode_policy,
    pub mode: ethtool_module_power_mode,
}
impl Default for ethtool_module_power_mode_params {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_mm_state {
    pub verify_time: u32_,
    pub max_verify_time: u32_,
    pub verify_status: ethtool_mm_verify_status,
    pub tx_enabled: bool_,
    pub tx_active: bool_,
    pub pmac_enabled: bool_,
    pub verify_enabled: bool_,
    pub tx_min_frag_size: u32_,
    pub rx_min_frag_size: u32_,
}
impl Default for ethtool_mm_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_mm_cfg {
    pub verify_time: u32_,
    pub verify_enabled: bool_,
    pub tx_enabled: bool_,
    pub pmac_enabled: bool_,
    pub tx_min_frag_size: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_mm_stats {
    pub MACMergeFrameAssErrorCount: u64_,
    pub MACMergeFrameSmdErrorCount: u64_,
    pub MACMergeFrameAssOkCount: u64_,
    pub MACMergeFragCountRx: u64_,
    pub MACMergeFragCountTx: u64_,
    pub MACMergeHoldCount: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_rxfh_param {
    pub hfunc: u8_,
    pub indir_size: u32_,
    pub indir: *mut u32_,
    pub key_size: u32_,
    pub key: *mut u8_,
    pub rss_context: u32_,
    pub rss_delete: u8_,
    pub input_xfrm: u8_,
}
impl Default for ethtool_rxfh_param {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_ethtool_ts_info {
    pub cmd: u32_,
    pub so_timestamping: u32_,
    pub phc_index: core::ffi::c_int,
    pub tx_types: hwtstamp_tx_types,
    pub rx_filters: hwtstamp_rx_filters,
}
impl Default for kernel_ethtool_ts_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_ops {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub rxfh_indir_space: u32_,
    pub rxfh_key_space: u16_,
    pub rxfh_priv_size: u16_,
    pub rxfh_max_context_id: u32_,
    pub supported_coalesce_params: u32_,
    pub supported_ring_params: u32_,
    pub get_drvinfo: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_drvinfo),
    >,
    pub get_regs_len:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device) -> core::ffi::c_int>,
    pub get_regs: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_regs,
            arg3: *mut core::ffi::c_void,
        ),
    >,
    pub get_wol: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_wolinfo),
    >,
    pub set_wol: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_wolinfo) -> core::ffi::c_int,
    >,
    pub get_msglevel: ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device) -> u32_>,
    pub set_msglevel:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device, arg2: u32_)>,
    pub nway_reset:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device) -> core::ffi::c_int>,
    pub get_link: ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device) -> u32_>,
    pub get_link_ext_state: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_link_ext_state_info,
        ) -> core::ffi::c_int,
    >,
    pub get_link_ext_stats: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, stats: *mut ethtool_link_ext_stats),
    >,
    pub get_eeprom_len:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device) -> core::ffi::c_int>,
    pub get_eeprom: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_eeprom,
            arg3: *mut u8_,
        ) -> core::ffi::c_int,
    >,
    pub set_eeprom: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_eeprom,
            arg3: *mut u8_,
        ) -> core::ffi::c_int,
    >,
    pub get_coalesce: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_coalesce,
            arg3: *mut kernel_ethtool_coalesce,
            arg4: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub set_coalesce: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_coalesce,
            arg3: *mut kernel_ethtool_coalesce,
            arg4: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub get_ringparam: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_ringparam,
            arg3: *mut kernel_ethtool_ringparam,
            arg4: *mut netlink_ext_ack,
        ),
    >,
    pub set_ringparam: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_ringparam,
            arg3: *mut kernel_ethtool_ringparam,
            arg4: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub get_pause_stats: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, pause_stats: *mut ethtool_pause_stats),
    >,
    pub get_pauseparam: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_pauseparam),
    >,
    pub set_pauseparam: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_pauseparam,
        ) -> core::ffi::c_int,
    >,
    pub self_test: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_test, arg3: *mut u64_),
    >,
    pub get_strings: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, stringset: u32_, arg2: *mut u8_),
    >,
    pub set_phys_id: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: ethtool_phys_id_state,
        ) -> core::ffi::c_int,
    >,
    pub get_ethtool_stats: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_stats, arg3: *mut u64_),
    >,
    pub begin:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device) -> core::ffi::c_int>,
    pub complete: ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device)>,
    pub get_priv_flags: ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device) -> u32_>,
    pub set_priv_flags: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: u32_) -> core::ffi::c_int,
    >,
    pub get_sset_count: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub get_rxnfc: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_rxnfc,
            rule_locs: *mut u32_,
        ) -> core::ffi::c_int,
    >,
    pub set_rxnfc: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_rxnfc) -> core::ffi::c_int,
    >,
    pub flash_device: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_flash) -> core::ffi::c_int,
    >,
    pub reset: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut u32_) -> core::ffi::c_int,
    >,
    pub get_rxfh_key_size:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device) -> u32_>,
    pub get_rxfh_indir_size:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut net_device) -> u32_>,
    pub get_rxfh: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_rxfh_param,
        ) -> core::ffi::c_int,
    >,
    pub set_rxfh: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_rxfh_param,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub create_rxfh_context: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            ctx: *mut ethtool_rxfh_context,
            rxfh: *const ethtool_rxfh_param,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub modify_rxfh_context: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            ctx: *mut ethtool_rxfh_context,
            rxfh: *const ethtool_rxfh_param,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub remove_rxfh_context: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            ctx: *mut ethtool_rxfh_context,
            rss_context: u32_,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub get_channels: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_channels),
    >,
    pub set_channels: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_channels,
        ) -> core::ffi::c_int,
    >,
    pub get_dump_flag: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_dump) -> core::ffi::c_int,
    >,
    pub get_dump_data: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_dump,
            arg3: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub set_dump: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_dump) -> core::ffi::c_int,
    >,
    pub get_ts_info: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut kernel_ethtool_ts_info,
        ) -> core::ffi::c_int,
    >,
    pub get_ts_stats: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, ts_stats: *mut ethtool_ts_stats),
    >,
    pub get_module_info: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_modinfo) -> core::ffi::c_int,
    >,
    pub get_module_eeprom: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_eeprom,
            arg3: *mut u8_,
        ) -> core::ffi::c_int,
    >,
    pub get_eee: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, eee: *mut ethtool_keee) -> core::ffi::c_int,
    >,
    pub set_eee: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, eee: *mut ethtool_keee) -> core::ffi::c_int,
    >,
    pub get_tunable: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *const ethtool_tunable,
            arg3: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub set_tunable: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *const ethtool_tunable,
            arg3: *const core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub get_per_queue_coalesce: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: u32_,
            arg3: *mut ethtool_coalesce,
        ) -> core::ffi::c_int,
    >,
    pub set_per_queue_coalesce: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: u32_,
            arg3: *mut ethtool_coalesce,
        ) -> core::ffi::c_int,
    >,
    pub get_link_ksettings: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_link_ksettings,
        ) -> core::ffi::c_int,
    >,
    pub set_link_ksettings: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *const ethtool_link_ksettings,
        ) -> core::ffi::c_int,
    >,
    pub get_fec_stats: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, fec_stats: *mut ethtool_fec_stats),
    >,
    pub get_fecparam: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_fecparam,
        ) -> core::ffi::c_int,
    >,
    pub set_fecparam: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *mut ethtool_fecparam,
        ) -> core::ffi::c_int,
    >,
    pub get_ethtool_phy_stats: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut net_device, arg2: *mut ethtool_stats, arg3: *mut u64_),
    >,
    pub get_phy_tunable: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *const ethtool_tunable,
            arg3: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub set_phy_tunable: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut net_device,
            arg2: *const ethtool_tunable,
            arg3: *const core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub get_module_eeprom_by_page: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut net_device,
            page: *const ethtool_module_eeprom,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub set_module_eeprom_by_page: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut net_device,
            page: *const ethtool_module_eeprom,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub get_eth_phy_stats: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, phy_stats: *mut ethtool_eth_phy_stats),
    >,
    pub get_eth_mac_stats: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, mac_stats: *mut ethtool_eth_mac_stats),
    >,
    pub get_eth_ctrl_stats: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, ctrl_stats: *mut ethtool_eth_ctrl_stats),
    >,
    pub get_rmon_stats: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut net_device,
            rmon_stats: *mut ethtool_rmon_stats,
            ranges: *mut *const ethtool_rmon_hist_range,
        ),
    >,
    pub get_module_power_mode: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut net_device,
            params: *mut ethtool_module_power_mode_params,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub set_module_power_mode: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut net_device,
            params: *const ethtool_module_power_mode_params,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub get_mm: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut net_device,
            state: *mut ethtool_mm_state,
        ) -> core::ffi::c_int,
    >,
    pub set_mm: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut net_device,
            cfg: *mut ethtool_mm_cfg,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub get_mm_stats: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut net_device, stats: *mut ethtool_mm_stats),
    >,
}
impl ethtool_ops {
    #[inline]
    pub fn cap_link_lanes_supported(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cap_link_lanes_supported(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cap_rss_ctx_supported(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cap_rss_ctx_supported(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cap_rss_sym_xor_supported(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cap_rss_sym_xor_supported(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cap_link_lanes_supported: u32_,
        cap_rss_ctx_supported: u32_,
        cap_rss_sym_xor_supported: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cap_link_lanes_supported: u32 =
                unsafe { ::core::mem::transmute(cap_link_lanes_supported) };
            cap_link_lanes_supported as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cap_rss_ctx_supported: u32 =
                unsafe { ::core::mem::transmute(cap_rss_ctx_supported) };
            cap_rss_ctx_supported as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let cap_rss_sym_xor_supported: u32 =
                unsafe { ::core::mem::transmute(cap_rss_sym_xor_supported) };
            cap_rss_sym_xor_supported as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ethtool_check_ops(ops: *const ethtool_ops) -> core::ffi::c_int;
}
#[repr(C)]
pub struct ethtool_rx_flow_rule {
    pub rule: *mut flow_rule,
    pub priv_: __IncompleteArrayField<core::ffi::c_ulong>,
}
impl Default for ethtool_rx_flow_rule {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_rx_flow_spec_input {
    pub fs: *const ethtool_rx_flow_spec,
    pub rss_ctx: u32_,
}
impl Default for ethtool_rx_flow_spec_input {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ethtool_rx_flow_rule_create(
        input: *const ethtool_rx_flow_spec_input,
    ) -> *mut ethtool_rx_flow_rule;
}
extern "C" {
    pub fn ethtool_rx_flow_rule_destroy(rule: *mut ethtool_rx_flow_rule);
}
extern "C" {
    pub fn ethtool_virtdev_validate_cmd(cmd: *const ethtool_link_ksettings) -> bool_;
}
extern "C" {
    pub fn ethtool_virtdev_set_link_ksettings(
        dev: *mut net_device,
        cmd: *const ethtool_link_ksettings,
        dev_speed: *mut u32_,
        dev_duplex: *mut u8_,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_netdev_state {
    pub rss_ctx: xarray,
    pub rss_lock: mutex,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl Default for ethtool_netdev_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ethtool_netdev_state {
    #[inline]
    pub fn wol_enabled(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wol_enabled(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn module_fw_flash_in_progress(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_module_fw_flash_in_progress(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wol_enabled: core::ffi::c_uint,
        module_fw_flash_in_progress: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wol_enabled: u32 = unsafe { ::core::mem::transmute(wol_enabled) };
            wol_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let module_fw_flash_in_progress: u32 =
                unsafe { ::core::mem::transmute(module_fw_flash_in_progress) };
            module_fw_flash_in_progress as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct phy_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct phy_tdr_config {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct phy_plca_cfg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct phy_plca_status {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_phy_ops {
    pub get_sset_count:
        ::core::option::Option<unsafe extern "C" fn(dev: *mut phy_device) -> core::ffi::c_int>,
    pub get_strings: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut phy_device, data: *mut u8_) -> core::ffi::c_int,
    >,
    pub get_stats: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut phy_device,
            stats: *mut ethtool_stats,
            data: *mut u64_,
        ) -> core::ffi::c_int,
    >,
    pub get_plca_cfg: ::core::option::Option<
        unsafe extern "C" fn(dev: *mut phy_device, plca_cfg: *mut phy_plca_cfg) -> core::ffi::c_int,
    >,
    pub set_plca_cfg: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut phy_device,
            plca_cfg: *const phy_plca_cfg,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub get_plca_status: ::core::option::Option<
        unsafe extern "C" fn(
            dev: *mut phy_device,
            plca_st: *mut phy_plca_status,
        ) -> core::ffi::c_int,
    >,
    pub start_cable_test: ::core::option::Option<
        unsafe extern "C" fn(
            phydev: *mut phy_device,
            extack: *mut netlink_ext_ack,
        ) -> core::ffi::c_int,
    >,
    pub start_cable_test_tdr: ::core::option::Option<
        unsafe extern "C" fn(
            phydev: *mut phy_device,
            extack: *mut netlink_ext_ack,
            config: *const phy_tdr_config,
        ) -> core::ffi::c_int,
    >,
}
extern "C" {
    pub fn ethtool_set_ethtool_phy_ops(ops: *const ethtool_phy_ops);
}
extern "C" {
    pub fn ethtool_params_from_link_mode(
        link_ksettings: *mut ethtool_link_ksettings,
        link_mode: ethtool_link_mode_bit_indices,
    );
}
extern "C" {
    pub fn ethtool_get_phc_vclocks(
        dev: *mut net_device,
        vclock_index: *mut *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ethtool_op_get_link(dev: *mut net_device) -> u32_;
}
extern "C" {
    pub fn ethtool_op_get_ts_info(
        dev: *mut net_device,
        eti: *mut kernel_ethtool_ts_info,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ethtool_get_ts_info_by_layer(
        dev: *mut net_device,
        info: *mut kernel_ethtool_ts_info,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ethtool_sprintf(data: *mut *mut u8_, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn ethtool_puts(data: *mut *mut u8_, str_: *const core::ffi::c_char);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_forced_speed_map {
    pub speed: u32_,
    pub caps: [core::ffi::c_ulong; 2usize],
    pub cap_arr: *const u32_,
    pub arr_size: u32_,
}
impl Default for ethtool_forced_speed_map {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ethtool_forced_speed_maps_init(maps: *mut ethtool_forced_speed_map, size: u32_);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ethtool_c33_pse_ext_state_info {
    pub c33_pse_ext_state: ethtool_c33_pse_ext_state,
    pub __bindgen_anon_1: ethtool_c33_pse_ext_state_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ethtool_c33_pse_ext_state_info__bindgen_ty_1 {
    pub error_condition: ethtool_c33_pse_ext_substate_error_condition,
    pub mr_pse_enable: ethtool_c33_pse_ext_substate_mr_pse_enable,
    pub option_detect_ted: ethtool_c33_pse_ext_substate_option_detect_ted,
    pub option_vport_lim: ethtool_c33_pse_ext_substate_option_vport_lim,
    pub ovld_detected: ethtool_c33_pse_ext_substate_ovld_detected,
    pub power_not_available: ethtool_c33_pse_ext_substate_power_not_available,
    pub short_detected: ethtool_c33_pse_ext_substate_short_detected,
    pub __c33_pse_ext_substate: u32_,
}
impl Default for ethtool_c33_pse_ext_state_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ethtool_c33_pse_ext_state_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ethtool_c33_pse_pw_limit_range {
    pub min: u32_,
    pub max: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mii_ioctl_data {
    pub phy_id: __u16,
    pub reg_num: __u16,
    pub val_in: __u16,
    pub val_out: __u16,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: core::ffi::c_uint,
    pub fp_offset: core::ffi::c_uint,
    pub overflow_arg_area: *mut core::ffi::c_void,
    pub reg_save_area: *mut core::ffi::c_void,
}
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct static_key_mod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_symbol {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct module_sect_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct module_notes_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct trace_event_call {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct trace_eval_map {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sched_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct files_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rt_mutex_waiter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct gendisk {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct msgbuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sem {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sem_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sem_undo {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct maple_pnode {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct maple_enode {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct uprobe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ldt_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct page_pool {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct linux_binfmt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct memory_tier {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct assoc_array_ptr {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct key_user {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct k_clock {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tty_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tty_audit_buf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct request_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct wait_page_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct file_lock_context {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cdev {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct xattr_handler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mtd_info {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernfs_root {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sched_group_capacity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dev_pm_qos {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct module_param_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct of_device_id {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct acpi_device_id {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dma_map_ops {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bus_dma_region {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_tlb_mem {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct time_namespace {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct proc_dir_entry {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct disk_stats {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct blk_holder_ops {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct partition_meta_info {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct blkcg_gq {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct swap_iocb {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_kfunc_btf_tab {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_prog_stats {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sock_fprog_kern {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bpf_cgroup_storage {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nla_policy {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flow_rule {
    pub _address: u8,
}
